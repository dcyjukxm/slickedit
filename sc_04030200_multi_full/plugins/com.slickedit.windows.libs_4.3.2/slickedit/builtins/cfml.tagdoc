/*
 * The CFML tags and documentation herein are taken from the
 * Allaire Cold Fusion 4.5 CFML Language Reference
 *
 */

// groups of common attributes
private tag MIME_TYPE {
   attr type {
      "application"
      "audio"
      "message"
      "model"
      "multipart"
      "text"
      "video"
      "text/plain"
      "text/richtext"
      "text/html"
      "text/sgml"
      "text/css"
      "text/xml"
      "text/rtf"
      "text/directory"
      "text/calendar"
      "multipart/mixed"
      "multipart/alternative"
      "multipart/digest"
      "multipart/parallel"
      "multipart/related"
      "multipart/report"
      "multipart/voice-message"
      "multipart/signed"
      "multipart/encrypted"
      "multipart/byteranges"
      "message/rfc822"
      "message/partial"
      "message/news"
      "message/http"
      "applicatation/octet-stream"
      "application/postscript"
      "application/oda"
      "application/atomicmail"
      "application/rtf"
      "application/pdf"
      "application/zip"
      "application/msword"
      "application/mathematica"
      "application/sgml"
      "application/cals-1840"
      "image/jpeg"
      "image/gif"
      "image/g3fax"
      "image/tiff"
      "image/cgm"
      "image/png"
      "audio/basic"
      "video/mpeg"
      "video/quicktime"
      "model/iges"
      "model/vrml"
      "model/mesh"
   }
}

private enum HTML_COLORS {
   /**
    * <font color=antiquewhite>Sample: antiquewhite</font>
    */
   antiquewhite
   /**
    * <font color=aqua>Sample: aqua</font>
    */
   aqua
   /**
    * <font color=aquamarine>Sample: aquamarine</font>
    */
   aquamarine
   /**
    * <font color=azure>Sample: azure</font>
    */
   azure
   /**
    * <font color=beige>Sample: beige</font>
    */
   beige
   /**
    * <font color=bisque>Sample: bisque</font>
    */
   bisque
   /**
    * <font color=black>Sample: black</font>
    */
   black
   /**
    * <font color=blanchedalmond>Sample: blanchedalmond</font>
    */
   blanchedalmond
   /**
    * <font color=blue>Sample: blue</font>
    */
   blue
   /**
    * <font color=blueviolet>Sample: blueviolet</font>
    */
   blueviolet
   /**
    * <font color=brown>Sample: brown</font>
    */
   brown
   /**
    * <font color=burlywood>Sample: burlywood</font>
    */
   burlywood
   /**
    * <font color=cadetblue>Sample: cadetblue</font>
    */
   cadetblue
   /**
    * <font color=chartreuse>Sample: chartreuse</font>
    */
   chartreuse
   /**
    * <font color=chocolate>Sample: chocolate</font>
    */
   chocolate
   /**
    * <font color=coral>Sample: coral</font>
    */
   coral
   /**
    * <font color=cornflowerblue>Sample: cornflowerblue</font>
    */
   cornflowerblue
   /**
    * <font color=cornsilk>Sample: cornsilk</font>
    */
   cornsilk
   /**
    * <font color=crimson>Sample: crimson</font>
    */
   crimson
   /**
    * <font color=cyan>Sample: cyan</font>
    */
   cyan
   /**
    * <font color=darkblue>Sample: darkblue</font>
    */
   darkblue
   /**
    * <font color=darkcyan>Sample: darkcyan</font>
    */
   darkcyan
   /**
    * <font color=darkgoldenrod>Sample: darkgoldenrod</font>
    */
   darkgoldenrod
   /**
    * <font color=darkgray>Sample: darkgray</font>
    */
   darkgray
   /**
    * <font color=darkgreen>Sample: darkgreen</font>
    */
   darkgreen
   /**
    * <font color=darkkhaki>Sample: darkkhaki</font>
    */
   darkkhaki
   /**
    * <font color=darkmagenta>Sample: darkmagenta</font>
    */
   darkmagenta
   /**
    * <font color=darkolivegreen>Sample: darkolivegreen</font>
    */
   darkolivegreen
   /**
    * <font color=darkorange>Sample: darkorange</font>
    */
   darkorange
   /**
    * <font color=darkorchid>Sample: darkorchid</font>
    */
   darkorchid
   /**
    * <font color=darkred>Sample: darkred</font>
    */
   darkred
   /**
    * <font color=darksalmon>Sample: darksalmon</font>
    */
   darksalmon
   /**
    * <font color=darkseagreen>Sample: darkseagreen</font>
    */
   darkseagreen
   /**
    * <font color=darkslateblue>Sample: darkslateblue</font>
    */
   darkslateblue
   /**
    * <font color=darkslategray>Sample: darkslategray</font>
    */
   darkslategray
   /**
    * <font color=darkturquoise>Sample: darkturquoise</font>
    */
   darkturquoise
   /**
    * <font color=darkviolet>Sample: darkviolet</font>
    */
   darkviolet
   /**
    * <font color=deeppink>Sample: deeppink</font>
    */
   deeppink
   /**
    * <font color=deepskyblue>Sample: deepskyblue</font>
    */
   deepskyblue
   /**
    * <font color=dimgray>Sample: dimgray</font>
    */
   dimgray
   /**
    * <font color=dodgerblue>Sample: dodgerblue</font>
    */
   dodgerblue
   /**
    * <font color=firebrick>Sample: firebrick</font>
    */
   firebrick
   /**
    * <font color=floralwhite>Sample: floralwhite</font>
    */
   floralwhite
   /**
    * <font color=forestgreen>Sample: forestgreen</font>
    */
   forestgreen
   /**
    * <font color=fuchsia>Sample: fuchsia</font>
    */
   fuchsia
   /**
    * <font color=gainsboro>Sample: gainsboro</font>
    */
   gainsboro
   /**
    * <font color=ghostwhite>Sample: ghostwhite</font>
    */
   ghostwhite
   /**
    * <font color=gold>Sample: gold</font>
    */
   gold
   /**
    * <font color=goldenrod>Sample: goldenrod</font>
    */
   goldenrod
   /**
    * <font color=gray>Sample: gray</font>
    */
   gray
   /**
    * <font color=green>Sample: green</font>
    */
   green
   /**
    * <font color=greenyellow>Sample: greenyellow</font>
    */
   greenyellow
   /**
    * <font color=honeydew>Sample: honeydew</font>
    */
   honeydew
   /**
    * <font color=hotpink>Sample: hotpink</font>
    */
   hotpink
   /**
    * <font color=indianred>Sample: indianred</font>
    */
   indianred
   /**
    * <font color=indigo>Sample: indigo</font>
    */
   indigo
   /**
    * <font color=ivory>Sample: ivory</font>
    */
   ivory
   /**
    * <font color=khaki>Sample: khaki</font>
    */
   khaki
   /**
    * <font color=lavender>Sample: lavender</font>
    */
   lavender
   /**
    * <font color=lavenderblush>Sample: lavenderblush</font>
    */
   lavenderblush
   /**
    * <font color=lawngreen>Sample: lawngreen</font>
    */
   lawngreen
   /**
    * <font color=lemonchiffon>Sample: lemonchiffon</font>
    */
   lemonchiffon
   /**
    * <font color=lightblue>Sample: lightblue</font>
    */
   lightblue
   /**
    * <font color=lightcoral>Sample: lightcoral</font>
    */
   lightcoral
   /**
    * <font color=lightcyan>Sample: lightcyan</font>
    */
   lightcyan
   /**
    * <font color=lightgoldenrodyellow>Sample: lightgoldenrodyellow</font>
    */
   lightgoldenrodyellow
   /**
    * <font color=lightgreen>Sample: lightgreen</font>
    */
   lightgreen
   /**
    * <font color=lightgrey>Sample: lightgrey</font>
    */
   lightgrey
   /**
    * <font color=lightpink>Sample: lightpink</font>
    */
   lightpink
   /**
    * <font color=lightsalmon>Sample: lightsalmon</font>
    */
   lightsalmon
   /**
    * <font color=lightseagreen>Sample: lightseagreen</font>
    */
   lightseagreen
   /**
    * <font color=lightskyblue>Sample: lightskyblue</font>
    */
   lightskyblue
   /**
    * <font color=lightslategray>Sample: lightslategray</font>
    */
   lightslategray
   /**
    * <font color=lightsteelblue>Sample: lightsteelblue</font>
    */
   lightsteelblue
   /**
    * <font color=lightyellow>Sample: lightyellow</font>
    */
   lightyellow
   /**
    * <font color=lime>Sample: lime</font>
    */
   lime
   /**
    * <font color=limegreen>Sample: limegreen</font>
    */
   limegreen
   /**
    * <font color=linen>Sample: linen</font>
    */
   linen
   /**
    * <font color=magenta>Sample: magenta</font>
    */
   magenta
   /**
    * <font color=maroon>Sample: maroon</font>
    */
   maroon
   /**
    * <font color=mediumaquamarine>Sample: mediumaquamarine</font>
    */
   mediumaquamarine
   /**
    * <font color=mediumblue>Sample: mediumblue</font>
    */
   mediumblue
   /**
    * <font color=mediumorchid>Sample: mediumorchid</font>
    */
   mediumorchid
   /**
    * <font color=mediumpurple>Sample: mediumpurple</font>
    */
   mediumpurple
   /**
    * <font color=mediumseagreen>Sample: mediumseagreen</font>
    */
   mediumseagreen
   /**
    * <font color=mediumslateblue>Sample: mediumslateblue</font>
    */
   mediumslateblue
   /**
    * <font color=mediumspringgreen>Sample: mediumspringgreen</font>
    */
   mediumspringgreen
   /**
    * <font color=mediumturquoise>Sample: mediumturquoise</font>
    */
   mediumturquoise
   /**
    * <font color=mediumvioletred>Sample: mediumvioletred</font>
    */
   mediumvioletred
   /**
    * <font color=midnightblue>Sample: midnightblue</font>
    */
   midnightblue
   /**
    * <font color=mintcream>Sample: mintcream</font>
    */
   mintcream
   /**
    * <font color=mistyrose>Sample: mistyrose</font>
    */
   mistyrose
   /**
    * <font color=moccasin>Sample: moccasin</font>
    */
   moccasin
   /**
    * <font color=navajowhite>Sample: navajowhite</font>
    */
   navajowhite
   /**
    * <font color=navy>Sample: navy</font>
    */
   navy
   /**
    * <font color=oldlace>Sample: oldlace</font>
    */
   oldlace
   /**
    * <font color=olive>Sample: olive</font>
    */
   olive
   /**
    * <font color=olivedrab>Sample: olivedrab</font>
    */
   olivedrab
   /**
    * <font color=orange>Sample: orange</font>
    */
   orange
   /**
    * <font color=orangered>Sample: orangered</font>
    */
   orangered
   /**
    * <font color=orchid>Sample: orchid</font>
    */
   orchid
   /**
    * <font color=palegoldenrod>Sample: palegoldenrod</font>
    */
   palegoldenrod
   /**
    * <font color=palegreen>Sample: palegreen</font>
    */
   palegreen
   /**
    * <font color=paleturquoise>Sample: paleturquoise</font>
    */
   paleturquoise
   /**
    * <font color=palevioletred>Sample: palevioletred</font>
    */
   palevioletred
   /**
    * <font color=papayawhip>Sample: papayawhip</font>
    */
   papayawhip
   /**
    * <font color=peachpuff>Sample: peachpuff</font>
    */
   peachpuff
   /**
    * <font color=peru>Sample: peru</font>
    */
   peru
   /**
    * <font color=pink>Sample: pink</font>
    */
   pink
   /**
    * <font color=plum>Sample: plum</font>
    */
   plum
   /**
    * <font color=powderblue>Sample: powderblue</font>
    */
   powderblue
   /**
    * <font color=purple>Sample: purple</font>
    */
   purple
   /**
    * <font color=red>Sample: red</font>
    */
   red
   /**
    * <font color=rosybrown>Sample: rosybrown</font>
    */
   rosybrown
   /**
    * <font color=royalblue>Sample: royalblue</font>
    */
   royalblue
   /**
    * <font color=saddlebrown>Sample: saddlebrown</font>
    */
   saddlebrown
   /**
    * <font color=salmon>Sample: salmon</font>
    */
   salmon
   /**
    * <font color=sandybrown>Sample: sandybrown</font>
    */
   sandybrown
   /**
    * <font color=seagreen>Sample: seagreen</font>
    */
   seagreen
   /**
    * <font color=seashell>Sample: seashell</font>
    */
   seashell
   /**
    * <font color=sienna>Sample: sienna</font>
    */
   sienna
   /**
    * <font color=silver>Sample: silver</font>
    */
   silver
   /**
    * <font color=skyblue>Sample: skyblue</font>
    */
   skyblue
   /**
    * <font color=slateblue>Sample: slateblue</font>
    */
   slateblue
   /**
    * <font color=slategray>Sample: slategray</font>
    */
   slategray
   /**
    * <font color=snow>Sample: snow</font>
    */
   snow
   /**
    * <font color=springgreen>Sample: springgreen</font>
    */
   springgreen
   /**
    * <font color=steelblue>Sample: steelblue</font>
    */
   steelblue
   /**
    * <font color=tan>Sample: tan</font>
    */
   tan
   /**
    * <font color=teal>Sample: teal</font>
    */
   teal
   /**
    * <font color=thistle>Sample: thistle</font>
    */
   thistle
   /**
    * <font color=tomato>Sample: tomato</font>
    */
   tomato
   /**
    * <font color=turquoise>Sample: turquoise</font>
    */
   turquoise
   /**
    * <font color=violet>Sample: violet</font>
    */
   violet
   /**
    * <font color=wheat>Sample: wheat</font>
    */
   wheat
   /**
    * <font color=white>Sample: white</font>
    */
   white
   /**
    * <font color=whitesmoke>Sample: whitesmoke</font>
    */
   whitesmoke
   /**
    * <font color=yellow>Sample: yellow</font>
    */
   yellow
   /**
    * <font color=yellowgreen>Sample: yellowgreen</font>
    */
   yellowgreen
}

// control position attributes
private tag POSITION_ATTRIBUTES {
   /**
    * Optional. Height value of the tree control, in pixels.
    */
   attr height;
   /**
    * Optional. Width value of the tree control, in pixels.
    */
   attr width;
   /**
    * Optional. Vertical margin spacing above and below the tree control in pixels.
    */
   attr vspace;
   /**
    * Optional. Horizontal spacing to the left and right of the tree control, in pixels.
    */
   attr hspace;
   /**
    * Optional. Alignment value.
    */
   attr align {
      Top
      Left
      Bottom
      Baseline
      TextTop
      AbsBottom
      Middle
      AbsMiddle
      Right
   }
}
// input box attributes
private tag INPUT_ATTRIBUTES {
   /**
    * Required. A name for the CFTEXTINPUT control.
    */
   attr name;
   /**
    * Optional. Initial value that appears in the text control.
    */
   attr value;
   /**
    * Optional.  Yes or No.  If Yes, the user must enter or change text.
    * Default is No.
    */
   attr required {
      yes no
   }
   /**
    * Optional.  Enter a minimum value, maximum value range separated by a
    * comma.  Valid only for numeric data.
    */
   attr range;
   /**
    * Optional. Valid entries are:
    * <UL>
    * <LI>date
    * <LI>eurodate
    * <LI>time
    * <LI>float
    * <LI>integer
    * <LI>telephone
    * <LI>zipcode
    * <LI>creditcard
    * <LI>social_security_number
    * </UL>
    */
   attr validate {
      /**
       * Verifies US date entry in the form mm/dd/yy.
       */
      date
      /**
       * Verifies valid European date entry in the form dd/mm/yyyy.
       */
      eurodate
      /**
       * Verifies a time entry in the form hh:mm:ss.
       */
      time
      /**
       * Verifies a floating point entry.
       */
      float
      /**
       * Verifies an integer entry.
       */
      integer
      /**
       * Verifies a telephone entry.  Telephone data must be entered
       * as ###-###-####.  The hyphen separator (-) can be replaced with a blank.
       * The area code and exchange must begin with a digit between 1 and 9.
       */
      telephone
      /**
       * (U.S.  formats only) Number can be a 5-digit or 9-digit zip in the form
       * #####-####.  The hyphen separator (-) can be replaced with a blank.
       */
      zipcode
      /**
       * Blanks and dashes are stripped and the number is verified
       * using the mod10 algorithm.
       */
      creditcard
      /**
       * Number must be entered as ###-##-####.  The
       * hyphen separator (-) can be replaced with a blank.
       */
      social_security_number
   }
   /**
    * Optional.  The name of a valid JavaScript function used to validate user
    * input.  The form object, input object, and input object value are passed
    * to the specified routine, which should return TRUE if validation succeeds
    * and FALSE otherwise.  When used, the VALIDATE attribute is ignored.
    */
   attr onvalidate;
   /**
    * Optional. Message text to appear if validation fails.
    */
   attr message;
   /**
    * Optional.  The name of a valid JavaScript function you want to execute in
    * the event of a failed validation.
    */
   attr onerror;
}
// database description attributes
private tag DATABASE_ATTRIBUTES {
   /**
    * Required. Name of the data source that contains your table.
    */
   attr datasource;
   /**
    * Optional. The database driver type:
    */
   attr dbtype {
      /**
       * ODBC driver.
       */
      ODBC
      /**
       * Oracle 7.3 native database driver.  Using this option, the
       * ColdFusion Server computer must have Oracle 7.3.4.0.0 (or greater)
       * client software installed.
       */
      Oracle73
      /**
       * Oracle 8.0 native database driver.  Using this option, the
       * ColdFusion Server computer must have Oracle 8.0 (or greater)
       * client software installed.
       */
      Oracle80
      /**
       * Sybase System 11 native database driver.  Using this option,
       * the ColdFusion Server computer must have Sybase 11.1.1 (or greater)
       * client software installed.  Sybase patch ebf 7729 is recommended.
       */
      Sybase11
      /**
       * OLE DB provider.  If specified, this database provider overrides
       * the driver type specified in the ColdFusion Administrator.
       */
      OLEDB
      /**
       * DB2 5.2 native database driver.
       */
      DB2
      /**
       * Informix73 native database driver.
       */
      Informix73
   }
   /**
    * Optional.  For native database drivers and the SQLOLEDB provider,
    * specifies the name of the database server machine.  If specified, DBSERVER
    * overrides the server specified in the data source.
    */
   attr dbserver;
   /**
    * Optional.  The database name (Sybase System 11 driver and SQLOLEDB
    * provider only).  If specified, DBNAME overrides the default database
    * specified in the data source.
    */
   attr dbname;
   /**
    * Required. Name of the table you want to update. Note the following:
    * <UL>
    * <LI>ORACLE drivers</B> -- This specification must be in uppercase.
    * <LI><B>Sybase driver</B> -- This specification is case-sensitive and must be in the
    * same case as that used when the table was created
    * </UL>
    */
   attr tablename;
   /**
    * Optional.  For data sources that support table ownership (for example, SQL
    * Server, Oracle, and Sybase SQL Anywhere), use this field to specify the
    * owner of the table.
    */
   attr tableowner;
   /**
    * Optional.  For data sources that support table qualifiers, use this field
    * to specify the qualifier for the table.  The purpose of table qualifiers
    * varies across drivers.  For SQL Server and Oracle, the qualifier refers to
    * the name of the database that contains the table.  For the Intersolv dBase
    * driver, the qualifier refers to the directory where the DBF files are
    * located.
    */
   attr tablequalifier;
   /**
    * Optional. If specified, USERNAME overrides the username value specified in the ODBC setup.
    */
   attr username;
   /**
    * Optional. If specified, PASSWORD overrides the password value specified in the ODBC setup.
    */
   attr password;
   /**
    * Optional. COM provider (OLE-DB only).
    */
   attr provider;
   /**
    * Optional. Data source name for the COM provider (OLE-DB only).
    */
   attr providerdsn;
}

private tag NOTSUPPORTED_ATTRIBUTE {
   /**
    * Optional.  The text you want to display if the page containing a Java
    * applet-based CFFORM control is opened by a browser that does not support
    * Java or has Java support disabled.  For example:
    *
    * <PRE>
    * NOTSUPPORTED="&lt;B&gt; Browser must support Java to
    * view ColdFusion Java Applets&lt;/B&gt;"
    * </PRE>
    *
    * <P>
    * By default, if no message is specified, the following message appears:
    *
    * <PRE>
    * &lt;B&gt;Browser must support Java to &lt;BR&gt;
    * view ColdFusion Java Applets!&lt;/B&gt;
    * </PRE>
    */
   attr notsupported;
}

// CFML tags and end tags, comment out if not using Cold Fusion
/**
 * The CFABORT tag stops processing of a page at the tag location.
 * ColdFusion simply returns everything that was processed before the CFABORT
 * tag.  CFABORT is often used with conditional logic to stop processing a
 * page because of a particular condition.
 *
 * <PRE>
 * &lt;CFABORT SHOWERROR="text"&gt;
 * </PRE>
 *
 * <P>
 * When combining CFABORT and CFERROR, remember that CFERROR is meant to
 * redirect output to a specified page.  CFABORT is intended to halt
 * processing immediately.
 * <P>
 * If the CFABORT tag does not contain a SHOWERROR attribute value,
 * processing stops immediately and the page contents are shown all the way
 * up to the line containing the CFABORT tag.
 * <P>
 * When using CFABORT with SHOWERROR by itself (that is without defining an
 * error page using CFERROR) page processing stops once the CFABORT tag is
 * reached and the message defined in SHOWERROR is displayed to the client.
 * <P>
 * If you have a page in which you've defined both an error page using
 * CFERROR and a CFABORT tag using the SHOWERROR attribute, ColdFusion
 * redirects output to the error page specified in the CFERROR tag.
 *
 * <P>
 * @example
 * This example demonstrates the use of CFABORT
 * to stop the processing of a CFLOOP.  Note that in the second example,
 * where CFABORT is used, the result never appears.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFABORT Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY bgcolor=FFFFFF&gt;
 *
 * &lt;H1&gt;CFABORT Example&lt;/H1&gt;
 *
 * &lt;P&gt;
 * &lt;H3&gt;Example A: Let the instruction complete itself&lt;/H3&gt;
 * &lt;!--- first, set a variable  ---&gt;
 * &lt;CFSET myVariable = 3&gt;
 * &lt;!--- now, perform a loop that increments this value ---&gt;
 * &lt;CFLOOP FROM="1" TO="4" INDEX="Counter"&gt;
 *     &lt;CFSET myVariable = myVariable + 1&gt;
 * &lt;/CFLOOP&gt;
 *
 * &lt;CFOUTPUT&gt;
 * &lt;P&gt;    The value of myVariable after incrementing through the loop
 *     #Counter# times is: #myVariable#
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;!--- reset the variable and show the use of CFABORT ---&gt;
 * &lt;H3&gt;Example B: Use CFABORT to halt the instruction&lt;/H3&gt;
 *
 * &lt;CFSET myVariable = 3&gt;
 * &lt;!--- now, perform a loop that increments this value ---&gt;
 * &lt;CFLOOP FROM="1" TO="4" INDEX="Counter"&gt;
 *     &lt;!--- on the second time through the loop, CFABORT ---&gt;
 *     &lt;CFIF Counter is 2&gt;
 *         &lt;CFABORT&gt;
 *     &lt;!--- the processing is stopped, and subsequent operations
 *     are not carried out by the CFAS ---&gt;
 *     &lt;CFELSE&gt;
 *     &lt;CFSET myVariable = myVariable + 1&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFLOOP&gt;
 *
 * &lt;CFOUTPUT&gt;
 * &lt;P&gt;    The value of myVariable after incrementing through the loop
 *     #counter# times is: #myVariable#
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>;
 */
tag CFABORT (empty) {
   /**
    * Optional.  Specify the error you want to display when CFABORT executes.
    * This error message appears in the standard ColdFusion error page.
    */
   attr showerror;

}

/**
 * Used in a CFFORM, CFAPPLET allows you to reference custom Java applets
 * that have been previously registered using the ColdFusion Administrator.
 * <P>
 * To register a Java applet, open the ColdFusion Administrator and click the
 * Applets button.
 *
 * <PRE>
 * &lt;CFAPPLET APPLETSOURCE="applet_name"
 *     NAME="form_variable_name"
 *     HEIGHT="pixels"
 *     WIDTH="pixels"
 *     VSPACE="pixels"
 *     HSPACE="pixels"
 *     ALIGN="alignment"
 *     NOTSUPPORTED="text"
 *     param_1="value"
 *     param_2="value"
 *     param_n="value"&gt;
 * </PRE>
 *
 * <P>
 * Since Java applets must be pre-registered, the CFAPPLET tag can be very
 * simple, taking the default parameter values as they were registered in the
 * ColdFusion Administrator.  You can also override parameters by invoking
 * them directly in the CFAPPLET tag.
 *
 * <P>
 * @example
 * This example shows the use of CFAPPLET.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFAPPLET Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFAPPLET Example&lt;/H3&gt;
 *
 * &lt;P&gt;Used in a CFFORM, CFAPPLET allows you to reference
 * custom Java applets that have been previously registered
 * using the ColdFusion Administrator.
 * &lt;P&gt;To register a Java applet, open the ColdFusion Administrator
 * and click the "Applets" link under the "extensions" section.
 * &lt;P&gt;This example applet copies text that you type into
 * a form.  Type some text, and then click "copy" to see
 * the copied text.
 *
 * &lt;CFFORM ACTION="copytext.cfm"&gt;
 *     &lt;CFAPPLET appletsource="copytext" NAME="copytext"&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFAPPLET (empty) : NOTSUPPORTED_ATTRIBUTE, POSITION_ATTRIBUTES {
   /**
    * Required. The name of the registered applet.
    */
   attr appletsource;
   /**
    * Required. The form variable name for the applet.
    */
   attr name;
   /**
    * Optional. The valid name of a registered parameter for the applet. Specify a parameter only if you want to override parameter values already defined for the
    * applet using the ColdFusion Administrator.
    */
   attr param1, param2, paramn;

}
/**
 * Defines scoping for a ColdFusion application, enables or disables storing
 * client variables, and specifies a client variable storage mechanism.  By
 * default, client variables are disabled.  Also, used to enable session
 * variables and to set timeouts for both session and application variables.
 * Session and application variables are stored in memory.
 *
 * <PRE>
 * &lt;CFAPPLICATION NAME="Name"
 *     CLIENTMANAGEMENT="Yes/No"
 *     CLIENTSTORAGE="Storage Type"
 *     SETCLIENTCOOKIES="Yes/No"
 *     SESSIONMANAGEMENT="Yes/No"
 *     SESSIONTIMEOUT=#CreateTimeSpan(days, hours,
 *       minutes, seconds)#
 *     APPLICATIONTIMEOUT=#CreateTimeSpan(days, hours,
 *       minutes, seconds)#
 *     SETDOMAINCOOKIES="Yes/No"
 * &gt;
 * </PRE>
 *
 * CFAPPLICATION is typically used in the Application.cfm file to set
 * defaults for a specific ColdFusion application.
 * <P>
 * CFAPPLICATION enables application variables unless they have been disabled
 * in the ColdFusion Administrator.  Using the SESSIONMANAGEMENT attribute to
 * enable session variables is also overridden by the Administrator.  See
 * Administering ColdFusion Server for information about the ColdFusion
 * Administrator.
 * <P>
 * <B>Server, Application, and Session Variables</B>
 * <P>
 * Whenever you display, set, or update variables in the server, application,
 * and session scopes, you should use the CFLOCK tag with the SCOPE
 * attribute.  For server variables, specify the "Server" scope.  For
 * application variables, specify the "Application" scope.  For session
 * variables, specify the "Session" scope.  See CFLOCK for information about
 * locking server, application, and session scopes.
 * <P>
 * If you are running ColdFusion on a cluster, you must specify either Cookie
 * or a data source name for CLIENTSTORAGE; you cannot specify Registry.
 *
 * <P>
 * @example
 * This example shows how CFLOCK can be used to guarantee the
 * consistency of data updates to variables in the Application,
 * Server, and Session scopes.
 * You should copy the following code into an Application.cfm
 * file in the snippets directory.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;title&gt;Define Session and Application Variables&lt;/title&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFAPPLICATION Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFAPPLICATION defines scoping for a ColdFusion application and
 * enables or disables the storing of application and/or session
 * variables. This tag is placed in a special file called
 * Application.cfm that is run before any other CF template in a
 * directory where the Application.cfm file appears.
 *
 * &lt;CFAPPLICATION NAME="ETurtle" SESSIONTIMEOUT=#CreateTimeSpan(0, 0,
 *   0, 60)# SESSIONMANAGEMENT="yes"&gt;
 * &lt;!-------------------------------------------------------------
 * Initialize the session and application variables that will be
 * used by E-Turtleneck. Use the session scope for the session
 * variables.
 * ---------------------------------------------------------------&gt;
 * &lt;CFLOCK SCOPE="Session" TIMEOUT="30" TYPE="Exclusive"&gt;
 *     &lt;CFIF NOT IsDefined("session.size")&gt;
 *         &lt;CFSET session.size = ""&gt;
 *     &lt;/CFIF&gt;
 *     &lt;CFIF NOT IsDefined("session.color")&gt;
 *         &lt;CFSET session.color = ""&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFLOCK&gt;
 *
 * &lt;!----------------------------------------------------------------
 * Use the application scope for the application variable. This
 * variable keeps track of the total number of turtlenecks sold.
 * -------------------------------------------------------------------&gt;
 * &lt;CFLOCK SCOPE="Application" TIMEOUT="30" TYPE="Exclusive"&gt;
 *     &lt;CFIF NOT IsDefined("application.number")&gt;
 *         &lt;CFSET application.number = 1&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFLOCK&gt;
 * &lt;CFLOCK SCOPE="Application" TIMEOUT="30" TYPE="ReadOnly"&gt;
 *     &lt;CFOUTPUT&gt;
 *     E-Turtleneck is proud to say that we have sold
 *     #application.number# turtlenecks to date.
 *     &lt;/CFOUTPUT&gt;
 * &lt;/CFLOCK&gt;
 * </PRE>
 */
tag CFAPPLICATION (empty) {
   /**
    * The name you want to give your application.  This name can be up to 64
    * characters long.  Required for application and session variables to work.
    * Optional for client variables.
    */
   attr name;
   /**
    * Optional. Yes or No. Enables client variables. Default is No.
    */
   attr clientmanagement {
      yes no
   }
   /**
    * Optional. Specifies the mechanism for storing client variables:
    * <P>
    * datasourcename -- ColdFusion stores client variables in the specified ODBC
    * or native data source.  To use this option you must create a client
    * variable storage repository using the Variables page of the ColdFusion
    * Administrator.
    * <P>
    * Registry -- ColdFusion stores client variables in the system registry.
    * This is the default.
    * <P>
    * Cookie -- ColdFusion stores client variables on the client machine in a
    * cookie.  Storing client data in a cookie is scalable to large numbers of
    * clients, but this storage mechanism has some limitations.  Chief among
    * them is that if the client turns off cookies in the browser, client
    * variables won't work.
    */
   attr clientstorage;
   /**
    * Optional. Yes or No. Yes enables client cookies. Default is Yes.
    * <P>
    * If you set this attribute to "NO", ColdFusion does not automatically send
    * the CFID and CFTOKEN cookies to the client browser; you must manually code
    * CFID and CFTOKEN on the URL for every page that uses Session or Client
    * variables.
    */
   attr setclientcookies {
      yes no
   }
   /**
    * Optional. Yes or No. Yes enables session variables. Default is No.
    */
   attr sessionmanagement {
      yes no
   }
   /**
    * Optional.  Enter the CreateTimeSpan function and the values you want in
    * days, hours, minutes, and seconds, separated by commas to specify the
    * lifespan of any session variables that are set.  The default value is
    * specified in the Variables page of the ColdFusion Administrator.
    */
   attr sessiontimeout;
   /**
    * Optional.  Enter the CreateTimeSpan function and the values you want in
    * days, hours, minutes, and seconds, separated by commas to specify the
    * lifespan of any application variables that are set.  The default value is
    * specified in the Variables page of the ColdFusion Administrator.
    */
   attr applicationtimeout;
   /**
    * Optional.  Yes or No.  Sets the CFID and CFTOKEN cookies for an entire
    * domain not just a single host.  Applications that are running on clusters
    * must set this value to Yes.  The default is No.
    */
   attr setdomaincookies {
      yes no
   }

}
/**
 * The CFASSOCIATE tag allows sub-tag data to be saved with the base tag.
 * This applies to custom tags only.
 *
 * <PRE>
 * &lt;CFASSOCIATE BASETAG="tagname"
 *     DATACOLLECTION="collectionname"&gt;
 * </PRE>
 *
 * Call this tag within a sub-tag to save sub-tag data in the base tag.
 * <P>
 * ColdFusion saves sub-tag attributes in a structure whose default name is
 * AssocAttribs.  Use the DataCollection attribute to specify a non-default
 * structure name.  Specify a non-default structure name when the base tag
 * can have multiple sub tags and you want to segregate sub-tag attributes.
 * <P>
 * If the custom tag uses an attribute collection, the attributes passed in
 * the attribute collection are saved as independent attribute values, with
 * no indication that they were grouped together in a structure within the
 * custom tag.
 *
 * <P>
 * @example
 * <PRE>
 * &lt;!--- Find the context ---&gt;
 * &lt;CFIF thisTag.executionMode is "start"&gt;
 *   &lt;!--- Associate attributes
 *       This code occurs in a custom tag's
 *       sub tag. ---&gt;
 *   &lt;CFASSOCIATE BASETAG="CF_TAGBASE"&gt;
 *
 *   &lt;!--- Define defaults for attributes ---&gt;
 *   &lt;CFPARAM NAME="attributes.happy" DEFAULT="Yes"&gt;
 *   &lt;CFPARAM NAME="attributes.sad" DEFAULT="No"&gt;
 * ...
 * </PRE>
 */
tag CFASSOCIATE (empty) {
   /**
    * Specifies the name of the base tag.
    */
   attr basetag;
   /**
    * Optional.  Specifies the name of the structure in which the base tag
    * stores sub-tag data.  The default is AssocAttribs.
    */
   attr datacollection;

}
/**
 * The CFAUTHENTICATE tag authenticates a user, setting a security context
 * for the application.  See the descriptions of the functions
 * IsAuthenticated and AuthenticatedContext.
 *
 * <PRE>
 * &lt;CFAUTHENTICATE SECURITYCONTEXT="context"
 *     USERNAME="user ID"
 *     PASSWORD="password"
 *     SETCOOKIE="yes/no"
 *     TROWONFAILURE="yes/no"&gt;
 * </PRE>
 *
 * Code this tag in the Application.cfm file to set a security context for
 * your application.
 * <P>
 * Call the IsAuthenticated function to determine if the user has been
 * authenticated.  If you specify No for SETCOOKIE, you must call
 * CFAUTHENTICATE for every page in the application (perhaps in an
 * Application.cfm file).
 * <P>
 * If you specify THROWONFAILURE=Yes, you can enclose CFAUTHENTICATE in a
 * CFTRY/CFCATCH block to handle possible exceptions programmatically.
 *
 * <P>
 * @example
 * This example shows the use of CFAUTHENTICATE
 * in an Application.cfm file.
 * <PRE>
 * &lt;CFIF NOT IsAuthenticated()&gt;
 *   &lt;CFTRY&gt;
 *   &lt;CFAUTHENTICATE SECURITYCONTEXT="Allaire" USERNAME=#user#
 *     PASSWORD=#pwd#&gt;
 *   &lt;CFCATCH TYPE="Security"&gt;
 *    &lt;!--- the message to display ---&gt;
 *    &lt;H3&gt;Authentication error&lt;/H3&gt;
 *     &lt;CFOUTPUT&gt;
 *     &lt;!--- Display the message. Alternatively, you might place
 *       code here to define the user to the security domain. ---&gt;
 *     &lt;P&gt;#CFCATCH.message#
 *     &lt;/CFOUTPUT&gt;
 *   &lt;/CFCATCH&gt;
 *   &lt;/CFTRY&gt;
 * &lt;/CFIF&gt;
 * &lt;CFAPPLICATION NAME="Personnel"&gt;
 * ...
 * </PRE>
 */
tag CFAUTHENTICATE (empty) {
   /**
    * Required.  Security context with which the specified user is
    * authenticated.  This context must have been previously defined in the
    * security system.
    */
   attr securitycontext;
   /**
    * Required. User to be authenticated.
    */
   attr username;
   /**
    * Required. Password for the user.
    */
   attr password;
   /**
    * Optional.  Default is Yes.  Indicates whether ColdFusion sets a cookie to
    * contain authentication information.  This cookie is encrypted and its
    * contents include user name, security context, browser remote address, and
    * the HTTP user agent.
    */
   attr setcookie {
      yes no
   }
   /**
    * Optional.  Default is Yes.  Indicates whether ColdFusion throws an
    * exception (of type SECURITY) if authentication fails.
    */
   attr throwonfailure {
      yes no
   }

}
/**
 * Used to break out of a CFLOOP.  See Breaking out of a loop, later in this
 * chapter, for more information.
 *
 * <PRE>
 * &lt;CFBREAK&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFBREAK to exit
 * a loop when a condition is met.
 * <PRE>
 * &lt;!--- select a list of courses and use CFLOOP to find a condition
 * and then break the loop ---&gt;
 * &lt;CFQUERY NAME="GetCourses" DATASOURCE="cfsnippets"&gt;
 * SELECT *
 * FROM courses
 * ORDER by Number
 * &lt;/CFQUERY&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFBREAK Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY bgcolor=silver&gt;
 * </PRE>
 * <P>
 * This example uses CFLOOP to cycle through a query to find a desired
 * value. (In our example, a list of values corresponding to courses in the
 * cfsnippets datasource).
 * When the conditions of the query are met, CFBREAK stops the loop.
 * <PRE>
 * ...
 * &lt;!--- loop through the query until desired value is found,
 *    then use CFBREAK to exit the query ---&gt;
 * &lt;CFLOOP QUERY="GetCourses"&gt;
 *     &lt;CFIF GetCourses.Number is form.courseNum&gt;
 *     &lt;CFOUTPUT&gt;
 *     &lt;H4&gt;Your Desired Course was found:&lt;/H4&gt;
 *     &lt;PRE&gt;#Number#    #Descript#&lt;/PRE&gt;&lt;/CFOUTPUT&gt;
 *     &lt;CFBREAK&gt;
 *     &lt;CFELSE&gt;
 *         &lt;BR&gt;Searching...
 *     &lt;/CFIF&gt;
 * &lt;/CFLOOP&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFBREAK (empty) {
}
/**
 *
 * CFCACHE allows you to speed up pages considerably in cases where the
 * dynamic content doesn't need to be retrieved each time a user accesses the
 * page.  To accomplish this, it creates temporary files that contain the
 * static HTML returned from a particular run of the ColdFusion page.
 * <P>
 * You can use CFCACHE for simple URLs and URLs that contain URL parameters.
 *
 * <PRE>
 * &lt;CFCACHE
 *     ACTION="action"
 *     PROTOCOL="protocol name"
 *     TIMEOUT="timeout date-time"
 *     DIRECTORY="directory name for map file"
 *     CACHEDIRECTORY="directory name for cached pages"
 *     EXPIREURL="wildcarded URL reference"
 *     PORT= "port-number"&gt;
 * </PRE>
 *
 * In its simplest form, all you need to do is code &lt;CFCACHE&gt; at the
 * top of a page for it to be cached.
 * <P>
 * With the ACTION attribute, you can specify server-side caching, browser
 * caching, or a combination of server-side and browser caching.  The
 * advantage of browser caching is that it takes no ColdFusion resources
 * because the browser stores the pages in its own cache, thus, improving
 * performance.  The advantage of using a combination of the two forms of
 * caching is that it optimizes performance; if the browser cache times out,
 * the server can retrieve the cached data from its own cache.
 * <P>
 * In addition to the cached files themselves, CFCACHE uses a mapping file to
 * control caching.  It is named cfcache.map and uses a format similar to a
 * Windows INI file.  The mapping of a URL with parameters is stored as
 * follows.  Assume a directory "c:\InetPub\wwwroot\dir1" that has a CFM file
 * called "foo.cfm", which can be invoked with or without URL parameters.
 * The cfcache.map file entries for foo.cfm will look like this:
 *
 * <PRE>
 *  [foo.cfm]
 * Mapping=C:\InetPub\wwwroot\dir1\CFCBD.tmp
 * SourceTimeStamp=08/31/1999 08:59:04 AM
 *
 * [foo.cfm?x=5]
 * Mapping=C:\InetPub\wwwroot\dir1\CFCBE.tmp
 * SourceTimeStamp=08/31/1999 08:59:04 AM
 *
 * [foo.cfm?x=9]
 * Mapping=C:\InetPub\wwwroot\dir1\CFCBF.tmp
 * SourceTimeStamp=08/31/1999 08:59:04 AM
 * </PRE>
 * <P>
 * The cfcache.map file in a given directory stores mappings for that
 * directory only.  Any time the timestamp of the underlying page changes,
 * ColdFusion updates the cache file for that URL only.  ColdFusion uses the
 * SourceTimeStamp field to determine if the currently cached file is up to
 * date or needs to be rebuilt.
 * <P>
 * You can refresh the cache in the following ways:
 * <P>
 * TIMEOUT attribute -- ColdFusion tests the timestamp of the cached file
 * against the TIMEOUT attribute.  If the cached file's timestamp is older
 * than TIMEOUT, the old file is deleted and a new one created.  You can use
 * fixed dates if necessary, but it's preferable to use relative dates.  This
 * is the preferred technique and it works for seconds, hours, days, weeks,
 * years, etc.
 * <P>
 * ACTION=FLUSH -- You use ACTION=FLUSH to force the clean up of cached
 * files.  It can take two attributes, DIRECTORY and EXPIREURL.
 * <P>
 * Manually -- Manually or programmatically (using CFFILE) delete the .tmp
 * files.  This is not recommended.
 * <P>
 * Note the following regarding CFCACHE:
 * <P>
 * CFCACHE requires that ColdFusion Server "simultaneous requests" be greater
 * than 1.  When a cache file is generated, the requested page requires two
 * connections to satisfy the request.  When a cached file is found, only one
 * request is required.  Debug settings have no effect on CFCACHE unless the
 * template explicitly turns it on.  When generating a cached file, CFCACHE
 * uses &lt;CFSETTING SHOWDEBUGOUTPUT="NO"&gt;.  ColdFusion does not cache
 * pages that are dependent on anything other than URL parameters.  To use
 * CFCACHE with the Secure Sockets Layer (SSL), specify PROTOCOL="http://".
 * If you need to use SSL, you must run ColdFusion as a desktop application.
 * Please note, however, Allaire strongly recommends that you run the
 * ColdFusion Server as a service.  For more details about using SSL, see
 * Knowledge Base article #1096 at
 * http://www.allaire.com/Support/KnowledgeBase/SearchForm.cfm.  If a
 * template returns an error for any reason, the error page gets cached.
 *
 * <P>
 * @example
 * This example will produce as many cached files as there
 * are possible URL parameter permutations.
 * <PRE>
 * &lt;CFCACHE TIMEOUT="#DateAdd("h", "-4", Now() )#"&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFCACHE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY&gt;
 * &lt;H1&gt;CFCACHE Example&lt;/H1&gt;
 *
 * &lt;H3&gt;This is a test of some simple output&lt;/H3&gt;
 * &lt;CFPARAM NAME="URL.x" DEFAULT="no URL parm passed" &gt;
 * &lt;CFOUTPUT&gt;The value of URL.x = # URL.x #&lt;/CFOUTPUT&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFCACHE (empty) {
   /**
    * Optional. Specifies one of the following:
    * <UL>
    * <LI>CACHE
    * <LI>FLUSH
    * <LI>CLIENTCACHE
    * <LI>OPTIMAL
    * </UL>
    */
   attr action {
      /**
       * Specifies server-side caching.  The default is CACHE.
       */
      CACHE
      /**
       * Refresh the cached page.  If you specify FLUSH, you can also
       * specify the DIRECTORY and EXPIREURL attributes.
       */
      FLUSH
      /**
       * Specifies browser caching.
       */
      CLIENTCACHE
      /**
       * Specifies optimal caching through a combination of server-side
       * and browser caching.
       */
      OPTIMAL
   }
   /**
    * Optional.  Specifies the protocol used to create pages from cache.
    * Specify either HTTP:// or HTTPS://.  The default is HTTP://.
    */
   attr protocol;
   /**
    * Optional.  DateTime that specifies the oldest acceptable cached page.  If
    * the cached page is older than the specified datetime, ColdFusion refreshes
    * the page.  By default, ColdFusion uses all cached pages.  For example, if
    * you want a cached file to be no older than 4 hours, code the following:
    * <PRE>
    * &lt;CFCACHE TIMEOUT="#DateAdd("h", "-4", Now() )#"&gt;
    * </PRE>
    */
   attr timeout;
   /**
    * Optional.  Used with ACTION=FLUSH.  Specifies the fully qualified path of
    * a directory containing the cfcache.map to be used when ACTION=FLUSH.  The
    * default is the directory of the current page.
    */
   attr directory;
   /**
    * Optional.  Specifies the fully qualified path of the directory where the
    * pages are to be cached.  The default is the directory of the current page.
    */
   attr cachedirectory;
   /**
    * Optional.  Used with ACTION=FLUSH.  EXPIREURL takes a wildcarded URL
    * reference that ColdFusion matches against all mappings in the cfcache.map
    * file.  The default is to flush all mappings.  For example, "foo.cfm"
    * matches "foo.cfm"; "foo.cfm?*" matches "foo.cfm?x=5" and "foo.cfm?x=9".
    */
   attr expireurl;
   /**
    * Optional.  The port number of the web server from which the page is being
    * requested.  The port number defaults to 80.  The port number is useful
    * because the CFCACHE code calls CFHTTP.  If the port number is specified
    * correctly in the internal call to CFHTTP, the URL of each retrieved
    * document is resolved to preserve links.
    */
   attr port;

}

/**
 * @see CFSWITCH
 */
tag CFCASE {
   /**
    */
   attr value;
   /**
    */
   attr delimiters;

}
/**
 * @see CFTRY
 */
tag CFCATCH {

}
/**
 * Defines table column header, width, alignment, and text.  Only used
 * inside a CFTABLE.
 *
 * <PRE>
 * &lt;CFCOL HEADER="text"
 *     WIDTH="number"
 *     ALIGN="position"
 *     TEXT="text"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFCOL and CFTABLE
 * to align information returned from a query.
 * <PRE>
 * &lt;!--- this query selects employee information from the
 * cfsnippets data source ---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT Emp_ID, FirstName, LastName, EMail, Phone, Department
 * FROM   Employees
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFCOL Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFCOL Example&lt;/H3&gt;
 *
 * &lt;!--- Note the use of the HTMLTABLE attribute to display the
 * CFTABLE as an HTML table, rather simply as PRE formatted information ---&gt;
 * &lt;CFTABLE QUERY="GetEmployees" STARTROW="1" COLSPACING="3" HTMLTABLE&gt;
 * &lt;!--- each CFCOL tag sets the width of a column in the table,
 * as well as specifying the header information and the text/CFML
 * with which to fill the cell ---&gt;
 *     &lt;CFCOL HEADER = "&lt;B&gt;ID&lt;/B&gt;"
 *         ALIGN = "Left"
 *         WIDTH = 2
 *         TEXT  = "#Emp_ID#"&gt;
 *     &lt;CFCOL HEADER = "&lt;B&gt;Name/Email&lt;/B&gt;"
 *         ALIGN = "Left"
 *         WIDTH = 15
 *         TEXT  = "&lt;a href='mailto:#Email#'&gt;#FirstName# #LastName#&lt;/A&gt;"&gt;
 *     &lt;CFCOL HEADER = "&lt;B&gt;Phone Number&lt;/B&gt;"
 *         ALIGN = "Center"
 *         WIDTH = 15
 *         TEXT  = "#Phone#"&gt;
 * &lt;/CFTABLE&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFCOL (empty) {
   /**
    * The text to use for the column's header.
    */
   attr header;
   /**
    * The width of the column in characters (the default is 20).  If the length
    * of the data displayed exceeds the width value, the data is truncated to fit.
    */
   attr width;
   /**
    * Column alignment, Left, Right, or Center.
    */
   attr align {
      Left
      Right
      Center
   }
   /**
    * Double-quote delimited text that determines what displays in the column.
    * The rules for the text attribute are identical to the rules for CFOUTPUT
    * sections, meaning that it can consist of a combination of literal text,
    * HTML tags, and query record set field references.  This means you can
    * embed hyperlinks, image references, and even input controls within table
    * columns.
    */
   attr HTML_COLORS text;

}
/**
 * The CFCOLLECTION tag allows you to create and administer Verity
 * collections.
 *
 * <PRE>
 * &lt;CFCOLLECTION ACTION="action"
 *     COLLECTION="collection"
 *     PATH="implementation directory"
 *     LANGUAGE="language"&gt;
 * </PRE>
 *
 * CFCOLLECTION works at the collection level only.  To add content to a
 * collection, use CFINDEX.
 * <P>
 * Note the following regarding mapped collections:
 *
 * <UL>
 * <LI>Mapping allows you to assign an alias to a Verity collection created
 *     by a tool other than ColdFusion.
 * <LI>The ACTION, COLLECTION, and PATH attributes are required.
 * <LI>The path must point to a valid Verity collection; mapping does not
 *     validate the path.
 * <LI>Deleting a mapped collection unregisters the alias; the base
 *     collection is not deleted.
 * </UL>
 *
 * <P>
 * @example
 * This example shows the basic functionality
 * of the CFCOLLECTION tag (create, repair, optimize, delete).
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;CFCOLLECTION&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFCOLLECTION&lt;/h3&gt;
 *
 * &lt;!--- see if a collection name has been specificied ... ---&gt;
 * &lt;CFIF IsDefined("form.CollectionName") AND
 * IsDefined("form.CollectionAction")&gt;
 *     &lt;CFIF form.CollectionName is not ""&gt;
 *         &lt;CFOUTPUT&gt;
 *         &lt;CFSWITCH EXPRESSION=#FORM.CollectionAction#&gt;
 *           &lt;CFCASE VALUE="Create"&gt;
 *             &lt;CFCOLLECTION ACTION="CREATE"
 *              COLLECTION="#FORM.CollectionName#"
 *              PATH="C:\CFUSION\Verity\Collections\"&gt;
 *             &lt;H3&gt;Collection created.&lt;/H3&gt;
 *           &lt;/CFCASE&gt;
 *           &lt;CFCASE VALUE="Repair"&gt;
 *             &lt;CFCOLLECTION ACTION="REPAIR"
 *              COLLECTION="#FORM.CollectionName#"&gt;
 *             &lt;H3&gt;Collection repaired.&lt;/H3&gt;
 *           &lt;/CFCASE&gt;
 *           &lt;CFCASE VALUE="Optimize"&gt;
 *             &lt;CFCOLLECTION ACTION="OPTIMIZE"
 *              COLLECTION="#FORM.CollectionName#"&gt;
 *             &lt;H3&gt;Collection optimized.&lt;/H3&gt;
 *           &lt;/CFCASE&gt;
 *           &lt;CFCASE VALUE="Delete"&gt;
 *             &lt;CFCOLLECTION ACTION="DELETE"
 *              COLLECTION="#FORM.CollectionName#"&gt;
 *            &lt;H3&gt;Collection deleted.&lt;/H3&gt;
 *           &lt;/CFCASE&gt;
 *         &lt;/CFSWITCH&gt;
 * ...
 * </PRE>
 */
tag CFCOLLECTION (empty) {
   /**
    * Required. Specifies the action to perform:
    * <UL>
    * <LI>CREATE
    * <LI>REPAIR
    * <LI>DELETE
    * <LI>OPTIMIZE
    * <LI>MAP
    * </UL>
    *
    * <P><B>What happens?</B>
    * <P>
    * CREATE CFCOLLECTION creates a directory for the use of Verity.  The
    * directory path is composed of the directory path specified in the PATH
    * attribute with the name specified in the COLLECTION attribute appended to
    * it.  Thus, the full directory path is "path_name\collection_name\." For
    * example, if the path name is "C:\Col\," and the collection name is
    * myCollection," the full directory path is "C:\Col\myCollection\.
    * <P>
    * MAP The MAP action provides a name with which ColdFusion can reference an
    * existing collection.  This name is specified with the COLLECTION
    * attribute.  It is an alias for the collection, which can be used in
    * CFINDEX, and to re-instate a collection after you have re-installed
    * ColdFusion.  The directory path specified with the PATH attribute is the
    * full path name of the Verity directory.  Therefore, to reference the
    * directory created in the previous example, specify "C:\Col\myCollection\.
    */
   attr action {
      /**
       * Creates a new collection using the specified path and optionally
       * specified language.
       */
      Create
      /**
       * Fixes data corruption in the collection.
       */
      Repair
      /**
       * Destroys the collection.
       */
      Delete
      /**
       * Purges and reorganizes data for efficiency.
       */
      Optimize
      /**
       * Assigns an alias to an existing Verity collection.
       */
      Map
   }
   /**
    * Required.  Specifies a collection name or an alias if the ACTION is MAP.
    */
   attr collection;
   /**
    * Required for CREATE and MAP.  Specifies a path to the Verity collection.
    * The effect of the PATH attribute depends on the ACTION that you specify.
    */
   attr path;
   /**
    * Optional for CREATE.  To use the LANGUAGE attribute you must have the
    * ColdFusion International Search Pack installed.  The default language
    * is English.
    */
   attr language {
      English
      German
      Finnish
      French
      Danish
      Dutch
      Italian
      Norwegian
      Portuguese
      Spanish
      Swedish
   }

}
/**
 * Defines the MIME type returned by the current page.  Optionally, allows
 * you to specify the name of a file to be returned with the page.
 * <P>
 * The ColdFusion Server Basic security settings may prevent CFCONTENT from
 * executing.  These settings are managed using the ColdFusion Administrator
 * Basic Security page.  In order for CFCONTENT to execute, it needs to be
 * enabled on the Basic Security page.  Please refer to Administering
 * ColdFusion Serverfor more information about securing ColdFusion tags.
 *
 * <PRE>
 * &lt;CFCONTENT TYPE="file_type"
 *     DELETEFILE="Yes/No"
 *     FILE="filename"
 *     RESET="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFCONTENT to return the
 * contents of the CF Documentation page dynamically to the browser.
 * You may need to change the path and/or drive letter.
 * (graphics will not display).
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFCONTENT Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 *
 * &lt;H3&gt;CFCONTENT Example&lt;/H3&gt;
 *
 * &lt;!--- Files may be set to delete after downloading,
 * allowing for the posting of changing content. ---&gt;
 * &lt;CFCONTENT TYPE="text/html"
 *    FILE="c:\inetpub\wwwroot\cfdocs\main.htm" DELETEFILE="No"&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 *
 * &lt;!--- This example shows how the RESET attribute changes textual
 *         output. ---&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFCONTENT Example 2
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFCONTENT Example 2&lt;/H3&gt;
 *
 * &lt;P&gt;This example shows how the RESET attribute changes the output for
 * text.&lt;/P&gt;
 * &lt;P&gt;RESET = "Yes ": 123&lt;CFCONTENT type="text/html" reset= "Yes "&gt;456&lt;/P&gt;
 * &lt;P&gt;This example shows how the RESET attribute changes the output for
 * text.&lt;/P&gt;
 * &lt;P&gt;RESET = "No ": 123&lt;CFCONTENT type="text/html" reset= "No "&gt;456&lt;/P&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFCONTENT (empty) : MIME_TYPE {
   /**
    * Optional.  Yes or No.  Yes deletes the file after the download operation.
    * Defaults to No.  This attribute only applies if you are specifying a file
    * with the FILE attribute.
    */
   attr deletefile {
      yes no
   }
   /**
    * Optional. Denotes the name of the file being retrieved.
    */
   attr file;
   /**
    * Optional.  Yes or No.  Yes discards any output that precedes the call to
    * CFCONTENT.  No preserves the output that precedes the call.  Defaults to
    * Yes.  The RESET and FILE attributes are mutually exclusive.  If you
    * specify a file, the RESET attribute has no effect.  See Note.
    * <P>
    * You should consider setting RESET to "No " if you are calling CFCONTENT
    * from a custom tag and do not want the tag to have the side effect of
    * discarding the current page whenever it is called from another application
    * or custom tag.
    */
   attr reset {
      yes no
   }

}
/**
 * Defines cookie variables, including expiration and security options.
 *
 * <PRE>
 * &lt;CFCOOKIE NAME="cookie_name"
 *     VALUE="text"
 *     EXPIRES="period"
 *     SECURE="Yes/No"
 *     PATH="urls"
 *     DOMAIN=".domain"&gt;
 * </PRE>
 *
 * <P>
 * Cookies written with CFCOOKIE do not get written to the cookies.txt file
 * until the browser session ends.  Until the browser is closed, the cookie
 * resides in memory.  If you do not have an EXPIRES attribute in a CFCOOKIE,
 * the cookie set exists only as long as the client browser is open.  When
 * the browser is closed, the cookie expires.  It is never written to the
 * cookies.txt file.
 *
 * <P>
 * @example
 * This example shows how to set a CFCOOKIE variable,
 * and also how to delete that variable.
 * <PRE>
 * &lt;!--- First select a group of users who have entered
 * comments into the sample database ---&gt;
 * &lt;CFQUERY NAME="GetAolUser" DATASOURCE="cfsnippets"&gt;
 * SELECT EMail, FromUser, Subject, Posted
 * FROM   Comments
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFCOOKIE Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFCOOKIE Example&lt;/H3&gt;
 *
 * &lt;!--- if the URL variable delcookie exists,
 * set the cookie's expiration date to NOW ---&gt;
 * &lt;CFIF IsDefined("url.delcookie") is True&gt;
 *     &lt;CFCOOKIE NAME="TimeVisited"
 *     VALUE="#Now()#"
 *     EXPIRES="NOW"&gt;
 * &lt;CFELSE&gt;
 * &lt;!--- Otherwise, loop through the list of visitors,
 * and stop when you match the string aol.com in the
 * visitor's email address ---&gt;
 *
 * &lt;CFLOOP QUERY="GetAOLUser"&gt;
 *     &lt;CFIF FindNoCase("aol.com", Email, 1) is not 0&gt;
 *         &lt;CFCOOKIE NAME="LastAOLVisitor"
 *         VALUE="#Email#"
 *         EXPIRES="NOW" &gt;
 *
 *     &lt;/CFIF&gt;
 * &lt;/CFLOOP&gt;
 *
 * &lt;!--- If the timeVisited cookie is not set,
 * set a value ---&gt;
 *
 *     &lt;CFIF IsDefined("Cookie.TimeVisited") is False&gt;
 *         &lt;CFCOOKIE NAME="TimeVisited"
 *         VALUE="#Now()#"
 *         EXPIRES="10"&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFIF&gt;
 * &lt;!--- show the most recent cookie set ---&gt;
 * &lt;CFIF IsDefined("Cookie.LastAOLVisitor") is "True"&gt;
 *     &lt;P&gt;The last AOL visitor to view this site was
 *     &lt;CFOUTPUT&gt;#Cookie.LastAOLVisitor#&lt;/CFOUTPUT&gt;, on
 *     &lt;CFOUTPUT&gt;#DateFormat(COOKIE.TimeVisited)#&lt;/CFOUTPUT&gt;
 * &lt;!--- use this link to reset the cookies ---&gt;
 * &lt;P&gt;&lt;a href="cfcookie.cfm?delcookie=yes"&gt;Hide my tracks&lt;/A&gt;
 *
 * &lt;CFELSE&gt;
 *     &lt;P&gt;No AOL Visitors have viewed the site lately.
 * &lt;/CFIF&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFCOOKIE (empty) {
   /**
    * Required. The name of the cookie variable.
    */
   attr name;
   /**
    * Optional. The value assigned to the cookie variable.
    */
   attr value;
   /**
    * Optional.  Schedules the expiration of a cookie variable.  Can be
    * specified as a date (as in, 10/09/97), number of days (as in, 10, 100),
    * NOW, or NEVER.  Using NOW effectively deletes the cookie from the client's
    * browser.
    */
   attr expires;
   /**
    * Optional.  Indicates the variable has to transmit securely.  If the
    * browser does not support Secure Socket Layer (SSL) security, the cookie is
    * not sent.
    */
   attr secure {
      yes no
   }
   /**
    * Optional.  Specifies the subset of URLs within the specified domain to
    * which this cookie applies:
    * <PRE>
    * PATH="/services/login"
    * </PRE>
    * Separate multiple entries with a semicolon ( ; ).
    */
   attr path;
   /**
    * Specifies the domain for which the cookie is valid and to which the cookie
    * content can be sent.  An explicitly specified domain must always start
    * with a dot.  This can be a subdomain, in which case the valid domains will
    * be any domain names ending in this string.
    * <P>
    * For domain names ending in country codes (such as .jp, .us), the subdomain
    * specification must contain at least three periods, for example,
    * mongo.stateu.us.  In the case of special top level domains, only two
    * periods are needed, as in .allaire.com
    * <P>
    * When specifying a PATH value, you must include a valid DOMAIN
    * <P>
    * Separate multiple entries with a semicolon ( ; )
    */
   attr domain;

}
/**
 * @see CFSWITCH
 */
tag CFDEFAULTCASE {
}

/**
 * Use the CFDIRECTORY tag to handle all interactions with directories.
 * <P>
 * The ColdFusion Server Basic security settings may prevent CFDIRECTORY from
 * executing.  These settings are managed using the ColdFusion Administrator
 * Basic Security page.  In order for CFDIRECTORY to execute, it needs to be
 * enabled on the Basic Security page.
 * <P>
 * If you write ColdFusion applications designed to run on a server that is
 * used by multiple customers, you need to consider the security of the files
 * and directories that could be uploaded or otherwise manipulated by
 * CFDIRECTORY.  Please refer to Administering ColdFusion Server for more
 * information about securing ColdFusion tags.
 *
 * <PRE>
 * &lt;CFDIRECTORY ACTION="directory action"
 *     DIRECTORY="directory name"
 *     NAME="query name"
 *     FILTER="list filter"
 *     MODE="permission"
 *     SORT="sort specification"
 *     NEWDIRECTORY="new directory name"&gt;
 * </PRE>
 *
 * <P>
 * You can use the following result columns in standard CFML expressions,
 * preceding the result column name with the name of the query:
 * <PRE>
 * #mydirectory.Name#
 * #mydirectory.Size#
 * #mydirectory.Type#
 * #mydirectory.DateLastModified#
 * #mydirectory.Attributes#
 * #mydirectory.Mode#
 * </PRE>
 *
 * @example
 * This example shows the use of CFDIRECTORY to display the contents of the
 * snippets directory in CFDOCS.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFDIRECTORY Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFDIRECTORY Example&lt;/H3&gt;
 *
 * &lt;!--- use CFDIRECTORY to give the contents of the
 * snippets directory, order by name and size
 * (you may need to modify this path) ---&gt;
 * &lt;CFDIRECTORY DIRECTORY="c:\inetpub\wwwroot\cfdocs\snippets"
 *     NAME="myDirectory"
 *     SORT="name ASC, size DESC"&gt;
 * &lt;!--- Output the contents of the CFDIRECTORY as a CFTABLE ---&gt;
 * &lt;CFTABLE QUERY="myDirectory"&gt;
 *     &lt;CFCOL HEADER="NAME:"
 *             TEXT="#Name#"&gt;
 *     &lt;CFCOL HEADER="SIZE:"
 *             TEXT="#Size#"&gt;
 * &lt;/CFTABLE&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFDIRECTORY (empty) {
   /**
    * Optional.  Defines the action to be taken with directory(ies) specified in
    * DIRECTORY.  Valid entries are:
    * <UL>
    * <LI>List (default)
    * <LI>Create
    * <LI>Delete
    * <LI>Rename.
    * </UL>
    * <P>
    * When using the ACTION=LIST, CFDIRECTORY returns five result columns you
    * can reference in your CFOUTPUT:
    * <UL>
    * <LI> Name - Directory entry name.
    * <LI> Size - Size of directory entry.
    * <LI> Type - File type: File or Dir for File or Directory.
    * <LI> DateLastModified - Date an entry was last modified.
    * <LI> Attributes - File attributes, if applicable.
    * <LI> Mode - (Solaris and HP-UX only) The octal value representing the
    *      permissions setting for the specified directory. For information about
    *      octal values, refer to the UNIX man pages for the chmod shell command.
    * </UL>
    */
   attr action {
      List // Default
      Create
      Delete
      Rename
   }
   /**
    * Required for all ACTIONs.  The name of the directory you want the action
    * to be performed against.
    */
   attr directory;
   /**
    * Required for ACTION="List".  Ignored for all other actions.  Name of
    * output query for directory listing.
    */
   attr name;
   /**
    * Optional for ACTION="List".  Ignored for all other actions.  File
    * extension filter to be applied to returned names, for example: *.cfm.
    * Only one mask filter can be applied at a time.
    */
   attr filter;
   /**
    * Optional.  Used with ACTION="Create" to define the permissions for a
    * directory on Solaris or HP-UX.  Ignored in Windows.  Valid entries
    * correspond to the octal values (not symbolic) of the UNIX chmod command.
    * Permissions are assigned for owner, group, and other, respectively.  For
    * example:
    * <PRE>
    * MODE=644
    * </PRE>
    * Assigns all, owner read/write permission, group and other read/write
    * permissions.
    * <PRE>
    * MODE=666
    * </PRE>
    * Assigns read/write permissions for owner, group, and other.
    * <PRE>
    * MODE=777
    * </PRE>
    * Assigns read, write, and execute permissions for all.
    */
   attr mode;
   /**
    * Optional for ACTION="List".  Ignored for all other actions.  List of query
    * columns to sort directory listing by.  Any combination of columns from
    * query output can be specified in comma separated list.  ASC or DESC can be
    * specified as qualifiers for column names.  ASC is the default.  For
    * example:
    * <PRE>
    * SORT="dirname ASC, filename2 DESC, size, datelastmodified"
    * </PRE>
    */
   attr sort;
   /**
    * Required for ACTION="Rename".  Ignored for all other actions.  The new
    * name of the directory specified in the DIRECTORY attribute.
    */
   attr newdirectory;

}
/**
 * @see CFIF
 */
tag CFELSE (empty) {
}
/**
 * @see CFIF
 */
tag CFELSEIF (empty) {
}
/**
 * Provides the ability to display customized HTML pages when errors occur.
 * This allows you to maintain a consistent look and feel within your
 * application even when errors occur.
 *
 * <PRE>
 * &lt;CFERROR
 *     TYPE="Request" or "Validation" or "Monitor" or "Exception"
 *     TEMPLATE="template_path"
 *     MAILTO="email_address"
 *     EXCEPTION="exception_type"&gt;
 * </PRE>
 *
 * The CFERROR tag is normally used to customize the error messages for all
 * the pages in an application.  As a result, you generally embed it in the
 * Application.cfm file.  For more information about the Application.cfm
 * file, refer to Developing Web Applications with ColdFusion.
 * <P>
 * To help ensure that error pages display successfully, pages you specify
 * with CFERROR should not be encoded with the cfencode utility.
 *
 * <P><B>CFERROR Error Variables</B>
 * <P>
 * The exception-handling template specified in the TEMPLATE attribute of the
 * CFERROR tag may contain one or more error variables, which will be
 * substituted by ColdFusion when an error is displayed.
 *
 * <P><B>Error Variables for Request, Exception, and Monitor Types</B>
 * <P>
 * The following error variables are available when CFERROR specifies
 * TYPE="Request", TYPE="Exception" or TYPE="Monitor": Variables for Request,
 * Exception, and Monitor Types Error Variable Description
 *
 * <DL>
 * <DT>Error.Diagnostics
 * <DD>Detailed error diagnostics from ColdFusion Server.
 * <DT>Error.MailTo
 * <DD>Email address of administrator who should be notified (corresponds to the value set in the MAILTO attribute of CFERROR).
 * <DT>Error.DateTime
 * <DD>Date and time when the error occurred.
 * <DT>Error.Browser
 * <DD>Browser that was running when the error occurred.
 * <DT>Error.GeneratedContent
 * <DD>The failed request's generated content .
 * <DT>Error.RemoteAddress
 * <DD>IP address of the remote client.
 * <DT>Error.HTTPReferer
 * <DD>Page from which the client accessed the link to the page where the error occurred.
 * <DT>Error.Template
 * <DD>Page being executed when the error occurred.
 * <DT>Error.QueryString
 * <DD>URL query string of the client's request.
 * </DL>
 *
 * <P>
 * <B>Note:</B> If you have specified TYPE="Exception" or TYPE="Monitor", you can
 * substitute the prefix CFERROR for Error if you prefer this form; for
 * example, CFERROR.Diagnostics, CFERROR.Mailto or CFERROR.DateTime.
 *
 * <P><B>Error pages where TYPE="Validation"</B>
 * <P>
 * Error variables available when CFERROR uses TYPE="Validation" are as
 * follows: Custom Error Pages where TYPE="Validation"
 *
 * <DL>
 * <DT>Error.ValidationHeader
 * <DD>Text for header of validation message.
 * <DT>Error.InvalidFields
 * <DD>Unordered list of validation errors that occurred.
 * <DT>Error.ValidationFooter
 * <DD>Text for footer of validation message.
 * </DL>
 *
 * <P>
 * @example
 * This example shows the use of CFERROR.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFERROR Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFERROR Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFERROR provides the ability to display customized
 * HTML pages when errors occur. This allows you to
 * maintain a consistent look and feel within your
 * application even when errors occur. Note that no CFML
 * can be displayed in the resulting templates except
 * for the specialized error variables.
 * &lt;P&gt;CFTRY/CFCATCH provides a more interactive way to
 * handle your CF errors within a CF template than CFERROR,
 * but CFERROR is still a good safeguard against general
 * errors.
 * &lt;P&gt;You can also use CFERROR within the Application.cfm
 * to specify error handling responsibilities for an entire
 * application.
 *
 * &lt;!--- Example of CFERROR call within a template ---&gt;
 * &lt;CFERROR TYPE="REQUEST"
 *      TEMPLATE="request_err.cfm"
 *      MAILTO="admin@mywebsite.com"&gt;
 *
 * &lt;!--- Example of the template to handle this error ---&gt;
 * &lt;!---
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;We're sorry -- An Error Occurred&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;UL&gt;
 * &lt;CFOUTPUT&gt;
 *     &lt;LI&gt;&lt;B&gt;Your Location:&lt;/B&gt; #Error.RemoteAddress#
 *     &lt;LI&gt;&lt;B&gt;Your Browser:&lt;/B&gt; #Error.Browser#
 *     &lt;LI&gt;&lt;B&gt;Date and Time the Error Occurred:&lt;/B&gt; #Error.DateTime#
 *     &lt;LI&gt;&lt;B&gt;Page You Came From:&lt;/B&gt; #Error.HTTPReferer#
 *     &lt;LI&gt;&lt;B&gt;Message Content&lt;/B&gt;: &lt;BR&gt;&lt;HR width=50%&gt;
 *        &lt;P&gt;#Error.Diagnostics#&lt;HR width=50%&gt;&lt;P&gt;
 *     &lt;LI&gt;&lt;B&gt;Please send questions to:&lt;/B&gt;
 *        &lt;a href="mailto:#Error.MailTo#"&gt;#Error.MailTo#&lt;/A&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/UL&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;        ---&gt;
 * </PRE>
 */
tag CFERROR (empty) {
   /**
    * Required.  The type of error that this custom error page is designed to
    * handle:
    * <UL>
    * <LI>Specify Exception to handle exceptions.
    * <LI>Specify Validation to handle data input validation errors that occur when
    *     submitting a form.  A validation error handler is only useful if placed
    *     inside the Application.cfm file.
    * <LI>Specify Monitor to set up an exception monitor.
    * <LI>Specify Request to handle errors that occur during the processing of a
    *     page.  Request is the default.
    * </UL>
    * <P>
    * See the table under CFERROR Error Variables for information about the
    * variables and other constructs available from the templates used to handle
    * each type of error.
    */
   attr type {
      request validation monitor exception
   }
   /**
    * Required.  The relative path to the custom error handling page.  The
    * following table describes the template to use for each type of error.
    * Types and Their Corresponding Custom Error Pages Type Custom Error Page
    * Exception
    * <P>
    * An exception-handling template that is dynamically invoked by the CFML
    * language processor when it detects an unhandled exception condition.
    * Exception-handling templates may be specified as part of an application,
    * via the &lt;CFERROR TYPE="Exception"&gt; tag, or may be set via the
    * ColdFusion Administrator.  An exception-handling template can use the full
    * range of CFML tags, making it significantly more powerful than &lt;CFERROR
    * TYPE="Request"&gt;.  This template also has access to the error variables
    * in the table under CFERROR Error Variables.
    * <P>
    * <B>Request</B>
    * <P>
    * This template can include only the error variables described in the table
    * under CFERROR Error Variables and cannot include CFML tags.  It is useful
    * as a backup error handler for sites with high user interface requirements.
    * <P>
    * <B>Validation</B>
    * <P>
    * A validation error handler.  It handles data input validation errors that
    * occur when submitting a form.  It is useful only if placed inside the
    * Application.cfm file.
    * <P>
    * <B>Monitor</B>
    * <P>
    * An exception-monitoring template is dynamically invoked by the CFML
    * language processor when it first detects an exception condition, before it
    * searches for &lt;CFTRY&gt;/&lt;CFCATCH&gt; or &lt;CFERROR&gt; handlers for
    * the exception.  Exception-monitoring templates are useful for monitoring
    * and debugging exception handling within complex applications.
    */
   attr template;
   /**
    * Optional.  The email address of the administrator who should be notified
    * of the error.  This value is available to your custom error page using the
    * MailTo property of the error object, such as #Error.MailTo#.
    */
   attr mailto;
   /**
    * Required if the type is specified as Exception or Monitor.  The type of
    * exception.
    */
   attr exception;
}
/**
 * Enables ColdFusion developers to execute any process on the server machine.
 *
 * <PRE>
 * &lt;CFEXECUTE
 *     NAME=" ApplicationName "
 *     ARGUMENTS="CommandLine Arguments"
 *     OUTPUTFILE="Output file name"
 *     TIMEOUT="Timeout interval in seconds"&gt;
 * </PRE>
 *
 * <P>
 * CFEXECUTE is available on Windows NT 4.0 and UNIX platforms.  Do not put
 * any other ColdFusion tags or functions between the start and the end tags
 * of CFEXECUTE.  Also, CFEXECUTE tags cannot be nested.
 * <P>
 * CFEXECUTE throws the following exceptions:
 * <UL>
 * <LI>If the application name is not found, an Application File Not Found
 *     exception will be thrown.
 * <LI>If the output file cannot be opened, an Output File Cannot be opened
 *     will be thrown.
 * <LI>If the effective user of the ColdFusion executing thread does not have
 *     permissions to execute the process, a security exception will be thrown.
 * <LI>The time out values must be between 0 and some high number (to be
 *     determined).
 * </UL>
 *
 * <P>
 * @example
 * This example illustrates use of the CFEXECUTE tag.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFEXECUTE&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFEXECUTE&lt;/H3&gt;
 * &lt;P&gt;
 * This example executes the Windows NT version of the netstat network
 * monitoring program, and places its output in a file.
 *
 * &lt;CFEXECUTE NAME="C:\WinNT\System32\netstat.exe"
 *     ARGUMENTS="-e"
 *     OUTPUTFILE="C:\Temp\output.txt"
 *     TIMEOUT="1"&gt;
 *
 * &lt;/CFEXECUTE&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFEXECUTE (empty) {
   /**
    * Required.  The full path name of the application that is to be executed.
    * <P>
    * <B>Note:</B> On Windows systems, you must specify the extension, for example,
    * exe, as part of the application's name
    */
   attr name;
   /**
    * Optional.  Any command-line arguments that should be passed to the
    * program.
    * <P>
    * If ARGUMENTS is specified as a string, it is processed as follows:
    * <P>
    * On Windows systems, the entire string is passed to the Windows process
    * control subsystem for parsing.  On UNIX, the string is tokenized into an
    * array of arguments.  The default token separator is a space; arguments
    * with embedded spaces may be delimited by double quotes.
    * <P>
    * If ARGUMENTS is passed as an array, it is processed as follows:
    * <P>
    * On Windows systems, the array elements will be concatenated into a string
    * of tokens, separated by spaces.  This string is then passed to the Windows
    * process control subsystem as above.  On UNIX, the elements of the
    * ARGUMENTS array is copied into a corresponding array of exec() arguments.
    */
   attr arguments;
   /**
    * Optional.  The file where the output of the program is to be directed.  If
    * this is not specified, the output appears on the page from which it was
    * called.
    */
   attr outputfile;
   /**
    * Optional.  Indicates how long in seconds the ColdFusion executing thread
    * will wait for the spawned process.  Indicating a timeout of 0 is
    * equivalent to the non-blocking mode of executing.  A very high timeout
    * value is equivalent to a blocking mode of execution.  The default is 0;
    * therefore, the ColdFusion thread spawns a process and immediately returns
    * without waiting for the process to terminate.
    * <P>
    * If no output file is specified, and the timeout value is zero, then the
    * program's output will be directed to the bit bucket.
    */
   attr timeout;

}
/**
 * CFEXIT can be used to:
 * <UL>
 * <LI>Abort the processing of the currently executing CFML custom tag.
 * <LI>Exit the template within the currently executing CFML custom tag.
 * <LI>Reexecute a section of code within the currently executing CFML custom tag.
 * </UL>
 *
 * <PRE>
 * &lt;CFEXIT METHOD="method"&gt;
 * </PRE>
 *
 * <P>
 * If a CFEXIT tag is encountered outside the context of a custom tag, for
 * example in the base page or an included page, the tag acts exactly like
 * CFABORT.  CFEXIT can help simplify error checking and validation logic in
 * custom tags.
 * <P>
 * CFEXIT behaves differently depending on location and execution mode:
 *
 * <PRE>
 *    <B>METHOD attribute   Location of CFEXIT call   Behavior</B>
 *    ExitTag            Base template             Terminate processing
 *                       Execution mode = Start    Continue after end tag
 *                       Execution mode = End      Continue after end tag
 *    ExitTemplate       Base template             Terminate processing
 *                       Execution mode = Start    Continue from first child in body
 *                       Execution mode = End      Continue after end tag
 *    Loop               Base template             Error
 *                       Execution mode = Start    Error
 *                       Execution mode = End
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFEXIT, and
 * is a read-only example.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFEXIT Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFEXIT Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFEXIT can be used to abort the processing of the
 * currently executing CFML custom tag.  Execution will resume
 * immediately following the invocation of the custom tag in the
 * page that called the tag.
 * &lt;H3&gt;Usage of CFEXIT&lt;/H3&gt;
 * &lt;P&gt;CFEXIT is used primarily to perform a conditional stop
 * of processing inside of a custom tag.  CFEXIT returns control
 * to the page that called that custom tag, or in the case of
 * a tag called by another tag, to the calling tag.
 *
 * &lt;!--- CFEXIT can be used inside a CFML custom tag, as
 * follows: ---&gt;
 * &lt;!--- Place this code (uncomment the appropriate
 * sections) inside the CFUSION/customtags directory ---&gt;
 *
 * &lt;!--- MyCustomTag.cfm ---&gt;
 * &lt;!--- This simple custom tag checks for the existence
 * of myValue1 and myValue2.  If they are both defined,
 * the tag adds them and returns the result to the calling
 * page in the variable "result".  If either or both of the
 * expected attribute variables is not present, an error message
 * is generated, and CFEXIT returns control to the
 * calling page.  ---&gt;
 *
 * &lt;!--- &lt;CFIF NOT IsDefined("attributes.myValue2")&gt;
 *             &lt;CFSET caller.result = "Value2 is not defined"&gt;
 *             &lt;CFEXIT METHOD="ExitTag"&gt;
 *       &lt;CFELSEIF NOT IsDefined("attributes.myValue1")&gt;
 *             &lt;CFSET caller.result = "Value1 is not defined"&gt;
 *             &lt;CFEXIT METHOD="ExitTag"&gt;
 *       &lt;CFELSE&gt;
 *               &lt;CFSET value1 = attributes.myValue1&gt;
 *               &lt;CFSET value2 = attributes.myValue2&gt;
 *             &lt;CFSET caller.result = value1 + value2&gt;
 *       &lt;/CFIF&gt; ---&gt;
 * &lt;!--- End MyCustomTag.cfm ---&gt;
 *
 * &lt;!--- And place this code inside your page ---&gt;
 *
 * &lt;!--- &lt;P&gt;The call to the custom tag, and then the result:
 * &lt;CF_myCustomTag
 *         myvalue2 = 4&gt;
 * &lt;CFOUTPUT&gt;#result#&lt;/cFOUTPUT&gt;  ---&gt;
 * &lt;P&gt;If CFEXIT is used outside of a custom tag, it functions
 * like a CFABORT.  For example, the text after this message
 * will not be processed:
 * &lt;CFEXIT&gt;
 * &lt;P&gt;This text will not be executed due to the existence of
 * the CFEXIT tag above it.
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFEXIT (empty) {
   /**
    * Optional. Specifies one of the following:
    * <UL>
    * <LI>ExitTag (default)
    * <LI>ExitTemplate
    * <LI>Loop
    * </UL>
    */
   attr method {
      /**
       * Aborts processing of the currently executing CFML custom tag.
       */
      ExitTag
      /**
       * Exits the template of the currently executing CFML custom tag.
       */
      ExitTemplate
      /**
       * Reexecutes the body of the currently executing CFML custom tag.
       */
      Loop
   }

}
/**
 * Use the CFFILE tag to handle all interactions with files.  The attributes
 * you use with CFFILE depend on the value of the ACTION attribute.  For
 * example, if the ACTION is "Write, " ColdFusion expects the attributes
 * associated with writing a text file.  See the individual CFFILE topics
 * below for details about which attributes apply to which ACTIONs.
 * <P>
 * <B>Note:</B> The Basic Security settings may prevent CFFILE from executing.  These
 * settings are managed using the Basic Security page in the ColdFusion
 * Administrator.  In order for CFFILE to execute, it needs to be enabled on
 * the Basic Security page.
 * <P>
 * If you write ColdFusion applications designed to run on a server that is
 * used by multiple customers, you need to consider the security of the files
 * that could be uploaded or otherwise manipulated by CFFILE.  See
 * Administering ColdFusion Serverfor more information about securing
 * ColdFusion tags.
 * <P>
 * Depending on the value you assign to the ACTION attribute of CFFILE, there
 * are several additional attributes you can set.  This table shows which
 * attributes you can use with each CFFILE ACTION.  Attributes Used with
 * CFFILE ACTIONs
 *
 * <DL>
 * <DT>ACTION<DD>Attributes
 * <DT>CFFILE ACTION="Upload"
 * <DD><UL>
 *     <LI>ACCEPT
 *     <LI>DESTINATION
 *     <LI>FILEFIELD
 *     <LI>NAMECONFLICT
 *     <LI>MODE
 *     <LI>ATTRIBUTES
 *     </UL>
 * <DT>CFFILE ACTION="Move"
 * <DD><UL>
 *     <LI>SOURCE
 *     <LI>DESTINATION
 *     <LI>ATTRIBUTES
 *     </UL>
 * <DT>CFFILE ACTION="Rename"
 * <DD><UL>
 *     <LI>SOURCE
 *     <LI>DESTINATION
 *     <LI>ATTRIBUTES
 *     </UL>
 * <DT>CFFILE ACTION="Copy"
 * <DD><UL>
 *     <LI>SOURCE
 *     <LI>DESTINATION
 *     <LI>ATTRIBUTES
 *     </UL>
 * <DT>CFFILE ACTION="Delete"
 * <DD><UL>
 *     <LI>FILE
 *     </UL>
 * <DT>CFFILE ACTION="Read"
 * <DD><UL>
 *     <LI>FILE
 *     <LI>VARIABLE
 *     </UL>
 * <DT>CFFILE ACTION="ReadBinary"
 * <DD><UL>
 *     <LI>FILE
 *     <LI>VARIABLE
 *     </UL>
 * <DT>CFFILE ACTION="Write"
 * <DD><UL>
 *     <LI>OUTPUT
 *     <LI>FILE
 *     <LI>MODE
 *     <LI>ADDNEWLINE
 *     <LI>ATTRIBUTES
 *     </UL>
 * <DT>CFFILE ACTION="Append"
 * <DD><UL>
 *     <LI>OUTPUT
 *     <LI>FILE
 *     <LI>MODE
 *     <LI>ADDNEWLINE
 *     <LI>ATTRIBUTES
 *     </UL>
 *
 */
tag CFFILE (empty) : MIME_TYPE {
   /**
    */
   attr action {
      upload move rename copy delete read readbinary write append
   }
   /**
    */
   attr filefield;
   /**
    */
   attr nameconflict;
   /**
    */
   attr source;
   /**
    */
   attr destination;
   /**
    */
   attr mode;
   /**
    */
   attr attributes;
   /**
    */
   attr file;
   /**
    */
   attr variable;
   /**
    */
   attr output;
   /**
    */
   attr addnewline {
      yes no
   }

}
/**
 * CFFORM allows you to build a form with CFML custom control tags that
 * provide much greater functionality than standard HTML form input elements.
 *
 * <PRE>
 * &lt;CFFORM NAME="name"
 *     ACTION="form_action"
 *     ENABLECAB="Yes/No"
 *     ONSUBMIT="javascript"
 *     TARGET="window_name"
 *     ENCTYPE="type"
 *     PASSTHROUGH="HTML_attributes"&gt;
 * ...
 * &lt;/CFFORM&gt;
 * </PRE>
 *
 * <P>
 * The following custom control tags are available:
 * <UL>
 * <LI>
 * CFINPUT -- Creates a form input element (radio button, text box, or
 * checkbox) and can validate form input.
 * <LI>
 * CFSELECT -- Creates a drop down listbox.
 * <LI>
 * CFSLIDER -- Creates a slider control.
 * <LI>
 * CFTEXTINPUT -- Creates a text input box.
 * <LI>
 * CFTREE -- Creates a tree control.
 * <LI>
 * CFGRID -- Creates a grid control for displaying tabular data in a
 * ColdFusion form.
 * <LI>
 * CFAPPLET -- Embeds a registered Java applet in a ColdFusion form.  Applets
 * are registered in the ColdFusion Administrator.
 * </UL>
 *
 * <P>
 * You can add standard and dynamic HTML FORM tag attributes and their values
 * to the CFFORM tag by using the PASSTHROUGH attribute.  These attributes
 * and values are passed directly through ColdFusion to the browser in
 * creating a form.
 * <P>
 * If you specify a value in quotation marks, you must escape the quotation
 * marks by doubling them, for example,
 * <PRE>
 * PASSTHROUGH= "readonly= " "YES " " "
 * </PRE>
 * <P>
 * The ENABLECAB attribute is supported only for MS Internet Explorer clients
 * that have Authenticode 2.0 installed.  Authenticode 2.0 can be downloaded
 * from http://www.microsoft.com/ie/security/authent2.htm.
 * <P>
 * <B>Note:</B> These CAB files are digitally signed using VeriSign digital IDs to
 * ensure file security.
 *
 * <P><B>Incorporating HTML form tags</B>
 * <P>
 * CFFORM allows you to incorporate standard HTML in two ways:
 * <P>
 * You can add standard FORM tag attributes and their values to the CFFORM
 * tag.  These attributes and values are passed directly through ColdFusion
 * to the browser in creating a form.  For example, you can use FORM tag
 * attributes like TARGET to enhance your CFFORM features.  HTML tags that
 * can ordinarily be placed within an HTML FORM tag can also be placed
 * between &lt;CFFORM&gt; and &lt;/CFFORM&gt; tags.
 * <P>
 * For example, you use a standard HTML INPUT tag to create a submit button
 * in a CFFORM:
 *
 * <PRE>
 * &lt;CFFORM
 *     &lt;INPUT TYPE="Submit" VALUE=" Update... "&gt;
 * &lt;/CFFORM&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFINPUT controls in a CFFORM.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFFORM Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFFORM Example&lt;/H3&gt;
 *
 * &lt;CFIF IsDefined("form.oncethrough") is "Yes"&gt;
 *     &lt;CFIF IsDefined("form.testVal1") is True&gt;
 *     &lt;H3&gt;Results of Radio Button Test&lt;/H3&gt;
 *     &lt;CFIF form.testVal1 is "Yes"&gt;Your radio button answer was yes&lt;/CFIF&gt;
 *     &lt;CFIF form.testVal1 is "No"&gt;Your radio button answer was no&lt;/CFIF&gt;
 *     &lt;/CFIF&gt;
 *     &lt;CFIF IsDefined("form.chkTest2") is True&gt;
 *     &lt;H3&gt;Results of Checkbox Test&lt;/H3&gt;
 *         Your checkbox answer was yes
 *     &lt;CFELSE&gt;
 *         &lt;H3&gt;Results of Checkbox Test&lt;/H3&gt;
 *         Your checkbox answer was no
 *     &lt;/CFIF&gt;
 *     &lt;CFIF IsDefined("form.textSample") is True
 *      AND form.textSample is not ""&gt;
 *     &lt;H3&gt;Results of Credit Card Input&lt;/H3&gt;
 *         Your credit card number, &lt;CFOUTPUT&gt;#form.textSample#&lt;/CFOUTPUT&gt;,
 *         was valid under the MOD 10 algorithm.
 *     &lt;/CFIF&gt;
 *     &lt;CFIF IsDefined("form.sampleSlider") is "True"&gt;
 *     &lt;H3&gt;You gave this page a rating of &lt;CFOUTPUT&gt;#form.sampleSlider#
 *       &lt;/CFOUTPUT&gt;&lt;/H3&gt;
 *     &lt;/CFIF&gt;
 *     &lt;hr noshade&gt;
 * &lt;/CFIF&gt;
 * &lt;!--- begin by calling the cfform tag ---&gt;
 * &lt;CFFORM ACTION="cfform.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;TABLE&gt;
 * &lt;TR&gt;
 *     &lt;TD&gt;
 *     &lt;H4&gt;This example displays the radio button input type
 *     for CFINPUT.&lt;/H4&gt;
 *     Yes &lt;CFINPUT TYPE="Radio" NAME="TestVal1" VALUE="Yes" CHECKED="yes"&gt;
 *     No &lt;CFINPUT TYPE="Radio" NAME="TestVal1" VALUE="No"&gt;
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 *
 * &lt;TR&gt;
 *     &lt;TD&gt;
 *     &lt;H4&gt;This example displays the checkbox input type for CFINPUT.&lt;/H4&gt;
 *     &lt;CFINPUT TYPE="Checkbox" NAME="ChkTest2" VALUE="Yes"&gt;
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 *
 * &lt;TR&gt;
 *     &lt;TD&gt;
 *     &lt;H4&gt;This example shows a client-side validation for
 *     CFINPUT text boxes.&lt;/H4&gt;
 *     &lt;BR&gt;(&lt;I&gt;This item is optional&lt;/I&gt;)&lt;BR&gt;
 *     Please enter a credit card number:
 *     &lt;CFINPUT TYPE="Text" NAME="TextSample" MESSAGE="Please enter a Credit
 *        Card Number" VALIDATE="creditcard" REQUIRED="No"&gt;
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 *
 * &lt;TR&gt;
 *     &lt;TD&gt;
 *     &lt;H4&gt;This example shows the use of the CFSLIDER tag.&lt;/H4&gt;
 *     &lt;P&gt;Rate your approval of this example from 1 to 10 by sliding the
 *       control.
 *     &lt;P&gt;1 &lt;CFSLIDER NAME="sampleSlider" LABEL="Sample Slider" RANGE="1,10"
 *            MESSAGE="Please enter a value from 1 to 10" SCALE="1" BOLD="No"
 *              ITALIC="No" REFRESHLABEL="No"&gt; 10
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 * &lt;/TABLE&gt;
 *
 * &lt;P&gt;&lt;INPUT TYPE="SUBMIT" NAME="SUBMIT" VALUE="show me the result"&gt;
 * &lt;INPUT TYPE="Hidden" NAME="oncethrough" VALUE="yes"&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFFORM : MIME_TYPE {
   /**
    * Optional. A name for the form you are creating.
    */
   attr name;
   /**
    * Required.  The name of the ColdFusion page that will be executed when the
    * form is submitted for processing.
    */
   attr action;
   /**
    * Optional.  Yes or No.  Allows users to download the Microsoft cabinet
    * cab) file(s) containing the Java classes used for Java applet-based
    * CFFORM controls.  If Yes, on opening the page, users are asked if they
    * want to download the CAB file.
    */
   attr enablecab {
      yes no
   }
   /**
    * Optional.  JavaScript function to execute after other input validation
    * returns.  Use this attribute to execute JavaScript for preprocessing data
    * before the form is submitted.  See Developing Web Applications with
    * ColdFusion for information on using JavaScript for form validation.
    */
   attr onsubmit;
   /**
    * Optional.  The name of the window or window frame where the form output
    * will be sent.
    */
   attr target;
   /**
    * Optional.  HTML attributes that are not explicitly supported by CFFORM.
    * If you specify an attribute and its value, the attribute and value are
    * passed to the HTML code that is generated for the CFINPUT tag.  See the
    * Usage section for more information about specifying values.
    */
   attr passthrough;
   /**
    * Optional.  The MIME type used to encode data sent via the POST method.
    * The default value is application/x-www-form-urlencoded.  It is recommended
    * that you accept the default value.  This attribute is included for
    * compatibility with the HTML FORM tag.
    */
   attr enctype;
}
/**
 * CFFTP allows users to implement File Transfer Protocol operations.
 * <P>
 * <B>Note:</B> The CFFTP tag is for moving files between a ColdFusion server and an
 * FTP server.  CFFTP cannot move files between a ColdFusion server and a
 * browser (client).  Use CFFILE ACTION="UPLOAD" to transfer files from the
 * client to a ColdFusion server; use CFCONTENT to transfer files from a
 * ColdFusion server to the browser.
 * <P>
 * Note also that ColdFusion Server Basic security settings may prevent CFFTP
 * from executing.  These settings are managed using the ColdFusion
 * Administrator Basic Security page.  If you write ColdFusion applications
 * designed to run on a server that is used by multiple customers, you need
 * to consider the security of the files that the customer can move.  Please
 * refer to Administering ColdFusion Server for more information about
 * securing ColdFusion tags.
 *
 * <P><B>FFTP topics:</B>
 * <P>
 * Establishing a Connection with CFFTP File and Directory Operations with
 * CFFTP Accessing the Columns in a Query Object CFFTP.ReturnValue Variable
 * Connection Caching
 *
 * <P><B>Establishing a Connection with CFFTP</B>
 * <P>
 * Use the CONNECTION attribute of the CFFTP tag to establish a connection
 * with an FTP server.
 * <P>
 * If you use connection caching to an already active FTP connection, you
 * don't need to respecify the connection attributes:
 * <UL>
 * <LI> USERNAME
 * <LI> PASSWORD
 * <LI> SERVER
 * </UL>
 * <P>
 * <B>Note:</B> Changes to a cached connection, such as changing RETRYCOUNT or
 * TIMEOUT values, may require reestablishing the connection.
 *
 * <PRE>
 * &lt;CFFTP ACTION="action"
 *     USERNAME="name"
 *     PASSWORD="password"
 *     SERVER="server"
 *     TIMEOUT="timeout in seconds"
 *     PORT="port"
 *     CONNECTION="name"
 *     PROXYSERVER="proxyserver"
 *     RETRYCOUNT="number"
 *     STOPONERROR="Yes/No"
 *     PASSIVE="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This view-only example shows the use of CFFTP.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFFTP Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY&gt;
 *
 * &lt;H3&gt;CFFTP Example&lt;/H3&gt;
 * &lt;P&gt;CFFTP allows users to implement File Transfer Protocol
 * operations.  By default, CFFTP caches an open connection to
 * an FTP server.
 *
 * &lt;P&gt;CFFTP operations are usually of two types:
 * &lt;UL&gt;
 *     &lt;LI&gt;Establishing a connection
 *     &lt;LI&gt;Performing file and directory operations
 * &lt;/UL&gt;
 * &lt;P&gt;This view-only example opens and verifies a connection,
 * lists the files in a directory, and closes the connection.
 * &lt;!---
 * &lt;P&gt;Open a connection
 *
 * &lt;CFFTP ACTION="open"
 * USERNAME="anonymous"
 * CONNECTION="My_query"
 * PASSWORD="youremail@email.net"
 * SERVER="ftp.tucows.com"
 * STOPONERROR="Yes"&gt;
 *
 * &lt;P&gt;Did it succeed? &lt;CFOUTPUT&gt;#CFFTP.Succeeded#&lt;/CFOUTPUT&gt;
 * &lt;P&gt;List the files in a directory:
 * &lt;CFFTP ACTION="LISTDIR"
 *        STOPONERROR="Yes"
 *        NAME="ListFiles"
 *        DIRECTORY="lib"
 *        CONNECTION="my_query"&gt;
 * &lt;CFOUTPUT QUERY="ListFiles"&gt;
 *     #name#&lt;BR&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;P&gt;Close the connection:
 * &lt;CFFTP ACTION="close"
 * CONNECTION="My_query"
 * STOPONERROR="Yes"&gt;
 * &lt;P&gt;Did it succeed? &lt;CFOUTPUT&gt;#CFFTP.Succeeded#&lt;/CFOUTPUT&gt;
 * ---&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 *
 * <P><B>File and Directory Operations with CFFTP</B>
 *
 * Use this form of the CFFTP tag to perform file and directory operations
 * with CFFTP.
 *
 * If you use connection caching to an already active FTP connection, you
 * don't need to respecify the connection attributes:
 * <UL>
 * <LI> USERNAME
 * <LI> PASSWORD
 * <LI> SERVER
 *
 * <PRE>
 * &lt;CFFTP
 *     ACTION="action"
 *     USERNAME="name"
 *     PASSWORD="password"
 *     NAME="query_name"
 *     SERVER="server"
 *     ASCIIEXTENSIONLIST="extensions"
 *     TRANSFERMODE="mode"
 *     FAILIFEXISTS="Yes/No"
 *     DIRECTORY="directory name"
 *     LOCALFILE="filename"
 *     REMOTEFILE="filename"
 *     ITEM="directory or file"
 *     EXISTING="file or directory name"
 *     NEW="file or directory name"
 *     PROXYSERVER="proxyserver"
 *     PASSIVE="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * When ACTION="ListDir", the Attributes column returns either "Directory" or
 * "Normal." Other platform-specific values, such as "Hidden" and "System"
 * are no longer supported.
 * <P>
 * When ACTION="ListDir", a "Mode" column is returned.  This column contains
 * an octal string representation of UNIX permissions, for example, "777,"
 * when appropriate.
 * <P>
 * Note also that there is a CFFTP.ReturnValue variable that provides the
 * return value for some of these actions.  The actions for which this
 * variable returns a value are as follows:
 * <UL>
 * <LI> GetCurrentDir
 * <LI> GetCurrentURL
 * <LI> ExistsDir
 * <LI> ExistsFile
 * <LI> Exists
 * </UL>
 * <P>
 * The section CFFTP.ReturnValue Variable explains what is returned in this
 * variable.
 * <P>
 * <B>Note:</B> Names of objects (files and directories) are case-sensitive; thus,
 * using ListDir on "test.log " will not find a file named "test.LOG.  "
 *
 * <P><B>CFFTP.ReturnValue Variable</B>
 * <P>
 * The value of the CFFTP.ReturnValue variable is determined by the results
 * of the ACTION attribute used in CFFTP.
 *
 * <PRE>
 *       CFFTP Action   Value of CFFTP.ReturnValue
 *       GetCurrentDir  String value containing the current directory
 *       GetCurrentURL  String value containing the current URL
 *       ExistsDir      Yes or No
 *       ExistsFile     Yes or No
 *       Exists         Yes or No
 * </PRE>
 *
 * <P><B>Accessing the Columns in a Query Object</B>
 * <P>
 * When you use CFFTP with the ListDir action, you must also specify a value
 * for the NAME attribute.  The value of the NAME attribute is used to hold
 * the results of the ListDir action in a query object.  The query object
 * consists of columns you can reference in the form:
 *
 * <PRE>
 * queryname.columname[row]
 * </PRE>
 *
 * <P>
 * Where queryname is the name of the query as specified in the NAME
 * attribute and columnname is one of the columns returned in the query
 * object as shown in the following table.  Row is the row number for each
 * file/directory entry returned by the ListDir operation.  A separate row is
 * created for each entry.  CFFTP Query Object Columns Column Description
 * Name Filename of the current element Path File path (without drive
 * designation) of the current element URL Complete URL for the current
 * element (file or directory) Length Number indicating file size of the
 * current element LastModified Unformatted date/time value of the current
 * element Attributes String indicating attributes of the current element:
 * Normal or Directory.  IsDirectory Boolean value indicating whether object
 * is a file or directory Mode An octal string representing UNIX permissions,
 * when running on UNIX, for example, "rwxrwxrwx" in a directory listing is
 * represented as "777".
 * <P>
 * <B>Note:</B> Previously supported query column values that pertain to system-
 * specific information are no longer supported, for example, "Hidden" and
 * "System."
 *
 * <P><B>Connection Caching</B>
 * <P>
 * Once you've established a connection with CFFTP, you can reuse the
 * connection to perform additional FTP operations.  To do this, you use the
 * CONNECTION attribute to define and name an FTP connection object that
 * stores information about the connection.  Any additional FTP operations
 * that use the same CONNECTION name automatically make use of the
 * information stored in the connection object.  This facility helps save
 * connection time and drastically improves file transfer operation
 * performance.
 * <P>
 * If you need to keep the connection open throughout a session or longer,
 * you can use a session or application variable as the connection name.
 * However, if you do this, you must explicitly specify the full variable
 * name with the Close action when you are finished.  Note that keeping a
 * connection open prevents others from using the FTP server; therefore, you
 * should close the connection as soon as possible.
 * <P>
 * <B>Note:</B> Changes to a cached connection, such as changing RETRYCOUNT or
 * TIMEOUT values, may require reestablishing the connection.
 * <P>
 * @example
 * The following example opens an FTP connection, retrieves a file listing,
 * showing file or directory name, path, URL, length, and modification date.
 * Connection caching is used to maintain the link to the server, and
 * automatic error checking is enabled.
 * <PRE>
 * &lt;CFFTP CONNECTION=FTP
 *     USERNAME="betauser"
 *     PASSWORD="monroe"
 *     SERVER="beta.company.com"
 *     ACTION="Open"
 *     STOPONERROR="Yes"&gt;
 *
 * &lt;CFFTP CONNECTION=FTP
 *     ACTION="GetCurrentDir"
 *     STOPONERROR="Yes"&gt;
 *
 * &lt;CFOUTPUT&gt;
 *     FTP directory listing of #cfftp.returnvalue#.&lt;P&gt;
 * &lt;/CFOUTPUT&gt;
 *
 *     &lt;CFOUTPUT&gt;Return is #cfftp.returnvalue#&lt;/CFOUTPUT&gt;&lt;BR&gt;
 *
 * &lt;CFFTP CONNECTION="FTP"
 *     ACTION="listdir"
 *     DIRECTORY="/*."
 *     NAME="q"
 *     STOPONERROR="Yes"&gt;
 * &lt;HR&gt;FTP Directory Listing:&lt;P&gt;
 * &lt;CFTABLE QUERY="q" HTMLTABLE&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;Name&lt;/B&gt;" TEXT="#name#"&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;Path&lt;/B&gt;" TEXT="#path#"&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;URL&lt;/B&gt;" TEXT="#url#"&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;Length&lt;/B&gt;" TEXT="#length#"&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;LastModified&lt;/B&gt;"
 *       TEXT="Date(Format#lastmodified#)"&gt;
 *     &lt;CFCOL HEADER="&lt;B&gt;IsDirectory&lt;/B&gt;" TEXT="#isdirectory#"&gt;
 * &lt;/CFTABLE&gt;
 * </PRE>
 */
tag CFFTP (empty) {
   /**
    * Required.  Determines the FTP operation to perform.  To create an FTP
    * connection, use Open.  To terminate an FTP connection, use Close.  See
    * Connection Caching for more information.
    * <P>
    * Required if connection is not already cached.  If connection caching is
    * used, the ACTION attribute is not required.  Determines the FTP operation
    * to perform.  Can be one of the following:
    * <UL>
    * <LI> ChangeDir
    * <LI> CreateDir
    * <LI> ListDir
    * <LI> GetFile
    * <LI> PutFile
    * <LI> Rename
    * <LI> Remove
    * <LI> GetCurrentDir
    * <LI> GetCurrentURL
    * <LI> ExistsDir
    * <LI> ExistsFile
    * <LI> Exists
    * </UL>
    */
   attr action {
      ChangeDir
      CreateDir
      ListDir
      GetFile
      PutFile
      Rename
      Remove
      GetCurrentDir
      GetCurrentURL
      ExistsDir
      ExistsFile
      Exists
   }
   /**
    * Required for Open.  User name to pass in the FTP operation.
    * <P>
    * Required if the FTP connection is not already cached.  If connection
    * caching is used, the USERNAME attribute is not required.  User name to
    * pass in the FTP operation.
    */
   attr username;
   /**
    * Required for Open. Password to log in the user.
    * <P>
    * Required if the FTP connection is not already cached.  If connection
    * caching is used, the PASSWORD attribute is not required.  Password to log
    * the user.
    */
   attr password;
   /**
    * Required for ACTION="ListDir".  Specifies the query name to hold the
    * directory listing.  See Usage for more information.
    */
   attr name;
   /**
    * Required for Open.  The FTP server to connect to, as in ftp.myserver.com
    * <P>
    * Required if the FTP connection is not already cached.  If connection
    * caching is used, the SERVER attribute is not required.  The FTP server to
    * connect to.
    */
   attr server;
   /**
    * Optional.  Value in seconds for the timeout of all operations, including
    * individual data request operations.  Defaults to 30 seconds.
    */
   attr timeout;
   /**
    * Optional. The remote port to connect to. Defaults to 21 for FTP.
    */
   attr port;
   /**
    * Optional.  The name of the FTP connection.  Used to cache a new FTP
    * connection or to reuse an existing connection.  If the USERNAME, PASSWORD,
    * and SERVER attributes are specified, a new connection is created if no
    * connection exists for the specified user.  All calls to CFFTP with the
    * same connection name will reuse the same FTP connection information.
    */
   attr connection;
   /**
    */
   attr agentname;
   /**
    * Optional.  A string that contains the name of the proxy server (or
    * servers) to use if proxy access was specified.
    */
   attr proxyserver;
   /**
    */
   attr proxybypass;
   /**
    * Optional. Number of retries until failure is reported. Default is one (1).
    */
   attr retrycount;
   /**
    * Optional.  Yes or No.  When Yes, halts all processing and displays an
    * appropriate error.  Default is Yes.
    * <P>
    * When No, three variables are populated:
    * <UL>
    * <LI>CFFTP.Succeeded - Yes or No.
    * <LI>CFFTP.ErrorCode - Error number (See following Note for critical information.)
    * <LI>CFFTP.ErrorText - Message text explaining error type
    * <P>
    * <B>Note:</B> Use CFFTP.ErrorCode for conditional operations. Do not use
    * CFFTP.ErrorText for this purpose.
    */
   attr stoponerror {
      yes no
   }
   /**
    * Optional. Yes or No. Defaults to No. Indicates whether to enable passive mode.
    */
   attr passive {
      yes no
   }
   /**
    * Optional.  A semicolon delimited list of file extensions that force ASCII
    * transfer mode when TRANSFERMODE="AutoDetect".  Default extension list is:
    * <PRE>
    *    txt;htm;html;cfm;cfml;shtm;shtml;css;asp;asa
    * </PRE>
    */
   attr asciiextensionlist;
   /**
    * Optional.  The FTP transfer mode you want to use.  Valid entries are
    * ASCII, Binary, or AutoDetect.  Defaults to AutoDetect.
    */
   attr transfermode;
   /**
    * Optional.  Yes or No.  Defaults to Yes.  Specifies whether a GetFile
    * operation will fail if a local file of the same name already exists.
    */
   attr failifexists {
      yes no
   }
   /**
    * Required for ACTION=ChangeDir, CreateDir, ListDir, and ExistsDir.
    * Specifies the directory on which to perform an operation.
    */
   attr directory;
   /**
    * Required for ACTION=GetFile, and PutFile.  Specifies the name of the file
    * on the local file system.
    */
   attr localfile;
   /**
    * Required for ACTION=GetFile, PutFile, and ExistsFile.  Specifies the name
    * of the file on the FTP server's file system.
    */
   attr remotefile;
   /**
    */
   attr attributes;
   /**
    * Required for ACTION=Exists, and Remove.  Specifies the object, file or
    * directory, of these actions.
    */
   attr item;
   /**
    * Required for ACTION=Rename.  Specifies the current name of the file or
    * directory on the remote server.
    */
   attr existing;
   /**
    * Required for ACTION=Rename.  Specifies the new name of the file or
    * directory on the remote server.
    */
   attr new;

}

/**
 * Used inside CFFORM, CFGRID allows you to place a grid control in a
 * ColdFusion form.  A grid control is a table of data divided into rows and
 * columns.  CFGRID column data is specified with individual CFGRIDCOLUMN tags.
 *
 * <PRE>
 * &lt;CFGRID NAME="name"
 *     HEIGHT="integer"
 *     WIDTH="integer"
 *     VSPACE="integer"
 *     HSPACE="integer"
 *     ALIGN="value"
 *     QUERY="query_name"
 *     INSERT="Yes/No"
 *     DELETE="Yes/No"
 *     SORT="Yes/No"
 *     FONT="column_font"
 *     FONTSIZE="size"
 *     ITALIC="Yes/No"
 *     BOLD="Yes/No"
 *     HREF="URL"
 *     HREFKEY="column_name"
 *     TARGET="URL_target"
 *     APPENDKEY="Yes/No"
 *     HIGHLIGHTHREF="Yes/No"
 *     ONVALIDATE="javascript_function"
 *     ONERROR="text"
 *     GRIDDATAALIGN="position"
 *     GRIDLINES="Yes/No"
 *     ROWHEIGHT="pixels"
 *     ROWHEADERS="Yes/No"
 *     ROWHEADERALIGN="position"
 *     ROWHEADERFONT="font_name"
 *     ROWHEADERFONTSIZE="size"
 *     ROWHEADERITALIC="Yes/No"
 *     ROWHEADERBOLD="Yes/No"
 *     ROWHEADERWIDTH="col_width"
 *     COLHEADERS="Yes/No"
 *     COLHEADERALIGN="position"
 *     COLHEADERFONT="font_name"
 *     COLHEADERFONTSIZE="size"
 *     COLHEADERITALIC="Yes/No"
 *     COLHEADERBOLD="Yes/No"
 *     BGCOLOR="color"
 *     SELECTCOLOR="color"
 *     SELECTMODE="mode"
 *     MAXROWS="number"
 *     NOTSUPPORTED="text"
 *     PICTUREBAR="Yes/No"
 *     INSERTBUTTON="text"
 *     DELETEBUTTON="text"
 *     SORTASCENDINGBUTTON="text"
 *     SORTDESCENDINGBUTTON="text"&gt;
 * &lt;/CFGRID&gt;
 * </PRE>
 *
 * <P>
 * You can populate a CFGRID with data from a CFQUERY.  If you do not specify
 * any CFGRIDCOLUMN entries, a default set of columns is generated.  Each
 * column in the query is included in the default column list.  In addition,
 * a default header for each column is created by replacing any hyphen (-) or
 * underscore (_) characters in the table column name with spaces.  The first
 * character and any character after a space is changed to uppercase; all
 * other characters are lowercase.
 *
 * <P><B>Select mode and form variables</B>
 * <P>
 * Grid data is submitted in a CFFORM as form variables, depending on the
 * value of the SELECTMODE attribute as follows:
 * <P>
 * When SELECTMODE="Single", grid data is returned as grid_name.selectedname
 * and the value of the selected cell.
 * <P>
 * When SELECTMODE="Column", grid data is returned as a comma-separated list
 * of all the values for the selected column.
 * <P>
 * When SELECTMODE="Row", grid data is returned as grid_name.colum1_name and
 * grid_name.column2_name and their respective values for the selected row.
 * <P>
 * When SELECTMODE="Browse", no selection data is returned.
 *
 * <P><B>Using SELECTMODE="Edit"</B>
 * <P>
 * When SELECTMODE="Edit ", one-dimensional arrays are used to store data
 * about changes to the grid cells.  For example, a one-dimensional array is
 * used to store the type of edits made to grid cells:
 * <PRE>
 * gridname.RowStatus.Action [ value ]
 * </PRE>
 * <P>
 * Where gridname is the name of the CFGRID and action is U, I, or D for
 * Update, Insert, and Delete, respectively.
 * <P>
 * ColdFusion also maintains both the value of the edited cell and the
 * original value in one-dimensional arrays.  You can reference this data in
 * ColdFusion expressions as follows:
 * <PRE>
 * gridname.colname[ value ]
 * gridname.original.colname[ value ]
 * </PRE>
 * <P>
 * Where gridname is the name of the CFGRID, colname is the name of the
 * column, and value is the index position containing the grid data.
 *
 * <P><B>Using the HREF attribute</B>
 * <P>
 * When specifying a URL with grid items using the HREF attribute, the value
 * of the SELECTMODE attribute determines whether the appended key value is
 * limited to a single grid item or whether it extends to a grid column or
 * row.  When a user clicks on a linked grid item, a CFGRIDKEY variable is
 * appended to the URL in the following form:
 * <PRE>
 * http://myserver.com?CFGRIDKEY=selection
 * </PRE>
 * <P>
 * If the APPENDKEY attribute is set to No, then no grid values are appended
 * to the URL.
 * <P>
 * The value of selection is determined by the value of the SELECTMODE
 * attribute:
 * <P>
 * When SELECTMODE="Single", selection is the value of the column clicked.
 * When SELECTMODE="Row", selection is a comma-separated list of column
 * values in the clicked row, beginning with the value of the first cell in
 * the selected row.
 * <P>
 * When SELECTMODE="Column", selection is a comma-separated list of row
 * values in the clicked column, beginning with the value of the first cell
 * in the selected column.
 * <P>
 * <B>Note:</B> CFGRID incorporates a Java applet, so browsers must be Java-enabled
 * for CFGRID to work properly.
 *
 * <P>
 * @example
 * This example shows the CFGRID, CFGRIDCOLUMN, CFGRIDROW,
 * and CFGRIDUPDATE tags in action.
 * <PRE>
 * &lt;!--- use a query to show the useful qualities of CFGRID ---&gt;
 *
 * &lt;!--- If the gridEntered form field has been tripped,
 * perform the gridupdate on the table specified in the database.
 * Using the default value keyonly=yes allows us to change only
 * the information that differs from the previous grid ---&gt;
 * &lt;CFIF IsDefined("form.gridEntered") is True&gt;
 * &lt;CFGRIDUPDATE GRID="FirstGrid" DATASOURCE="cfsnippets"
 * TABLENAME="CourseList"  KEYONLY="Yes"&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;!--- query the database to fill up the grid ---&gt;
 * &lt;CFQUERY NAME="GetCourses" DATASOURCE="cfsnippets"&gt;
 * SELECT Course_ID, Dept_ID, CorNumber,
 *          CorName, CorLevel, CorDesc
 * FROM   CourseList
 * ORDER by Dept_ID ASC, CorNumber ASC
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFGRID Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFGRID Example&lt;/H3&gt;
 *
 * &lt;I&gt;Try adding a course to the database, and then deleting it.&lt;/I&gt;
 * &lt;!--- call the CFFORM to allow us to use CFGRID controls ---&gt;
 * &lt;CFFORM ACTION="cfgrid.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;!--- We include Course_ID in the CFGRID, but do not allow
 * for its selection or display ---&gt;
 * &lt;!--- CFGRIDCOLUMN tags are used to change the parameters
 * involved in displaying each data field in the table---&gt;
 *
 * &lt;CFGRID NAME="FirstGrid" WIDTH="450"
 *     QUERY="GetCourses" INSERT="Yes"
 *     DELETE="Yes" SORT="Yes"
 *     FONT="Tahoma" BOLD="No" ITALIC="No"
 *     APPENDKEY="No" HIGHLIGHTHREF="No"
 *     GRIDDATAALIGN="LEFT" GRIDLINES="Yes"
 *     ROWHEADERS="Yes" ROWHEADERALIGN="LEFT"
 *     ROWHEADERITALIC="No" ROWHEADERBOLD="No"
 *     COLHEADERS="Yes" COLHEADERALIGN="LEFT"
 *     COLHEADERITALIC="No" COLHEADERBOLD="No"
 *     SELECTCOLOR="Red" SELECTMODE="EDIT"
 *     PICTUREBAR="No" INSERTBUTTON="To insert"
 *     DELETEBUTTON="To delete" SORTASCENDINGBUTTON="Sort ASC"
 *     SORTDESCENDINGBUTTON="Sort DESC"&gt;
 *     &lt;CFGRIDCOLUMN NAME="Course_ID" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="No" DISPLAY="No"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="Dept_ID" HEADER="Department"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="Yes" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes"
 *         HEADERBOLD="No" HEADERITALIC="Yes"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorNumber" HEADER="Course ##"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorName" HEADER="Name"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         FONT="Times" BOLD="No"
 *         ITALIC="No" SELECT="Yes"
 *         DISPLAY="Yes" HEADERBOLD="No"
 *         HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorLevel" HEADER="Level"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorDesc" HEADER="Description"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *
 * &lt;/CFGRID&gt;
 *
 * ...
 * </PRE>
 *
 * @see CFGRIDROW
 * @see CFGRIDUPDATE
 */
tag CFGRID : NOTSUPPORTED_ATTRIBUTE, POSITION_ATTRIBUTES {
   /**
    * Required. A name for the grid element.
    */
   attr name;
   /**
    * Optional. The name of the query associated with the grid control.
    */
   attr query;
   /**
    * Optional.  Yes or No.  Yes allows end users to insert new row data into
    * the grid.  Default is No.
    */
   attr insert {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes allows end users to delete row data in the
    * grid.  Default is No.
    */
   attr delete {
      yes no
   }
   /**
    * Optional.  Yes or No.  When Yes sort buttons are added to the grid
    * control.  When clicked the sort buttons perform a simple text sort on the
    * selected column.  Default is No.
    */
   attr sort {
      yes no
   }
   /**
    * Optional. Font name to use for all column data in the grid control.
    */
   attr font;
   /**
    * Optional. Font size for text in the grid control, measured in points.
    */
   attr fontsize;
   /**
    * Optional.  Yes or No.  Yes presents all grid control text in italic.
    * Default is No.
    */
   attr italic {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes presents all grid control text in boldface.
    * Default is No.
    */
   attr bold {
      yes no
   }
   /**
    * Optional.  URL to associate with the grid item or a query column for a
    * grid that is populated from a query.  If HREF is a query column, then the
    * HREF value that is displayed is populated by the query.  If HREF is not
    * recognized as a query column, it is assumed that the HREF text is an
    * actual HTML HREF.
    */
   attr href;
   /**
    * Optional.  The name of a valid query column when the grid uses a query.
    * The column specified becomes the Key no matter what the select mode is for
    * the grid.
    */
   attr hrefkey;
   /**
    * Optional. Target attribute for HREF URL.
    */
   attr target;
   /**
    * Optional.  Yes or No.  When used with HREF, Yes passes the CFGRIDKEY
    * variable along with the value of the selected tree item in the URL to the
    * application page specified in the CFFORM ACTION attribute.  Default is Yes.
    */
   attr appendkey {
      yes no
   }
   /**
    * Optional.  Yes highlights links associated with a CFGRID with an HREF
    * attribute value.  No disables highlight.  Default is Yes.
    */
   attr highlighthref {
      yes no
   }
   /**
    * Optional.  The name of a valid JavaScript function used to validate user
    * input.  The form object, input object, and input object value are passed
    * to the specified routine, which should return True if validation succeeds
    * and False otherwise.
    */
   attr onvalidate;
   /**
    * Optional.  The name of a valid JavaScript function you want to execute in
    * the event of a failed validation.
    */
   attr onerror;
   /**
    * Optional.  Enter Left, Right, or Center to position data in the grid
    * within a column.  Default is Left.
    */
   attr griddataalign;
   /**
    * Optional.  Yes or No.  Yes enables rules (lines) in the grid control, No
    * suppresses row and column rules.  Default is Yes.
    */
   attr gridlines {
      yes no
   }
   /**
    * Optional.  Enter a numeric value for the number of pixels to determine the
    * minimum row height for the grid control.  Used with CFGRIDCOLUMN
    * TYPE="Image", you can use ROWHEIGHT to define enough room for graphics you
    * want to display in the row.
    */
   attr rowheight;
   /**
    * Optional.  Yes or No.  Yes displays row labels in the grid control.
    * Defaults to Yes.
    */
   attr rowheaders {
      yes no
   }
   /**
    * Optional.  Enter Left, Right, or Center to position data within a row
    * header.  Default is Left.
    */
   attr rowheaderalign;
   /**
    * Optional. Font to use for the row label.
    */
   attr rowheaderfont;
   /**
    * Optional.  Size font for row label text in the grid control, measured in
    * points.
    */
   attr rowheaderfontsize;
   /**
    * Optional.  Yes or No.  Yes presents row label text in italic.  Default is No.
    */
   attr rowheaderitalic {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes presents row label text in boldface.  Default is No.
    */
   attr rowheaderbold {
      yes no
   }
   /**
    * Optional. The width, in pixels, of the row header column.
    */
   attr rowheaderwidth;
   /**
    * Optional.  Yes or No.  Yes displays column headers in the grid control.
    * Defaults to Yes.
    */
   attr colheaders {
      yes no
   }
   /**
    * Optional.  Enter Left, Right, or Center to position data within a column
    * header.  Default is Left.
    */
   attr colheaderalign;
   /**
    * Optional. Font to use for the column header in the grid control.
    */
   attr colheaderfont;
   /**
    * Optional.  Size font for column header text in the grid control, measured
    * in points.
    */
   attr colheaderfontsize;
   /**
    * Optional.  Yes or No.  Yes presents column header text in italic.  Default is No.
    */
   attr colheaderitalic {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes presents column header text in boldface.
    * Default is No.
    */
   attr colheaderbold {
      yes no
   }
   /**
    * Optional.  Background color value for the grid control.  Valid entries
    * are: black, magenta, cyan, orange, darkgray, pink, gray, white, lightgray,
    * yellow.
    * <P>
    * A hex value can be entered in the form:
    * <PRE>
    * BGCOLOR="##xxxxxx"
    * </PRE>
    * <P>
    * where x is 0-9 or A-F. Use either two pound signs or no pound signs.
    */
   attr HTML_COLORS bgcolor;
   /**
    * Optional.  Background color for a selected item.  See BGCOLOR for color options.
    */
   attr HTML_COLORS selectcolor;
   /**
    * Optional.  Selection mode for items in the grid control.  Valid entries are:
    * <UL>
    * <LI>Edit
    * <LI>Single
    * <LI>Row
    * <LI>Column
    * <LI>Browse
    * </UL>
    * <P>
    * Default is Browse.
    */
   attr selectmode {
      /**
       * Users can edit grid data.
       */
      Edit
      /**
       * User selections are confined to the selected cell.
       */
      Single
      /**
       * User selections automatically extend to the row containing selected cell.
       */
      Row
      /**
       * User selections automatically extend to column containing selected cell.
       */
      Column
      /**
       * User can only browse grid data.
       */
      Browse
   }
   /**
    * Optional.  Specifies the maximum number of rows you want to display in the grid.
    */
   attr maxrows;
   /**
    * Optional.  Yes or No.  When Yes, image buttons are used for the Insert,
    * Delete, and Sort actions rather than text buttons.  Default is No.
    */
   attr picturebar {
      yes no
   }
   /**
    * Optional. Text to use for the Insert action button. The default is Insert.
    */
   attr insertbutton;
   /**
    * Optional. Text to use for the Delete action button. The default is Delete.
    */
   attr deletebutton;
   /**
    * Optional. The text to use for the Sort button. The default is "A -&gt; Z".
    */
   attr sortascendingbutton;
   /**
    * Optional. The text to use for the Sort button. The default is "Z &lt;- A".
    */
   attr sortdescendingbutton;

}
/**
 * Used with CFGRID in a CFFORM, you use CFGRIDCOLUMN to specify individual
 * column data in a CFGRID control.  Font and alignment attributes used in
 * CFGRIDCOLUMN override any global font or alignment settings defined in
 * CFGRID.
 *
 * <PRE>
 * &lt;CFGRIDCOLUMN NAME="column_name"
 *     HEADER="header"
 *     WIDTH="column_width"
 *     FONT="column_font"
 *     FONTSIZE="size"
 *     ITALIC="Yes/No"
 *     BOLD="Yes/No"
 *     HREF="URL"
 *     HREFKEY="column_name"
 *     TARGET="URL_target"
 *     SELECT="Yes/No"
 *     DISPLAY="Yes/No"
 *     TYPE="type"
 *     HEADERFONT"font_name"
 *     HEADERFONTSIZE="size"
 *     HEADERITALIC="Yes/No"
 *     HEADERBOLD="Yes/No"
 *     DATAALIGN="position"
 *     HEADERALIGN="position"
 *     NUMBERFORMAT="format"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the CFGRIDCOLUMN tag in action.
 * <PRE>
 * ...
 * &lt;CFGRID NAME="FirstGrid" WIDTH="450"
 *     QUERY="GetCourses" INSERT="Yes"
 *     DELETE="Yes" SORT="Yes"
 *     FONT="Tahoma" BOLD="No" ITALIC="No"
 *     APPENDKEY="No" HIGHLIGHTHREF="No"
 *     GRIDDATAALIGN="LEFT"
 *     GRIDLINES="Yes" ROWHEADERS="Yes"
 *     ROWHEADERALIGN="LEFT" ROWHEADERITALIC="No"
 *     ROWHEADERBOLD="No" COLHEADERS="Yes"
 *     COLHEADERALIGN="LEFT" COLHEADERITALIC="No"
 *     COLHEADERBOLD="No" SELECTCOLOR="Red"
 *     SELECTMODE="EDIT" PICTUREBAR="No"
 *     INSERTBUTTON="To insert" DELETEBUTTON="To delete"
 *     SORTASCENDINGBUTTON="Sort ASC" SORTDESCENDINGBUTTON="Sort DESC"&gt;
 *     &lt;CFGRIDCOLUMN NAME="Course_ID" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="No" DISPLAY="No"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="Dept_ID" HEADER="Department"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT" BOLD="Yes" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes" HEADERBOLD="No" HEADERITALIC="Yes"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorNumber" HEADER="Course ##"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No"
 *         SELECT="Yes" DISPLAY="Yes"
 *         HEADERBOLD="No" HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorName" HEADER="Name"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         FONT="Times" BOLD="No"
 *         ITALIC="No" SELECT="Yes"
 *         DISPLAY="Yes" HEADERBOLD="No"
 *         HEADERITALIC="No"&gt;
 *     &lt;CFGRIDCOLUMN NAME="CorLevel" HEADER="Level"
 *         HEADERALIGN="LEFT" DATAALIGN="LEFT"
 *         BOLD="No" ITALIC="No" SELECT="Yes"
 *         DISPLAY="Yes" HEADERBOLD="No"
 *         HEADERITALIC="No"&gt;
 *         ...
 * </PRE>
 */
tag CFGRIDCOLUMN (empty) : MIME_TYPE {
   /**
    * Required.  A name for the grid column element.  If the grid uses a query,
    * the column name must specify the name of a query column.
    */
   attr name;
   /**
    * Optional.  Text for the column header.  The value of HEADER is used only
    * when the CFGRID COLHEADERS attribute is Yes (or omitted, since it defaults
    * to Yes).
    */
   attr header;
   /**
    * Optional.  The width of the column in pixels.  By default the column is
    * sized based on the longest column value.
    */
   attr width;
   /**
    * Optional.  Font name to use for data in the column.  Defaults to
    * browser-specified font.
    */
   attr font;
   /**
    * Optional.  Font size for text in the column.  Defaults to
    * browser-specified font size.
    */
   attr fontsize;
   /**
    * Optional.  Yes or No.  Yes presents text in the column in italic.  Default
    * is No.
    */
   attr italic {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes presents text in the column in boldface.
    * Default is No.
    */
   attr bold {
      yes no
   }
   /**
    * Optional.  URL to associate with the grid item.  You can specify a URL
    * that is relative to the current page:
    * <PRE>
    * mypage.cfm
    * </PRE>
    * <P>Or an absolute URL:
    * <PRE>
    * http://myserver.com/mydir/mypage.cfm
    * </PRE>
    */
   attr href;
   /**
    * Optional.  The name of a valid query column when the grid uses a query.
    * The column specified becomes the Key no matter what the select mode is for
    * the grid.
    */
   attr hrefkey;
   /**
    * Optional.  The name of the frame in which to open the link specified in
    * HREF.
    */
   attr target;
   /**
    * Optional.  Yes or No.  Yes allows end users to select a column in a grid
    * control.  When No, the column cannot be edited, even if the CFGRID INSERT
    * or DELETE attributes are enabled.  The value of the SELECT attribute is
    * ignored if the CFGRID SELECTMODE attribute is set to Row or Browse.
    */
   attr select;
   /**
    * Optional. Yes or No. Use to hide columns. Default is Yes to display the column.
    */
   attr display {
      yes no
   }
   /**
    * Optional. Font to use for the column header. Defaults to browser-specified font.
    */
   attr headerfont;
   /**
    * Optional.  Font size to use for the column header in pixels.  Defaults to
    * browser-specified font size.
    */
   attr headerfontsize;
   /**
    * Optional. Yes or No. Yes presents column header text in italic. Default is No.
    */
   attr headeritalic {
      yes no
   }
   /**
    * Optional. Yes or No. Yes presents header text in boldface. Default is No.
    */
   attr headerbold {
      yes no
   }
   /**
    * Optional.  Alignment for column data.  Valid entries are: Left, Center, or
    * Right.  Default is Left.
    */
   attr dataalign {
      Left
      Center
      Right
   }
   /**
    * Optional.  Alignment for the column header text.  Valid entries are: Left,
    * Center, or Right.  Default is Left.
    */
   attr headeralign {
      Left
      Center
      Right
   }
   /**
    * Optional. The format for displaying numeric data in the grid.
    *
    * <P><B>NUMBERFORMAT mask characters</B>
    * <P>
    * Mask characters you can use in the NUMBERFORMAT attribute correspond with
    * those used in the NumberFormat CFML function.  For more information about
    * the NumberFormat function, see Chapter 2, "ColdFusion Functions".
    *
    * <DL compact>
    * <DT>Char  <DD>Meaning
    * <DT>_     <DD>(underscore) Optional digit placeholder.
    *
    * <DT>9     <DD>Optional digit placeholder.  Same as _,
    *               but shows decimal places more clearly.
    *
    * <DT>.     <DD>Specifies the location of a mandatory decimal point.
    *
    * <DT>0     <DD>
    * Located to the left or right of a mandatory decimal point, to force
    * padding with zeros.
    *
    * <DT>( )   <DD>
    * Places parentheses around the mask if the number is less than 0.
    *
    * <DT>+     <DD>
    * Places + in front of positive numbers, - (minus sign) in front of negative
    * numbers.
    *
    * <DT>-     <DD>
    * Place " " (space) in front of positive, - (minus sign) in front of
    * negative numbers.
    *
    * <DT>,     <DD>Separates thousands with commas.
    *
    *
    * <DT>L,C   <DD>
    * Specifies left-justify or center-justify a number within the width of the
    * mask column.  L or C must appear as the first character of the mask.  By
    * default, numbers are right-justified.
    *
    * <DT>$     <DD>
    * Places a dollar sign in front of the formatted number.  $ must appear as
    * the first character of the mask.
    *
    * <DT>^     <DD>Separates left from right formatting.
    */
   attr numberformat;
   /**
    */
   attr select {
      yes no
   }

}
/**
 * CFGRIDROW allows you to define a CFGRID that does not use a QUERY as
 * source for row data.  If a QUERY attribute is specified in CFGRID, the
 * CFGRIDROW tags are ignored.
 *
 * <PRE>
 * &lt;CFGRIDROW DATA="col1, col2, ..."&gt;
 * </PRE>
 *
 * <P>
 * @example
 * <PRE>
 * ...
 *
 * &lt;!--- use a CFLOOP to loop through the query and define CFGRIDROW
 * data each time through the loop ---&gt;
 *     &lt;CFLOOP QUERY="GetCourses"&gt;
 *         &lt;CFGRIDROW
 *           DATA="#Course_ID#,#Dept_ID#,#CorNumber#,#CorName#,
 *            #CorLevel#,#CorDesc#"&gt;
 *     &lt;/CFLOOP&gt;
 * &lt;/CFGRID&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFGRIDROW (empty) {
   /**
    * Required.  A comma-separated list of column values.  If a column value
    * contains a comma character, it must be escaped with a second comma
    * character.
    */
   attr data;

}
/**
 * Used in a CFGRID, CFGRIDUPDATE allows you to perform updates to data
 * sources directly from edited grid data.  CFGRIDUPDATE provides a direct
 * interface with your data source.
 * <P>
 * CFGRIDUPDATE first applies DELETE row actions followed by INSERT row
 * actions and finally UPDATE row actions.  Row processing stops if any
 * errors are encountered.
 *
 * <PRE>
 * &lt;CFGRIDUPDATE GRID="gridname"
 *     DATASOURCE="data source name"
 *     DBTYPE="type"
 *     DBSERVER="dbms"
 *     DBNAME="database name"
 *     TABLENAME="table name"
 *     USERNAME="data source username"
 *     PASSWORD="data source password"
 *     TABLEOWNER="table owner"
 *     TABLEQUALIFIER="qualifier"
 *     PROVIDER="COMProvider"
 *     PROVIDERDSN="datasource"
 *     KEYONLY="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the CFGRID, CFGRIDCOLUMN, CFGRIDROW,
 * and CFGRIDUPDATE tags in action.
 * <PRE>
 * ...
 * &lt;!--- If the gridEntered form field has been tripped,
 * perform the gridupdate on the table specified in the database.
 * Using the default value keyonly=yes allows us to change only
 * the information that differs from the previous grid ---&gt;
 * &lt;CFIF IsDefined("form.gridEntered") is True&gt;
 * &lt;CFGRIDUPDATE GRID="FirstGrid" DATASOURCE="cfsnippets"
 *   TABLENAME="CourseList"  KEYONLY="Yes"&gt;
 * &lt;/CFIF&gt;
 * ...
 * </PRE>
 */
tag CFGRIDUPDATE (empty) : DATABASE_ATTRIBUTES {
   /**
    * Required.  The name of the CFGRID form element that is the source for the
    * update action.
    */
   attr grid;
   /**
    * Optional.  Yes or No.  Yes specifies that in the update action, the WHERE
    * criteria is confined to just the key values.  No specifies that in
    * addition to the key values, the original values of any changed fields are
    * included in the WHERE criteria.  Default is Yes.
    */
   attr keyonly;

}
/**
 * CFHEADER generates custom HTTP response headers to return to the client.
 *
 * <PRE>
 * &lt;CFHEADER
 *     NAME="header_name"
 *     VALUE="header_value"&gt;
 * </PRE>
 *
 * <P>or
 *
 * <PRE>
 * &lt;CFHEADER
 *     STATUSCODE="status_code"
 *     STATUSTEXT="status_text"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFHEADER.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFHEADER Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFHEADER Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFHEADER generates custom HTTP response headers
 * to return to the client.
 * &lt;P&gt;The following example forces the browser client
 * to purge its cache of a requested file.
 * &lt;CFHEADER NAME="Expires" VALUE="#Now()#"&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFHEADER (empty) {
   /**
    * Required if you do not specify the STATUSCODE attribute.  A name for the
    * header.
    */
   attr name;
   /**
    * Optional.  A value for the HTTP header.  This attribute is used in
    * conjunction with the NAME attribute.
    */
   attr value;
   /**
    * Required if you do not specify the NAME attribute.  A number that sets the
    * HTTP status code.
    */
   attr statuscode;
   /**
    * Optional.  Text that explains the status code.  This attribute is used in
    * conjunction with the STATUSCODE attribute.
    */
   attr statustext;

}
/**
 * CFHTMLHEAD writes the text specified in the TEXT attribute to the
 * &lt;HEAD&gt; section of a generated HTML page.  CFHTMLHEAD can be useful
 * for embedding JavaScript code, or placing other HTML tags such as META,
 * LINK, TITLE, or BASE in an HTML page header.
 *
 * <PRE>
 * &lt;CFHTMLHEAD TEXT="text"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFHTMLHEAD.
 * <PRE>
 * &lt;CFHTMLHEAD TEXT="&lt;TITLE&gt;This is an example of a generated header&lt;/TITLE&gt;
 * &lt;BASE HREF='http://www.allaire.com/'&gt;
 * "&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFHTMLHEAD Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFHTMLHEAD writes the text specified in the TEXT attribute
 * to the &lt;HEAD&gt; section of a generated HTML page.  CFHTMLHEAD
 * can be useful for embedding JavaScript code, or placing other
 * HTML tags such as META, LINK, TITLE, or BASE in an HTML header.
 * &lt;P&gt;View the source of this frame to see that the title of the
 * page is generated by the CFHTMLHEAD tag.
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFHTMLHEAD (empty) {
   /**
    * The text you want to add to the &lt;HEAD&gt; area of an HTML page.
    * Everything inside the quotation marks is placed in the &lt;HEAD&gt;
    * section.
    */
   attr text;
}

/**
 * The CFHTTP tag allows you to execute POST and GET operations on files.
 * Using CFHTTP, you can execute standard GET operations as well as create a
 * query object from a text file.  POST operations allow you to upload MIME
 * file types to a server, or post cookie, formfield, URL, file, or CGI
 * variables directly to a specified server.
 *
 * <PRE>
 * &lt;CFHTTP URL="hostname"
 *     PORT="port_number"
 *     METHOD="get_or_post"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     NAME="queryname"
 *     COLUMNS="query_columns"
 *     PATH="path"
 *     FILE="filename"
 *     DELIMITER="character"
 *     TEXTQUALIFIER="character"
 *     RESOLVEURL="Yes/No"
 *     PROXYSERVER="hostname"
 *     PROXYPORT="port_number"
 *     USERAGENT="user_agent"
 *     THROWONERROR="Yes/No"
 *     REDIRECT="Yes/No"
 *     TIMEOUT="timeout_period"&gt;
 * &lt;/CFHTTP&gt;
 * </PRE>
 *
 * <P>
 * <B>Note:</B> Terminate CFHTTP POST operations with &lt;/CFHTTP&gt;.  Termination
 * is not required with CFHTTP GET operations.
 *
 * <P><B>Note the following:</B>
 * <P>
 * HTTP GET -- A user can specify a URL that points to a text or binary file.
 * The file will be downloaded and its contents stored in a CF variable or in
 * a file so that the user can manipulate the data.  The internal variable
 * FileContent is available for text and MIME file types.  The MimeType
 * variable is available for all file manipulations.  In addition, Header and
 * ResponseHeader allow you to see the response headers.  These variables can
 * be accessed in the following manner: #CFHTTP.FileContent#
 *
 * <PRE>
 *    #CFHTTP.MimeType#
 *    #CFHTTP.Header#
 *    #CFHTTP.ResponseHeader[http_header_key]#
 * </PRE>
 *
 * <P>
 * The ResponseHeader variable is a CFML structure; the other variables are
 * strings.  See the table at the end of this section for a summary of
 * variables returned by CFHTTP.
 * <P>
 * GET file into a query -- To download a file in a ColdFusion page so that a
 * query can be built using the file, the file must be either comma-separated
 * or tab-delimited.  Although risky, text qualification may be omitted.  The
 * file will be parsed and an appropriate query built from it.  Columns may
 * be specified in the attribute list so that the client can override the
 * columns specified in the file.  There is error checking within the tag
 * that prevents a user from either entering an invalid column name or using
 * an invalid column name that was specified in the original file.  If such
 * an illegal filename is encountered, the illegal characters are stripped.
 * Such action could produce duplicate column names, so duplicate columns are
 * renamed and inserted into the query header.  The query has all of the
 * functionality of a standard CFQUERY object.
 * <P>
 * HTTP POST -- CFHTTPPARAM tags can be nested inside a CFHTTP tag in a POST
 * operation.  The browser can be pointed to a URL specifying a CGI
 * executable or a ColdFusion page.  Since multiple CFHTTPPARAM tags can be
 * nested in one CFHTTP tag, you can construct a multipart/form-data style
 * post.  A file content variable is created and this can be used in a
 * CFOUTPUT.  If PATH and FILE are specified, the data returned from the
 * server is saved to the specified location.
 * <P>
 * Authentication -- CFHTTP supports Windows NT Basic Authentication for both
 * GET and POST operations.  However, Basic Authentication will not work if
 * your Web server has enabled Windows NT Challenge/Response (Microsoft IIS).
 * <P>
 * Encryption -- CFHTTP is capable of using Secure Sockets Layer (SSL) for
 * negotiating secured transactions over the wire.
 * <P>
 * CFHTTP.StatusCode-- CFHTTP throws an error and provides the
 * CFHTTP.StatusCode variable for access to the HTTP error string associated
 * with the error if the THROWONERROR attribute is set to YES.  See the
 * following table for all the variables returned by CFHTTP.
 *
 * <DL>
 * <DT>Variable Names
 * <DD>Description
 * <DT>#CFHTTP.FileContent#
 * <DD>Returns the contents of the file for text and MIME files.
 * <DT>#CFHTTP.MimeType#
 * <DD>Returns the MIME type.
 * <DT>#CFHTTP.ResponseHeader[http_hd_key]#
 * <DD>Returns the response headers.  If there is only one instance of a
 *     header key, then the value may be accessed as a simple type.  If there is
 *     more than one instance, then the values are placed in an array within the
 *     ResponseHeader structure.
 * <DT>#CFHTTP.Header#
 * <DD>Returns the raw response header.
 * <DT>#CFHTTP.StatusCode#
 * <DD>Returns the HTTP error code and associated error string if THROWONERROR is YES.
 * </DL>
 *
 * <P>
 * @example
 * This example shows the use of CFHTTP to pull information from a web page.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFHTTP Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFHTTP Example&lt;/H3&gt;
 *
 * &lt;P&gt;This example shows the ability of CFHTTP to pull
 * the contents of a web page from the Internet, and shows how
 * you can get the following information by using CFHTTP variables:
 * &lt;/P&gt;
 * &lt;UL&gt;
 * &lt;LI&gt;display the page (fileContent)
 * &lt;LI&gt;derive the MIME type of the page (mimeType)
 * &lt;LI&gt;find the header responses (responseHeader).
 * &lt;/UL&gt;
 *
 * &lt;CFHTTP
 *     URL = "http://www.allaire.com"
 *     resolveurl = 1
 *     throwonerror = Yes
 * &gt;
 * &lt;/CFHTTP&gt;
 *
 * &lt;CFOUTPUT&gt;
 * #cfhttp.filecontent#&lt;BR&gt;
 * &lt;BR&gt;
 * &lt;H3&gt;&lt;B&gt;The mime-type:&lt;/B&gt;&lt;/H3&gt;&lt;BR&gt;
 * #cfhttp.mimetype#&lt;BR&gt;
 * &lt;H3&gt;&lt;B&gt;The Status Code:&lt;/B&gt;&lt;/H3&gt;&lt;BR&gt;
 * #cfhttp.statuscode#&lt;BR&gt;
 * &lt;H3&gt;&lt;B&gt;The Raw Header:&lt;/B&gt;&lt;/H3&gt;&lt;BR&gt;
 * #cfhttp.header#&lt;BR&gt;
 *
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;H3&gt;&lt;B&gt;Output the Response Headers:&lt;/B&gt;&lt;/H3&gt;&lt;BR&gt;
 * &lt;HR&gt;
 *
 * &lt;CFLOOP collection=#CFHTTP.RESPONSEHEADER# item="httpHeader"&gt;
 *     &lt;CFSET value = CFHTTP.RESPONSEHEADER[httpHeader]&gt;
 *     &lt;CFIF IsSimpleValue(value)&gt;
 *         &lt;CFOUTPUT&gt;
 *             #httpHeader# : #value#&lt;BR&gt;
 *         &lt;/CFOUTPUT&gt;
 *     &lt;CFELSE&gt;
 *         &lt;CFLOOP index="counter" from=1 to=#ArrayLen(value)#&gt;
 *             &lt;CFOUTPUT&gt;
 *                 #httpHeader# : #value[counter]#&lt;BR&gt;
 *             &lt;/CFOUTPUT&gt;
 *         &lt;/CFLOOP&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFLOOP&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFHTTP {
   /**
    * Required.  Full URL of the host name or IP address of the server on which
    * the file resides.
    */
   attr url;
   /**
    * Optional.  The port number on the server from which the object is being
    * requested.  Default is 80.  When used with RESOLVEURL, the URLs of
    * retrieved documents that specify a port number are automatically resolved
    * to preserve links in the retrieved document.
    */
   attr port;
   /**
    * Required.  GET or POST.  Use GET to download a text or binary file, or to
    * create a query from the contents of a text file.  Use POST to send
    * information to a server page or a CGI program for processing.  POST
    * requires the use of a CFHTTPPARAM tag.
    */
   attr method {
      get post
   }
   /**
    * Optional. When required by a server, a valid username.
    */
   attr username;
   /**
    * Optional. When required by a server, a valid password.
    */
   attr password;
   /**
    * Optional.  The name to assign to a query when a query is to be constructed
    * from a file.
    */
   attr name;
   /**
    * Optional.  The column names for a query.  If no column names are
    * specified, the query returns all rows in the query except for the first
    * row.  To get all the rows in a query, you must specify column names.
    */
   attr columns;
   /**
    * Optional.  The path to the directory in which a file is to be stored.  If
    * a path is not specified in a POST or GET operation, a variable is created
    * CFHTTP.FileContent) that you can use to present the results of the POST
    * operation in a CFOUTPUT.
    */
   attr path;
   /**
    * Required in a POST operation if PATH is specified.  The filename to be
    * used for the file that is accessed.  For GET operations, defaults to the
    * name specified in URL.  Enter path information in the PATH attribute.
    */
   attr file;
   /**
    * Required for creating a query.  Valid characters are a tab or comma.
    * Default is a comma ( , ).
    */
   attr delimiter;
   /**
    * Required for creating a query.  Indicates the start and finish of a
    * column.  Should be appropriately escaped when embedded in a column.  For
    * example, if the qualifier is a quotation mark, it should be escaped as
    *   If there is no text qualifier in the file, specify a blank space as
    *  ".  Default is the quote mark ( " ).
    */
   attr textqualifier;
   /**
    * Optional.  Yes or No.  Default is No.  For GET and POST operations, when
    * Yes, any page reference returned into the FileContent internal variable
    * will have its internal URLs fully resolved, including port number, so that
    * links remain intact.  The following HTML tags, which can contain links,
    * will be resolved:
    * <UL>
    * <LI> IMG SRC
    * <LI> A HREF
    * <LI> FORM ACTION
    * <LI> APPLET CODE
    * <LI> SCRIPT SRC
    * <LI> EMBED SRC
    * <LI> EMBED PLUGINSPACE
    * <LI> BODY BACKGROUND
    * <LI> FRAME SRC
    * <LI> BGSOUND SRC
    * <LI> OBJECT DATA
    * <LI> OBJECT CLASSID
    * <LI> OBJECT CODEBASE
    * <LI> OBJECT USEMAP
    * </UL>
    */
   attr resolveurl {
      yes no
   }
   /**
    * Optional.  Host name or IP address of a proxy server.
    */
   attr proxyserver;
   /**
    */
   attr proxyparam;
   /**
    * Optional.  The port number on the proxy server from which the object is
    * being requested.  Default is 80.  When used with RESOLVEURL, the URLs of
    * retrieved documents that specify a port number are automatically resolved
    * to preserve links in the retrieved document.
    */
   attr proxyport;
   /**
    * Optional. User agent request header.
    */
   attr useragent;
   /**
    * Optional.  Boolean indicating whether to throw an exception that can be
    * caught by using the CFTRY and CFCATCH tags.  The error code and its
    * associated message can be viewed in the variable CFHTTP.StatusCode.  The
    * default is NO.  See the Usage section for more information.
    */
   attr throwonerror {
      yes no
   }
   /**
    * Optional. Boolean indicating whether to redirect execution or stop execution. The default is YES. If set to NO and THROWONERROR is set to YES, execution
    * stops if CFHTTP fails, and the status code and associated error message are returned in the variable CFHTTP.StatusCode. To see where execution would
    * have been redirected, use the variable CFHTTP.ResponseHeader[LOCATION]. The key LOCATION identifies the path of redirection.
    */
   attr redirect {
      yes no
   }
   /**
    * Optional.  Timeout period in seconds.  By default, the ColdFusion server
    * processes requests asynchronously; that is, the ColdFusion server uses the
    * timeout set on the URL in the browser, the timeout set in the ColdFusion
    * Administrator, and the timeout set in the tag to determine the timeout
    * period for the CFHTTP request.
    * <P>
    * When a URL timeout is specified in the browser, this timeout setting will
    * take precedence over the ColdFusion Administrator timeout.  The ColdFusion
    * server then takes the lesser of the URL timeout and the timeout passed in
    * the TIMEOUT attribute so that the request will always time out before or
    * at the same time as the page times out.  Likewise, if there is no URL
    * timeout specified, ColdFusion takes the lesser of the ColdFusion
    * Administrator timeout and the timeout passed in the TIMEOUT attribute.
    * <P>
    * If there is no timeout set on the URL in the browser, no timeout set in
    * the ColdFusion Administrator, and no timeout set with the TIMEOUT
    * attribute, ColdFusion processes requests synchronously; thus, ColdFusion
    * waits indefinitely for the CFHTTP request to process.
    * <P>
    * Note that you must enable the timeout set in the ColdFusion Administrator
    * in order for the ColdFusion Administrator timeout and the URL timeout to
    * take effect.  This setting is on the ColdFusion Administrator Server
    * Settings page.  Please refer to Administering ColdFusion Serverfor more
    * information about ColdFusion settings.
    */
   attr timeout;

}
/**
 * Required for CFHTTP POST operations, CFHTTPPARAM is used to specify the
 * parameters necessary to build a CFHTTP POST.
 *
 * <PRE>
 * &lt;CFHTTPPARAM NAME="name"
 *     TYPE="type"
 *     VALUE="transaction type"
 *     FILE="filename"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFHTTPPARAM.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFHTTPPARAM Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFHTTPPARAM Example&lt;/H3&gt;
 *
 * &lt;P&gt;This view-only example shows the use of CFHTTPPARAM
 * to show the values of passed variables on another HTML
 * reference, accessed by CFHTTP.  The other file
 * could simply output the value of form.formtest,
 * url.url_test, cgi.cgi_test, and
 * cookie.cookie_test to prove that this page is working:
 *
 * &lt;H3&gt;Sample Other File Listing&lt;/H3&gt;
 * &lt;CFOUTPUT&gt;#HTMLCodeFormat("
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;Sample Page&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY&gt;
 * &lt;H3&gt;Output the passed variables&lt;/H3&gt;
 * &lt;CFOUTPUT&gt;
 * Form variable: ##form.form_test##
 * &lt;br&gt;URL variable: ##URL.url_test##
 * &lt;br&gt;Cookie variable: ##Cookie.cookie_test##
 * &lt;br&gt;CGI variable: ##CGI.cgi_test##
 * &lt;/CFOUTPUT&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * ")#&lt;/CFOUTPUT&gt;
 *
 * &lt;H3&gt;For CFHTTPPARAM code, see right frame&lt;/H3&gt;
 * &lt;!--- &lt;P&gt;
 * &lt;CFHTTP METHOD="POST" URL="http://localhost/someotherfile.cfm"&gt;
 * &lt;CFHTTPPARAM NAME="form_test" TYPE="FormField"
 *   VALUE="This is a form variable"&gt;
 * &lt;CFHTTPPARAM NAME="url_test" TYPE="URL" VALUE="This is a URL variable"&gt;
 * &lt;CFHTTPPARAM NAME="cgi_test" TYPE="CGI" VALUE="This is a CGI variable"&gt;
 * &lt;CFHTTPPARAM NAME="cookie_test" TYPE="Cookie" VALUE="This is a cookie"&gt;
 * &lt;/CFHTTP&gt;
 *
 * &lt;CFOUTPUT&gt;
 *         #CFHTTP.FileContent#
 * &lt;/CFOUTPUT&gt; ---&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFHTTPPARAM (empty) : MIME_TYPE {
   /**
    * Required. A variable name for the data being passed.
    */
   attr name;
   /**
    * Optional for TYPE="File".  Specifies the value of the URL, FormField,
    * Cookie, File, or CGI variable being passed.
    */
   attr value;
   /**
    * Required for TYPE="File".
    */
   attr file;

}
/**
 * Used with CFELSE and CFELSEIF, CFIF lets you create simple and compound
 * conditional statements in CFML.  The value in the CFIF tag can be any
 * expression.
 *
 * <PRE>
 * &lt;CFIF expression&gt;
 *     HTML and CFML tags
 * &lt;CFELSEIF&gt;
 *     HTML and CFML tags
 * &lt;CFELSE expression&gt;
 *     HTML and CFML tags
 * &lt;/CFIF&gt;
 * </PRE>
 *
 * Note that when testing for the return value of any function that returns a
 * Boolean, you do not need to explicitly define the TRUE condition.  The
 * following code uses IsArray as an example:
 *
 * <PRE>
 * &lt;CFIF IsArray(myarray)&gt;
 * </PRE>
 *
 * When successful, IsArray evaluates to YES, the string equivalent of the
 * Boolean TRUE.  This method is preferred over explicitly defining the TRUE
 * condition:
 *
 * <PRE>
 * &lt;CFIF IsArray(myarray) IS TRUE&gt;
 * </PRE>
 *
 * <B>Note:</B> On UNIX, there is a switch that provides fast date-time parsing.  If
 * you have enabled this switch, you must refer to dates in expressions in
 * the following order: month, day, and year.  For example:
 *
 * <PRE>
 * &lt;CFIF "11/23/1998 " GT "11/15/1998 "&gt;
 * </PRE>
 *
 * This switch is set on the ColdFusion Administrator Server Settings page.
 * Please refer to Administering ColdFusion Server for more information about
 * ColdFusion settings.
 *
 * <P>
 * @example
 * This example shows the interaction of CFIF, CFELSE, and CFELSEIF.
 * <PRE>
 * ...
 * &lt;H3&gt;CFIF Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFIF gives us the ability to perform conditional logic
 * based on a condition or set of conditions.
 * &lt;P&gt;For example, we can output the list of Centers from the
 * snippets datasource by group and only display them &lt;B&gt;IF&lt;/B&gt;
 * the city = San Diego.
 * &lt;hr&gt;
 * &lt;!--- use CFIF to test a condition when outputting a query ---&gt;
 * &lt;P&gt;The following are centers in San Diego:
 *
 * &lt;CFOUTPUT QUERY="getCenters" &gt;
 * &lt;CFIF city is "San Diego"&gt;
 *     &lt;BR&gt;&lt;B&gt;Name/Address:&lt;/B&gt;#Name#, #Address1#, #City#, #State#
 *     &lt;BR&gt;&lt;B&gt;Contact:&lt;/B&gt; #Contact#&lt;BR&gt;
 * &lt;/CFIF&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;P&gt;If we would like more than one condition to be the case,
 * we can ask for a list of the centers in San Diego &lt;B&gt;OR&lt;/B&gt;
 * Santa Ana.  If the center does not follow this condition, we
 * can use CFELSE to show only the names and cities of the
 * other centers.
 * &lt;P&gt;Notice how a nested CFIF is used to specify
 * the location of the featured site (Santa Ana or San Diego).
 * &lt;!--- use CFIF to specify a conditional choice for multiple
 * options; also note the nested CFIF ---&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Complete information is shown for centers in San Diego
 * or Santa Ana.  All other centers are listed in italics:
 *
 * &lt;CFOUTPUT QUERY="getCenters"&gt;
 * &lt;CFIF city is "San Diego" OR city is "Santa Ana"&gt;
 *     &lt;H4&gt;Featured Center in &lt;CFIF city is "San Diego"&gt;San
 *        Diego&lt;CFELSE&gt;Santa Ana&lt;/CFIF&gt;&lt;/H4&gt;
 *     &lt;B&gt;Name/Address:&lt;/B&gt;#Name#, #Address1#, #City#, #State#
 *     &lt;BR&gt;&lt;B&gt;Contact:&lt;/B&gt; #Contact#&lt;BR&gt;
 * &lt;CFELSE&gt;
 *     &lt;BR&gt;&lt;I&gt;#Name#, #City#&lt;/I&gt;
 * &lt;/CFIF&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;P&gt;Finally, we can use CFELSEIF to cycle through a number
 * of conditions and produce varying output.  Note that you
 * can use CFCASE and CFSWITCH for a more elegant representation
 * of this behavior.
 * &lt;hr&gt;
 * &lt;P&gt;
 * &lt;!--- use CFIF in conjunction with CFELSEIF to specify
 * more than one branch in a conditional situation ---&gt;
 * &lt;CFOUTPUT QUERY="getCenters"&gt;
 * &lt;CFIF city is "San Diego" OR city is "Santa Ana"&gt;
 *     &lt;BR&gt;&lt;I&gt;#Name#, #City#&lt;/I&gt; (this one is in &lt;CFIF city is "San
 *        Diego"&gt;San Diego&lt;CFELSE&gt;Santa Ana&lt;/CFIF&gt;)
 * &lt;CFELSEIF city is "San Francisco"&gt;
 *     &lt;BR&gt;&lt;I&gt;#Name#, #City#&lt;/I&gt; (this one is in San Francisco)
 * &lt;CFELSEIF city is "Suisun"&gt;
 *     &lt;BR&gt;&lt;I&gt;#Name#, #City#&lt;/I&gt; (this one is in Suisun)
 * &lt;CFELSE&gt;
 *     &lt;BR&gt;&lt;I&gt;#Name#&lt;/I&gt; &lt;B&gt;Not in a city we track&lt;/B&gt;
 * &lt;/CFIF&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFIF {
}
/**
 * Allows you to impersonate a user defined in a security context defined in
 * Advanced Security.  The ColdFusion Application Server enforces all the
 * privileges and restrictions that have been set up for that user with the
 * Advanced Security rules.
 *
 * <PRE>
 * &lt;CFIMPERSONATE
 *     SECURITYCONTEXT="SecurityContext"
 *     USERNAME="Name"
 *     PASSWORD="Password"
 *     TYPE= "CF" or "OS"&gt;
 *     ...
 *     HTML or CFML code to execute
 *      ...
 * &lt;/CFIMPERSONATE&gt;
 * </PRE>
 *
 * CFIMPERSONATE is typically used to run a block of code in a secure mode.
 * For impersonation of type "CF," there is automatic enforcement of access
 * control of ColdFusion resources such as files, data sources, and
 * collections between the start and end tags of CFIMPERSONATE.  If CF type
 * impersonation is turned on, the ColdFusion engine enforces the rules and
 * policies specified for the user in the Advanced Security section of the
 * ColdFusion Administrator.  Therefore, there is no need to make multiple
 * isAuthorized() calls in the code to protect each resource.
 * <P>
 * Refer to Administering ColdFusion Server for more information about
 * Advanced Security.
 *
 * <P>
 * @example
 * This example shows the use of CFIMPERSONATE to impersonate
 * a person with the user name Bill and the password BJ4YE.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;CFIMPERSONATE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;CFIMPERSONATE SECURITYCONTEXT="testContext"
 *     USERNAME="Bill"
 *     PASSWORD="BJ4YE"
 *     TYPE= "CF"&gt;
 * ...
 * &lt;/CFIMPERSONATE&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFIMPERSONATE : MIME_TYPE {
   /**
    * Required.  The security context in which the user should be authenticated.
    * If the impersonation type is "CF ," then you should specify a security
    * context that has already been defined using the ColdFusion Advanced
    * Security Administrator.  If the impersonation type is "OS," then you
    * should specify an NT domain as the security context.
    */
   attr securitycontext;
   /**
    * Required.  The user name of the user you want to impersonate.  You can
    * create a rule within ColdFusion Advanced Security to restrict a user from
    * being impersonated within a security context.
    */
   attr username;
   /**
    * Required. The password of the user that you want to impersonate.
    */
   attr password;
   /**
    */
   attr os {
      OS
   }
}
/**
 * CFINCLUDE lets you embed references to ColdFusion pages in your CFML.  If
 * necessary, you can embed CFINCLUDE tags recursively.
 * <P>
 * For an additional method of encapsulating CFML, see the CFMODULE tag, used
 * to create custom tags in CFML.
 *
 * <PRE>
 * &lt;CFINCLUDE TEMPLATE="template_name"&gt;
 * </PRE>
 *
 * <P>
 * ColdFusion searches for included files as follows:
 * <P>
 * Checks the directory in which the current page lives.  Searches
 * directories explicitly mapped in the ColdFusion Administrator for the
 * included file.
 *
 * <P>
 * @example
 * This example shows the use of CFINCLUDE to paste
 * pieces of CFML or HTML code into another page dynamically.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;CFINCLUDE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFINCLUDE Example&lt;/H3&gt;
 *
 * &lt;H4&gt;This example includes the main.htm page from the CFDOCS
 * directory.  The images do not show up correctly because
 * they are located in a separate directory.
 * However, the page appears fully rendered within the
 * contents of this page.&lt;/H4&gt;
 * &lt;CFINCLUDE TEMPLATE="/cfdocs/main.htm"&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFINCLUDE (empty) {
   /**
    * A logical path to an existing page.
    */
   attr template;

}
/**
 * Use the CFINDEX tag to populate collections with indexed data.  CFINDEX
 * and CFSEARCH encapsulate the Verity indexing and searching utilities.
 * Verity collections can be populated from either text files in a directory
 * you specify, or from a query generated by any ColdFusion query.  Before
 * you can populate a Verity collection, you need to create the collection
 * using either the CFCOLLECTION tag or the ColdFusion Administrator.  Use
 * CFSEARCH to search collections you populate with CFINDEX.
 *
 * <PRE>
 * &lt;CFINDEX COLLECTION="collection_name"
 *     ACTION="action"
 *     TYPE="type"
 *     TITLE="title"
 *     KEY="ID"
 *     BODY="body"
 *     CUSTOM1="custom_value"
 *     CUSTOM2="custom_value"
 *     URLPATH="URL"
 *     EXTENSIONS="file_extensions"
 *     QUERY="query_name"
 *     RECURSE="Yes/No"
 *     EXTERNAL="Yes/No"
 *     LANGUAGE="language"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows how to utilize CFINDEX
 * to populate an existing collection with content.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFINDEX Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFINDEX Example&lt;/H3&gt;
 *
 * &lt;!--- To index the collection, select the check box on the form ---&gt;
 * &lt;CFIF IsDefined("form.IndexCollection")&gt;
 * &lt;CFINDEX ACTION="UPDATE" COLLECTION="Snippets"
 *   KEY="c:\inetpub\wwwroot\cfdocs\snippets" TYPE="PATH" TITLE="Test"
 *     URLPATH="http://127.0.0.1/cfdocs/snippets/" EXTENSIONS=".cfm"
 *       RECURSE="Yes"&gt;
 * ...
 * </PRE>
 */
tag CFINDEX (empty) : MIME_TYPE {
   /**
    * Required.  Specifies a collection name.  If you are indexing an external
    * collection (EXTERNAL is "Yes"), specify the collection name, including
    * fully qualified path:
    * <PRE>
    * COLLECTION="e:\collections\personnel"
    * </PRE>
    * You cannot combine internal and external collections in the same indexing
    * operation.
    */
   attr collection;
   /**
    * Optional. Specifies the index action. Valid entries are:
    * <UL>
    * <LI>Update
    * <LI>Delete
    * <LI>Purge
    * <LI>Refresh
    * <LI>Optimize
    * </UL>
    */
   attr action {
      /**
       * Updates the index and adds the key specified in KEY to the index
       * if it is not already defined.
       */
      Update
      /**
       * Deletes the key specified in KEY in the specified collection.
       */
      Delete
      /**
       * Deletes data in the specified collection leaving the collection
       * intact for re-population.
       */
      Purge
      /**
       * Clears data in the specified collection prior to re-populating
       * it with new data.
       */
      Refresh
      /**
       * Optimizes the specified collection of files.  This action is
       * deprecated; use CFCOLLECTION instead.
       */
      Optimize
   }
   /**
    * Required when TYPE="Custom". Specifies one of the following:
    * <UL>
    * <LI>A title for the collection
    * <LI>A query column name for any TYPE and a valid query name
    * </UL>
    * The TITLE attribute allows searching collections by title or displaying a
    * separate title from the actual key.
    */
   attr title;
   /**
    * Optional. A unique identifier reference that specifies one of the following:
    * <UL>
    * <LI>Document filename when TYPE="File"
    * <LI>Fully qualified path when TYPE="Path"
    * <LI>A unique identifier when TYPE="Custom", such as the table
    *        column holding the primary key
    * <LI>A query column name for any other TYPE argument
    * </UL>
    */
   attr key;
   /**
    * Optional.  ASCII text to index or a query column name.  Required if
    * TYPE="Custom".  Ignored for TYPE="File" and TYPE="Path".  Invalid if
    * TYPE="Delete".  Specifies one of the following:
    * <UL>
    * <LI>The ASCII text to be indexed
    * <LI>A query column name when a valid query name is specified in QUERY
    * </UL>
    * <P>
    * Multiple columns can be specified in a comma-separated list:
    * <PRE>
    *    BODY="employee_name, dept_name, location"
    * </PRE>
    */
   attr body;
   /**
    * Optional.  A custom field you can use to store data during an indexing
    * operation.  Specify a query column name for any TYPE and a valid query
    * name.
    */
   attr custom1;
   /**
    * Optional.  A second custom field you can use to store data during an
    * indexing operation.  Usage is the same as for CUSTOM1.
    */
   attr custom2;
   /**
    * Optional.  Specifies the URL path for files when TYPE="File" and
    * TYPE="Path".  When the collection is searched with CFSEARCH, this path
    * name will automatically be prepended to all file names and returned as the
    * URL attribute.
    */
   attr urlpath;
   /**
    * Optional.  Specifies the comma-separated list of file extensions that
    * ColdFusion uses to index files when TYPE="Path".  Default is HTM, HTML,
    * CFM, CFML, DBM, DBML.  An entry of "*." returns files with no extension:
    * <PRE>
    * EXTENSIONS=".htm, .html, .cfm, .cfml, *."
    * </PRE>
    * Returns files with the specified extensions as well as files with no
    * extension.
    */
   attr extensions;
   /**
    * Optional.  Specifies the name of the query against which the collection is
    * being generated.
    */
   attr query;
   /**
    * Optional.  Yes or No.  Yes specifies that directories below the path
    * specified in KEY when TYPE="Path" will be included in the indexing
    * operation.
    */
   attr recurse {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes indicates that the collection specified in
    * COLLECTION was created outside of ColdFusion using native Verity indexing
    * tools.
    */
   attr external {
      yes no
   }
   /**
    * Optional.  To use the LANGUAGE attribute you must have the ColdFusion
    * International Search Pack installed.  The default language is English.
    */
   attr language {
      English
      German
      Finnish
      French
      Danish
      Dutch
      Italian
      Norwegian
      Portuguese
      Spanish
      Swedish
   }

}
/**
 * CFINPUT is used inside CFFORM to place radio buttons, checkboxes, or text
 * boxes.  Provides input validation for the specified control type.
 * <P>
 * CFINPUT supports the JavaScript onClick event in the same manner as the
 * HTML INPUT tag:
 *
 * <PRE>
 * &lt;CFINPUT TYPE="radio"
 *     NAME="radio1"
 *     onClick="JavaScript_function"&gt;
 * </PRE>
 *
 * <PRE>
 * &lt;CFINPUT TYPE="input_type"
 *     NAME="name"
 *     VALUE="initial_value"
 *     REQUIRED="Yes/No"
 *     RANGE="min_value, max_value"
 *     VALIDATE="data_type"
 *     ONVALIDATE="javascript_function"
 *     MESSAGE="validation_msg"
 *     ONERROR="text"
 *     SIZE="integer"
 *     MAXLENGTH="integer"
 *     CHECKED="Yes/No"
 *     PASSTHROUGH="HTML_attributes" &gt;
 * </PRE>
 *
 * You can add standard and dynamic HTML FORM tag attributes and their values
 * to the CFINPUT tag by using the PASSTHROUGH attribute.  These attributes
 * and values are passed directly through ColdFusion to the browser in
 * creating a form.
 * <P>
 * If you specify a value in quotation marks, you must escape the quotation
 * marks by doubling them, for example,
 *
 * <PRE>
 * PASSTHROUGH= "readonly= " "YES " " "
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFINPUT to validate input.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFINPUT Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFINPUT Example&lt;/H3&gt;
 *
 * &lt;!--- this example shows the use of CFINPUT within a CFFORM to
 * ensure simple validation of text items ---&gt;
 * &lt;CFFORM ACTION="cfinput.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;!--- phone number validation ---&gt;
 * Phone Number Validation (enter a properly formatted phone number):
 * &lt;BR&gt;&lt;CFINPUT TYPE="Text" NAME="MyPhone" MESSAGE="Please enter telephone
 * number, formatted xxx-xxx-xxxx (e.g. 617-761-2000)" VALIDATE="telephone"
 * REQUIRED="Yes"&gt;&lt;font size=-1 color=red&gt;Required&lt;/FONT&gt;
 * &lt;!--- zip code validation ---&gt;
 * &lt;P&gt;Zip Code Validation (enter a properly formatted zip code):
 * &lt;BR&gt;&lt;CFINPUT TYPE="Text" NAME="MyZip" MESSAGE="Please enter zip code,
 * formatted xxxxx or xxxxx-xxxx" VALIDATE="zipcode" REQUIRED="Yes"&gt;&lt;font
 * size=-1 color=red&gt;Required&lt;/FONT&gt;
 * &lt;!--- range validation ---&gt;
 * &lt;P&gt;Range Validation (enter an integer from 1 to 5):
 * &lt;BR&gt;&lt;CFINPUT TYPE="Text" NAME="MyRange" RANGE="1,5" MESSAGE="You must
 * enter an integer from 1 to 5" VALIDATE="integer" REQUIRED="No"&gt;
 * &lt;!--- date validation ---&gt;
 * &lt;P&gt;Date Validation (enter a properly formatted date):
 * &lt;BR&gt;&lt;CFINPUT TYPE="Text" NAME="MyDate" MESSAGE="Please enter a correctly
 * formatted date (dd/mm/yy)" VALIDATE="date" REQUIRED="No"&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="send my information"&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFINPUT (empty) : MIME_TYPE, INPUT_ATTRIBUTES {
   /**
    * Optional.  The size of the input control.  Ignored if TYPE is Radio or
    * Checkbox.
    */
   attr size;
   /**
    * Optional. The maximum length of text entered when TYPE is Text.
    */
   attr maxlength;
   /**
    */
   attr checked {
      yes no
   }
   /**
    * Optional.  HTML attributes that are not explicitly supported by CFINPUT.
    * If you specify an attribute and its value, the attribute and value are
    * passed to the HTML code that is generated for the CFINPUT tag.  See the
    * Usage section for more information about specifying values.
    */
   attr passthrough;

}
/**
 * CFINSERT inserts new records in data sources.
 *
 * <PRE>
 * &lt;CFINSERT DATASOURCE="ds_name"
 *     DBTYPE="type"
 *     DBSERVER="dbms"
 *     DBNAME="database name"
 *     TABLENAME="tbl_name"
 *     TABLEOWNER="owner"
 *     TABLEQUALIFIER="tbl_qualifier"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     PROVIDER="COMProvider"
 *     PROVIDERDSN="datasource"
 *     FORMFIELDS="formfield1, formfield2, ..."&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows how to use CFINSERT instead of CFQUERY
 * to place data into a datasource.
 * <PRE>
 * &lt;!--- if form.POSTED exists, we are inserting a new record,
 * so begin the CFINSERT tag ---&gt;
 * &lt;CFIF IsDefined ("form.posted")&gt;
 * &lt;CFINSERT DATASOURCE="cfsnippets"
 *     TABLENAME="Comments"
 *     FORMFIELDS="Email,FromUser,Subject,MessText,Posted"&gt;
 * &lt;H3&gt;&lt;I&gt;Your record was added to the database.&lt;/I&gt;&lt;/H3&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;!--- use a query to show the existing state of the database ---&gt;
 * &lt;CFQUERY NAME="GetComments" DATASOURCE="cfsnippets"&gt;
 * SELECT  CommentID, EMail, FromUser, Subject, CommtType, MessText,
 *   Posted, Processed
 * FROM  Comments
 * &lt;/CFQUERY&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFINSERT Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFINSERT Example&lt;/H3&gt;
 *
 * &lt;P&gt;First, we'll show a list of the available comments in the
 * cfsnippets datasource.
 *
 * &lt;!--- show all the comments in the db ---&gt;
 * &lt;TABLE&gt;
 *     &lt;TR&gt;
 *         &lt;TD&gt;From User&lt;/TD&gt;&lt;TD&gt;Subject&lt;/TD&gt;&lt;TD&gt;Comment Type&lt;/TD&gt;
 *         &lt;TD&gt;Message&lt;/TD&gt;&lt;TD&gt;Date Posted&lt;/TD&gt;
 *     &lt;/TR&gt;
 * &lt;CFOUTPUT QUERY="GetComments"&gt;
 *     &lt;TR&gt;
 *         &lt;TD valign=top&gt;&lt;a href="mailto:#Email#"&gt;#FromUser#&lt;/A&gt;&lt;/TD&gt;
 *         &lt;TD valign=top&gt;#Subject#&lt;/TD&gt;
 *         &lt;TD valign=top&gt;#CommtType#&lt;/TD&gt;
 *         &lt;TD valign=top&gt;&lt;FONT SIZE="-2"&gt;#Left(MessText, 125)#
 *             &lt;/FONT&gt;&lt;/TD&gt;
 *         &lt;TD valign=top&gt;#Posted#&lt;/TD&gt;
 *     &lt;/TR&gt;
 *
 * &lt;/CFOUTPUT&gt;
 * &lt;/TABLE&gt;
 *
 * &lt;P&gt;Next, we'll offer the opportunity to enter your own comment:
 * &lt;!--- make a form for input ---&gt;
 * &lt;FORM ACTION="cfinsert.cfm" METHOD="POST"&gt;
 * &lt;PRE&gt;
 * Email:    &lt;INPUT TYPE="Text" NAME="email"&gt;
 * From:    &lt;INPUT TYPE="Text" NAME="fromUser"&gt;
 * Subject:&lt;INPUT TYPE="Text" NAME="subject"&gt;
 * Message:&lt;TEXTAREA NAME="MessText" COLS="40" ROWS="6"&gt;&lt;/TEXTAREA&gt;
 * Date Posted:    &lt;CFOUTPUT&gt;#DateFormat(Now())#&lt;/CFOUTPUT&gt;
 * &lt;!--- dynamically determine today's date ---&gt;
 * &lt;INPUT TYPE="Hidden" NAME="posted" VALUE="&lt;CFOUTPUT&gt;#Now()#&lt;/CFOUTPUT&gt;"&gt;
 * &lt;/PRE&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="insert my comment"&gt;
 * &lt;/FORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFINSERT (empty) : DATABASE_ATTRIBUTES {

   /**
    * Optional.  A comma-separated list of form fields to insert.  If this
    * attribute is not specified, all fields in the form are included in the
    * operation.
    */
   attr formfields;

}

/**
 * CFLDAP provides an interface to LDAP (Lightweight Directory Access
 * Protocol) directory servers like the Netscape Directory Server.  For
 * complete examples of CFLDAP usage, refer to Developing Web Applications
 * with ColdFusion.
 *
 * <PRE>
 * &lt;CFLDAP SERVER="server_name"
 *     PORT="port_number"
 *     USERNAME="name"
 *     PASSWORD="password"
 *     ACTION="action"
 *     NAME="name"
 *     TIMEOUT="seconds"
 *     MAXROWS="number"
 *     START="distinguished_name"
 *     SCOPE="scope"
 *     ATTRIBUTES="attribute, attribute"
 *     FILTER="filter"
 *     FILTERFILE="&lt;file_name&gt;,&lt;stanza_name&gt;"
 *     SORT="attribute[, attribute]..."
 *     SORTCONTROL="nocase" and/or "desc" or "asc"
 *     DN="distinguished_name"
 *     STARTROW="row_number"
 *     MODIFYTYPE="REPLACE" or "ADD" or "DELETE"
 *     REBIND="Yes/No"
 *     REFERRAL="number_of_allowed_hops"
 *     SECURE="multi_field_security_string"
 *     SEPARATOR="separator_character"
 *     &gt;
 * </PRE>
 *
 * <P>
 * If you use the Query ACTION, CFLDAP creates a query object, allowing you
 * access to information in the three query variables as described in the
 * following table.
 *
 * <DL>
 * <DT>Variable Names
 * <DD>Description
 * <DT>queryname.RecordCount
 * <DD>The total number of records returned by the query.
 * <DT>queryname.CurrentRow
 * <DD>The current row of the query being processed by CFOUTPUT.
 * <DT>queryname.ColumnList
 * <DD>The list of the column names in the query.
 * </DL>
 *
 * <P>
 * The CFSSL_BASIC type of security provides V2 SSL, and the
 * CFSSL_CLIENT_AUTH type of security provides V3 SSL.  V2 SSL provides
 * encryption and server authentication.  V3 SSL adds to this
 * certificate-based client authentication.
 * <P>
 * Both forms of security encrypt the conversation, and the server always
 * sends a digital certificate to confirm that it is the right server.
 * <P>
 * For CFSSL_BASIC, you must also specify the CFLDAP attributes USERNAME and
 * PASSWORD to authenticate yourself.  V2 then encrypts the password prior to
 * transmission.
 * <P>
 * For CFSSL_CLIENT_AUTH, you do not send a user name and password; instead,
 * you perform authentication by a digital certificate that you send to the
 * server.  CFSSL_CLIENT_AUTH is much more secure; however, it is difficult
 * to administer since all the clients must have certificates, which the
 * server must be able to validate, and all the certificates must have keys
 * associated with them and passwords to protect those keys.
 *
 * <P>
 * @example
 * This example shows the use of CFLDAP.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFLDAP Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFLDAP Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFLDAP provides an interface to LDAP (Lightweight Directory Access
 * Protocol) directory servers like BigFoot
 * (&lt;a href="http://www.bigfoot.com"&gt;http://www.bigfoot.com&lt;/A&gt;).
 * &lt;P&gt;Enter a name (try your own name) and search a public LDAP resource.
 * ...
 * &lt;!--- If the server has been defined, run the query ---&gt;
 * &lt;CFIF IsDefined("form.server")&gt;
 * &lt;!--- check to see that there is a name listed ---&gt;
 * &lt;CFIF form.name is not ""&gt;
 * &lt;!--- make the LDAP query ---&gt;
 * &lt;CFLDAP
 *  SERVER="ldap.bigfoot.com"
 *  ACTION="QUERY"
 *  NAME="results"
 *  START="cn=#name#,c=US"
 *  FILTER="(cn=#name#)"
 *  ATTRIBUTES="cn,o,l,st,c,mail,telephonenumber"
 *  SORT="cn ASC"&gt;
 * &lt;!--- Display results ---&gt;
 *     &lt;CENTER&gt;
 *     &lt;TABLE BORDER=0 CELLSPACING=2 CELLPADDING=2&gt;
 *      &lt;TR&gt;
 *           &lt;TH COLSPAN=5&gt;&lt;CFOUTPUT&gt;#results.RecordCount# matches found
 *             &lt;/CFOUTPUT&gt;&lt;/TH&gt;
 *      &lt;/TR&gt;
 *      &lt;TR&gt;
 *           &lt;TH&gt;&lt;FONT SIZE="-2"&gt;Name&lt;/FONT&gt;&lt;/TH&gt;
 *           &lt;TH&gt;&lt;FONT SIZE="-2"&gt;Organization&lt;/FONT&gt;&lt;/TH&gt;
 *           &lt;TH&gt;&lt;FONT SIZE="-2"&gt;Location&lt;/FONT&gt;&lt;/TH&gt;
 *           &lt;TH&gt;&lt;FONT SIZE="-2"&gt;E-Mail&lt;/FONT&gt;&lt;/TH&gt;
 *           &lt;TH&gt;&lt;FONT SIZE="-2"&gt;Phone&lt;/FONT&gt;&lt;/TH&gt;
 *      &lt;/TR&gt;
 *     &lt;CFOUTPUT QUERY="results"&gt;
 *      &lt;TR&gt;
 *        &lt;TD&gt;&lt;FONT SIZE="-2"&gt;#cn#&lt;/FONT&gt;&lt;/TD&gt;
 *        &lt;TD&gt;&lt;FONT SIZE="-2"&gt;#o#&lt;/FONT&gt;&lt;/TD&gt;
 *        &lt;TD&gt;&lt;FONT SIZE="-2"&gt;#l#, #st#, #c#&lt;/FONT&gt;&lt;/TD&gt;
 *        &lt;TD&gt;&lt;FONT SIZE="-2"&gt;&lt;A HREF="mailto:#mail#"&gt;#mail#&lt;/A&gt;&lt;/FONT&gt;&lt;/TD&gt;
 *        &lt;TD&gt;&lt;FONT SIZE="-2"&gt;#telephonenumber#&lt;/FONT&gt;&lt;/TD&gt;
 *      &lt;/TR&gt;
 *     &lt;/CFOUTPUT&gt;
 *     &lt;/TABLE&gt;
 *     &lt;/CENTER&gt;
 * &lt;/CFIF&gt;
 * &lt;/CFIF&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFLDAP (empty) {
   /**
    * Required.  Host name ("biff.upperlip.com") or IP address ("192.1.2.225")
    * of the LDAP server.
    */
   attr server;
   /**
    * Optional. Port defaults to the standard LDAP port, 389.
    */
   attr port;
   /**
    * Optional. If no user name is specified, the LDAP connection will be anonymous.
    */
   attr username;
   /**
    * Optional. Password corresponds to user name.
    */
   attr password;
   /**
    * Optional. Specifies the LDAP action. There are five possible values:
    * <UL>
    * <LI>Query
    * <LI>Add
    * <LI>Modify
    * <LI>ModifyDN
    * <LI>Delete
    * </UL>
    */
   attr action {
     /**
      * (Default) Returns LDAP entry information only.  Requires NAME,
      */
     Query
     /**
      *  Adds LDAP entries to the LDAP server.  Requires ATTRIBUTES.
      */
     Add
     /**
      * Modifies LDAP entries on an LDAP server with the exception of
      * the distinguished name ("DN") attribute.  Requires DN, ATTRIBUTES.  See
      * the MODIFYTYPE attribute for additional controls.
      */
     Modify
     /**
      * Modifies the distinguished name attribute for LDAP entries on
      * an LDAP server.  Requires DN, ATTRIBUTES.
      */
     ModifyDN
     /**
      * Deletes LDAP entries on an LDAP server.  Requires DN.
      */
     Delete
   }
   /**
    * Required for ACTION="Query". The name you assign to the LDAP query.
    */
   attr name;
   /**
    * Optional.  Specifies the maximum amount of time in seconds to wait for
    * LDAP processing.  Defaults to 60 seconds.
    */
   attr timeout;
   /**
    * Optional. Specifies the maximum number of entries for LDAP queries.
    */
   attr maxrows;
   /**
    * Required for ACTION="Query".  Specifies the distinguished name of the
    * entry to be used to start the search.
    */
   attr start;
   /**
    * Optional.  Specifies the scope of the search from the entry specified in
    * the Start attribute for ACTION="Query".  There are three possible values:
    * <UL>
    * <LI>OneLevel
    * <LI>Base
    * <LI>Subtree
    * </UL>
    */
   attr scope {
      /**
       * (Default) Searches all entries one level beneath the entry
       * specified in the START attribute.
       */
      OneLevel
      /**
       * Searches only the entry specified in the START attribute.
       */
      Base
      /**
       * Searches the entry specified in the START attribute as well all
       * entries at all levels beneath it.
       */
      Subtree
   }
   /**
    * Required for ACTION="Query", Add, ModifyDN, and Modify.  For queries,
    * specifies the comma-separated list of attributes to be returned for
    * queries.  For queries, you can also specify the wild card "*" to get all
    * the attributes associated with the entry.  In addition, it can be used to
    * specify the list of update columns for ACTION="Add" or "Modify".  When
    * used with ACTION="Add" and Action="Modify", separate multiple attributes
    * with a semicolon.  When used with ACTION="ModifyDN", ColdFusion passes
    * attributes to the LDAP server without performing any syntax checking.
    */
   attr attributes;
   /**
    * Optional.  Specifies the search criteria for ACTION="Query".  Attributes
    * are referenced in the form: "(attribute operator value)".  Example:
    * sn=Smith)".  Default is "objectclass=*".
    * <P>
    * If you also specify the FILTERFILE attribute, the filter is considered to
    * be a search string not a filter.
    */
   attr filter;
   /**
    * Optional.  Specifies the name of a filter file and the name of the stanza
    * tag within that file that contains the LDAP filter string specification.
    * You can specify either an absolute path name or a simple file name to
    * identify the file.  If you use a simple file name, CFLDAP looks for it in
    * ColdFusion's default LDAP directory.  The default LDAP directory is
    * C:\cfusion\ldap.  The filter file must be in LDAP filter file format as
    * defined in RCF-1558.
    */
   attr filterfile;
   /**
    * Optional.  Indicates the attribute or attributes to sort query results by.
    * Use a comma to separate attributes if more than one attribute is
    * specified.
    */
   attr sort;
   /**
    * Optional.  Specifies how to sort query results.  Enter "nocase" for a
    * case-insensitive sort.  By default, sorts are case-sensitive.  You can
    * also enter "asc" for an ascending sort and "desc" for a descending sort.
    * You can enter a combination of these, for example, "nocase" and "asc".
    * The default sort order is ascending.
    */
   attr sortcontrol {
      nocase desc asc
   }
   /**
    * Required for ACTION="Add", Modify, ModifyDN, and Delete.  Specifies the
    * distinguished name for update actions.  Example: "cn=Barbara Jensen, o=Ace
    * Industry, c=US".
    */
   attr dn;
   /**
    * Optional.  Used in conjunction with ACTION="Query".  Specifies the first
    * row of the LDAP query that is to be inserted into the ColdFusion query.
    * The default is 1.  See the Usage section for more information about the
    * query object and query variables.
    */
   attr startrow;
   /**
    * Optional.  Indicates whether to Add, Delete, or Replace an attribute
    * within a multi-value list of attributes, as follows:
    * <UL>
    * <LI>Add
    * <LI>Delete
    * <LI>Replace
    * </UL>
    * <P>
    * Note that you cannot add attributes that already exist or that are NULL.
    */
   attr modifytype {
      /**
       * (default) - Replaces an existing attribute
       * with the specified attribute or attributes.
       */
      replace
      /**
       * appends the new attribute to any existing attributes.
       */
      add
      /**
       * deletes the specified attribute from the set of existing attributes.
       */
      delete
   }
   /**
    * Optional.  Yes or No.  If you set REBIND to Yes, CFLDAP attempts to rebind
    * the referral callback and reissue the query via the referred address using
    * the original credentials.  The default is No, which means referred
    * connections are anonymous.
    */
   attr rebind {
      yes no
   }
   /**
    * Optional.  Specifies the number of hops allowed in a referral.  Valid
    * values for this are integers equal to or greater than zero.  If you
    * specify zero, you turn off CFLDAP's ability to use referred addresses;
    * thus, no data is returned.
    */
   attr referral;
   /**
    * Optional.  Identifies the type of security to employ, CFSSL_BASIC or
    * CFSSL_CLIENT_AUTH, and additional information that is required by the
    * specified security type.
    *
    * <PRE>
    * SECURE="CFSSL_BASIC,certificate_db"
    * </PRE>
    * or
    * <PRE>
    * SECURE="CFSSL_CLIENT_AUTH,certificate_db,certificate_name,key_db,key_password"
    * </PRE>
    *
    * <P>
    * These fields have the following values:
    * <UL>
    * <LI>
    * certificate_db: The name of the certificate database file (in Netscape
    * cert7.db format).  You can specify either an absolute path or a simple
    * file name.
    * <LI>
    * certificate_name: The name of the client certificate to send the server.
    * <LI>
    * key_db: Keyword database that holds the public/private key-pair (in
    * Netscape key3.db format).  You can specify either an absolute path or a
    * simple file name.
    * <LI>
    * keyword_db: The password to key database.
    * </UL>
    * <P>
    * If you use a simple file name for certificate_db or keyword_db, CFLDAP
    * looks for it in ColdFusion's default LDAP directory.  The default LDAP
    * directory is C:\cfusion\ldap.
    * <P>
    * Refer to the Usage section for information about the differences between
    * the two types of security: CFSSL_BASIC and CFSSL_CLIENT_AUTH types.
    */
   attr secure;
   /**
    * Optional.  Specifies the character that CFLDAP uses to separate attribute
    * values in multi-value attributes.  This character is used by the QUERY,
    * ADD, and MODIFY action attributes, and is used by CFLDAP to output
    * multi-value attributes.  The default character is the comma (,).
    */
   attr separator;

}
/**
 * CFLOCATION opens a specified ColdFusion page or HTML file.  For
 * example, you might use CFLOCATION to specify a standard message or
 * response that you use in several different ColdFusion applications.  Use
 * the ADDTOKEN attribute to verify client requests.
 *
 * <PRE>
 * &lt;CFLOCATION URL="url" ADDTOKEN="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This view only example shows the use of CFLOCATION.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFLOCATION Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFLOCATION Example&lt;/H3&gt;
 * &lt;P&gt;CFLOCATION redirects the browser to a specified web resource;
 * normally, you would use this tag to go to another CF template or to
 * an HTML file on the same server.  The ADDTOKEN attribute allows you to
 * send client information to the target page.
 * &lt;P&gt;The following is example code to direct you back to
 * the CFDOCS home page (remove the comments and this information will
 * display within the frame):
 * &lt;!--- &lt;CFLOCATION URL="../../cfdocs/index.htm" ADDTOKEN="No"&gt; ---&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFLOCATION (empty) {
   /**
    * The URL of the HTML file or CFML page you want to open.
    */
   attr url;
   /**
    * Optional.  Yes or No.  CLIENTMANAGEMENT must be enabled (see
    * CFAPPLICATION).  A value of Yes appends client variable information to the
    * URL you specify in the URL argument.
    */
   attr addtoken {
      yes no
   }

}
/**
 * The CFLOCK tag provides two types of locks to ensure the integrity of shared data:
 * <PRE>
 *    exclusive lock
 *    read-only lock
 * </PRE>
 * <P>
 * An exclusive lock single-threads access to the CFML constructs in its
 * body.  Single-threaded access implies that the body of the tag can be
 * executed by at most one request at a time.  A request executing inside a
 * CFLOCK tag has an "exclusive lock" on the tag.  No other requests are
 * allowed to start executing inside the tag while a request has an exclusive
 * lock.  ColdFusion issues exclusive locks on a first-come, first-served
 * basis.
 * <P>
 * A read-only lock allows multiple requests to access the CFML constructs
 * inside its body concurrently.  Therefore, read-only locks should only be
 * used when the shared data will only be read and not modified.  If another
 * request already has an exclusive lock on the shared data, the request will
 * wait for the exclusive lock to be released before it can obtain it.
 *
 * <PRE>
 * &lt;CFLOCK
 *     TIMEOUT="timeout in seconds "
 *     SCOPE="Application" or "Server" or "Session"
 *     NAME="lockname"
 *     THROWONTIMEOUT="Yes/No"
 *     TYPE= "ReadOnly/Exclusive "&gt;
 *     &lt;!--- CFML to be synchronized ---&gt;
 * &lt;/CFLOCK&gt;
 * </PRE>
 * <P>
 * ColdFusion Server is a multi-threaded web application server that can
 * process multiple page requests at any given time.  Use CFLOCK to guarantee
 * that multiple concurrently executing requests do not manipulate shared
 * data structures, files, or CFXs in an inconsistent manner.  Note the
 * following:
 * <P>
 * Using CFLOCK around CFML constructs that modify shared data ensures that
 * the modifications occur one after the other and not all at the same time.
 * Using CFLOCK around file manipulation constructs can guarantee that file
 * updates do not fail due to files being open for writing by other
 * applications or ColdFusion tags.  Using CFLOCK around CFX invocations can
 * guarantee that CFXs that are not implemented in a thread-safe manner can
 * be safely invoked by ColdFusion.  This usually only applies to CFXs
 * developed in C++ using the CFAPI.  Any C++ CFX that maintains and
 * manipulates shared (global) data structures will have to be made
 * thread-safe to safely work with ColdFusion.  However, writing thread-safe
 * C++ CFXs requires advanced knowledge.  A CFML custom tag wrapper can be
 * used around the CFX to make its invocation thread-safe.
 * <P>
 * Whenever you display, set, or update variables, in one of the shared
 * scopes, use the SCOPE attribute to identify the scope as Server,
 * Application or Session.
 * <P>
 * Within the ColdFusion Administrator, the Locking page, under the Server
 * section, allows you to set different characteristics of the locking schema
 * according to scope.The following table shows which features are available
 * for Server, Application, and Session scope.
 *
 * <PRE>
 *    Features                          Server  Application  Session
 *    No automatic checking or locking  Yes     Yes          Yes
 *    Full checking                     Yes     Yes          Yes
 *    Automatic read locking            Yes     Yes          Yes
 *    Single Threaded Sessions                               Yes
 * </PRE>
 *
 * <P>
 * Each feature that you select has tradeoffs.
 * <UL>
 * <LI>
 * No automatic checking or locking.  If you select this button, no reads or
 * writes are locked or checked for correct protection.  You should select
 * this only after you have run with full checking and know that there are no
 * errors to handle and that all locking is handled programmatically.
 * Selecting this button provides the fastest performance.
 * <LI>
 * Full checking.  If you select this button, all unlocked accesses will be
 * detected.  You should select this when you are in debug mode.  Selecting
 * this button slows performance.
 * <LI>
 * Automatic read locking.  If you select this button, all reads are locked
 * and unlocked writes cause an error.  Selecting this button also slows down
 * performance considerably.
 * <LI>
 * Single-threaded sessions: If you select this button, the whole request has
 * to finish before another request for the same session is processed.
 * Selecting this button may have an effect on performance depending on the
 * request pattern.  For example, the total response time may increase if an
 * application has multiple frames that can be refreshed at once, thus
 * causing multiple requests to have to queue up and wait to be processed.
 * </UL>
 * <P>
 * For an analysis of best practices with respect to locking, please refer to
 * Administering ColdFusion Server.
 *
 * <P><B>Deadlocks</B>
 * <P>
 * CFLOCK uses kernel level synchronization objects that are released
 * automatically upon timeout and/or abnormal termination of the thread that
 * owns them.  Therefore, ColdFusion will never deadlock for an infinite
 * period of time while processing a CFLOCK tag.  However, very large
 * timeouts can block request threads for long periods of time and thus
 * radically decrease throughput.  Always use the minimum timeout value
 * allowed.
 * <P>
 * Another cause of blocked request threads is inconsistent nesting of CFLOCK
 * tags and inconsistent naming of locks.  If you are nesting locks, you and
 * everyone accessing the locked variables must consistently nest CFLOCK tags
 * in the same order .  If everyone accessing locked variables does not
 * adhere to these conventions, a deadlock can occur.  A deadlock is a state
 * in which no request can execute the locked section of the page.  Thus, all
 * requests to the protected section of the page are blocked until there is a
 * timeout.  The following tables show two scenarios that cause deadlocks.
 *
 * <P><B>Deadlock Scenario with Two Users</B>
 * <UL>
 * <LI>User 1 Locks the session scope.
 * <LI>User 2 Locks the application scope.
 * </UL>
 * <P>
 * Deadlock: Tries to lock application scope, but application scope already
 * is locked by User 2.
 * <P>
 * Deadlock: Tries to lock the session scope, but session scope already is
 * locked by User 1.
 *
 * <P><B>Deadlock Scenario With One User</B>
 * <UL>
 * <LI>User 1 Locks the session scope with a read lock.
 * <LI>Attempts to lock the session scope with an exclusive lock.
 * </UL>
 * <P>
 * Deadlock: Attempts to lock the session scope with an exclusive lock, but
 * cannot because the scope is already locked for reading.
 *
 * <P>
 * The following deadlock scenario could take place if you tried to nest a
 * write lock after a read lock, as in the following code:
 *
 * <PRE>
 * &lt;CFLOCK TIMEOUT="60" SCOPE="SESSION" TYPE="ReadOnly"&gt;
 *     ...............
 *     &lt;CFLOCK TIMEOUT="60" SCOPE="SESSION" TYPE="Exclusive"&gt;
 *     .........
 *     &lt;/CFLOCK&gt;
 * &lt;/CFLOCK&gt;
 * </PRE>
 *
 * <P>
 * Once a deadlock occurs neither of the users can do anything to break the
 * deadlock, because the execution of their requests is blocked until the
 * deadlock can be resolved by a lock timeout.
 * <P>
 * In order to avoid a deadlock, you and all who need to nest locks should do
 * so in a well-specified order and name the locks consistently.  In
 * particular, if you need to lock access to the server, application, and
 * session scopes, you must do so in the following order.
 *
 * <OL>
 * <LI>Lock the session scope.  In the CFLOCK tag, indicate the scope by
 * specifying "SESSION" as the value of the SCOPE attribute.
 * <LI>Lock the application scope.  In the CFLOCK tag, indicate scope by
 * specifying "APPLICATION" as the value of the SCOPE attribute.
 * <LI>Lock the server scope.  In the CFLOCK tag, indicate the scope by
 * specifying "SERVER" as the value of the SCOPE attribute.
 * <LI>Unlock the server scope.
 * <LI>Unlock the application scope.
 * <LI>Unlock the session scope.
 * </OL>
 *
 * <B>Note:</B> You can take out any pair of lock/unlock steps if you do not need to
 * lock a particular scope.  For example, you can take out Steps 3 and 4 if
 * you do not need to lock the server scope.  Similar rules apply for named
 * locks.
 * <P>
 * For complete usage information on CFLOCK, see Developing Web Applications
 * with ColdFusion.
 *
 * <P>
 * @example
 * This example shows how CFLOCK can be used to guarantee the
 * consistency of data updates to variables in the Application,
 * Server, and Session scopes.
 * You should copy the following code into an Application.cfm
 * file in the snippets directory.
 *
 * <PRE>
 *     &lt;HTML&gt;
 *     &lt;HEAD&gt;
 *         &lt;TITLE&gt;Define Session and Application Variables&lt;/TITLE&gt;
 *     &lt;/HEAD&gt;
 *
 *     &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 *     &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 *     &lt;H3&gt;CFAPPLICATION Example&lt;/H3&gt;
 *
 *     &lt;P&gt;CFAPPLICATION defines scoping for a ColdFusion application and
 *     enables or disables the storing of application and/or session
 *     variables. This tag is placed in a special file called
 *     Application.cfm that is run before any other CF template in a
 *     directory where the Application.cfm file appears.&lt;/P&gt;
 *
 *     &lt;CFAPPLICATION NAME="ETurtle" SESSIONTIMEOUT=#CreateTimeSpan(0, 0,
 *       0, 60)# SESSIONMANAGEMENT="yes"&gt;
 *
 * &lt;!----------------------------------------------------------------------
 *     Initialize the session and application variables that will be
 *     used by E-Turtleneck. Use the session scope for the session
 *     variables.
 * -----------------------------------------------------------------------&gt;
 *     &lt;CFLOCK SCOPE="Session" TIMEOUT="30" TYPE="Exclusive"&gt;
 *         &lt;CFIF NOT IsDefined("session.size")&gt;
 *             &lt;CFSET session.size = ""&gt;
 *         &lt;/CFIF&gt;
 *         &lt;CFIF NOT IsDefined("session.color")&gt;
 *             &lt;CFSET session.color = ""&gt;
 *         &lt;/CFIF&gt;
 *     &lt;/CFLOCK&gt;
 *
 * &lt;!---------------------------------------------------------------------
 *     Use the application lock for the application variable. This
 *     variable keeps track of the total number of turtlenecks sold. The
 *     application lock should have the same name as specified in the
 *     CFAPPLICATION tag.
 * -----------------------------------------------------------------------&gt;
 *     &lt;CFLOCK SCOPE="Application" Timeout="30" Type="Exclusive"&gt;
 *         &lt;CFIF NOT IsDefined("application.number")&gt;
 *             &lt;CFSET application.number = 1&gt;
 *         &lt;/CFIF&gt;
 *     &lt;/CFLOCK&gt;
 *     &lt;CFLOCK SCOPE="Application" TIMEOUT="30" TYPE="ReadOnly"&gt;
 *         &lt;CFOUTPUT&gt;
 *         E-Turtleneck is proud to say that we have sold
 *         #application.number# turtlenecks to date.
 *         &lt;/CFOUTPUT&gt;
 *     &lt;/CFLOCK&gt;
 * &lt;!----------------------------------------------------------------------
 *     End of Application.cfm
 * ------------------------------------------------------------------------
 * &gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFLOCK Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFLOCK Example&lt;/H3&gt;
 *
 * &lt;CFIF IsDefined("form.submit")&gt;
 *     &lt;CFOUTPUT&gt;
 *         Thank you for shopping E-Turtleneck. Today you have
 *         chosen a turtleneck in size &lt;b&gt;#form.size#&lt;/b&gt; and in the color
 *         &lt;b&gt;#form.color#&lt;/b&gt;.
 *     &lt;/CFOUTPUT&gt;
 *
 *     &lt;!-----------------------------------------------------------------
 *      Lock session variables to assign form values to them.
 *     -------------------------------------------------------------------&gt;
 *     &lt;CFLOCK SCOPE="Session" TIMEOUT="30" TYPE="Exclusive"&gt;
 *         &lt;CFPARAM NAME=session.size Default=#form.size#&gt;
 *         &lt;CFPARAM NAME=session.color Default=#form.color#&gt;
 *     &lt;/CFLOCK&gt;
 *     &lt;!------------------------------------------------------------------
 *     Lock application variable application.number to find the total number
 *     of turtlenecks sold.
 *     -------------------------------------------------------------------&gt;
 *     &lt;CFLOCK SCOPE="Application" TIMEOUT="30" TYPE="Exclusive"&gt;
 *         &lt;CFSET application.number = application.number + 1&gt;
 *     &lt;/CFLOCK&gt;
 *
 * &lt;CFELSE&gt;&lt;!--- Show the form only if it has not been submitted. ---&gt;
 *
 * &lt;FORM ACTION="cflock.cfm" METHOD="POST"&gt;
 *
 * &lt;P&gt;Congratulations! You have just selected the longest wearing, most
 * comfortable turtleneck in the world. Please indicate the color and size
 * that you wish to buy.&lt;/P&gt;
 * &lt;table cellspacing="2" cellpadding="2" border="0"&gt;
 * &lt;tr&gt;
 *     &lt;td&gt;Select a color.&lt;/td&gt;
 *     &lt;td&gt;&lt;SELECT TYPE="Text" NAME="color"&gt;
 *         &lt;OPTION&gt;red
 *         &lt;OPTION&gt;white
 *         &lt;OPTION&gt;blue
 *         &lt;OPTION&gt;turquoise
 *         &lt;OPTION&gt;black
 *         &lt;OPTION&gt;forest green
 *         &lt;/SELECT&gt;
 *     &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *     &lt;td&gt;Select a size.&lt;/td&gt;
 *     &lt;td&gt;&lt;SELECT TYPE="Text" NAME="size" &gt;
 *         &lt;OPTION&gt;XXsmall
 *         &lt;OPTION&gt;Xsmall
 *         &lt;OPTION&gt;small
 *         &lt;OPTION&gt;medium
 *         &lt;OPTION&gt;large
 *         &lt;OPTION&gt;Xlarge
 *         &lt;/SELECT&gt;
 *     &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;tr&gt;
 *     &lt;td&gt;Press Submit when you are finished making your selection.&lt;/td&gt;
 *     &lt;td&gt;&lt;INPUT TYPE="Submit" NAME="submit" VALUE="Submit"&gt;
 *     &lt;/td&gt;
 * &lt;/tr&gt;
 * &lt;/table&gt;
 * &lt;/FORM&gt;
 * &lt;/CFIF&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFLOCK {
   /**
    * Required.  Specifies the maximum amount of time in seconds to wait to
    * obtain an lock.  If a lock can be obtained within the specified period,
    * execution will continue inside the body of the tag.  Otherwise, the
    * behavior depends on the value of the THROWONTIMEOUT attribute.
    */
   attr timeout;
   /**
    * Optional.  Specifies the scope as one of the following: Application,
    * Server, or Session.  This attribute is mutually exclusive with the NAME
    * attribute.  See the Scope section for valuable information.
    */
   attr scope {
      row col rowgroup colgroup
   }
   /**
    * Optional.  Specifies the name of the lock.  Only one request will be able
    * to execute inside a CFLOCK tag with a given name.  Therefore, providing
    * the NAME attribute allows for synchronizing access to the same resources
    * from different parts of an application.  Lock names are global to a
    * ColdFusion server.  They are shared between applications and user
    * sessions, but not across clustered servers.  This attribute is mutually
    * exclusive with the SCOPE attribute.  Therefore, do not specify the SCOPE
    * attribute and the NAME attribute in the same tag.  Note that the value of
    * NAME cannot be an empty string.
    */
   attr name;
   /**
    * Optional.  Yes or No.  Specifies how timeout conditions should be handled.
    * If the value is Yes an exception will be generated to provide notification
    * of the timeout.  If the value is No execution continues past the
    * lt;/CFLOCK&gt; tag.  Default is Yes.
    */
   attr throwontimeout {
      yes no
   }
   /**
    * Optional.  ReadOnly or Exclusive.  Specifies the type of lock: read-only
    * or exclusive.  Default is Exclusive.  A read-only lock allows more than
    * one request to read shared data.  An exclusive lock allows only one
    * request to read or write to shared data.  See the following Note.
    * <P>
    * <B>Note:</B> Limit the scope of code that updates shared data.  Exclusive locks
    * are required to ensure the integrity of these updates, but they have a
    * significant impact on performance.  Read-only locks are faster.  If you
    * have a performance-sensitive application, you should substitute read- only
    * locks for exclusive locks wherever it is possible, for example, when
    * reading shared data.
    */
   attr type {
      readonly exclusive
   }

}
/**
 * Looping is a very powerful programming technique that lets you repeat a
 * set of instructions or display output over and over until one or more
 * conditions are met.  CFLOOP supports five different types of loops:
 *
 * <UL>
 * <LI><A HREF=#INDEX> Index Loops</A>
 * <LI><A HREF=#COND>  Conditional Loops</A>
 * <LI><A HREF=#QUERY> Looping over a Query</A>
 * <LI><A HREF=#LIST>  Looping over a List</A>
 * <LI><A HREF=#COM>   Looping over a COM Collection or Structure</A>
 * </UL>
 *
 * <P>
 * The type of loop is determined by the attributes of the CFLOOP tag.
 *
 * <P><B><A NAME=INDEX>Index Loops</A></B>
 * <P>
 * An index loop repeats for a number of times determined by a range of
 * numeric values.  Index loops are commonly known as FOR loops, as in "loop
 * FOR this range of values.  "
 * <P>
 * In this example, the INDEX variable is incremented for each iteration of
 * the loop.  The following code loops five times, displaying the INDEX value
 * of the loop each time:
 *
 * <PRE>
 * &lt;CFLOOP INDEX="LoopCount"
 *     FROM="1" TO="5"&gt;
 *
 * The loop index is &lt;CFOUTPUT&gt;#LoopCount#&lt;/CFOUTPUT&gt;.&lt;BR&gt;
 *
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * The result of this loop in a browser looks like this:
 *
 * <PRE>
 * The loop index is 1.
 * The loop index is 2.
 * The loop index is 3.
 * The loop index is 4.
 * The loop index is 5.
 * </PRE>
 *
 * <P>
 * In this example, the STEP value has a default value of 1.  But you can set
 * the STEP value to change the way the INDEX value is incremented.  The
 * following code counts backwards from 5:
 *
 * <PRE>
 * &lt;CFLOOP INDEX="LoopCount"
 *     FROM="5"
 *     TO="1"
 *     STEP="-1"&gt;
 *
 * The loop index is &lt;CFOUTPUT&gt;#LoopCount#&lt;/CFOUTPUT&gt;.&lt;BR&gt;
 *
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * The result of this loop in a browser looks like this:
 *
 * <PRE>
 * The loop index is 5.
 * The loop index is 4.
 * The loop index is 3.
 * The loop index is 2.
 * The loop index is 1.
 * </PRE>
 *
 * <PRE>
 * &lt;CFLOOP INDEX="parameter_name"
 *     FROM="beginning_value"
 *     TO="ending_value"
 *     STEP="increment"&gt;
 *     ...
 *     HTML or CFML code to execute
 *      ...
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * The following example increments the parameter "CountVar " from 1 to 5.
 * The results look exactly like the Index loop example.
 * <PRE>
 * &lt;!--- Set the variable CountVar to 0 ---&gt;
 * &lt;CFSET CountVar=0&gt;
 *
 * &lt;!--- Loop until CountVar = 5 ---&gt;
 * &lt;CFLOOP CONDITION="CountVar LESS THAN OR EQUAL TO 5"&gt;
 *
 *     &lt;CFSET CountVar=CountVar + 1&gt;
 *     The loop index is &lt;CFOUTPUT&gt;#CountVar#&lt;/CFOUTPUT&gt;.&lt;BR&gt;
 *
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * The result of this loop in a browser would look something like:
 * <PRE>
 * The loop index is 1.
 * The loop index is 2.
 * The loop index is 3.
 * The loop index is 4.
 * The loop index is 5.
 * </PRE>
 *
 * <P><B><A NAME=QUERY>Looping over a Query</A></B>
 * <P>
 * A loop over a query repeats for every record in the query record set.  The
 * CFLOOP results are just like a CFOUTPUT.  During each iteration of the
 * loop, the columns of the current row will be available for output.  CFLOOP
 * allows you to loop over tags that can not be used inside CFOUTPUT.
 *
 * <PRE>
 * &lt;CFLOOP QUERY="query_name"
 *     STARTROW="row_num"
 *     ENDROW="row_num"&gt;
 * </PRE>
 *
 * <P>
 * The following example shows a CFLOOP looping over a query that works in
 * the same way as a CFOUTPUT tag using the QUERY attribute:
 *
 * <PRE>
 * &lt;CFQUERY NAME="MessageRecords"
 *     DATASOURCE="cfsnippets"&gt;
 *     SELECT * FROM Messages
 * &lt;/CFQUERY&gt;
 *
 * &lt;CFLOOP QUERY="MessageRecords"&gt;
 *     &lt;CFOUTPUT&gt;#Message_ID#&lt;/CFOUTPUT&gt;&lt;BR&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * CFLOOP also provides iteration over a recordset with dynamic starting and
 * stopping points.  Thus you can begin at the tenth row in a query and end
 * at the twentieth.  This mechanism provides a simple means to get the next
 * n sets of records from a query.
 * <P>
 * The following example loops from the tenth through the twentieth record
 * returned by "MyQuery ":
 *
 * <PRE>
 * &lt;CFSET Start=10&gt;
 * &lt;CFSET End=20&gt;
 *
 * &lt;CFLOOP QUERY="MyQuery"
 *     STARTROW="#Start#"
 *     ENDROW="#End#"&gt;
 *
 *     &lt;CFOUTPUT&gt;#MyQuery.MyColName#&lt;/CFOUTPUT&gt;&lt;BR&gt;
 *
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * The loop is done when there are no more records or when the current record
 * is greater than the value of the ENDROW attribute.
 * <P>
 * The advantage of looping over a query is that you can use CFML tags that
 * are not allowed in a CFOUTPUT.  The following example combines the pages
 * returned by a query of a list of page names into a single document using
 * the CFINCLUDE tag.
 *
 * <PRE>
 * &lt;CFQUERY NAME="GetTemplate"
 *     DATASOURCE="Library"
 *     MAXROWS="5"&gt;
 *     SELECT TemplateName FROM Templates
 * &lt;/CFQUERY&gt;
 *
 * &lt;CFLOOP QUERY="TemplateName"&gt;
 *     &lt;CFINCLUDE TEMPLATE="#TemplateName#"&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * Looping over a list offers the option of walking through elements
 * contained within a variable or value returned from an expression.  In a
 * list loop, the INDEX attribute specifies the name of a variable to receive
 * the next element of the list, and the LIST attribute holds a list or a
 * variable containing a list.
 *
 * <PRE>
 * &lt;CFLOOP INDEX="index_name"
 *     LIST="list_items"
 *     DELIMITERS="item_delimiter"&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * This loop will display the names of each of the Beatles:
 *
 * <PRE>
 * &lt;CFLOOP INDEX="ListElement"
 *     LIST="John,Paul,George,Ringo"&gt;
 *         &lt;CFOUTPUT&gt;#ListElement#&lt;/CFOUTPUT&gt;&lt;BR&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * Although CFLOOP expects elements in the list to be separated by commas by
 * default, you are free to specify your own element boundaries in the
 * DELIMITER attribute.  Here's the same loop as before, only this time
 * CFLOOP will treat commas, colons, or slashes as list element delimiters:
 *
 * <PRE>
 * &lt;CFLOOP INDEX="ListElement"
 *     LIST="John/Paul,George::Ringo"
 *     DELIMITERS=",:/"&gt;
 *         &lt;CFOUTPUT&gt;#ListElement#&lt;/CFOUTPUT&gt;&lt;BR&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * Delimiters need not be specified in any particular order.  Note that
 * consecutive delimiters are treated as a single delimiter; thus the two
 * colons in the previous example are treated as a single delimiter between
 * "George " and "Ringo.  "
 *
 * <P><B><A NAME=COM>Looping over a COM Collection or Structure</A></B>
 *
 * The CFLOOP COLLECTION attribute allows you to loop over a structure or a
 * COM/DCOM collection object:
 *
 * A COM/DCOM collection object is a set of similar items referenced as a
 * group rather than individually.  For example, the group of open documents
 * in an application is a type of collection.
 *
 * A structure can contain either a related set of items or be used as an
 * associative array.  Looping is particularly useful when using a structure
 * as an associative array.
 *
 * Each collection item is referenced in the CFLOOP by the variable name that
 * you supply in the ITEM attribute.  This type of an iteration is generally
 * used to access every object within a COM/DCOM collection or every element
 * in the structure.  The loop is executed until all objects have been
 * accessed.
 *
 * The COLLECTION attribute is used with the ITEM attribute in a CFLOOP.  In
 * the example that follows, ITEM is assigned a variable called file2, so
 * that with each cycle in the CFLOOP, each item in the collection is
 * referenced.  In the CFOUTPUT section, the name property of the file2 item
 * is referenced for display.
 *
 * <P>
 * <P><B><A NAME=COND>Conditional Loops</A></B>
 * <P>
 * A conditional loop iterates over a set of instructions while a given
 * condition is TRUE.  To use this type of loop correctly, the instructions
 * must change the condition every time the loop iterates until the condition
 * evaluates as FALSE.  Conditional loops are commonly known as WHILE loops,
 * as in "loop WHILE this condition is true.  "
 *
 * <PRE>
 * &lt;CFLOOP CONDITION="expression"&gt;
 * </PRE>
 *
 * <P>
 * This example employs a COM object to output a list of files.  In this
 * example, FFUNC is a collection of file2 objects.
 * <PRE>
 * &lt;CFOBJECT CLASS=FileFunctions.files
 *     NAME=FFunc
 *     ACTION=Create&gt;
 *
 * &lt;CFSET FFunc.Path = "c:\"&gt;
 * &lt;CFSET FFunc.Mask = "*.*" &gt;
 * &lt;CFSET FFunc.attributes = 16 &gt;
 * &lt;CFSET x=FFunc.GetFileList()&gt;
 *
 * &lt;CFLOOP COLLECTION=#FFUNC# ITEM=file2&gt;
 *     &lt;CFOUTPUT&gt;
 *
 *         #file2.name# &lt;BR&gt;
 *     &lt;/CFOUTPUT&gt;
 * &lt;/CFLOOP&gt;
 * </PRE>
 *
 * <P>
 * This example loops through a structure (used as an associative array):
 *
 * <PRE>
 * ...&lt;!--- Create a structure and loop through its contents ---&gt;
 * &lt;CFSET Departments=StructNew()&gt;
 * &lt;CFSET val=StructInsert(Departments, "John ", "Sales ")&gt;
 * &lt;CFSET val=StructInsert(Departments, "Tom ", "Finance ")&gt;
 * &lt;CFSET val=StructInsert(Departments, "Mike ", "Education ")&gt;
 *
 * &lt;!--- Build a table to display the contents ---&gt;
 *
 * &lt;CFOUTPUT&gt;
 * &lt;TABLE cellpadding= "2 " cellspacing= "2 "&gt;
 *     &lt;TR&gt;
 *     &lt;TD&gt;&lt;B&gt;Employee&lt;/B&gt;&lt;/TD&gt;
 *     &lt;TD&gt;&lt;B&gt;Dept.&lt;/B&gt;&lt;/TD&gt;
 *     &lt;/TR&gt;
 *
 * &lt;!--- In CFLOOP, use ITEM to create a variable
 *     called person to hold value of key as loop runs ---&gt;
 * &lt;CFLOOP COLLECTION=#Departments# ITEM= "person "&gt;
 *     &lt;TR&gt;
 *     &lt;TD&gt;#person#&lt;/TD&gt;
 *     &lt;TD&gt;#StructFind(Departments, person)#&lt;/TD&gt;
 *     &lt;/TR&gt;
 * &lt;/CFLOOP&gt;
 * &lt;/TABLE&gt;
 * &lt;/CFOUTPUT&gt;
 * ...
 * </PRE>
 */
tag CFLOOP {
   /**
    * Required.  Defines the parameter that is the index value.  The index value
    * will be set to the FROM value and then incremented by 1 (or the STEP
    * value) until it equals the TO value.
    * <P>
    * Required.  In a list loop, the INDEX attribute specifies the name of a
    * variable to receive the next element of the list, and the LIST attribute
    * holds a list or a variable containing a list.
    */
   attr index;
   /**
    * Required. The beginning value of the index.
    */
   attr from;
   /**
    * Required. The ending value of the index.
    */
   attr to;
   /**
    * Optional.  Default is 1.  Sets the value by which the loop INDEX value is
    * incremented each time the loop is processed.
    */
   attr step;
   /**
    * Required. Specifies the query that will control the loop.
    */
   attr query;
   /**
    * Optional. Specifies the first row of the query that will be included in the loop.
    */
   attr startrow;
   /**
    * Optional. Specifies the last row of the query that will be included in the loop.
    */
   attr endrow;
   /**
    * Required. The list items in the loop, provided directly or with a variable.
    */
   attr list;
   /**
    * Optional. Specifies the delimiter characters used to separate items in the LIST.
    */
   attr delimiters;
   /**
    * Required.  Sets the condition that controls the loop.  The loop will
    * repeat as long as the condition evaluates as TRUE.  When the condition is
    * FALSE, the loop stops.
    */
   attr condition;
}
/**
 * CFMAIL allows you to send email messages via an SMTP server.
 *
 * <PRE>
 * &lt;CFMAIL TO="recipient"
 *     FROM="sender"
 *     CC="copy_to"
 *     BCC="blind_copy_to"
 *     SUBJECT="msg_subject"
 *     TYPE="msg_type"
 *     MAXROWS="max_msgs"
 *     MIMEATTACH="path"
 *     QUERY="query_name"
 *     GROUP="query_column"
 *     GROUPCASESENSITIVE="yes/no"
 *     STARTROW="query_row"
 *     SERVER="servername"
 *     PORT="port_ID"
 *     MAILERID="headerid"
 *     TIMEOUT="seconds"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This view-only example shows the use of CFMAIL.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFMAIL Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFMAIL Example&lt;/H3&gt;
 * &lt;P&gt;This view-only example shows the use of CFMAIL.  If your CFAS mail
 * settings are configured successfully and the comments are removed,
 * you will be able to use this code to send simple email.
 * &lt;!---
 * &lt;CFIF IsDefined("form.mailto")&gt;
 *     &lt;CFIF form.mailto is not "" AND form.mailfrom is not "" AND
 *       form.Subject is not ""&gt;
 *     &lt;CFMAIL TO="#form.mailto#"
 *             FROM="#form.mailFrom#"
 *             SUBJECT="#form.subject#"&gt;
 *             This message was sent by an
 *             automatic mailer built with CFMAIL:
 *             ====================================================
 *             #form.body#
 *     &lt;/CFMAIL&gt;
 *     &lt;H3&gt;Thank you&lt;/H3&gt;
 *     &lt;P&gt;Thank you, &lt;CFOUTPUT&gt;#mailfrom#: your message, #subject#, has
 *     been sent to #mailto#&lt;/CFOUTPUT&gt;.
 *     &lt;/CFIF&gt;
 * &lt;/CFIF&gt;
 * &lt;P&gt;
 * &lt;FORM ACTION="cfmail.cfm" METHOD="POST"&gt;
 * &lt;PRE&gt;
 * TO:         &lt;INPUT TYPE="Text" NAME="MailTo"&gt;
 * FROM:        &lt;INPUT TYPE="Text" NAME="MailFrom"&gt;
 * SUBJECT:    &lt;INPUT TYPE="Text" NAME="Subject"&gt;
 * &lt;hr&gt;
 * MESSAGE BODY:
 * &lt;TEXTAREA NAME="Body" COLS="40" ROWS="5" WRAP="VIRTUAL"&gt;&lt;/TEXTAREA&gt;
 * &lt;/PRE&gt;
 * &lt;!--- establish required fields ---&gt;
 * &lt;INPUT TYPE="Hidden" NAME="MailTo_required" VALUE="You must enter a
 *   recipient for this message"&gt;
 * &lt;INPUT TYPE="Hidden" NAME="MailFrom_required" VALUE="You must enter a
 *   sender for this message"&gt;
 * &lt;INPUT TYPE="Hidden" NAME="Subject_required" VALUE="You must enter a
 *   subject for this message"&gt;
 * &lt;INPUT TYPE="Hidden" NAME="Body_required" VALUE="You must enter some text
 *   for this message"&gt;
 * &lt;P&gt;&lt;INPUT TYPE="Submit" NAME=""&gt;
 * &lt;/FORM&gt;  ---&gt;
 * ...
 * </PRE>
 *
 * @see CFMAILPARAM
 */
tag CFMAIL : MIME_TYPE {
   /**
    * Required.  The name of the recipient(s) of the email message.  This can be
    * either a static address (as in, TO="support@allaire.com"), a variable that
    * contains an address (such as, TO="#Form.Email#"), or the name of a query
    * column that contains address information (such as, TO="#EMail#").  In the
    * latter case, an individual email message is sent for every row returned by
    * the query.
    */
   attr to;
   /**
    * Required.  The sender of the email message.  This attribute may be either
    * static (e.g., FROM="support@allaire.com") or dynamic (as in,
    * FROM="#GetUser.EMailAddress#").
    */
   attr from;
   /**
    * Optional.  Indicates additional addresses to copy the email message to;
    * CC" stands for "carbon copy.
    */
   attr cc;
   /**
    * Optional.  Indicates additional addresses to copy the email message
    * without listing them in the message header.  "BCC" stands for "blind
    * carbon copy."
    */
   attr bcc;
   /**
    * Required.  The subject of the mail message.  This field may be driven
    * dynamically on a message-by-message basis.  For example, if you want to do
    * a mailing that updates customers on the status of their orders, you might
    * use a subject attribute like SUBJECT="Status for Order Number #Order_ID#".
    */
   attr subject;
   /**
    * Optional.  The name of the CFQUERY from which you want to draw data for
    * message(s) you want to send.  Specify this attribute to send more than one
    * mail message, or to send the results of a query within a single message.
    */
   attr query;
   /**
    * Optional. Specifies the maximum number of email messages you want to send.
    */
   attr maxrows;
   /**
    * Optional.  Specifies the path of the file to be attached to the email
    * message.  Attached file is MIME-encoded.
    */
   attr mimeattach;
   /**
    * Optional.  Specifies the query column to use when you group sets of
    * records together to send as a single email message.  For example, if you
    * send a set of billing statements out to your customers, you might group on
    * Customer_ID." The GROUP attribute, which is case sensitive, eliminates
    * adjacent duplicates in the case where the data is sorted by the specified
    * field.  See the Usage section for exceptions.
    */
   attr group;
   /**
    * Optional.  Boolean indicating whether to group with regard to case or not.
    * The default value is YES; case is considered while grouping.  If the QUERY
    * attribute specifies a query object that was generated by a
    * case-insensitive SQL query, set the GROUPCASESENSITIVE attribute to NO to
    * keep the recordset intact.
    */
   attr groupcasesensitive {
      yes no
   }
   /**
    * Optional. Specifies the row in the query to start from.
    */
   attr startrow;
   /**
    * Required.  The address of the SMTP server to use for sending messages.
    * The server name specified in the ColdFusion Administrator is used if no
    * server is specified.
    */
   attr server;
   /**
    * The TCP/IP port on which the SMTP server listens for requests.  This is
    * almost always 25.
    */
   attr port;
   /**
    * Optional.  Specifies a mailer ID to be passed in the X-Mailer SMTP header,
    * which identifies the mailer application.  The default is Allaire
    * ColdFusion Application Server.
    */
   attr mailerid;
   /**
    * Optional.  The number of seconds to wait before timing out the connection
    * to the SMTP server.
    */
   attr timeout;

}
/**
 * CFMAILPARAM can either attach a file or add a header to a message.  If you
 * use CFMAILPARAM, it is nested within a CFMAIL tag.  You can use more than
 * one CFMAILPARAM tags within a CFMAIL tag in order to attach one or more
 * files and headers.
 *
 * <PRE>
 * &lt;CFMAIL
 *     TO="recipient"
 *     SUBJECT="msg_subject"
 *     FROM="sender"
 *     ...more attibutes...
 * &gt;
 *     &lt;CFMAILPARAM
 *         FILE="file-name"
 *     &gt;
 *     or
 *     &lt;CFMAILPARAM
 *         NAME="header-name"
 *          VALUE="header-value"
 *     &gt;
 *     ...
 * &lt;/CFMAIL&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFMAILPARAM.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFMAILPARAM Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFMMAILPARAM Example&lt;/H3&gt;
 *
 * &lt;P&gt;
 * This example uses CFMAILPARAM to attach two files and add a header to a
 * message.
 * &lt;/P&gt;
 * &lt;CFMAIL FROM="peter@domain.com" To="paul@domain.com" Subject="See
 * Important Attachments and Reply"&gt;
 *     &lt;CFMAILPARAM NAME="Reply-To" VALUE="mary@domain.com"&gt;
 *     Please read the text file and view the new logo, and let us know what
 *     you think.
 *     &lt;CFMAILPARAM FILE="c:\work\readme.txt"&gt;
 *     &lt;CFMAILPARAM FILE="c:\work\logo.gif"&gt;
 * &lt;/CFMAIL&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 *
 * @see CFMAIL
 */
tag CFMAILPARAM (empty) {
   /**
    */
   attr to;
   /**
    */
   attr subject;
   /**
    */
   attr from;
   /**
    * Required if you do not specify the NAME attribute.  Attaches the specified
    * file to the message.  This attribute is mutually exclusive with the NAME
    * attribute.
    */
   attr file;
   /**
    * Required if you do not specify the FILE attribute.  Specifies the name of
    * the header.  Header names are case insensitive.  This attribute is
    * mutually exclusive with the FILE attribute.
    */
   attr name;
   /**
    * Optional. Indicates the value of the header.
    */
   attr value;

}
/**
 * Use CFMODULE to invoke a custom tag for use in your ColdFusion application
 * pages.  CFMODULE can help deal with any custom tag name conflicts that
 * might arise.
 * <P>
 * Use the TEMPLATE attribute to name a ColdFusion page containing the custom
 * tag definition, including its path.  Use the NAME attribute to refer to
 * the custom tag using a dot notation scheme indicating the location of the
 * custom tag in the ColdFusion installation directory.
 *
 * <PRE>
 * &lt;CFMODULE TEMPLATE="template"
 *     NAME="tag_name"
 *     ATTRIBUTECOLLECTION="collection_structure"
 *     ATTRIBUTE_NAME1="value"
 *     ATTRIBUTE_NAME2="value"
 *     ...&gt;
 * </PRE>
 *
 * You can use ATTRIBUTECOLLECTION and ATTRIBUTE in the same call.
 * <P>
 * Within the custom tag code, the attributes passed with ATTRIBUTECOLLECTION
 * are saved as independent attribute values with no indication that the
 * attributes were grouped into a structure by the custom tag's caller.
 * <P>
 * Likewise, if the custom tag uses a CFASSOCIATE tag to save its attributes,
 * the attributes passed with ATTRIBUTECOLLECTION are saved as independent
 * attribute values with no indication that the attributes are grouped into a
 * structure by the custom tag's caller.
 *
 * <P>
 * @example
 * This example shows the use of CFMODULE.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFMODULE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFMODULE Example&lt;/H3&gt;
 *
 * &lt;P&gt;
 * This example shows the use of CFMODULE to call a sample custom
 * tag inline.
 * &lt;/P&gt;
 * &lt;P&gt;
 * This example makes use of a sample custom tag that has been saved in the
 * file myTag.cfm in the snippets directory. You can also save ColdFusion
 * custom tags in the Cfusion\CustomTags directory. For more information
 * about using Custom Tags, please refer to
 * &lt;i&gt;Developing Web Applications&lt;/i&gt;.
 * &lt;/P&gt;
 * &lt;!--- show the code in the custom tag---&gt;
 * &lt;P&gt;Here is the code in the custom tag.&lt;/P&gt;
 * &lt;CFOUTPUT&gt;#HTMLCodeFormat("&lt;CFSET X = attributes.x&gt;
 * &lt;CFSET Y = attributes.y&gt;
 * &lt;CFSET A = attributes.value1&gt;
 * &lt;CFSET B = attributes.value2&gt;
 * &lt;CFSET C = attributes.value3&gt;
 * &lt;CFSET caller.result = x + y + a + b + c&gt;")#
 * &lt;/CFOUTPUT&gt;
 * &lt;!--- end sample tag ---&gt;
 *
 * &lt;CFSET attrCollection1 = StructNew()&gt;
 * &lt;CFSET attrCollection1.value1 = 22&gt;
 * &lt;CFSET attrCollection1.value2 = 45&gt;
 * &lt;CFSET attrCollection1.value3 = 88&gt;
 *
 * &lt;!--- Call the tag with CFMODULE with Name---&gt;
 * &lt;CFMODULE
 *    Template="..\snippets\myTag.cfm"
 *     X="3"
 *     attributeCollection=#attrCollection1#
 *     Y="4"&gt;
 *
 * &lt;!--- show the code ---&gt;
 * &lt;P&gt;Here is one way in which to invoke the custom tag,
 * using the TEMPLATE attribute.&lt;/P&gt;
 * &lt;CFOUTPUT&gt;#HTMLCodeFormat(    "&lt;CFMODULE
 *     Template=""..\snippets\myTag.cfm""
 *     X=3
 *     attributeCollection=##attrCollection1##
 *     Y=4&gt;")#
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;The result: &lt;CFOUTPUT&gt;#result#&lt;/CFOUTPUT&gt; &lt;/P&gt;
 *
 * &lt;!--- Call the tag with CFMODULE with Name---&gt;
 * &lt;CFMODULE
 *     NAME="myTag"
 *     X="3"
 *     attributeCollection=#attrCollection1#
 *     Y="4"&gt;
 *
 * &lt;!--- show the code ---&gt;
 * &lt;P&gt;Here is another way to invoke the custom tag,
 * using the NAME attribute.&lt;/P&gt;
 * &lt;CFOUTPUT&gt;#HTMLCodeFormat(    "&lt;CFMODULE
 *     NAME='myTag'
 *     X=3
 *     attributeCollection=##attrCollection1##
 *     Y=4&gt;")#
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;The result: &lt;CFOUTPUT&gt;#result#&lt;/CFOUTPUT&gt;
 *
 * &lt;!--- Call the tag using the short cut notation ---&gt;
 * &lt;CF_myTag
 *     X="3"
 *     attributeCollection=#attrCollection1#
 *     Y="4"&gt;
 *
 * &lt;!--- show the code ---&gt;
 * &lt;P&gt;Here is the short cut to invoking the same tag.&lt;/P&gt;
 * &lt;CFOUTPUT&gt;#HTMLCodeFormat(    "&lt;CF_myTag
 *     X=3
 *     attributeCollection=##attrCollection1##
 *     Y=4&gt;")#
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;The result: &lt;CFOUTPUT&gt;#result#&lt;/CFOUTPUT&gt;&lt;/P&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFMODULE (empty) {
   /**
    * Used in place of NAME, defines a path to the application page (.cfm file)
    * implementing the tag.  Relative paths are expanded from the current page.
    * Physical paths are not allowed.  Absolute paths are expanded using the
    * ColdFusion mappings.
    */
   attr template;
   /**
    * Used in place of TEMPLATE, defines the name of the custom tag in the form
    * Name.Name.Name...  " that uniquely identifies a subdirectory containing
    * the custom tag page under the root directory for CF custom tags.  For
    * example:
    * <PRE>
    * &lt;CFMODULE NAME="Allaire.Forums40.GetUserOptions"&gt;
    * </PRE>
    * Identifies the page GetUserOptions.cfm in the directory
    * CustomTags\Allaire\Forums40 under the root directory of the ColdFusion
    * installation.
    */
   attr name;
   /**
    */
   attr attribute;
   /**
    * Optional.  A structure that contains a collection of key-value pairs that
    * represent attribute names and their values.  You can specify as many
    * key-value pairs as needed.  However, you can specify the
    * ATTRIBUTECOLLECTION attribute only once.  See Usage for more information.
    */
   attr attributecollection;
   /**
    * Optional.  Attributes you want your custom tag to use.  You can use as
    * many attributes as needed to specify the parameters of a custom tag.  Each
    */
   attr attribute_name;

}
/**
 * The CFOBJECT tag allows you to call methods in COM, CORBA, and JAVA objects.
 * <P>
 * <B>Note:</B> ColdFusion administrators can disable the CFOBJECT tag in the
 * ColdFusion Administrator Basic Security page.
 * <P>
 * On UNIX, COM objects are not currently supported by CFOBJECT.
 * <P>
 * Depending on the value you assign to the TYPE attribute of CFOBJECT, there
 * are several additional attributes you can set.  This table shows which
 * attributes you can use with each CFOBJECT TYPE.
 *
 * <DL compact>
 * <DT>TYPE
 * <DD>Attributes
 * <DT>COM
 * <DD>ACTION, CLASS, NAME, CONTEXT, SERVER
 * <DT>CORBA
 * <DD>ACTION, CONTEXT, CLASS, NAME, LOCALE
 * <DT>JAVA
 * <DD>ACTION, TYPE, CLASS, NAME
 * </DL>
 */
tag CFOBJECT (empty) : MIME_TYPE {
   /**
    */
   attr action;
   /**
    */
   attr class;
   /**
    */
   attr name;
   /**
    */
   attr context;
   /**
    */
   attr server;
   /**
    */
   attr locale;

}
/**
 * Displays the results of a database query or other operation.  If you need
 * to nest CFOUTPUT tags, please read the "Usage" section.
 *
 * <PRE>
 * &lt;CFOUTPUT
 *     QUERY="query_name"
 *     GROUP="query_column"
 *     GROUPCASESENSITIVE="yes/no"
 *     STARTROW="start_row"
 *     MAXROWS="max_rows_output"&gt;
 * &lt;/CFOUTPUT&gt;
 * </PRE>
 *
 * In order to nest CFOUTPUT blocks, you must specify the GROUP and QUERY
 * attributes at the top-most level, and the GROUP attribute for all inner
 * blocks except for the inner-most CFOUTPUT block.
 *
 * <P>
 * @example
 * This example shows how CFOUTPUT operates.
 * <PRE>
 * &lt;!--- run a sample query ---&gt;
 * &lt;CFQUERY NAME="GetCourses" DATASOURCE="cfsnippets"&gt;
 * SELECT Dept_ID, CorName, CorLevel
 * FROM courseList
 * ORDER by Dept_ID, CorLevel, CorName
 *
 * &lt;/CFQUERY&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFOUTPUT&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY&gt;
 * &lt;H3&gt;CFOUTPUT Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFOUTPUT simply tells ColdFusion Server
 * to begin processing, and then to hand back control
 * of page rendering to the web server.
 *
 * &lt;P&gt;For example, to show today's date, you could write
 * #DateFormat("#Now()#").  If you enclosed that expression
 * in CFOUTPUT, the result would be &lt;CFOUTPUT&gt;#DateFormat(Now())#
 *   &lt;/CFOUTPUT&gt;.
 *
 * &lt;P&gt;In addition, CFOUTPUT may be used to show the results of
 *
 * a query operation, or only a partial result, as shown:
 *
 * &lt;P&gt;There are &lt;CFOUTPUT&gt;#getCourses.recordCount#&lt;/CFOUTPUT&gt; total records
 * in our query.  Using the MAXROWS parameter, we are limiting our
 * display to 4 rows.
 * &lt;P&gt;
 * &lt;CFOUTPUT QUERY="GetCourses" MAXROWS=4&gt;
 * &lt;PRE&gt;#Dept_ID#    #CorName#    #CorLevel#&lt;/PRE&gt;
 *
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;P&gt;CFOUTPUT can also show the results of a more complex expression,
 * such as getting the day of the week from today's date.  We first
 * extract the integer representing the Day of the Week from
 * the server function Now() and then apply the result to
 * the DayofWeekAsString function:
 *
 * &lt;BR&gt;Today is #DayofWeekAsString(DayofWeek(Now()))#
 * &lt;BR&gt;Today is &lt;CFOUTPUT&gt;#DayofWeekAsString(DayofWeek(Now()))#&lt;/CFOUTPUT&gt;
 *
 * &lt;P&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFOUTPUT {
   /**
    * Optional.  Specifies the maximum number of rows you want displayed in the
    * output section.
    */
   attr maxrows;
   /**
    * Optional.  The name of the CFQUERY from which you want to draw data for
    * the output section.
    */
   attr query;
   /**
    * Optional.  Specifies the query column to use when you group sets of
    * records together.  Use this attribute if you have retrieved a record set
    * ordered on a certain query column.  For example, if you have a record set
    * that is ordered according to "Customer_ID" in the CFQUERY tag, you can
    * group the output on "Customer_ID." The GROUP attribute, which is case
    * sensitive, eliminates adjacent duplicates in the case where the data is
    * sorted by the specified field.  See the GROUPCASESENSITIVE attribute for
    * information about specifying a case insensitive grouping.
    */
   attr group;
   /**
    * Optional.  Boolean indicating whether to group with regard to case or not.
    * The default value is YES; case is considered while grouping.  If the QUERY
    * attribute specifies a query object that was generated by a
    * case-insensitive SQL query, set the GROUPCASESENSITIVE attribute to NO to
    * keep the recordset intact.
    */
   attr groupcasesensitive {
      yes no
   }
   /**
    * Optional. Specifies the row from which to start output.
    */
   attr startrow;

}

/**
 * CFPARAM is used to test for a parameter's existence, and optionally test
 * its data type, and provide a default value if one is not assigned.
 *
 * <PRE>
 * &lt;CFPARAM NAME="param_name"
 *     TYPE="data_type"&gt;
 *     DEFAULT="value"&gt;
 * </PRE>
 * There are three ways to use CFPARAM:
 * <UL>
 * <LI>
 * Test for a required variable -- Use CFPARAM with only the NAME attribute
 * to test that a required variable exists.  If the variable does not exist,
 * ColdFusion server stops processing the page and returns an error.
 * <LI>
 * Test for a required variable and for the type of variable -- Use CFPARAM
 * with the NAME attribute and the TYPE attribute to test that a required
 * variable exists, and that it is of the specified type.
 * <LI>
 * Test for an optional variable -- Use CFPARAM with both the NAME and
 * DEFAULT attributes to test for the existence of an optional variable.  If
 * the variable exists, processing continues and the value is not changed.
 * If the variable does not exist, it is created and set to the value of the
 * DEFAULT attribute.
 * </UL>
 *
 * <P>
 * @example
 * This example shows how CFPARAM operates.
 * <PRE>
 * &lt;CFPARAM NAME="storeTempVar" DEFAULT="my default value"&gt;
 * &lt;CFPARAM NAME="tempVar" DEFAULT="my default value"&gt;
 *
 * &lt;!--- check if form.tempVar was passed ---&gt;
 * &lt;CFIF IsDefined("form.tempVar") is "True"&gt;
 * &lt;!--- check if form.tempVar is not blank ---&gt;
 *     &lt;CFIF form.tempVar is not ""&gt;
 * &lt;!--- if not, set tempVar to value of form.tempVar ---&gt;
 *         &lt;CFSET tempVar = form.tempVar&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFPARAM Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 *
 * &lt;H3&gt;CFPARAM Example&lt;/H3&gt;
 * &lt;P&gt;CFPARAM is used to set default values so that
 * the developer does not need to check for the existence
 * of a variable using a function like IsDefined.
 *
 * &lt;P&gt;The default value of our tempVar is "&lt;CFOUTPUT&gt;#StoreTempVar#
 *   &lt;/CFOUTPUT&gt;"
 *
 * &lt;!--- check if tempVar is still the same as StoreTempVar
 * and that tempVar is not blank ---&gt;
 * &lt;CFIF tempVar is not #StoreTempVar# and tempVar is not ""&gt;
 * &lt;H3&gt;The value of tempVar has changed: the new value
 * is &lt;CFOUTPUT&gt;#tempVar#&lt;/CFOUTPUT&gt;&lt;/H3&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;P&gt;
 * &lt;FORM ACTION="cfparam.cfm" METHOD="POST"&gt;
 * Type in a new value for tempVar, and hit submit:&lt;BR&gt;
 * &lt;INPUT TYPE="Text" NAME="tempVar"&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="submit"&gt;
 *
 * &lt;/FORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFPARAM (empty) : MIME_TYPE {
   /**
    * The name of the parameter you are testing (such as "Client.Email " or
    * Cookie.BackgroundColor ").  If you omit the DEFAULT attribute, an error
    * occurs if the specified parameter does not exist.
    */
   attr name;
   /**
    * Optional. Default value to set the parameter to if it does not exist.
    */
   attr default;
   /**
    * a Universally Unique Identifier (UUID) formatted as
    * XXXXXXXX-XXXX-XXXX-XXXXXXXXXXXXXXX' where `X' stands for a hexadecimal
    * digit (0-9 or A-F).  See CreateUUID.  variableName a valid variable name.
    */
   attr uuid;

}
/**
 * CFPOP retrieves and deletes email messages from a POP mail server.  See
 * also CFMAIL.
 *
 * <PRE>
 * &lt;CFPOP SERVER="servername"
 *     PORT="port_number"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     ACTION="action"
 *     NAME="queryname"
 *     MESSAGENUMBER="number"
 *     ATTACHMENTPATH="path"
 *     TIMEOUT="seconds"
 *     MAXROWS="number"
 *     STARTROW="number"
 *     GENERATEUNIQUEFILENAMES="boolean"&gt;
 * </PRE>
 *
 * <P><B>CFPOP Query Variables</B>
 * <P>
 * The following table describes the query variables that are returned by
 * CFPOP.  The example illustrates their use.
 *
 * <DT>Variable Names
 * <DD>Description
 * <DT>queryname.RecordCount
 * <DD>The total number of records returned by the query.
 * <DT>queryname.CurrentRow
 * <DD>The current row of the query being processed by CFOUTPUT.
 * <DT>queryname.ColumnList
 * <DD>The list of the column names in the query.
 * </DL>
 *
 * <P><B>Message Header and Body Columns</B>
 * <P>
 * The following table lists the message header and body columns that are
 * returned by CFPOP when you specify the ACTION attribute to be either
 * GetHeaderOnly or GetAll.  All of the columns are returned if you specify
 * GetAll, but only header information is returned when you specify
 * GetHeaderOnly.
 *
 * <PRE>
 *     Column Name                GetHeaderOnly returns   GetAll returns
 *     queryname.date             yes                     yes
 *     queryname.from             yes                     yes
 *     queryname.messagenumber    yes                     yes
 *     queryname.replyto          yes                     yes
 *     queryname.subject          yes                     yes
 *     queryname.cc               yes                     yes
 *     queryname.to               yes                     yes
 *     queryname.body             not available           yes
 *     queryname.header           not available           yes
 *     queryname.attachments      not available           yes
 *     queryname.attachmentfiles  not available           yes
 * </PRE>
 *
 * To create a ColdFusion date/time object from the date-time string that is
 * extracted from a mail message in the queryname.date column, use the
 * following table to determine what to do.
 * <P>
 * Use the ParseDateTime function and specify the POP attribute, which
 * converts the date-time value to Greenwich Meantime.
 *
 * <P><B>Other locales</B>
 * <P>
 * Extract the date portion of the string and pass it to the LSParseDateTime
 * function, then add or subtract the conversion time, depending on the
 * locale.
 * <P>
 * See also the description of the SetLocale function.
 * <P>
 * For complete usage information on CFPOP, see Developing Web Applications
 * with ColdFusion.
 *
 * <P>
 * @example
 * This view-only example shows the use of CFPOP.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFPOP Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFPOP Example&lt;/H3&gt;
 * &lt;P&gt;CFPOP allows you to retrieve and manipulate mail
 * in a POP3 mailbox.  This view-only example shows how to
 * create one feature of a mail client, allowing you to display
 * the mail headers in a POP3 mailbox.
 *
 * &lt;P&gt;Simply uncomment this code and run with a mail-enabled CF Server to
 * see this feature in action.
 * &lt;!---
 * &lt;CFIF IsDefined("form.server ")&gt;
 * &lt;!--- make sure server, username are not empty ---&gt;
 * &lt;CFIF form.server is not "" and form.username is not ""&gt;
 *      &lt;CFPOP SERVER= "#server# " USERNAME=#UserName# PASSWORD=#pwd#
 *      ACTION= "GETHEADERONLY " NAME= "GetHeaders "&gt;
 *
 *      &lt;H3&gt;Message Headers in Your Inbox&lt;/H3&gt;
 *      &lt;P&gt;Number of Records:
 *      &lt;CFOUTPUT&gt;#GetHeaders.RecordCount#&lt;/CFOUTPUT&gt;&lt;/P&gt;
 *      &lt;UL&gt;
 *      &lt;CFOUTPUT QUERY="GetHeaders"&gt;
 *          &lt;LI&gt;Row: #CurrentRow#:  From: #From# -- Subject: #Subject#
 *      &lt;/CFOUTPUT&gt;
 *     &lt;/UL&gt;
 * &lt;/CFIF&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;FORM ACTION= "cfpop.cfm " METHOD= "POST "&gt;
 * &lt;P&gt;Enter your mail server:
 * &lt;P&gt;&lt;INPUT TYPE= "Text " NAME= "server "&gt;
 * &lt;P&gt;Enter your username:
 * &lt;P&gt;&lt;INPUT TYPE= "Text " NAME= "username "&gt;
 * &lt;P&gt;Enter your password:
 * &lt;P&gt;&lt;INPUT TYPE= "password " NAME= "pwd "&gt;
 * &lt;INPUT TYPE= "Submit " NAME= "get message headers "&gt;
 * &lt;/FORM&gt;
 * ---&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFPOP (empty) {
   /**
    * Required.  Host name (biff.upperlip.com) or IP address (192.1.2.225) of
    * the POP server.
    */
   attr server;
   /**
    * Optional. Defaults to the standard POP port, 110.
    */
   attr port;
   /**
    * Optional.  If no user name is specified, the POP connection is anonymous.
    */
   attr username;
   /**
    * Optional. Password corresponds to user name.
    */
   attr password;
   /**
    * Optional. Specifies the mail action. There are three possible values:
    * <UL>
    * <LI>GetHeaderOnly
    * <LI>GetAll
    * <LI>Delete
    * </UL>
    * <P>
    * <B>Note:</B> Two retrieve options are offered to maximize performance.  Message
    * header information is typically short and therefore quick to transfer.
    * Message text and attachments can be very long and therefore take longer to
    * process.  See the Message Header and Body Columns table, which follows the
    * CFPOP attribute descriptions, for information on retrieving header and
    * body information form the query when you specify GetHeaderOnly or GetAll.
    */
   attr action {
      /**
       * (Default) Returns message header information only.
       */
      GetHeaderOnly
      /**
       * Returns message header information, message text, and
       * attachments if ATTACHMENTPATH is specified.
       */
      GetAll
      /**
       *  Deletes messages on the POP server.
       */
      Delete
   }
   /**
    * Optional.  The name you assign to the index query.  Required for
    * ACTION="GetHeaderOnly" and ACTION="GetAll".
    */
   attr name;
   /**
    * Optional.  Specifies the message number(s) for the given action.
    * MESSAGENUMBER is required for ACTION="Delete".  If it is provided for
    * ACTION="GetHeaderOnly" or ACTION="GetAll", only referenced messages will
    * be retrieved.  If it is omitted for ACTION="GetHeaderOnly"or
    * ACTION="GetAll", all messages available on the server are returned.
    *
    * MESSAGENUMBER can contain individual message numbers or a comma-separated
    * list of message numbers.  Invalid message numbers will be ignored.
    */
   attr messagenumber;
   /**
    * Optional.  Allows attachments to be written to the specified directory
    * when ACTION="GetAll".  If an invalid ATTACHMENTPATH is specified, no
    * attachment files are written to the server.
    */
   attr attachmentpath;
   /**
    * Optional.  Specifies the maximum amount of time in seconds to wait for
    * mail processing.  Defaults to 60 seconds.
    */
   attr timeout;
   /**
    * Optional.  Specifies the maximum number of entries for mail queries.  This
    * attribute is ignored if MESSAGENUMBER is specified.
    */
   attr maxrows;
   /**
    * Optional.  Specifies the first row number to be retrieved.  Default is 1.
    * This attribute is ignored if MESSAGENUMBER is specified.
    */
   attr startrow;
   /**
    * Optional.  Boolean indicating whether to generate unique file names for
    * the files attached to an email message in order to avoid naming conflicts
    * when the files are saved.  The default is NO.
    */
   attr generateuniquefilenames;

}
/**
 * Suppresses extraneous white space, and other output, produced by the CFML
 * within the tag's scope.
 *
 * <PRE>
 * &lt;CFPROCESSINGDIRECTIVE
 *     SUPPRESSWHITESPACE="Yes" or "No"&gt;
 * ... any CFML tags here ...
 * &lt;/CFPROCESSINGDIRECTIVE&gt;
 * </PRE>
 *
 * <P>
 * If a CFPROCESSINGDIRECTIVE tag's scope includes another
 * CFPROCESSINGDIRECTIVE tag, then the inner tag's settings override the
 * enclosing tag's settings within the body of the inner tag, where they
 * differ.  If the enclosing tag specifies settings that the inner tag does
 * not, those settings remain in effect within the inner tag's scope.
 * <P>
 * CFPROCESSINGDIRECTIVE settings do not apply to templates included via
 * CFINCLUDE, CFMODULE, custom tag invocation, etc.
 *
 * <P>
 * @example
 * This example shows the use of a nested &lt;CFPROCESSINGDIRECTIVE&gt; tag.
 * The outer &lt;CFPROCESSINGDIRECTIVE&gt; tag suppresses unnecessary
 * whitespace during computation of a large table while the inner
 * &lt;CFPROCESSINGDIRECTIVE&gt; tag honors all whitespace to output the
 * preformatted table.
 * <PRE>
 * &lt;CFPROCESSINGDIRECTIVE SUPPRESSWHITESPACE="yes"&gt;
 * ... any CFML tags here ...
 * &lt;CFPROCESSINGDIRECTIVE SUPPRESSWHITESPACE="no"&gt;
 * &lt;CFOUTPUT&gt;#interesting_stuff#&lt;/CFOUTPUT&gt;
 * &lt;/CFPROCESSINGDIRECTIVE&gt;
 * </PRE>
 */
tag CFPROCESSINGDIRECTIVE {
   /**
    * Required.  Boolean indicating whether to suppress the white space and
    * other output generated by the CFML tags within the CFPROCESSINGDIRECTIVE
    * block.
    */
   attr suppresswhitespace {
      yes no
   }

}
/**
 * The CFPROCPARAM tag is nested within a CFSTOREDPROC tag.  You use it to
 * specify parameter information, including type, name, value, and length.
 *
 * <PRE>
 * &lt;CFPROCPARAM TYPE="IN/OUT/INOUT"
 *     VARIABLE="variable name"
 *     DBVARNAME="DB variable name"
 *     VALUE="parameter value"
 *     CFSQLTYPE="parameter datatype"
 *     MAXLENGTH="length"
 *     SCALE="decimal places"
 *     NULL="yes/no"&gt;
 * </PRE>
 *
 * Use this tag to identify stored procedure parameters and their data type.
 * Code one CFPROCPARAM tag for each parameter.  The parameters you code
 * vary, based on parameter type and DBMS.  Additionally, the order in which
 * you code CFPROCPARAM tags matters, depending on whether the stored
 * procedure was coded using positional notation or named notation:
 * <P>
 * Positional notation -- Order is very important if the stored procedure was
 * defined using positional notation.  ColdFusion passes these parameters to
 * the stored procedure in the order in which they are defined.
 * <P>
 * Named notation -- If named notation is used, the DBVarName for the
 * parameter must correspond to the variable name in the stored procedure on
 * the server.
 * <P>
 * Output variables will be scoped with the name of the VARIABLE attribute
 * that was passed to the tag.
 *
 * <P>
 * @example
 * The following view-only example executes a Sybase stored procedure
 * that returns three result sets, two of which we want. The
 * stored procedure returns the status code and one output
 * parameter, which we display. We use named notation
 * for the parameters.
 * <PRE>
 * ...
 * &lt;!--- CFSTOREDPROC tag ---&gt;
 * &lt;CFSTOREDPROC PROCEDURE="foo_proc"
 *     DATASOURCE="MY_SYBASE_TEST"    USERNAME="sa"
 *     PASSWORD=""    DBSERVER="scup"    DBNAME="pubs2"
 *     RETURNCODE="YES"    DEBUG&gt;
 * &lt;!--- CFPROCRESULT tags ---&gt;
 * &lt;CFPROCRESULT NAME = RS1&gt;
 * &lt;CFPROCRESULT NAME = RS3 RESULTSET = 3&gt;
 * &lt;!---  CFPROCPARAM tags ---&gt;
 * &lt;CFPROCPARAM TYPE="IN"
 *     CFSQLTYPE=CF_SQL_INTEGER
 *         VALUE="1"    DBVARNAME=@param1&gt;
 *
 * &lt;CFPROCPARAM TYPE="OUT"    CFSQLTYPE=CF_SQL_DATE
 *     VARIABLE=FOO DBVARNAME=@param2&gt;
 * &lt;!--- Close the CFSTOREDPROC tag ---&gt;
 * &lt;/CFSTOREDPROC&gt;
 * &lt;CFOUTPUT&gt;
 * The output param value: '#foo#'
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;h3&gt;The Results Information&lt;/h3&gt;
 * &lt;CFOUTPUT QUERY = RS1&gt;#NAME#,#DATE_COL#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS1.RecordCount# &gt;p&gt;Columns: #RS1.ColumnList#
 * &lt;hr&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;CFOUTPUT QUERY=RS3&gt;#col1#,#col2#,#col3#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS3.RecordCount# &lt;P&gt;Columns: #RS3.ColumnList#
 * &lt;hr&gt;
 * The return code for the stored procedure is:
 *   '#CFSTOREDPROC.STATUSCODE#'&lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * ...
 * </PRE>
 */
tag CFPROCPARAM (empty) {
   /**
    * Optional.  Indicates whether the passed variable is an input, output or
    * input/output variable.  Default is IN.
    */
   attr type {
      in out inout
   }
   /**
    * Required for OUT and INOUT parameters.  This is the ColdFusion variable
    * name that you use to reference the value that the output parameter
    * represents after the call is made to the stored procedure.
    */
   attr variable;
   /**
    * Required if named notation is desired.  This is the parameter name.  This
    * corresponds to the name of the parameter in the stored procedure.
    */
   attr dbvarname;
   /**
    * Required.  Specifies the actual value that ColdFusion passes to the right
    * of the comparison operator in a where clause.  See Usage section for
    * details.
    */
   attr value;
   /**
    * Optional.  This is the SQL type that the parameter (any type) will be
    * bound to.  The default value is CF_SQL_CHAR.
    */
   attr cfsqltype {
      CF_SQL_BIGINT
      CF_SQL_IDSTAMP
      CF_SQL_REFCURSOR
      CF_SQL_BIT
      CF_SQL_INTEGER
      CF_SQL_SMALLINT
      CF_SQL_CHAR
      CF_SQL_LONGVARCHAR
      CF_SQL_TIME
      CF_SQL_DATE
      CF_SQL_MONEY
      CF_SQL_TIMESTAMP
      CF_SQL_DECIMAL
      CF_SQL_MONEY4
      CF_SQL_TINYINT
      CF_SQL_DOUBLE
      CF_SQL_NUMERIC
      CF_SQL_VARCHAR
      CF_SQL_FLOAT
      CF_SQL_REAL
   }
   /**
    * Optional. Maximum length of the parameter.
    */
   attr maxlength;
   /**
    * Optional. Number of decimal places of the parameter.
    */
   attr scale;
   /**
    * Optional.  Specify Yes or No.  Indicates whether the parameter is passed
    * as a NULL.  If you specify Yes, the tag ignores the VALUE attribute.
    */
   attr null {
      yes no
   }
   /**
    * Required for IN and INOUT parameters.  This corresponds to the actual
    * value that ColdFusion passes to the stored procedure.
    */
   attr value;
}
/**
 * The CFPROCRESULT tag is nested within a CFSTOREDPROC tag.  This tag's NAME
 * parameter specifies a result set name that other ColdFusion tags, such as
 * CFOUTPUT and CFTABLE, use to access the result set.  It also allows you to
 * optionally identify which of the stored procedure's result sets to return.
 *
 * <PRE>
 * <CFPROCRESULT NAME="query_name"
 *     RESULTSET="1-n"
 *     MAXROWS="maxrows">
 * </PRE>
 * <P>
 * Specify one or more CFPROCRESULT tags to enable access to data returned by
 * the stored procedure.
 * <P>
 * RESULTSET must be unique within the scope of the CFSTOREDPROC tag.  If you
 * specify the same result set twice, the second occurrence overwrites the
 * first.
 *
 * <P>
 * @example
 * The following example executes a Sybase stored procedure
 * that returns three result sets, two of which we want. The
 * stored procedure returns the status code and one output
 * parameter, which we display. We use named notation
 * for the parameters.
 * <PRE>
 * ...
 * &lt;!--- CFSTOREDPROC tag ---&gt;
 * &lt;CFSTOREDPROC PROCEDURE="foo_proc"
 *     DATASOURCE="MY_SYBASE_TEST"    USERNAME="sa"
 *     PASSWORD=""    DBSERVER="scup"    DBNAME="pubs2"
 *     RETURNCODE="YES"    DEBUG&gt;
 * &lt;!--- CFPROCRESULT tags ---&gt;
 * &lt;CFPROCRESULT NAME = RS1&gt;
 * &lt;CFPROCRESULT NAME = RS3 RESULTSET = 3&gt;
 * &lt;!---  CFPROCPARAM tags ---&gt;
 * &lt;CFPROCPARAM TYPE="IN"
 *     CFSQLTYPE=CF_SQL_INTEGER
 *         VALUE="1"    DBVARNAME=@param1&gt;
 *
 * &lt;CFPROCPARAM TYPE="OUT"    CFSQLTYPE=CF_SQL_DATE
 *     VARIABLE=FOO DBVARNAME=@param2&gt;
 * &lt;!--- Close the CFSTOREDPROC tag ---&gt;
 * &lt;/CFSTOREDPROC&gt;
 * &lt;CFOUTPUT&gt;
 * The output param value: '#foo#'
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;h3&gt;The Results Information&lt;/h3&gt;
 * &lt;CFOUTPUT QUERY = RS1&gt;#NAME#,#DATE_COL#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS1.RecordCount# &gt;p&gt;Columns: #RS1.ColumnList#
 * &lt;hr&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;CFOUTPUT QUERY=RS3&gt;#col1#,#col2#,#col3#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS3.RecordCount# &lt;P&gt;Columns: #RS3.ColumnList#
 * &lt;hr&gt;
 * The return code for the stored procedure is:
 *   '#CFSTOREDPROC.STATUSCODE#'&lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * ...
 * </PRE>
 */
tag CFPROCRESULT (empty) {
   /**
    * Required. Name for the query result set.
    */
   attr name;
   /**
    * Optional.  Specify this parameter to identify the desired result set if
    * the stored procedure returns multiple result sets.  Default is 1.
    */
   attr resultset;
   /**
    * Optional.  Specifies the maximum number of rows returned in the result
    * set.  The default is to return all rows in the result set.
    */
   attr maxrows;

}
/**
 * CFQUERY passes SQL statements for any purpose to your data source.
 * Not limited to queries.
 *
 * <PRE>
 * &lt;CFQUERY NAME="query_name"
 *     DATASOURCE="ds_name"
 *     DBTYPE="type"
 *     DBSERVER="dbms"
 *     DBNAME="database name"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     MAXROWS="number"
 *     BLOCKFACTOR="blocksize"
 *     TIMEOUT="milliseconds"
 *     CACHEDAFTER="date"
 *     CACHEDWITHIN="timespan"
 *     PROVIDER="COMProvider"
 *     PROVIDERDSN="datasource"
 *     DEBUG="Yes/No"&gt;
 * </PRE>
 *
 * <P><B>SQL statements</B>
 *
 * <PRE>
 * &lt;/CFQUERY&gt;
 * </PRE>
 *
 * <P>
 * In addition to returning data from a ColdFusion data source, the CFQUERY
 * tag also returns informations about the query.  CFQUERY.ExecutionTime
 * returns the time it took the query to execute in milliseconds.
 * <P>
 * CFQUERY creates a query object, providing you information in three query
 * variables as described in the following table.
 *
 * <DL>
 * <DT>Variable Name
 * <DD>Description
 * <DT>query_name.RecordCount
 * <DD>The total number of records returned by the query.
 * <DT>query_name.CurrentRow
 * <DD>The current row of the query being processed by CFOUTPUT.
 * <DT>query_name.ColumnList
 * <DD>Returns a comma-delimited list of the query columns.
 * </DL>
 *
 * You can cache query results and execute stored procedures.  For
 * information about caching CFQUERY results, executing stored procedures,
 * and displaying CFQUERY output, see Developing Web Applications with
 * ColdFusion.
 *
 * <P>
 * @example
 * This example shows the use of CFQUERY.
 * <PRE>
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;CFQUERY Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFQUERY Example&lt;/H3&gt;
 *
 * &lt;!--- define startrow and maxrows to facilitate
 *     'next N' style browsing ---&gt;
 * &lt;CFPARAM NAME="MaxRows" DEFAULT="10"&gt;
 * &lt;CFPARAM NAME="StartRow" DEFAULT="1"&gt;
 *
 * &lt;!--- query database for information ---&gt;
 * &lt;CFQUERY NAME="GetParks" DATASOURCE="cfsnippets"&gt;
 * SELECT      PARKNAME, REGION, STATE
 * FROM         Parks
 * ORDER by ParkName, State
 * &lt;/CFQUERY&gt;
 *
 * &lt;!--- build HTML table to display query ---&gt;
 * &lt;TABLE cellpadding=1 cellspacing=1&gt;
 * &lt;TR&gt;
 *     &lt;TD colspan=2 bgcolor=f0f0f0&gt;
 *     &lt;B&gt;&lt;I&gt;Park Name&lt;/I&gt;&lt;/B&gt;
 *     &lt;/TD&gt;
 *     &lt;TD bgcolor=f0f0f0&gt;
 *     &lt;B&gt;&lt;I&gt;Region&lt;/I&gt;&lt;/B&gt;
 *     &lt;/TD&gt;
 *     &lt;TD bgcolor=f0f0f0&gt;
 *     &lt;B&gt;&lt;I&gt;State&lt;/I&gt;&lt;/B&gt;
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 *
 * &lt;!--- Output the query and define the startrow and maxrows
 *       parameters. Use the query variable CurrentCount to
 *       keep track of the row you are displaying. ---&gt;
 * &lt;CFOUTPUT QUERY="GetParks" StartRow="#StartRow#" MAXROWS="#MaxRows#"&gt;
 * &lt;TR&gt;
 *     &lt;TD valign=top bgcolor=ffffed&gt;
 *     &lt;B&gt;#GetParks.CurrentRow#&lt;/B&gt;
 *     &lt;/TD&gt;
 *     &lt;TD valign=top&gt;
 *     &lt;FONT SIZE="-1"&gt;#ParkName#&lt;/FONT&gt;
 *     &lt;/TD&gt;
 *     &lt;TD valign=top&gt;
 *     &lt;FONT SIZE="-1"&gt;#Region#&lt;/FONT&gt;
 *     &lt;/TD&gt;
 *     &lt;TD valign=top&gt;
 *     &lt;FONT SIZE="-1"&gt;#State#&lt;/FONT&gt;
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;!--- If the total number of records is less than or equal
 * to the total number of rows, then offer a link to
 * the same page, with the StartRow value incremented by
 * MaxRows (in the case of this example, incremented by 10) ---&gt;
 * &lt;TR&gt;
 *     &lt;TD colspan=4&gt;
 *     &lt;CFIF (StartRow + MaxRows) LTE GetParks.RecordCount&gt;
 *         &lt;a href="cfquery.cfm?startrow=&lt;CFOUTPUT&gt;#Evaluate(StartRow +
 *         MaxRows)#&lt;/CFOUTPUT&gt;"&gt;See next &lt;CFOUTPUT&gt;#MaxRows#&lt;/CFOUTPUT&gt;
 *         rows&lt;/A&gt;
 *     &lt;/CFIF&gt;
 *
 *     &lt;/TD&gt;
 * &lt;/TR&gt;
 * &lt;/TABLE&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFQUERY : DATABASE_ATTRIBUTES {
   /**
    * Required.  The name you assign to the query.  Query names must begin with
    * a letter and may consist of letters, numbers, and the underscore character
    * spaces are not allowed).  The query name is used later in the page to
    * reference the query's record set.
    */
   attr name;
   }
   /**
    * Optional.  If specified, USERNAME overrides the username value specified
    * in the data source setup.
    */
   attr username;
   /**
    * Optional.  If specified, PASSWORD overrides the password value specified
    * in the data source setup.
    */
   attr password;
   /**
    * Optional.  Specifies the maximum number of rows you want returned in the
    * record set.
    */
   attr maxrows;
   /**
    * Optional.  Specifies the maximum number of rows to fetch at a time from
    * the server.  The range is 1 (default) to 100.  This parameter applies to
    * ORACLE native database drivers and to ODBC drivers.  Certain ODBC drivers
    * may dynamically reduce the block factor at runtime.
    */
   attr blockfactor;
   /**
    * Optional.  Lets you specify a maximum number of milliseconds for the query
    * to execute before returning an error indicating that the query has
    * timed-out.  This attribute is not supported by most ODBC drivers.  TIMEOUT
    * is supported by the SQL Server 6.x or above driver.  The minimum and
    * maximum allowable values vary, depending on the driver.
    */
   attr timeout;
   /**
    * Optional.  Specify a date value (for example, 4/16/98, April 16, 1999,
    * 4-16-99).  ColdFusion uses cached query data if the date of the original
    * query is after the date specified.  Effective only if query caching has
    * been enabled in the ColdFusion Administrator.  To use cached data, the
    * current query must use the same SQL statement, data source, query name,
    * user name, password, and DBTYPE.  Additionally, for native drivers it must
    * have the same DBSERVER and DBNAME (Sybase only).
    * <P>
    * Years from 0 to 29 are interpreted as 21st century values.  Years 30 to 99
    * are interpreted as 20th century values.
    * <P>
    * When specifying a date value as a string, make sure it is enclosed in
    * quotes.
    */
   attr cachedafter;
   /**
    * Optional.  Enter a timespan using the ColdFusion CreateTimeSpan function.
    * Cached query data will be used if the original query date falls within the
    * time span you define.  The CreateTimeSpan function is used to define a
    * period of time from the present backwards.  Effective only if query
    * caching has been enabled in the ColdFusion Administrator.  To use cached
    * data, the current query must use the same SQL statement, data source,
    * query name, user name, password, and DBTYPE.  Additionally, for native
    * drivers it must have the same DBSERVER and DBNAME (Sybase only).
    */
   attr cachedwithin;
   /**
    * Optional. COM provider (OLE-DB only).
    */
   attr provider;
   /**
    * Optional. Data source name for the COM provider (OLE-DB only).
    */
   attr providerdsn;
   /**
    * Optional.  Used for debugging queries.  Specifying this attribute causes
    * the SQL statement actually submitted to the data source and the number of
    * records returned from the query to be output.
    */
   attr debug {
      yes no
   }

}
/**
 * CFQUERYPARAM checks the data type of a query parameter.  The CFQUERYPARAM
 * tag is nested within a CFQUERY tag.  More specifically, it is embedded
 * within the query SQL statement.  If you specify its optional parameters,
 * CFQUERYPARAM also performs data validation.
 * <P>
 * <B>Note:</B> For data, you must specify the MAXLENGTH attribute in order to ensure
 * that maximum length validation is enforced.
 *
 * <PRE>
 * &lt;CFQUERY NAME="query_name"
 *     DATASOURCE="ds_name"
 *     ...other attributes...
 * &gt;
 *     SELECT STATEMENT WHERE column_name=
 *     &lt;CFQUERYPARAM VALUE="parameter value"
 *         CFSQLType="parameter type"
 *         MAXLENGTH="maximum parameter length"
 *         SCALE="number of decimal places"
 *         DBNAME="database name"
 *         NULL="Yes/No"
 *     &gt;
 *     AND/OR ...additional criteria of the WHERE clause...
 * &lt;/CFQUERY&gt;
 * </PRE>
 *
 * The CFQUERYPARAM is designed to do the following things:
 * <UL>
 * <LI>Allows the use of SQL bind parameters.
 * <LI>Allows long text fields to be updated from an SQL statement.
 * <LI>Improves performance.
 * </UL>
 *
 * <P>
 * The ColdFusion ODBC, DB2, Informix, Oracle 7 and Oracle 8 drivers support
 * SQL bind parameters.  However, at present, the ColdFusion Sybase 11 driver
 * and Sybase native driver do not support SQL bind parameters.
 * <P>
 * If a database does not support bind parameters, ColdFusion still performs
 * validation and substitutes the validated parameter value back into the
 * string.  If validation fails, an error message is returned.  The
 * validation rules follow:
 * <P>
 * For types CF_SQL_SMALLINT, CF_SQL_INTEGER, CF_SQL_REAL, CF_SQL_FLOAT,
 * CF_SQL_DOUBLE, CF_SQL_TINYINT, CF_SQL_MONEY, CF_SQL_MONEY4,
 * CF_SQL_DECIMAL, CF_SQL_NUMERIC, and CF_SQL_BIGINT, data values can be
 * converted to a numeric value.
 * <P>
 * For types CF_SQL_DATE, CF_SQL_TIME and CF_SQL_TIMESTAMP, data values can
 * be converted to a date supported by the target data source.
 * <P>
 * For all other types, if the MAXLENGTH attribute is used, data value cannot
 * exceed the maximum length specified.
 * <P>
 * The SQL syntax generated by the ColdFusion server is dependent on the
 * target database.
 *
 * <P>
 * For an ODBC, DB2, or Informix data source, the generated syntax of the SQL
 * statement is as follows:
 * <PRE>
 * SELECT *
 * FROM courses
 * WHERE col1=?
 * </PRE>
 * <P>
 * For an Oracle 7 or Oracle 8 data source, the syntax of the SQL statement
 * is as follows:
 * <PRE>
 * SELECT *
 * FROM courses
 * WHERE col1=:1
 * </PRE>
 * <P>
 * For a Sybase11 data source, the syntax of the SQL statement is as follows:
 * <PRE>
 * SELECT *
 * FROM courses
 * WHERE col1=10
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFQUERYPARAM when valid input is given in
 * Course_ID.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFQUERYPARAM Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;h3&gt;CFQUERYPARAM Example&lt;/h3&gt;
 * &lt;CFSET Course_ID=12&gt;
 * &lt;CFQUERY NAME="getFirst" DATASOURCE="cfsnippets"&gt;
 *     SELECT *
 *     FROM courses
 *     WHERE Course_ID=&lt;CFQUERYPARAM VALUE="#Course_ID#"
 *     CFSQLType="CF_SQL_INTEGER"&gt;
 * &lt;/CFQUERY&gt;
 * &lt;CFOUTPUT QUERY="getFirst"&gt;
 * &lt;P&gt;Course Number: #number#&lt;br&gt;
 *  Description: #descript#
 * &lt;/P&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 * <P>
 * This example shows the use of CFQUERYPARAM when invalid numeric data is
 * in Course_ID.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFQUERYPARAM Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;h3&gt;CFQUERYPARAM Example With Bad Numeric Data&lt;/h3&gt;
 * &lt;CFSET Course_ID="12; DELETE courses WHERE Course_ID=20"&gt;
 * &lt;CFQUERY NAME="getFirst" DATASOURCE="cfsnippets"&gt;
 *     SELECT *
 *     FROM courses
 *     WHERE Course_ID=&lt;CFQUERYPARAM VALUE="#Course_ID#"
 *     CFSQLType="CF_SQL_INTEGER"&gt;
 * &lt;/CFQUERY&gt;
 * &lt;CFOUTPUT QUERY="getFirst"&gt;
 * &lt;P&gt;Course Number: #number#&lt;br&gt;
 *  Description: #descript#
 * &lt;/P&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 * <P>
 * The CFQUERYPARAM tag returns the following error message when this example is executed.
 * <PRE>
 * VALUE
 * Invalid data '12; DELETE courses WHERE Course_ID=20' for
 *         CFSQLTYPE 'CF_SQL_INTEGER'.
 * </PRE>
 * <P>
 * This example shows the use of CFQUERYPARAM when invalid string data is in
 * Course_ID.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFQUERYPARAM Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;h3&gt;CFQUERYPARAM Example with Bad String Input&lt;/h3&gt;
 *
 * &lt;CFSET LastName="Peterson; DELETE employees WHERE LastName='Peterson'"&gt;
 * </PRE>
 * <P>
 * Note that for string input you must specify the MAXLENGTH attribute for
 * validation.
 * <PRE>
 * &lt;CFQUERY NAME="getFirst" DATASOURCE="cfsnippets"&gt;
 *     SELECT *
 *     FROM employees
 *     WHERE LastName=&lt;CFQUERYPARAM VALUE="#LastName#"
 *     CFSQLType="CF_SQL_VARCHAR"
 *     MAXLENGTH="17"&gt;
 * &lt;/CFQUERY&gt;
 * &lt;CFOUTPUT QUERY="getFirst"&gt;
 * &lt;P&gt;Course Number: #FirstName# #LastName#
 *  Description: #Department#
 * &lt;/P&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 * <P>
 * The CFQUERYPARAM tag returns the following error message when this
 * example is executed.
 * <PRE>
 * VALUE
 * Invalid data 'Peterson; DELETE employees WHERE
 *         LastName='Peterson'' value exceeds MAXLENGTH setting '17'.
 * </PRE>
 */
tag CFQUERYPARAM (empty) {
   /**
    */
   attr name;
   /**
    */
   attr datasource;
   /**
    * Required.  Specifies the actual value that ColdFusion passes to the right
    * of the comparison operator in a where clause.  See Usage section for
    * details.
    */
   attr value;
   /**
    * Optional.  This is the SQL type that the parameter (any type) will be
    * bound to.  The default value is CF_SQL_CHAR.
    */
   attr cfsqltype {
      CF_SQL_BIGINT
      CF_SQL_IDSTAMP
      CF_SQL_REFCURSOR
      CF_SQL_BIT
      CF_SQL_INTEGER
      CF_SQL_SMALLINT
      CF_SQL_CHAR
      CF_SQL_LONGVARCHAR
      CF_SQL_TIME
      CF_SQL_DATE
      CF_SQL_MONEY
      CF_SQL_TIMESTAMP
      CF_SQL_DECIMAL
      CF_SQL_MONEY4
      CF_SQL_TINYINT
      CF_SQL_DOUBLE
      CF_SQL_NUMERIC
      CF_SQL_VARCHAR
      CF_SQL_FLOAT
      CF_SQL_REAL
   }
   /**
    * Optional.  Maximum length of the parameter.  The default value is the
    * length of the string specified in the VALUE attribute.
    */
   attr maxlength;
   /**
    * Optional.  Number of decimal places of the parameter.  The default value
    * is zero.  Applicable for CF_SQL_NUMERIC and CF_SQL_DECIMAL.
    */
   attr scale;
   /**
    */
   attr dbname;
   /**
    * Optional.  Specify Yes or No.  Indicates whether the parameter is passed
    * as a NULL.  If you specify Yes, the tag ignores the VALUE attribute.  The
    * default value is No.
    */
   attr null {
      yes no
   }

}

/**
 * The CFREGISTRY tag reads, writes, and deletes keys and values in the
 * system registry.  CFREGISTRY is supported on all platforms, including
 * Solaris and HP-UX.
 * <P>
 * <B>Note:</B> The ColdFusion Server Basic security settings may prevent CFRegistry
 * from executing.  These settings are managed using the ColdFusion
 * Administrator Basic Security page.  In order for CFRegistry to execute, it
 * needs to be enabled on the Basic Security page.  Please refer to
 * Administering ColdFusion Serverfor more information about securing
 * ColdFusion tags.
 * <P>
 * Depending on the value you assign to the ACTION attribute of CFREGISTRY,
 * there are several additional attributes you set.  This table shows which
 * attributes you can use with each CFREGISTRY ACTION.
 *
 * <DL compact>
 * <DT>Action
 * <DD>Attributes
 * <DT>GetAll
 * <DD>BRANCH, TYPE, NAME, SORT
 * <DT>Get
 * <DD>BRANCH, ENTRY, TYPE, VARIABLE
 * <DT>Set
 * <DD>BRANCH, ENTRY, TYPE, VALUE
 * <DT>Delete
 * <DD>BRANCH, ENTRY
 * </DL>
 */
tag CFREGISTRY (empty) : MIME_TYPE {
   /**
    */
   attr action {
      getall get set delete
   }
   /**
    */
   attr branch;
   /**
    */
   attr name;
   /**
    */
   attr sort;
   /**
    */
   attr entry;
   /**
    */
   attr variable;
   /**
    */
   attr value;

}
/**
 * CFREPORT runs a predefined Crystal Reports report.
 *
 * <PRE>
 * &lt;CFREPORT REPORT="report_path"
 *     ORDERBY="result_order"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     FORMULA="formula"&gt;
 * &lt;/CFREPORT&gt;
 * </PRE>
 *
 * <PRE>
 * FORMULA="Name1='Val_1a;;Val_1b';Name2='Val2';"
 * </PRE>
 *
 * <P>
 * @example
 * This view-only example shows the use of CFREPORT.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFREPORT Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFREPORT Tag&lt;H3&gt;
 * &lt;P&gt;CFREPORT allows reports from the Crystal Reports Professional
 * report writer to be displayed through a ColdFusion interface.
 * The CFREPORT tag requires the name of the report to run;
 * CFREPORT can also pass information to the report
 * file being displayed to change the output conditions.
 *
 * &lt;P&gt;This example would run a report called
 * "monthlysales.rpt " and pass it an optional filter condition to
 * show only the information for a certain subset of the report.
 *
 * &lt;CFREPORT REPORT='/reports/monthlysales.rpt'&gt;
 *           {Departments.Department} = `International'
 * &lt;/CFREPORT&gt;
 *
 * &lt;P&gt;Substitute your own report files and filters for this code
 * and CFREPORT can place your existing Crystal Reports into web pages.
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFREPORT {
   /**
    * Required.  Specifies the path of the report.  Store your Crystal Reports
    * files in the same directories that you store your ColdFusion page files.
    */
   attr report;
   /**
    * Optional. Orders results according to your specifications.
    */
   attr orderby;
   /**
    * Optional.  The username required for entry into the database from which
    * the report is created.  Overrides the default settings for the data source
    * in the ColdFusion Administrator.
    */
   attr username;
   /**
    * Optional.  The password that corresponds to a username required for
    * database access.  Overrides the default settings for the data source in
    * the ColdFusion Administrator.
    */
   attr password;
   /**
    * Optional.  Specifies one or more named formulas.  Terminate each formula
    * specification with a semicolon.  Use the following format:
    * <PRE>
    *    FORMULA="formulaname1='formula1';formulaname2='formula2';"
    * </PRE>
    * If you need to use a semi-colon as part of a formula, you must escape it
    * by typing the semi-colon twice (;;), for example:
    */
   attr formula;

}

/**
 * Rethrows the currently active exception.  &lt;CFRETHROW&gt; preserves the
 * exception's CFCATCH.TYPE and CFCATCH.TAGCONTEXT information.
 *
 * <PRE>
 * &lt;CFRETHROW&gt;
 * </PRE>
 *
 * Use the &lt;CFRETHROW&gt; tag within a &lt;CFCATCH&gt; block.  This tag is
 * useful in error handling code when the error handler is not able to
 * successfully handle the thrown error.
 *
 * <P>
 * @example
 * This example shows the use of CFRETHROW.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFRETHROW Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFRETHROW Example&lt;/H3&gt;
 *
 * &lt;!--- Rethrow a DATABASE exception. ---&gt;
 *
 * &lt;CFTRY&gt;
 *     &lt;CFTRY&gt;
 *         &lt;CFQUERY NAME="GetMessages" DATASOURCE="cfsnippets"&gt;
 *             SELECT   *
 *             FROM     Messages
 *         &lt;/CFQUERY&gt;
 *     &lt;CFCATCH TYPE="DATABASE"&gt;
 *         &lt;!-----------------------------------------------------------
 *         If the database signalled a 50555 error, we can ignore it,
 *         otherwise rethrow the exception.
 *         -------------------------------------------------------------&gt;
 *         &lt;CFIF CFCATCH.sqlstate neq 50555&gt;
 *             &lt;CFRETHROW&gt;
 *         &lt;/CFIF&gt;
 *     &lt;/CFCATCH&gt;
 *     &lt;/CFTRY&gt;
 *
 * &lt;CFCATCH&gt;
 *     &lt;h3&gt;Sorry, this request can't be completed&lt;/h3&gt;
 *     &lt;h4&gt;Catch variables&lt;/h4&gt;
 *     &lt;CFOUTPUT&gt;
 *         &lt;CFLOOP COLLECTION=#cfcatch# item="c"&gt;
 *             &lt;br&gt;&lt;CFIF IsSimpleValue(cfcatch[c])&gt;#c# = #cfcatch[c]#&lt;/CFIF&gt;
 *         &lt;/CFLOOP&gt;
 *     &lt;/CFOUTPUT&gt;
 * &lt;/CFCATCH&gt;
 * &lt;/CFTRY&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 *
 * @see CFTRY
 * @see CFCATCH
 */
tag CFRETHROW (empty) {
}

/**
 * CFSCHEDULE provides a programmatic interface to the ColdFusion scheduling
 * engine.  You can run a specified page at scheduled intervals with the
 * option to write out static HTML pages.  This allows you to offer users
 * access to pages that publish data, such as reports, without forcing users
 * to wait while a database transaction is performed in order to populate the
 * data on the page.
 * <P>
 * ColdFusion scheduled events are registered using the ColdFusion
 * Administrator.  In addition, execution of CFSCHEDULE can be disabled in
 * the Administrator.  Information supplied by the user includes the
 * scheduled ColdFusion page to execute, the time and frequency for executing
 * the page, and if the output from the task should be published.  If the
 * output is to be published then a path and file is specified.
 * <P>
 * The event submission and its success or failure status is written to the
 * \cfusion\log\schedule.log file.
 *
 * <PRE>
 * &lt;CFSCHEDULE ACTION="Update"
 *     TASK="taskname"
 *     OPERATION="HTTPRequest"
 *     FILE="filename"
 *     PATH="path_to_file"
 *     STARTDATE="date"
 *     STARTTIME="time"
 *     URL="URL"
 *     PUBLISH="Yes/No"
 *     ENDDATE="date"
 *     ENDTIME="time"
 *     INTERVAL="seconds"
 *     REQUESTTIMEOUT="seconds"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     RESOLVEURL="Yes/No"
 *     PROXYSERVER="hostname"
 *     PORT="port_number"
 *     PROXYPORT="port_number"
 * &gt;
 * </PRE>
 *
 * <PRE>
 * &lt;CFSCHEDULE ACTION="Delete" TASK="TaskName"&gt;
 * &lt;CFSCHEDULE ACTION="Run" TASK="TaskName"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows an example of CFSCHEDULE.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFSCHEDULE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFSCHEDULE Example&lt;/H3&gt;
 * &lt;P&gt;CFSCHEDULE provides a programmatic interface to
 * the ColdFusion scheduling engine.  You can run a specified
 * page at scheduled intervals with the option to write out
 * static HTML pages.  This allows you to offer users access
 * to pages that publish data, such as reports, without
 * forcing users to wait while a database transaction is performed
 * to populate the data on the page.
 *
 * &lt;CFSCHEDULE ACTION="UPDATE"
 *     TASK="TaskName"
 *     OPERATION="HTTPRequest"
 *     URL="http://127.0.0.1/playpen/history.cfm"
 *     STARTDATE="8/7/98"
 *     STARTTIME="12:25 PM"
 *     INTERVAL="3600"
 *     RESOLVEURL="Yes"
 *     PUBLISH="Yes"
 *     FILE="sample.html"
 *     PATH="c:\inetpub\wwwroot\playpen"
 *     REQUESTTIMEOUT="600"&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFSCHEDULE (empty) {
   /**
    * Required. Valid entries are:
    * <UL>
    * <LI>Delete
    * <LI>Update
    * <LI>Run
    * </UL>
    */
   attr action {
      /**
       * Deletes task specified by TASK.
       */
      Delete
      /**
       * Creates a new task if one does not exist.
       */
      Update
      /**
       * Executes task specified by TASK.
       */
      Run
   }
   /**
    * Required. The name of the task to delete, update, or run.
    */
   attr task;
   /**
    * Required when creating tasks with ACTION="Update".  Specify the type of
    * operation the scheduler should perform when executing this task.  For now
    * only OPERATION="HTTPRequest" is supported for static page generation.
    */
   attr operation;
   /**
    * Required with PUBLISH="Yes." A valid filename for the published file.
    */
   attr file;
   /**
    * Required with PUBLISH="Yes." The path location for the published file.
    */
   attr path;
   /**
    * Required when ACTION="Update". The date when scheduling of the task should start.
    */
   attr startdate;
   /**
    * Required when creating tasks with ACTION="Update".  Enter a value in
    * seconds.  The time when scheduling of the task should start.
    */
   attr starttime;
   /**
    * Required when ACTION="Update". The URL to be executed.
    */
   attr url;
   /**
    * Optional. Yes or No. Specifies whether the result should be saved to a file.
    */
   attr publish;
   /**
    * Optional. The date when the scheduled task should end.
    */
   attr enddate;
   /**
    * Optional. The time when the scheduled task should end. Enter a value in seconds.
    */
   attr endtime;
   /**
    * Required when creating tasks with ACTION="Update".  Interval at which task
    * should be scheduled.  Can be set in seconds or as Once, Daily, Weekly,
    * Monthly, and Execute.  The default interval is one hour and the minimum
    * interval is one minute.
    */
   attr interval;
   /**
    * Optional.  Customizes the REQUESTTIMEOUT for the task operation.  Can be
    * used to extend the default timeout for operations that require more time
    * to execute.
    */
   attr requesttimeout;
   /**
    * Optional. Username if URL is protected.
    */
   attr username;
   /**
    * Optional. Password if URL is protected.
    */
   attr password;
   /**
    * Optional.  Yes or No.  Specifies whether to resolve links in the result
    * page to absolute references.
    */
   attr resolveurl;
   /**
    * Optional. Host name or IP address of a proxy server.
    */
   attr proxyserver;
   /**
    * Optional.  The port number on the server from which the task is being
    * scheduled.  Default is 80.  When used with RESOLVEURL, the URLs of
    * retrieved documents that specify a port number are automatically resolved
    * to preserve links in the retrieved document.
    */
   attr port;
   /**
    * Optional.  The port number on the proxy server from which the task is
    * being requested.  Default is 80.  When used with RESOLVEURL, the URLs of
    * retrieved documents that specify a port number are automatically resolved
    * to preserve links in the retrieved document.
    * <P>
    * <B>Note:</B> You cannot use CFSCHEDULE and apply the Secure Sockets Layer (SSL) to
    * your application.
    */
   attr proxyport;
}
/**
 * The CFSCRIPT tag encloses a code segment containing CFScript.
 *
 * <PRE>
 * &lt;CFSCRIPT&gt;
 *  CFScript code goes here
 * &lt;/CFSCRIPT&gt;
 * </PRE>
 *
 * Use CFSCRIPT to perform processing in CFScript instead of CFML.  Note the
 * following regarding CFScript:
 * <P>
 * CFScript uses ColdFusion functions, expressions, and operators You can
 * read and write ColdFusion variables inside of CFScript
 * <P>
 * One use of CFSCRIPT is to wrap a series of assignment functions that would
 * otherwise require CFSET statements.
 * <P>
 * For more information on CFScript, see Developing Web Applications with
 * ColdFusion.
 *
 * <P>
 * @example
 * This example shows the use of CFSCRIPT.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFSCRIPT Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFSCRIPT Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFSCRIPT adds a simple scripting language to ColdFusion
 * for those developers who are more comfortable with JavaScript
 * or VBScript syntax.
 *
 * &lt;P&gt;This simple example shows variable declaration and
 * manipulation.
 * &lt;CFIF IsDefined("form.myValue")&gt;
 * &lt;CFIF IsNumeric(form.myValue)&gt;
 * &lt;CFSET x= form.myValue&gt;
 *
 * &lt;CFSCRIPT&gt;
 * y = x;
 * z = 2 * y;
 * StringVar = form.myString;
 * &lt;/CFSCRIPT&gt;
 *
 * &lt;CFOUTPUT&gt;
 * &lt;P&gt;twice #x# is #z#.
 * &lt;P&gt;Your string value was: &lt;B&gt;&lt;I&gt;#StringVar#&lt;/I&gt;&lt;/B&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;CFELSE&gt;
 * ...
 * </PRE>
 */
tag CFSCRIPT {
}
/**
 * Use the CFSEARCH tag to execute searches against data indexed in Verity
 * collections.  Collections can be created by calling the CFCOLLECTION tag,
 * by using the ColdFusion Administrator, or through native Verity indexing
 * tools.  Collections are populated with data either with the CFINDEX tag,
 * or externally, using native Verity indexing tools.  Collections must be
 * created and populated before any searches can be executed.
 *
 * <PRE>
 * &lt;CFSEARCH NAME="search_name"
 *     COLLECTION="collection_name"
 *     TYPE="criteria"
 *     CRITERIA="search_expression"
 *     MAXROWS="number"
 *     STARTROW="row_number"
 *     EXTERNAL="Yes/No"
 *     LANGUAGE="language"&gt;
 * </PRE>
 *
 * <P>
 * In the CRITERIA attribute, if you pass a mixed case entry (mixed upper and
 * lower case), case sensitivity is applied to the search.  If you pass all
 * upper or all lower case, case insensitivity is assumed.
 * <P>
 * Every search conducted with the CFSEARCH tag returns, as part of the
 * record set, a number of result columns you can reference in your CFOUTPUT:
 *
 * <UL>
 * <LI>
 * URL -- Returns the value of the URLPATH attribute defined in the CFINDEX
 * tag used to populate the collection.  This value is always empty when you
 * populate the collection with CFINDEX when TYPE="Custom".
 * <LI>
 * KEY -- Returns the value of the KEY attribute defined in the CFINDEX tag
 * used to populate the collection.
 * <LI>
 * TITLE -- Returns whatever was placed in the TITLE attribute in the CFINDEX
 * operation used to populate the collection, including the titles of PDF and
 * Office documents.  If no title was provided in the TITLE attribute,
 * CFSEARCH returns CF_TITLE.
 * <LI>
 * SCORE -- Returns the relevancy score of the document based on the search
 * criteria.
 * <LI>
 * CUSTOM1 and CUSTOM2 -- Returns whatever was placed in the custom fields in
 * the CFINDEX operation used to populate the collection.
 * <LI>
 * SUMMARY -- Returns the contents of the automatic summary generated by
 * CFINDEX.  The default summarization selects the best three matching
 * sentences, up to a maximum of 500 characters.
 * <LI>
 * RECORDCOUNT -- Returns the number of records returned in the record set.
 * <LI>
 * CURRENTROW -- Returns the current row being processed by CFOUTPUT.
 * <LI>
 * COLUMNLIST -- Returns the list of the column names within the record set.
 * <LI>
 * RECORDSSEARCHED-- Returns the number of records searched.
 * </UL>
 *
 * <P>
 * You can use these result columns in standard CFML expressions, preceding
 * the result column name with the name of the query:
 *
 * <PRE>
 * #DocSearch.URL#
 * #DocSearch.KEY#
 * #DocSearch.TITLE#
 * #DocSearch.SCORE#
 * </PRE>
 *
 * <P>
 * @example
 * This example shows how to utilize CFSEARCH
 * to search an existing, populated collection.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFSEARCH Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFSEARCH Example&lt;/H3&gt;
 *
 * &lt;!--- To index the collection, select the check box
 * on the form ---&gt;
 * &lt;CFIF IsDefined("form.IndexCollection")&gt;
 * &lt;!--- Change KEY and URLPATH to reflect accurate key and URL
 * &lt;CFINDEX ACTION="UPDATE" COLLECTION="Snippets"
 *    KEY="c:\inetpub\wwwroot\cfdocs\snippets" TYPE="PATH"
 *      TITLE="This is my test" URLPATH="http://127.0.0.1/cfdocs/snippets/"
 *        EXTENSIONS=".cfm" RECURSE="Yes"&gt;
 * &lt;H3&gt;Collection re-indexed&lt;/H3&gt;
 * &lt;/CFIF&gt;
 * &lt;CFIF IsDefined("form.source") AND
 * IsDefined("form.type") AND IsDefined("form.searchstring")&gt;
 *
 * &lt;!--- actually conduct the search ---&gt;
 *     &lt;CFSEARCH NAME="SearchSnippets"
 *     COLLECTION="#form.source#"
 *     TYPE="#form.type#"
 *     CRITERIA="#form.searchstring#"&gt;
 *
 * &lt;!--- print out the search results ---&gt;
 *     &lt;CFOUTPUT&gt;
 *     &lt;H2&gt;#form.type# Search Results&lt;/H2&gt;
 *
 *     &lt;P&gt;#SearchSnippets.RecordCount# "hit
 *       &lt;CFIF SearchSnippets.recordcount is not 1&gt;s&lt;/CFIF&gt;" found
 *         out of #SearchSnippets.RecordsSearched# total record
 *           &lt;CFIF SearchSnippets.recordcount is not 1&gt;s&lt;/CFIF&gt;
 *             searched.
 *
 *     &lt;P&gt;&lt;I&gt;&lt;B&gt;#form.maxrows# records returned ...&lt;/B&gt;&lt;/I&gt;
 *
 *     &lt;CFTABLE QUERY="SearchSnippets" MAXROWS="#maxrows#"
 *       STARTROW="1" COLHEADERS HTMLTABLE&gt;
 *         &lt;CFCOL HEADER="SCORE" TEXT="#score#"&gt;
 *         &lt;CFCOL HEADER="TITLE"
 *           TEXT="&lt;a href='#url#' target='blank'&gt;#title#&lt;/A&gt;"&gt;
 *         &lt;CFCOL HEADER="SUMMARY" TEXT="#summary#"&gt;
 *     &lt;/CFTABLE&gt;
 *     &lt;/CFOUTPUT&gt;
 *
 * &lt;/CFIF&gt;
 * ...
 * </PRE>
 */
tag CFSEARCH (empty) : MIME_TYPE {
   /**
    * Required. A name for the search query.
    */
   attr name;
   /**
    * Required.  Specifies the logical collection name that is the target of the
    * search operation or an external collection with fully qualified path.
    * Collection names are defined either through the CFCOLLECTION tag or in the
    * ColdFusion Administrator, Verity page.
    * <P>
    * Multiple ColdFusion collections can be specified in a comma-separated
    * list:
    * <PRE>
    *    COLLECTION="CFUSER, CFLANG"
    * </PRE>
    * <P>
    * If you are searching an external collection (EXTERNAL="Yes") specify the
    * collection name, including fully qualified path:
    * <PRE>
    *    COLLECTION="e:\collections\personnel"
    * </PRE>
    * <P>
    * If multiple collections are specified in COLLECTION and EXTERNAL is Yes,
    * the specified collections must all be externally generated.  You cannot
    * combine internal and external collections in the same search operation.
    */
   attr collection;
   /**
    * Optional.  Specifies the criteria for the search following the syntactic
    * rules specified by TYPE.
    */
   attr criteria;
   /**
    * Optional.  Specifies the maximum number of entries for index queries.  If
    * omitted, all rows are returned.
    */
   attr maxrows;
   /**
    * Optional.  Specifies the first row number to be retrieved.  Default is 1.
    */
   attr startrow {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes indicates that the collection you are searching
    * was created outside of ColdFusion using native Verity indexing tools.  The
    * default is No.
    */
   attr external;
   /**
    * Optional.  To use the LANGUAGE attribute you must have the ColdFusion
    * International Search Pack installed.  Valid entries are.  The default is English.
    */
   attr language {
      English
      German
      Finnish
      French
      Danish
      Dutch
      Italian
      Norwegian
      Portuguese
      Spanish
      Swedish
   }

}
/**
 * Used inside CFFORM, CFSELECT allows you to construct a drop-down list box
 * form control.  You can populate the drop-down list box from a query, or
 * using the OPTION tag.  Use OPTION elements to populate lists.  Syntax for
 * the OPTION tag is the same as for its HTML counterpart.
 *
 * <PRE>
 * &lt;CFSELECT NAME="name"
 *     REQUIRED="Yes/No"
 *     MESSAGE="text"
 *     ONERROR="text"
 *     SIZE="integer"
 *     MULTIPLE="Yes/No"
 *     QUERY="queryname"
 *     SELECTED="column_value"
 *     VALUE="text"
 *     DISPLAY="text"
 *     PASSTHROUGH="HTML_attributes"&gt;
 * &lt;/CFSELECT&gt;
 * </PRE>
 *
 * <P>
 * You can add standard and dynamic HTML FORM tag attributes and their values
 * to the CFSELECT tag by using the PASSTHROUGH attribute.  These attributes
 * and values are passed directly through ColdFusion to the browser in
 * creating a form.
 * <P>
 * If you specify a value in quotation marks, you must escape the quotation
 * marks by doubling them, for example,
 *
 * <PRE>
 * PASSTHROUGH= "readonly= " "YES " " "
 * </PRE>
 *
 * <P>
 * CFSELECT supports the JavaScript onClick event in the same manner as the
 * HTML INPUT tag:
 *
 * <PRE>
 * &lt;CFSELECT NAME="dept"
 *     MESSAGE="You must select a department name"
 *     QUERY="get_dept_list"
 *     VALUE="dept_name"
 *     onClick="JavaScript_function"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFTREE, CFSELECT and CFGRID in a
 * CFFORM. The query takes a list of employees, and uses CFTREE and CFSELECT
 * to display the results of the query.  In addition, CFGRID is used
 * to show an alternate means of displaying the same data.
 * <PRE>
 * &lt;!--- set a default for the employeeNames variable ---&gt;
 * &lt;CFPARAM NAME="employeeNames" DEFAULT=""&gt;
 *
 * &lt;!--- if an employee name has been passed from the form,
 * set employeeNames variable to this value ---&gt;
 * &lt;CFIF IsDefined("form.employeeNames") is not "False"&gt;
 *     &lt;CFSET employeeNames = form.employeeNames&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;!--- query the datasource to find the employee information---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT   Emp_ID, FirstName, LastName, EMail, Phone, Department
 * FROM     Employees where lastname
 *          &lt;CFIF #employeeNames# is not ""&gt;= '#employeeNames#'&lt;/CFIF&gt;
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFSELECT Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 *
 * &lt;H3&gt;CFSELECT Example&lt;/H3&gt;
 *
 * &lt;!--- Use CFFORM when using other CFINPUT tools ---&gt;
 * &lt;CFFORM ACTION="cfselect.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;!--- Use CFSELECT to present the contents of the query by column ---&gt;
 * &lt;H3&gt;CFSELECT Presentation of Data&lt;/H3&gt;
 * &lt;H4&gt;Click on an employee's last name and hit "see information for
 * this employee" to see expanded information.&lt;/H4&gt;
 * &lt;CFSELECT NAME="EmployeeNames" MESSAGE="Select an Employee Name"
 *    SIZE="#getEmployees.recordcount#" QUERY="GetEmployees"
 *      VALUE="LastName" REQUIRED="No"&gt;
 * &lt;OPTION value=""&gt;Select All
 * &lt;/CFSELECT&gt;
 * ...
 * </PRE>
 */
tag CFSELECT {
   /**
    * Required. A name for the form you are creating.
    */
   attr name;
   /**
    * Optional.  Yes or No.  If Yes, a list element must be selected when the
    * form is submitted.  Default is No.
    */
   attr required {
      yes no
   }
   /**
    * Optional. Message that appears if REQUIRED="Yes" and no selection is made.
    */
   attr message;
   /**
    * Optional.  The name of a valid JavaScript function you want to execute in
    * the event of a failed validation.
    */
   attr onerror;
   /**
    * Optional. Size of the drop-down list box in number of entries.
    */
   attr size;
   /**
    * Optional.  Yes or No.  Yes permits selection of multiple elements in the
    * drop-down list box.  The default is No.
    */
   attr multiple {
      yes no
   }
   /**
    * Optional.  Name of the query to be used to populate the drop-down list
    * box.
    */
   attr query;
   /**
    * Optional.  Enter a value matching at least one entry in VALUE to preselect
    * the entry in the drop-down list box.
    */
   attr selected;
   /**
    * Optional.  The query column value for the list element.  Used with the
    * QUERY attribute.
    */
   attr value;
   /**
    * Optional.  The query column displayed.  Defaults to the value of VALUE.
    * Used with the QUERY attribute.
    */
   attr display;
   /**
    * Optional.  HTML attributes that are not explicitly supported by CFSELECT.
    * If you specify an attribute and its value, the attribute and its value are
    * passed to the HTML code that is generated for the CFSELECT tag.  See the
    * Usage section for more information about specifying values.
    */
   attr passthrough;

}
/**
 * Executes a Java servlet on a JRun engine.  This tag is used in conjunction
 * with the CFSERVLETPARAM tag, which passes data to the servlet.
 *
 * <PRE>
 * &lt;CFSERVLET
 *     CODE="class name of servlet"
 *     JRUNPROXY="proxy server"
 *     TIMEOUT="timeout in seconds"
 *     WRITEOUTPUT="Yes/No"
 *     DEBUG="Yes/No"&gt;
 *     &lt;CFSERVLETPARAM
 *     NAME="parameter name"
 *     VALUE="value"
 *     &gt;
 *     ...
 * &lt;/CFSERVLET&gt;
 * </PRE>
 *
 * <P>
 * The syntax of the CFSERVLET tag is designed to be consistent with the HTML
 * markup &lt;SERVLET&gt; and &lt;PARAM&gt; used by some web servers to
 * invoke Java servlets from .shtml pages in what is known as SSI,
 * Server-Side Includes.
 * <P>
 * <B>CFSERVLET Variables</B>
 * <DL>
 * <DT>Variable Name
 * <DD>Description
 * <DT>CFSERVLET.Output
 * <DD>
 * Inline text output of the servlet is directed to this structure if the
 * WRITEOUTPUT attribute is set to No.
 * <DT>CFSERVLET.servletResponseHeaderName
 * <DD>
 * The CFSERVLET return structure also contains the values of any response
 * headers returned by the servlet.  To access a response header, specify its
 * name in servletResponseHeaderName.
 * </DL>
 * <P>
 * <B>Note:</B> The servlet must exist somewhere in the class path of the JRun engine
 * executing the servlet.  The JRun "servlet" subdirectory is a good location
 * since it is already in JRun's class path and because classes in this
 * directory are automatically reloaded by JRun if they change.
 *
 * <P>
 * @example
 * <PRE>
 * &lt;CFSERVLET  CODE="MyServletName"
 *           JRUNPROXY="236.3.3.4:8083"
 *           TIMEOUT="300"
 *           WRITEOUTPUT="YES"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Param1"  VALUE="Value1"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Param2"  VALUE="Value2"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Attribute1"  VARIABLE="CFVar1"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Attribute2"  VARIABLE="CFVar2"&gt;
 * &lt;/CFSERVLET&gt;
 * </PRE>
 */
tag CFSERVLET {
   /**
    * Required. The class name of the Java servlet to execute.
    */
   attr code;
   /**
    * Optional. Specifies a remote machine where the JRun engine is executing. By default, the JRun engine is assumed to be on the host running ColdFusion. To
    * indicate the name of a remote host, specify the IP address of the remote host followed by a colon and the port number at which JRun is listening. By
    * default, JRun listens at port 8081.
    */
   attr jrunproxy;
   /**
    * Optional. Specifies how many seconds JRun should wait for the servlet to complete before timing out.
    */
   attr timeout;
   /**
    * Optional. Boolean specifying if the text output of the tag should appear as inline text on the generated page or if it should be returned inside a ColdFusion
    * variable for further processing . The default value, YES, means output is returned as text to appear inline on the generated page. Setting it to NO means no
    * visible text is returned but, instead, the text is returned as the value of the CFSERVLET.OUTPUT variable. See the CFSERVLET Variables table under Usage
    * for more information.
    */
   attr writeoutput {
      yes no
   }
   /**
    * Optional.  Boolean specifying whether additional information about the
    * JRun connection status and activity is to be written to the JRun error
    * log.  The error log is in JRunHome/jsm-default/logs/stderr.log.  Reading
    * this log is helpful for debugging server-side problems.  The default is No.
    */
   attr debug {
      yes no
   }

}
/**
 * The CFSERVLETPARAM is a child of CFSERVLET.  It is used to pass data to
 * the servlet.  Each CFSERVLETPARAM tag within the CFSERVLET block passes a
 * separate piece of data to the servlet.
 *
 * <PRE>
 * &lt;CFSERVLET
 *     ...&gt;
 *     &lt;CFSERVLETPARAM
 *     NAME="servlet parameter name"
 *     VALUE="servlet parameter value"
 *     &gt;
 *     ...
 *     &lt;CFSERVLETPARAM
 *     NAME="servlet attribute name"
 *     VARIABLE="ColdFusion variable name"
 *     TYPE="INT" or "DOUBLE" or "BOOL" or "DATE" or "STRING"
 *     &gt;
 *     ...
 * &lt;/CFSERVLET&gt;
 * </PRE>
 *
 * <P>
 * There are two different ways that CFSERVLETPARAM can be used to pass
 * information to the servlet: by value or by reference.  Depending on the
 * method used, this information appears in the servlet either as a parameter
 * by value) or attribute (by reference).
 * <P>
 * The first passes name-value pairs by value.  This method uses the
 * attributes NAME and VALUE to pass a simple name-value string pair to the
 * servlet.  The NAME attribute represents the name of the servlet parameter
 * from which the string specified in the VALUE attribute can be retrieved.
 * Although the servlet can use these parameters as input, it cannot change
 * their values in the ColdFusion template.
 * <P>
 * The second passes a ColdFusion variable to the servlet by reference.  This
 * method uses the attribute VARIABLE to pass the specified ColdFusion
 * variable by reference to the servlet.  Within the servlet, the variable
 * data is made available as servlet attributes in the form of Java objects.
 * On the Java side, the data can be manipulated, even changed, and those
 * changes will, in turn, change the value of the associated ColdFusion
 * variable.
 * <P>
 * When used in this mode, the NAME attribute represents the name of the
 * servlet attribute that will be created to hold the value of the ColdFusion
 * variable.  The VARIABLE attribute represents the name, not the #value#, of
 * a ColdFusion variable.  This ability to directly share ColdFusion
 * variables with a servlet is a powerful extension to the servlet API
 * because it allows even complex ColdFusion objects such as structures and
 * result sets to be directly accessed from Java.  The following table shows
 * the mapping between ColdFusion data types (specified with the TYPE
 * attribute) and the corresponding Java objects.
 * <DL compact>
 * <DT>Types<DD>CF versus Java Type in Java
 * <DT>INT
 * <DD>java.lang.Integer
 * <DT>DOUBLE
 * <DD>java.lang.Double
 * <DT>BOOL
 * <DD>java.lang.Bool
 * <DT>DATE
 * <DD>java.util.Date
 * <DT>STRING
 * <DD>java.lang.String
 * <DT>Array
 * <DD>java.util.Vector
 * <DT>Structure
 * <DD>java.util.Hashtable
 * <DT>Query
 * <DD>com.allaire.util.RecordSet (a WDDX-supplied utility class.)
 * </DL>
 * <P>
 * <B>Note:</B> You need to have JRun 3.0 in order for the Name/Variable
 * functionality to work.  You can download the latest version of JRun at the
 * following URL:
 * <P>
 * In addition, in order to return a modified attribute to ColdFusion,
 * thereby changing the value of the ColdFusion variable, you need to call
 * the servlet API setAttribute method from the servlet to reset the value of
 * the attribute.
 *
 * <P>
 * @example
 * <PRE>
 * &lt;CFSERVLET
 *     CODE="MyServletName"
 *           JRUNPROXY="236.3.3.4:8083"
 *           TIMEOUT="300"
 *           WRITEOUTPUT="Yes"
 *           DEBUG="Yes"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Param1"  VALUE="Value1"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Param2"  VALUE="Value2"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Attribute1"  VARIABLE="CFVar1" TYPE="BOOL"&gt;
 *           &lt;CFSERVLETPARAM  NAME="Attribute2"  VARIABLE="CFVar2"&gt;
 *       &lt;/CFSERVLET&gt;
 * </PRE>
 *
 * @see CFSERVLET
 */
tag CFSERVLETPARAM (empty) {
   /**
    * Required.  If used with the VALUE attribute, it is the name of the servlet
    * parameter.  If used with the VARIABLE attribute, it is the name of the
    * servlet attribute.  See the Usage section for details on passing
    * parameters.  See the Usage section for details on passing parameters.
    */
   attr name;
   /**
    * Optional.  The value of a name-value pair to be passed to the servlet as a
    * parameter.
    */
   attr value;
   /**
    * Optional.  The name of a ColdFusion variable.  See the Usage section for
    * details on passing parameters.  The value of which will appear in the
    * servlet as an attribute.  See the TYPE attribute for a way to pass data
    * type information to the Java servlet.
    */
   attr variable;
   /**
    * Optional.  The data type of the ColdFusion variable being passed.  By
    * default, ColdFusion usually passes variables as strings; however, to
    * ensure that the data is correctly type on the Java side, you can specify
    * any of the following types: INT, DOUBLE, BOOL, DATE, or STRING.  See the
    * Data Types table under Usage for information about how these types map to
    * Java object types.
    */
   attr type {
      int double bool date string
   }

}

/**
 * Use the CFSET tag to define a ColdFusion variable.  If the variable
 * already exists, CFSET resets it to the specified value.
 *
 * <PRE>
 * &lt;CFSET variable_name=expression&gt;
 * </PRE>
 *
 * <P><B>Arrays</B>
 * <P>
 * The following example assigns a new array to the variable "months".
 *
 * <PRE>
 * &lt;CFSET months=ArrayNew(1)&gt;
 * </PRE>
 *
 * This example creates a variable "Array_Length" that resolves to the length
 * of the array "Scores".
 *
 * <PRE>
 * &lt;CFSET Array_Length=ArrayLen(Scores)&gt;
 * </PRE>
 *
 * This example assigns to index position two in the array "months" the value
 * "February".
 *
 * <PRE>
 * &lt;CFSET months[2]="February"&gt;
 * </PRE>
 *
 * <P><B>Dynamic variable names</B>
 * <P>
 * In this example, the variable name is itself a variable.
 *
 * <PRE>
 * &lt;CFSET myvariable="current_value"&gt;
 * &lt;CFSET "#myvariable#"=5&gt;
 * </PRE>
 *
 * <P><B>COM objects</B>
 * <P>
 * In this example, a COM object is created.  A CFSET defines a value for
 * each method or property in the COM object interface.  The last CFSET
 * creates a variable to store the return value from the COM object's
 * "SendMail" method.
 *
 * <PRE>
 * &lt;CFOBJECT ACTION="Create"
 *     NAME="Mailer"
 *     CLASS="SMTPsvg.Mailer"&gt;
 *
 * &lt;CFSET MAILER.FromName=form.fromname&gt;
 * &lt;CFSET MAILER.RemoteHost=RemoteHost&gt;
 * &lt;CFSET MAILER.FromAddress=form.fromemail&gt;
 * &lt;CFSET MAILER.AddRecipient("form.fromname", "form.fromemail")&gt;
 * &lt;CFSET MAILER.Subject="Testing CFOBJECT"&gt;
 * &lt;CFSET MAILER.BodyText="form.msgbody"&gt;
 * &lt;CFSET Mailer.SMTPLog="logfile"&gt;
 *
 * &lt;CFSET success=MAILER.SendMail()&gt;
 *
 * &lt;CFOUTPUT&gt; #success# &lt;/CFOUTPUT&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows how to use CFSET.
 * <PRE>
 * &lt;CFQUERY NAME="GetMessages" DATASOURCE="cfsnippets"&gt;
 * SELECT   *
 * FROM     Messages
 * &lt;/CFQUERY&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFSET Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFSET Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFSET allows you to set and reassign values to local or
 * global variables within a CF template.
 *
 * &lt;CFSET NumRecords = GetMessages.RecordCount&gt;
 * &lt;P&gt;For example, the variable NumRecords has been declared on
 * this template to hold the amount of records returned from
 * our query (&lt;CFOUTPUT&gt;#NumRecords#&lt;/CFOUTPUT&gt;).
 *
 * &lt;P&gt;In addition, CFSET can be used to pass variables from other
 * pages, such as this example which takes the url parameter
 * Test from this link
 * (&lt;a href="cfset.cfm?test=&lt;CFOUTPUT&gt;#URLEncodedFormat("
 * hey, you, get off of my cloud")#&lt;/CFOUTPUT&gt;"&gt;click here&lt;/A&gt;) to display
 * a message:
 * &lt;P&gt;&lt;CFIF IsDefined ("url.test") is "True"&gt;
 *     &lt;CFOUTPUT&gt;&lt;B&gt;&lt;I&gt;#url.test#&lt;/I&gt;&lt;/B&gt;&lt;/CFOUTPUT&gt;
 * &lt;CFELSE&gt;
 *     &lt;H3&gt;The variable url.test has not been passed from
 *     another page.&lt;/H3&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;P&gt;Finally, CFSET can also be used to collect environmental
 * variables, such as the time, the IP address of the user, or any
 * other function or expression possible in ColdFusion.
 *
 * &lt;CFSET the_date =
 *   #DateFormat(Now())# &amp; " " &amp; #TimeFormat(Now())#&gt;
 * &lt;CFSET user_ip = CGI.REMOTE_ADDR&gt;
 * &lt;CFSET complex_expr = (23 MOD 12) * 3&gt;
 * &lt;CFSET str_example = Reverse(Left(GetMessages.body, 35))&gt;
 * ...
 * </PRE>
 */
tag CFSET (empty) {
}
/**
 * CFSETTING is used to control various aspects of page processing, such as
 * controlling the output of HTML code in your pages.  One benefit of this
 * option is managing whitespace that can occur in output pages that are
 * served by ColdFusion.
 *
 * <PRE>
 * &lt;CFSETTING ENABLECFOUTPUTONLY="Yes/No"
 *     SHOWDEBUGOUTPUT="Yes/No"
 *     CATCHEXCEPTIONBYPATTERN="Yes/No"
 * &gt;
 * </PRE>
 *
 * When nesting CFSETTING tags, you must match each ENABLECFOUTPUTONLY="Yes "
 * setting with an ENABLECFOUTPUTONLY="No " setting for ordinary HTML text to
 * be visible to a user.  For example, if you have five
 * ENABLECFOUTPUTONLY="Yes " statements, you must also have five
 * corresponding ENABLECFOUTPUTONLY="No " statements for HTML text to be
 * displayed again.
 *
 * If at any point the output of plain HTML is enabled (no matter how many
 * ENABLECFOUTPUTONLY="No " statements have been processed) the first
 * ENABLECFOUTPUTONLY="YES " statement will block output.
 *
 * <P>
 * @example
 * <PRE>
 * ...
 * &lt;CFSETTING ENABLECFOUTPUTONLY="Yes"&gt;
 * This text is not shown
 * &lt;CFSETTING ENABLECFOUTPUTONLY="No"&gt;
 * &lt;P&gt;This text is shown
 * &lt;CFSETTING ENABLECFOUTPUTONLY="Yes"&gt;
 * &lt;CFOUTPUT&gt;
 *     &lt;P&gt;Text within CFOUTPUT is always shown
 * &lt;/CFOUTPUT&gt;
 * &lt;CFSETTING ENABLECFOUTPUTONLY="No"&gt;
 * &lt;CFOUTPUT&gt;
 *     &lt;P&gt;Text within CFOUTPUT is always shown
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFSETTING (empty) {
   /**
    * Required.  Yes or No.  When set to Yes, CFSETTING blocks output of all
    * HTML that resides outside CFOUTPUT tags.
    */
   attr enablecfoutputonly {
      yes no
   }
   /**
    * Optional.  Yes or No.  When set to No, SHOWDEBUGOUTPUT suppresses
    * debugging information that would otherwise display at the end of the
    * generated page.  Default is Yes.
    */
   attr showdebugoutput {
      yes no
   }
   /**
    * Optional.  Yes or No.  When set to Yes, it overrides the structured
    * exception handling introduced in 4.5.  Default is No.
    * <P>
    * <B>Note:</B> Structured exception handling introduces a subtle upwards
    * incompatibility.  In 4.0.x, an exception was handled by the first CFCATCH
    * block that could handle that type of exception.  In 4.5, the structured
    * exception manager searches for the best-fit CFCATCH handler.
    */
   attr catchexceptionsbypattern {
      yes no
   }

}
/**
 * CFSILENT suppresses all output that is produced by the CFML within the
 * tag's scope.
 *
 * <PRE>
 * &lt;CFSILENT&gt;
 * </PRE>
 *
 * <P>
 * @example
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFSILENT&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFSILENT&lt;/H3&gt;
 *
 * &lt;!--- This example shows the use of CFSILENT ---&gt;
 *
 * &lt;CFSILENT&gt;
 * &lt;CFSET a=100&gt;
 * &lt;CFSET b=99&gt;
 * &lt;CFSET c=b-a&gt;
 * &lt;CFOUTPUT&gt;#c#&lt;/CFOUTPUT&gt;
 * ...
 * &lt;/CFSILENT&gt;
 * &lt;P&gt;
 * Even information within CFOUTPUT tags does not appear within
 * the CFSILENT block.&lt;BR&gt;
 * b-c = &lt;CFOUTPUT&gt;#c#&lt;/CFOUTPUT&gt;
 * &lt;/P&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 *
 * @see CFSETTING
 */
tag CFSILENT (empty) {
}
/**
 * Used inside CFFORM, CFSLIDER allows you to place a slider control in a
 * ColdFusion form.  A slider control is like a sliding volume control.  The
 * slider groove is the area over which the slider moves.
 * <P>
 * <B>Note:</B> CFSLIDER incorporates a Java applet, so a browser must be
 * Java-enabled for CFSLIDER to work properly.
 *
 * <PRE>
 * &lt;CFSLIDER NAME="name"
 *     LABEL="text"
 *     REFRESHLABEL="Yes/No"
 *     IMG="filename"
 *     IMGSTYLE="style"
 *     RANGE="min_value, max_value"
 *     SCALE="uinteger"
 *     VALUE="integer"
 *     ONVALIDATE="script_name"
 *     MESSAGE="text"
 *     ONERROR="text"
 *     HEIGHT="integer"
 *     WIDTH="integer"
 *     VSPACE="integer"
 *     HSPACE="integer"
 *     ALIGN="alignment"
 *     GROOVECOLOR="color"
 *     BGCOLOR="color"
 *     TEXTCOLOR="color"
 *     FONT="font_name"
 *     FONTSIZE="integer"
 *     ITALIC="Yes/No"
 *     BOLD="Yes/No"
 *     NOTSUPPORTED="text"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows how to use CFSLIDER within CFFORM.
 * <PRE>
 * &lt;HTML&gt;
 *
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 *     CFSLIDER Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 *
 * &lt;H3&gt;CFSLIDER Example&lt;/H3&gt;
 * &lt;P&gt;CFSLIDER, used within a CFFORM, can provide
 * additional functionality to Java-enabled browsers.
 *
 * &lt;P&gt;Try moving the slider back and forth to see the
 * real-time value change.  Then, submit the form to show
 * how CFSLIDER passes its value on to a new CF template.
 *
 * &lt;P&gt;
 *
 * &lt;CFIF IsDefined("form.mySlider") is True&gt;
 * &lt;H3&gt;You slid to a value of &lt;CFOUTPUT&gt;#mySlider#&lt;/CFOUTPUT&gt;&lt;/H3&gt;
 *
 * Try again!
 * &lt;/CFIF&gt;
 *
 * &lt;CFFORM ACTION="cfslider.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * 1 &lt;CFSLIDER NAME="mySlider" VALUE="12" LABEL="Actual Slider Value  "
 *    RANGE="1,100" ALIGN="BASELINE"
 *    MESSAGE="Slide the bar to get a value between 1 and 100" HEIGHT="20"
 *  WIDTH="150" FONT="Verdana" BGCOLOR="Silver" GROOVECOLOR="Lime"
 *     BOLD="No" ITALIC="Yes" REFRESHLABEL="Yes"&gt; 100
 *
 * &lt;P&gt;&lt;INPUT TYPE="Submit" NAME="" VALUE="Show the Result"&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFSLIDER (empty) : NOTSUPPORTED_ATTRIBUTE, POSITION_ATTRIBUTES {
   /**
    * Required. A name for the CFSLIDER control.
    */
   attr name;
   /**
    * Optional. A label that appears with the slider control, for example:
    * <PRE>
    *    LABEL="Volume %value%"
    * </PRE>
    * <P>
    * You can use %value% to reference the slider value.  If % is omitted, the
    * slider value appears immediately following the label.
    */
   attr label;
   /**
    * Optional.  Yes or No.  If Yes, the label is not refreshed when the slider
    * is moved.  Default is Yes.
    */
   attr refreshlabel {
      yes no
   }
   /**
    * Optional. Filename of the image to be used in the slider groove.
    */
   attr img;
   /**
    * Optional.  Style of the image to appear in the slider groove.  The
    * default is Scaled.
    */
   attr imgstyle {
      Centered
      Tiled
      Scaled
   }
   /**
    * Optional.  Determines the values of the left and right slider range.  The
    * slider value appears as the slider is moved.
    * <P>
    * Separate values by a comma, for example:
    * <PRE>
    *    RANGE="1,100"
    * </PRE>
    * <P>
    * Default is "0,100". Valid only for numeric data.
    */
   attr range;
   /**
    * Optional.  An unsigned integer.  SCALE defines the slider scale within the
    * value of RANGE.  For example, if RANGE=0,1000 and SCALE=100, the
    * incremental values for the slider would be 0, 100, 200, 300, and so on.
    */
   attr scale;
   /**
    * Optional.  Determines the default slider setting.  Must be within the
    * values specified in RANGE.  Defaults to the minimum value specified in
    * RANGE.
    */
   attr value;
   /**
    * Optional.  The name of a valid JavaScript function used to validate user
    * input, in this case, a change to the default slider value.
    */
   attr onvalidate;
   /**
    * Optional. Message text to appear if validation fails.
    */
   attr message;
   /**
    * Optional.  The name of a valid JavaScript function you want to execute in
    * the event of a failed validation.
    */
   attr onerror;
   /**
    * Optional.  Color value of the slider groove.  The slider groove is the
    * area in which the slider box moves.  Valid entries are:
    * <UL>
    * <LI>black
    * <LI>magenta
    * <LI>cyan
    * <LI>orange
    * <LI>darkgray
    * <LI>pink
    * <LI>gray
    * <LI>white
    * <LI>lightgray
    * <LI>yellow
    * </UL>
    * <P>
    * A hex value can also be entered in the form:
    * <PRE>
    * GROOVECOLOR="##xxxxxx"
    * </PRE>
    * <P>
    * Where x is 0-9 or A-F. Use either two pound signs or no pound signs.
    */
   attr HTML_COLORS groovecolor;
   /**
    * Optional.  Background color of slider label.  See GROOVECOLOR for color
    * options.
    */
   attr HTML_COLORS bgcolor;
   /**
    * Optional. Slider label text color. See GROOVECOLOR for color options.
    */
   attr HTML_COLORS textcolor;
   /**
    * Optional. Font name for label text.
    */
   attr font;
   /**
    * Optional. Font size for label text measured in points.
    */
   attr fontsize;
   /**
    * Optional. Enter Yes for italicized label text, No for normal text. Default is No.
    */
   attr italic {
      yes no
   }
   /**
    * Optional. Enter Yes for bold label text, No for medium text. Default is No.
    */
   attr bold {
      yes no
   }
}

/**
 * The CFSTOREDPROC tag is the main tag used for executing stored procedures
 * via an ODBC or native connection to a server database.  It specifies
 * database connection information and identifies the stored procedure.
 *
 * <PRE>
 * &lt;CFSTOREDPROC PROCEDURE="procedure name"
 *     DATASOURCE="ds_name"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     DBSERVER="dbms"
 *     DBNAME="database name"
 *     BLOCKFACTOR="blocksize"
 *     PROVIDER="COMProvider"
 *     PROVIDERDSN="datasource"
 *     DEBUG="Yes/No"
 *     RETURNCODE="Yes/No"&gt;
 * </PRE>
 *
 * Within a CFSTOREDPROC tag, you code CFPROCRESULT and CFPROCPARAM tags as
 * necessary.
 * <P>
 * If you set the ReturnCode parameter to "YES", CFSTOREDPROC sets a variable
 * called CFSTOREDPROC.STATUSCODE, which indicates the status code for the
 * stored procedure.  Stored procedure status code values vary by DBMS.
 * Refer to your DBMS-specific documentation for the meaning of individual
 * status code values.
 * <P>
 * In addition to returning a status code, CFSTOREDPROC sets a variable
 * called CFSTOREDPROC.ExecutionTime.  This variable contains the number of
 * milliseconds that it took the stored procedure to execute.
 * <P>
 * Stored procedures represent an advanced feature, found in high-end
 * database management systems.  You should be familiar with stored
 * procedures and their usage before implementing these tags.
 *
 * <P>
 * @example
 * The following example executes a Sybase stored procedure
 * that returns three result sets, two of which we want. The
 * stored procedure returns the status code and one output
 * parameter, which we display. We use named notation
 * for the parameters.
 * <PRE>
 * ...
 * &lt;!--- CFSTOREDPROC tag ---&gt;
 * &lt;CFSTOREDPROC PROCEDURE="foo_proc"
 *     DATASOURCE="MY_SYBASE_TEST"    USERNAME="sa"
 *     PASSWORD=""    DBSERVER="scup"    DBNAME="pubs2"
 *     RETURNCODE="YES"    DEBUG&gt;
 * &lt;!--- CFPROCRESULT tags ---&gt;
 * &lt;CFPROCRESULT NAME = RS1&gt;
 * &lt;CFPROCRESULT NAME = RS3 RESULTSET = 3&gt;
 * &lt;!---  CFPROCPARAM tags ---&gt;
 * &lt;CFPROCPARAM TYPE="IN"
 *     CFSQLTYPE=CF_SQL_INTEGER
 *         VALUE="1"    DBVARNAME=@param1&gt;
 *
 * &lt;CFPROCPARAM TYPE="OUT"    CFSQLTYPE=CF_SQL_DATE
 *     VARIABLE=FOO DBVARNAME=@param2&gt;
 * &lt;!--- Close the CFSTOREDPROC tag ---&gt;
 * &lt;/CFSTOREDPROC&gt;
 * &lt;CFOUTPUT&gt;
 * The output param value: '#foo#'
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;h3&gt;The Results Information&lt;/h3&gt;
 * &lt;CFOUTPUT QUERY = RS1&gt;#NAME#,#DATE_COL#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS1.RecordCount# &gt;p&gt;Columns: #RS1.ColumnList#
 * &lt;hr&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;CFOUTPUT QUERY=RS3&gt;#col1#,#col2#,#col3#
 * &lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;P&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;hr&gt;
 * &lt;P&gt;Record Count: #RS3.RecordCount# &lt;P&gt;Columns: #RS3.ColumnList#
 * &lt;hr&gt;
 * The return code for the stored procedure is:
 *   '#CFSTOREDPROC.STATUSCODE#'&lt;br&gt;
 * &lt;/CFOUTPUT&gt;
 * ...
 * </PRE>
 */
tag CFSTOREDPROC (empty) {
   /**
    * Required. Specifies the name of the stored procedure on the database server.
    */
   attr procedure;
   /**
    * Required.  The name of an ODBC or native data source that points to the
    * database containing the stored procedure.
    */
   attr datasource;
   /**
    * Optional.  If specified, USERNAME overrides the username value specified
    * in the data source setup.
    */
   attr username;
   /**
    * Optional.  If specified, PASSWORD overrides the password value specified
    * in the data source setup.
    */
   attr password;
   /**
    * Optional.  For native database drivers, specifies the name of the database
    * server machine.  If specified, DBSERVER overrides the server specified in
    * the data source.
    */
   attr dbserver;
   /**
    * Optional.  The database name (Sybase System 11 driver only).  If
    * specified, DBNAME overrides the default database specified in the data
    * source.
    */
   attr dbname;
   /**
    * Optional.  Specifies the maximum number of rows to fetch at a time from
    * the server.  The range is 1 (default) to 100.  The ODBC driver may
    * dynamically reduce the block factor at runtime.
    */
   attr blockfactor;
   /**
    * Optional. COM provider (OLE-DB only).
    */
   attr provider;
   /**
    * Optional. Data source name for the COM provider (OLE-DB only).
    */
   attr providerdsn;
   /**
    * Optional.  Yes or No.  Specifies whether debug info will be listed on each
    * statement.  Default is No.
    */
   attr debug {
      yes no
   }
   /**
    * Optional.  Yes or No.  Specifies whether the tag populates
    * CFSTOREDPROC.STATUSCODE with the status code returned by the stored
    * procedure.  Default is No.
    */
   attr returncode {
      yes no
   }

}
/**
 * Used with CFCASE and CFDEFAULTCASE, the CFSWITCH tag evaluates a passed
 * expression and passes control to the CFCASE tag that matches the
 * expression result.  You can optionally code a CFDEFAULTCASE tag, which
 * receives control if there is no matching CFCASE tag value.
 *
 * <PRE>
 * &lt;CFSWITCH EXPRESSION="expression"&gt;
 *     &lt;CFCASE VALUE="value" DELIMITERS="delimiters"&gt;
 *        HTML and CFML tags
 *     &lt;/CFCASE&gt;
 *     additional &lt;CFCASE&gt;&lt;/CFCASE&gt; tags
 *     &lt;CFDEFAULTCASE&gt;
 *        HTML and CFML tags
 *     &lt;/CFDEFAULTCASE&gt;
 * &lt;/CFSWITCH&gt;
 * </PRE>
 *
 * <P>
 * Use CFSWITCH followed by one or more CFCASE tags, optionally ending with a
 * CFDEFAULTCASE tag.  The CFSWITCH tag selects the matching alternative from
 * the specified CFCASE and CFDEFAULTCASE tags and jumps to the matching tag,
 * executing the code between the CFCASE start and end tags.  There is no
 * need to explicitly break out of the CFCASE tag, as there is in some other
 * languages.
 * <P>
 * You can specify only one CFDEFAULTCASE tag within a CFSWITCH tag.  CFCASE
 * tags cannot appear after the CFDEFAULTCASE tag.
 * <P>
 * CFSWITCH provides better performance than a series of CFIF/CFELSEIF tags
 * and the resulting code is easier to read.
 *
 * <P>
 * @example
 * This example illustrates the use of CFSWITCH and
 * CFCASE to exercise a case statement in CFML.
 *
 * <PRE>
 * &lt;!--- query to get some information ---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT   Emp_ID, FirstName, LastName, EMail,
 *          Phone, Department
 * FROM     Employees
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFSWITCH Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFSWITCH Example&lt;/H3&gt;
 *
 * &lt;!--- By outputting the query and using CFSWITCH,
 * we can classify the output without using a CFLOOP construct.
 *  ---&gt;
 * &lt;CFOUTPUT QUERY="GetEmployees"&gt;
 * &lt;CFSWITCH EXPRESSION=#Department#&gt;
 * &lt;!--- each time the case is fulfilled, the specific
 * information is printed; if the case is not fulfilled,
 * the default case is output ---&gt;
 *     &lt;CFCASE VALUE="Sales"&gt;
 *     #FirstName# #LastName# is in &lt;B&gt;sales&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;
 *     &lt;/CFCASE&gt;
 *     &lt;CFCASE VALUE="Accounting"&gt;
 *     #FirstName# #LastName# is in &lt;B&gt;accounting&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;
 *     &lt;/CFCASE&gt;
 *     &lt;CFCASE VALUE="Administration"&gt;
 *     #FirstName# #LastName# is in &lt;B&gt;administration&lt;/B&gt;&lt;BR&gt;&lt;BR&gt;
 *     &lt;/CFCASE&gt;
 *     &lt;CFDEFAULTCASE&gt;#FirstName# #LastName# is not in Sales,
 *     Accounting, or Administration.&lt;BR&gt;
 *     &lt;/CFDEFAULTCASE&gt;
 * &lt;/CFSWITCH&gt;
 * &lt;/CFOUTPUT&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFSWITCH {
   /**
    * Required.  Any ColdFusion expression that yields a scalar value.
    * ColdFusion converts integers, real numbers, Booleans, and dates to numeric
    * values.  For example, TRUE, 1, and 1.0 are all equal.
    */
   attr expression;
   /**
    * Required.  One or more constant values that CFSWITCH compares to the
    * specified expression (case-insensitive comparison).  If a value matches
    * the expression, CFSWITCH executes the code between the CFCASE start and
    * end tags.
    * <P>
    * Separate multiple values with a comma or an alternative delimiter, as
    * specified in the DELIMITERS parameter.  Duplicate value attributes are not
    * allowed and will cause a runtime error.
    */
   attr value;
   /**
    * Optional.  Specifies the character that separates multiple entries in a
    * list of values.  The default delimiter is the comma (,).
    */
   attr delimiters;
}
/**
 * Builds a table in your ColdFusion page.  Use the CFCOL tag to define
 * column and row characteristics for a table.  CFTABLE renders data either
 * as preformatted text, or, with the HTMLTABLE attribute, as an HTML table.
 * Use CFTABLE to create tables if you don't want to write your own HTML
 * TABLE tag code, or if your data can be well presented as preformatted
 * text.  See Usage for information about using the CFCOL tag with the
 * CFTABLE tag.
 *
 * <PRE>
 * &lt;CFTABLE QUERY="query_name"
 *     MAXROWS="maxrows_table"
 *     COLSPACING="number_of_spaces"
 *     HEADERLINES="number_of_lines"
 *     HTMLTABLE
 *     BORDER
 *     COLHEADERS
 *     STARTROW="row_number"&gt;
 * &lt;/CFTABLE&gt;
 * </PRE>
 *
 * <P>
 * You can use the CFCOL tag to align the data in the table , specify the
 * width of each column, and provide column headers.
 * <P>
 * <B>Note:</B> CFCOL is the only tag that you can nest within CFTABLE.
 *
 * <P>
 * @example
 * This example shows the use of CFCOL and CFTABLE
 * to align information returned from a query.
 *
 * <PRE>
 * &lt;!--- This query selects employee information from the
 * cfsnippets datasource ---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT Emp_ID, FirstName, LastName, EMail, Phone, Department
 * FROM Employees
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFTABLE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFTABLE Example&lt;/H3&gt;
 *
 * &lt;!--- Note the use of the HTMLTABLE attribute to display the
 * CFTABLE as an HTML table, rather simply as PRE formatted information ---&gt;
 * &lt;CFTABLE QUERY="GetEmployees" STARTROW="1" COLSPACING="3" HTMLTABLE&gt;
 * &lt;!--- each CFCOL tag sets the width of a column in the table,
 * as well as specifying the header information and the text/CFML
 * with which to fill the cell ---&gt;
 *     &lt;CFCOL HEADER = "&lt;B&gt;ID&lt;/B&gt;"
 *         ALIGN = "Left"
 *         WIDTH = 2
 *         TEXT  = "#Emp_ID#"&gt;
 *
 *     &lt;CFCOL HEADER = "&lt;B&gt;Name/Email&lt;/B&gt;"
 *         ALIGN = "Left"
 *         WIDTH = 15
 *         TEXT  = "&lt;a href='mailto:#Email#'&gt;#FirstName# #LastName#&lt;/A&gt;"&gt;
 *
 *     &lt;CFCOL HEADER = "&lt;B&gt;Phone Number&lt;/B&gt;"
 *         ALIGN = "Center"
 *         WIDTH = 15
 *         TEXT  = "#Phone#"&gt;
 * &lt;/CFTABLE&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFTABLE {
   /**
    * Required. The name of the CFQUERY from which you want to draw data.
    */
   attr query;
   /**
    * Optional.  Specifies the maximum number of rows you want to display in the
    * table.
    */
   attr maxrows;
   /**
    * Optional.  Indicates the number of spaces to insert between columns
    * default is 2).
    */
   attr colspacing;
   /**
    * Optional.  Indicates the number of lines to use for the table header (the
    * default is 2, which leaves one line between the headers and the first row
    * of the table).
    */
   attr headerlines;
   /**
    * Optional. Renders the table as an HTML 3.0 table.
    */
   attr htmltable;
   /**
    * Optional.  Adds a border to the table.  Use only when you specify the
    * HTMLTABLE attribute for the table.
    */
   attr border;
   /**
    * Optional.  Displays headers for each column, as specified in the CFCOL tag.
    */
   attr colheaders;
   /**
    * Optional. Specifies the query row from which to start processing.
    */
   attr startrow;

}
/**
 * The CFTEXTINPUT form custom control allows you to place a single-line text
 * entry box in a CFFORM.  In addition to input validation, the tag gives you
 * control over all font characteristics.
 * <P>
 * <B>Note:</B> CFTEXTINPUT incorporates a Java applet, so a browser must be Java-
 * enabled for CFTEXTINPUT to work properly.
 *
 * <PRE>
 * &lt;CFTEXTINPUT NAME="name"
 *     VALUE="text"
 *     REQUIRED="Yes/No"
 *     RANGE="min_value, max_value"
 *     VALIDATE="data_type"
 *     ONVALIDATE="script_name"
 *     MESSAGE="text"
 *     ONERROR="text"
 *     SIZE="integer"
 *     FONT="font_name"
 *     FONTSIZE="integer"
 *     ITALIC="Yes/No"
 *     BOLD="Yes/No"
 *     HEIGHT="integer"
 *     WIDTH="integer"
 *     VSPACE="integer"
 *     HSPACE="integer"
 *     ALIGN="alignment"
 *     BGCOLOR="color"
 *     TEXTCOLOR="color"
 *     MAXLENGTH="integer"
 *     NOTSUPPORTED="text"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFTEXTINPUT.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFTEXTINPUT Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 *
 * &lt;H3&gt;CFTEXTINPUT Example&lt;/H3&gt;
 *
 * CFTEXTINPUT can be used to provide simple validation for text
 * fields in CFFORM and to have control over font information
 * displayed in CFFORM input boxes for text.  For example, the field
 * provided below must not
 * be blank, and provides a client-side message upon erring.
 *
 * &lt;CFFORM ACTION="cftextinput.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;CFIF IsDefined("form.myInput")&gt;
 * &lt;H3&gt;You entered &lt;CFOUTPUT&gt;#form.myInput#&lt;/CFOUTPUT&gt; into the text box
 *   &lt;/H3&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;CFTEXTINPUT NAME="myInput" FONT="Courier" FONTSIZE=12
 *   VALUE="Look, this text is red!" TEXTCOLOR="FF0000"
 *     MESSAGE="This field must not be blank" REQUIRED="Yes"&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="submit"&gt;
 * &lt;/CFFORM&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFTEXTINPUT (empty) : NOTSUPPORTED_ATTRIBUTE, POSITION_ATTRIBUTES, INPUT_ATTRIBUTES {
   /**
    * Optional. Number of characters displayed before horizontal scroll bar appears.
    */
   attr size;
   /**
    * Optional. Font name for text.
    */
   attr font;
   /**
    * Optional. Font size for text.
    */
   attr fontsize;
   /**
    * Optional. Enter Yes for italicized text, No for normal text. Default is No.
    */
   attr italic {
      yes no
   }
   /**
    * Optional. Enter Yes for boldface text, No for medium text. Default is No.
    */
   attr bold {
      yes no
   }
   /**
    * Optional. Background color of the control. Valid entries are:
    * <UL>
    * <LI>black
    * <LI>magenta
    * <LI>cyan
    * <LI>orange
    * <LI>darkgray
    * <LI>pink
    * <LI>gray
    * <LI>white
    * <LI>lightgray
    * <LI>yellow
    * </UL>
    * <P>
    * A hex value can also be entered in the form:
    * <PRE>
    * BGCOLOR="##xxxxxx"
    * </PRE>
    * <P>
    * Where x is 0-9 or A-F. Use either two pound signs or no pound signs.
    */
   attr HTML_COLORS bgcolor;
   /**
    * Optional. Text color for the control. See BGCOLOR for color options.
    */
   attr HTML_COLORS textcolor;
   /**
    * Optional. The maximum length of text entered.
    */
   attr maxlength;
}
/**
 * The CFTHROW tag raises a developer-specified exception that can be caught
 * with CFCATCH tag having any of the following type specifications:
 * <PRE>
 * CFCATCH TYPE= "custom_type "
 * CFCATCH TYPE= "APPLICATION "
 * CFCATCH TYPE= "ANY "
 * </PRE>
 *
 * <PRE>
 * &lt;CFTHROW
 *     TYPE= "exception_type "
 *     MESSAGE="message"
 *     DETAIL= "detail_description "
 *     ERRORCODE= "error_code "
 *     EXTENDEDINFO= "additional_information "&gt;
 * </PRE>
 *
 * <P>
 * Use CFTHROW within a CFTRY block to raise an error condition.The CFCATCH
 * block can access any accompanying information as follows:
 *
 * <UL>
 * <LI>Message with CFCATCH.message
 * <LI>Detail with CFCATCH.detail
 * <LI>Error code with CFCATCH.errorcode.
 * </UL>
 * <P>
 * To get additional information, use CFCATCH.TagContext.  TagContext
 * captures the context of the exception; that is, the name and position of
 * each tag in the tag stack, and the full path names of the files that
 * contain the tags in the tag stack.
 * <P>
 * <B>Note:</B> In order to see the information displayed by TagContext, use the
 * ColdFusion Administrator to enable the CFML stack trace.Under Debugging in
 * the ColdFusion Administrator, choose the checkbox next to "Enable CFML
 * stack trace."
 *
 * <P>
 * @example
 * This example shows the use of CFTHROW.
 * <PRE>
 * &lt;HTML&gt;
 *
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFTHROW Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 *
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFTHROW Example&lt;/H3&gt;
 *
 * &lt;!--- open a CFTRY block ---&gt;
 * &lt;CFTRY&gt;
 * &lt;!--- define a condition upon which to throw
 *       the error ---&gt;
 *     &lt;CFIF NOT IsDefined("URL.myID")&gt;
 * &lt;!--- throw the error ---&gt;
 *         &lt;CFTHROW MESSAGE="ID is not defined"&gt;
 *     &lt;/CFIF&gt;
 *
 * &lt;!--- perform the error catch ---&gt;
 * &lt;CFCATCH TYPE="application"&gt;
 * &lt;!--- display your message ---&gt;
 *     &lt;H3&gt;You've Thrown an &lt;B&gt;Error&lt;/B&gt;&lt;/H3&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;!--- and the diagnostic feedback from the
 * application server ---&gt;
 *     &lt;P&gt;#CFCATCH.message#&lt;/P&gt;
 *     &lt;P&gt;The contents of the tag stack are:&lt;/P&gt;
 *     &lt;CFLOOP index=i from=1 to = #ArrayLen(CFCATCH.TAGCONTEXT)#&gt;
 *           &lt;CFSET sCurrent = #CFCATCH.TAGCONTEXT[i]#&gt;
 *               &lt;BR&gt;#i# #sCurrent["ID"]#
 * (#sCurrent["LINE"]#,#sCurrent["COLUMN"]#) #sCurrent["TEMPLATE"]#
 *     &lt;/CFLOOP&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/CFCATCH&gt;
 *
 * &lt;/CFTRY&gt;
 *
 * &lt;/BODY&gt;
 *
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFTHROW (empty) : MIME_TYPE {
   /**
    * Optional. A message that describes the exceptional event.
    */
   attr message;
   /**
    * Optional.  A detailed description of the event.  The ColdFusion server
    * appends the position of the error to this description; the server uses
    * this parameter if an error is not caught by your code.
    */
   attr detail;
   /**
    * Optional. A custom error code that you supply.
    */
   attr errorcode;
   /**
    * Optional. A custom error code that you supply.
    */
   attr extendedinfo;

}
/**
 * Use CFTRANSACTION to group multiple queries into a single unit.
 * CFTRANSACTION also provides commit and rollback processing.  See Usage for
 * details.
 *
 * <PRE>
 * &lt;CFTRANSACTION
 *     ACTION="BEGIN" or "COMMIT" or "ROLLBACK"
 *     ISOLATION="Read_Uncommitted" or
 *                  "Read_Committed" or
 *                  "Repeatable_Read" &gt;
 * &lt;/CFTRANSACTION&gt;
 * </PRE>
 *
 * <P>
 * A transaction block is created within these tags:
 * <PRE>
 * &lt;CFTRANSACTION&gt;
 *    queries to be executed
 * &lt;/CFTRANSACTION&gt;
 * </PRE>
 *
 * <P>
 * Within the transaction block, you can commit a transaction by nesting the
 * &lt;CFTRANSACTION ACTION="COMMIT"/&gt; tag or roll the transaction back by
 * nesting the &lt;CFTRANSACTION ACTION="ROLLBACK"/&gt; tag within the block.
 * <P>
 * Within one transaction block, you can write queries to more than one
 * database; however, you must commit or rollback the transaction to a
 * particular database prior to writing a query to another database.
 * <P>
 * By using CFML error handling, you have control over whether each
 * transaction is to be committed based on the success or failure of the
 * database query.
 * <P>
 * Use the ISOLATION attribute for additional control over how the database
 * engine performs locking during the transaction.
 *
 * <P>
 * @example
 * This example shows the use of CFTRANSACTION.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFTRANSACTION Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFTRANSACTION Example&lt;/H3&gt;
 *
 * &lt;P&gt;CFTRANSACTION can be used to group multiple queries
 * using CFQUERY into a single business event.  Changes to data
 * requested by these queries can be committed on the basis of the success
 * or failure of the query by using the actions COMMIT and ROLLBACK,
 * respectively.
 * &lt;P&gt;The following is a sample listing (see code in right pane):
 * &lt;!----------------------------------------------------------------------
 *     You can enclose the transaction in a CFTRY/CFCATCH block in order
 *     to catch database errors and make commitment or rollback or the
 *     transaction contingent on the errors received.
 * -----------------------------------------------------------------------&gt;
 * &lt;CFTRY&gt;
 * &lt;----------------------------------------------------------------------
 * Initialize commitIt to Yes.
 * -----------------------------------------------------------------------&gt;
 * &lt;CFSET commitIt = "Yes"&gt;
 * &lt;CFTRANSACTION ACTION="BEGIN"&gt;
 *     &lt;CFQUERY NAME='makeNewCourse' DATASOURCE='cfsnippets'&gt;
 *     INSERT INTO Courses
 *         (Number, Descript)
 *     VALUES
 *         ('#myNumber#', '#myDescription#')
 *     &lt;/CFQUERY&gt;
 *
 *     &lt;!------------------------------------------------------------------
 *     Rolls back the pending insertion if database exception is caught.
 *     -------------------------------------------------------------------&gt;
 *     &lt;CFCATCH TYPE="DATABASE"&gt;
 *         &lt;CFTRANSACTION ACTION="ROLLBACK"/&gt;
 *         &lt;CFSET commitIt = "No"&gt;
 *     &lt;/CFCATCH&gt;
 *     &lt;CFIF commitIt&gt;
 *         &lt;CFTRANSACTION ACTION="COMMIT"/&gt;
 *         &lt;!--------------------------------------------------------------
 *         Commits the pending insertion.
 *         ----------------------------------------------------------------&gt;
 *     &lt;CFELSE&gt;
 *         &lt;CFSET commitIt="Yes"&gt;
 *     &lt;/CFIF&gt;
 *
 *     &lt;CFQUERY NAME='insertNewCourseToList' DATASOURCE='cfsnippets'&gt;
 *     INSERT INTO CourseList
 *         (CorNumber, CorDesc, Dept_ID,
 *         CorName, CorLevel, LastUpdate)
 *     VALUES
 *         ('#myNumber#', '#myDescription#', '#myDepartment#',
 *         '#myDescription#', '#myCorLevel#', #Now()#)
 *     &lt;/CFQUERY&gt;
 *     &lt;!------------------------------------------------------------------
 *     Rolls back the pending insertion if database exception is caught.
 *     -------------------------------------------------------------------&gt;
 *     &lt;CFCATCH TYPE="DATABASE"&gt;
 *         &lt;CFTRANSACTION ACTION="ROLLBACK"/&gt;
 *         &lt;CFSET commitIt = "No"&gt;
 *     &lt;/CFCATCH&gt;
 *     &lt;CFIF commitIt&gt;
 *         &lt;CFTRANSACTION ACTION="COMMIT"/&gt;
 *         &lt;!--------------------------------------------------------------
 *         Commits the pending insertion.
 *         ----------------------------------------------------------------&gt;
 *     &lt;CFELSE&gt;
 *         &lt;CFSET commitIt="Yes"&gt;
 *     &lt;/CFIF&gt;
 * &lt;/CFTRANSACTION&gt;
 * &lt;/CFTRY&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFTRANSACTION {
   /**
    * Optional.  The actions are as follows:
    * <UL>
    * <LI>BEGIN
    * <LI>COMMIT
    * <LI>ROLLBACK
    * </UL>
    */
   attr action {
      /**
       * indicates the start of the block of code to be executed.
       * It is the default value.
       */
      begin
      /**
       * commits a pending transaction.
       */
      commit
      /**
       * rolls back a pending transaction.
       */
      rollback
   }
   /**
    * Optional. ODBC lock type.
    */
   attr isolation {
      Read_Uncommitted
      Read_Committed
      Repeatable_Read
      Serializable
   }

}

/**
 * The CFTREE form custom control allows you to place a tree control in a
 * CFFORM.  User selections can be validated.  Individual tree items are
 * created with CFTREEITEM tags inside the CFTREE tag block.
 * <P>
 * <B>Note:</B> CFTREE incorporates a Java applet, so a browser must be Java-enabled
 * for CFTREE to work properly.
 *
 * <PRE>
 * &lt;CFTREE NAME="name"
 *     REQUIRED="Yes/No"
 *     DELIMITER="delimiter"
 *     COMPLETEPATH="Yes/No"
 *     APPENDKEY="Yes/No"
 *     HIGHLIGHTHREF="Yes/No"
 *     ONVALIDATE="script_name"
 *     MESSAGE="text"
 *     ONERROR="text"
 *     FONT="font"
 *     FONTSIZE="size"
 *     ITALIC="Yes/No"
 *     BOLD="Yes/No"
 *     HEIGHT="integer"
 *     WIDTH="integer"
 *     VSPACE="integer"
 *     HSPACE="integer"
 *     ALIGN="alignment"
 *     BORDER="Yes/No"
 *     HSCROLL="Yes/No"
 *     VSCROLL="Yes/No"
 *     NOTSUPPORTED="text"&gt;
 * &lt;/CFTREE&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFTREE in a CFFORM.
 * The query takes a list of employees, and uses CFTREE and CFSELECT
 * to display the results of the query.  In addition, CFGRID is used
 * to show an alternate means of displaying the same data.
 * <PRE>
 * &lt;!--- set a default for the employeeNames variable ---&gt;
 * &lt;CFPARAM NAME="employeeNames" DEFAULT=""&gt;
 * &lt;!--- if an employee name has been passed from the form,
 * set employeeNames variable to this value ---&gt;
 * &lt;CFIF IsDefined("form.employeeNames")&gt;
 *     &lt;CFSET employeeNames = form.employeeNames&gt;
 * &lt;/CFIF&gt;
 * &lt;!--- query the datasource to find the employee information---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT   Emp_ID, FirstName, LastName, EMail, Phone, Department
 * FROM     Employees where lastname
 *          &lt;CFIF #employeeNames# is not ""&gt;= '#employeeNames#'&lt;/CFIF&gt;
 * &lt;/CFQUERY&gt;
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFTREE Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFTREE Example&lt;/H3&gt;
 *
 * &lt;!--- Use CFFORM when using other CFINPUT tools ---&gt;
 * &lt;CFFORM ACTION="cftree.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 * &lt;!--- Use CFSELECT to present the contents of the query by column ---&gt;
 * &lt;H3&gt;CFSELECT Presentation of Data&lt;/H3&gt;
 * &lt;H4&gt;Click on an employee's last name and hit "see information for
 * this employee" to see expanded information.&lt;/H4&gt;
 *
 * &lt;CFSELECT NAME="EmployeeNames" MESSAGE="Select an Employee Name"
 *     SIZE="#getEmployees.recordcount#" QUERY="GetEmployees"
 *     VALUE="LastName" REQUIRED="No"&gt;
 *     &lt;OPTION value=""&gt;Select All
 * &lt;/CFSELECT&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="see information for this employee"&gt;
 *
 * &lt;!--- showing the use of CFTREE ---&gt;
 * &lt;!--- Use CFTREE for an expanded presentation of the data ---&gt;
 * &lt;!--- Loop through the query to create each branch of the CFTREE ---&gt;
 * &lt;H3&gt;CFTREE Presentation of Data&lt;/H3&gt;
 * &lt;H4&gt;Click on the folders to "drill down" and reveal information.&lt;/H4&gt;
 * &lt;P&gt;CFTREEITEM is used to create the "branches" of the tree.
 * &lt;P&gt;
 * &lt;CFTREE NAME="SeeEmployees" HEIGHT="150" WIDTH="240"
 *     FONT="Arial Narrow" BOLD="No"
 *     ITALIC="No" BORDER="Yes"
 *     HSCROLL="Yes" VSCROLL="Yes"
 *     REQUIRED="No" COMPLETEPATH="No"
 *     APPENDKEY="Yes" HIGHLIGHTHREF="Yes"&gt;
 * &lt;CFLOOP QUERY="GetEmployees"&gt;
 *     &lt;CFTREEITEM VALUE="#Emp_ID#" PARENT="SeeEmployees" EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#LastName#" DISPLAY="Name"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#LastName#, #FirstName#"
 *         PARENT="#LastName#" EXPAND="No"
 *         QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Department#" DISPLAY="Department"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Department#" PARENT="#Department#"
 *         EXPAND="No" QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Phone#" DISPLAY="Phone"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Phone#" PARENT="#Phone#"
 *         EXPAND="No" QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Email#" DISPLAY="Email" PARENT="#Emp_ID#"
 *           QUERYASROOT="No" EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Email#" PARENT="#Email#" EXPAND="No"
 *         QUERYASROOT="No"&gt;
 * &lt;/CFLOOP&gt;
 * &lt;/CFTREE&gt;
 * ...
 * </PRE>
 */
tag CFTREE : NOTSUPPORTED_ATTRIBUTE, POSITION_ATTRIBUTES {
   /**
    * Required. A name for the CFTREE control.
    */
   attr name;
   /**
    * Optional.  Yes or No.  User must select an item in the tree control.
    * Default is No.
    */
   attr required {
      yes no
   }
   /**
    * Optional.  The character used to separate elements in the form variable
    * PATH.  The default is "\".
    */
   attr delimiter;
   /**
    * Optional.  Yes passes the root level of the treename.path form variable
    * when the CFTREE is submitted.  If omitted or No, the root level of this
    * form variable is not included.
    */
   attr completepath {
      yes no
   }
   /**
    * Optional.  Yes or No.  When used with HREF, Yes passes the CFTREEITEMKEY
    * variable along with the value of the selected tree item in the URL to the
    * application page specified in the CFFORM ACTION attribute.  The default is
    * Yes.
    */
   attr appendkey {
      yes no
   }
   /**
    * Optional.  Yes highlights links associated with a CFTREEITEM with a URL
    * attribute value.  No disables highlight.  Default is Yes.
    */
   attr highlighthref {
      yes no
   }
   /**
    * Optional.  The name of a valid JavaScript function used to validate user
    * input.  The form object, input object, and input object value are passed
    * to the specified routine, which should return true if validation succeeds
    * and false otherwise.
    */
   attr onvalidate;
   /**
    * Optional. Message text to appear if validation fails.
    */
   attr message;
   /**
    * Optional.  The name of a valid JavaScript function you want to execute in
    * the event of a failed validation.
    */
   attr onerror;
   /**
    * Optional. Font name to use for all data in the tree control.
    */
   attr font;
   /**
    * Optional. Font size for text in the tree control, measured in points.
    */
   attr fontsize;
   /**
    * Optional. Yes or No. Yes presents all tree control text in italic. Default is No.
    */
   attr italic {
      yes no
   }
   /**
    * Optional. Yes or No. Yes presents all tree control text in boldface. Default is No.
    */
   attr bold {
      yes no
   }
   /**
    * Optional. Places a border around the tree. Default is Yes.
    */
   attr border;
   /**
    * Optional. Permits horizontal scrolling. Default is Yes.
    */
   attr hscroll;
   /**
    * Optional. Permits vertical scrolling. Default is Yes.
    */
   attr vscroll;
}
/**
 * Use CFTREEITEM to populate a tree control created with CFTREE with
 * individual elements.  You can use the IMG values supplied with ColdFusion
 * or reference your own icons.
 *
 * <B>Note:</B> CFTREEITEM incorporates a Java applet, so a browser must be Java-
 * enabled for CFTREE to work properly.
 *
 * <PRE>
 * &lt;CFTREEITEM VALUE="text"
 *     DISPLAY="text"
 *     PARENT="parent_name"
 *     IMG="filename"
 *     IMGOPEN="filename"
 *     HREF="URL"
 *     TARGET="URL_target"
 *     QUERY="queryname"
 *     QUERYASROOT="Yes/No"
 *     EXPAND="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFTREEITEM in a CFFORM.
 * The query takes a list of employees, and uses CFTREE and CFSELECT
 * to display the results of the query.  In addition, CFGRID is used
 * to show an alternate means of displaying the same data.
 * <PRE>
 * &lt;!--- set a default for the employeeNames variable ---&gt;
 * &lt;CFPARAM NAME="employeeNames" DEFAULT=""&gt;
 *
 * &lt;!--- if an employee name has been passed from the form,
 * set employeeNames variable to this value ---Auto&gt;
 * &lt;CFIF IsDefined("form.employeeNames")&gt;
 *     &lt;CFSET employeeNames = form.employeeNames&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;!--- query the datasource to find the employee information---&gt;
 * &lt;CFQUERY NAME="GetEmployees" DATASOURCE="cfsnippets"&gt;
 * SELECT   Emp_ID, FirstName, LastName, EMail, Phone, Department
 * FROM     Employees where lastname
 *          &lt;CFIF #employeeNames# is not ""&gt;= '#employeeNames#'&lt;/CFIF&gt;
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFTREE Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY&gt;
 * &lt;H3&gt;CFTREEITEM Example&lt;/H3&gt;
 *
 * &lt;!--- Use CFFORM when using other CFINPUT tools ---&gt;
 * &lt;CFFORM ACTION="cftreeitem.cfm" METHOD="POST" ENABLECAB="Yes"&gt;
 *
 * &lt;!--- Use CFSELECT to present the contents of the query by column ---&gt;
 * &lt;H3&gt;CFSELECT Presentation of Data&lt;/H3&gt;
 * &lt;H4&gt;Click on an employee's last name and hit "see information for
 * this employee" to see expanded information.&lt;/H4&gt;
 * &lt;CFSELECT NAME="EmployeeNames" MESSAGE="Select an Employee Name"
 *     SIZE="#getEmployees.recordcount#" QUERY="GetEmployees"
 *     VALUE="LastName" REQUIRED="No"&gt;
 *     &lt;OPTION value=""&gt;Select All
 * &lt;/CFSELECT&gt;
 *
 * &lt;INPUT TYPE="Submit" NAME="" VALUE="see information for this employee"&gt;
 *
 * &lt;!--- showing the use of CFTREE ---&gt;
 * &lt;!--- Use CFTREE for an expanded presentation of the data ---&gt;
 * &lt;!--- Loop through the query to create each branch of the CFTREE ---&gt;
 * &lt;H3&gt;CFTREE Presentation of Data&lt;/H3&gt;
 * &lt;H4&gt;Click on the folders to "drill down" and reveal information.&lt;/H4&gt;
 * &lt;P&gt;CFTREEITEM is used to create the "branches" of the tree.
 * &lt;P&gt;
 * &lt;CFTREE NAME="SeeEmployees" HEIGHT="150" WIDTH="240"
 *     FONT="Arial Narrow" BOLD="No"
 *     ITALIC="No" BORDER="Yes"
 *     HSCROLL="Yes" VSCROLL="Yes"
 *     REQUIRED="No" COMPLETEPATH="No"
 *     APPENDKEY="Yes" HIGHLIGHTHREF="Yes"&gt;
 * &lt;CFLOOP QUERY="GetEmployees"&gt;
 *     &lt;CFTREEITEM VALUE="#Emp_ID#" PARENT="SeeEmployees" EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#LastName#" DISPLAY="Name"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#LastName#, #FirstName#"
 *         PARENT="#LastName#" EXPAND="No"
 *         QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Department#" DISPLAY="Department"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Department#" PARENT="#Department#"
 *         EXPAND="No" QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Phone#" DISPLAY="Phone"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Phone#" PARENT="#Phone#"
 *         EXPAND="No" QUERYASROOT="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Email#" DISPLAY="Email"
 *         PARENT="#Emp_ID#" QUERYASROOT="No"
 *         EXPAND="No"&gt;
 *     &lt;CFTREEITEM VALUE="#Email#" PARENT="#Email#"
 *         EXPAND="No" QUERYASROOT="No"&gt;
 * &lt;/CFLOOP&gt;
 * &lt;/CFTREE&gt;
 * ...
 * </PRE>
 */
tag CFTREEITEM (empty) {
   /**
    * Required.  Value passed when the CFFORM is submitted.  When populating a
    * CFTREE with data from a CFQUERY, columns are specified in a
    * comma-separated list:
    *
    * <PRE>
    *    VALUE="dept_id,emp_id"
    * </PRE>
    */
   attr value;
   /**
    * Optional.  The label for the tree item.  Default is VALUE.  When
    * populating a CFTREE with data from a CFQUERY, display names are specified
    * in a comma-separated list:
    *
    * <PRE>
    *  DISPLAY="dept_name,emp_name"
    * </PRE>
    */
   attr display;
   /**
    * Optional. Value for tree item parent.
    */
   attr parent;
   /**
    * Optional.  Image name or filename for the tree item.  When populating a
    * CFTREE with data from a CFQUERY, images or filenames for each level of the
    * tree are specified in a comma-separated list.
    * <P>
    * The default image name is "Folder.  " A number of images are supplied and
    * can be specified using only the image name (no file extension):
    *
    * <UL>
    * <LI> cd
    * <LI> computer
    * <LI> document
    * <LI> element
    * <LI> folder
    * <LI> floppy
    * <LI> fixed
    * <LI> remote
    * </UL>
    *
    * <P>
    * Use commas to separate image names corresponding to tree level, for
    * example:
    *
    * <PRE>
    * IMG="folder,document"
    * IMG=",document
    * </PRE>
    *
    * To specify your own custom image, specify the path and file extension:
    * <PRE>
    * IMG="../images/page1.gif"
    * </PRE>
    */
   attr img;
   /**
    * Optional.  Icon displayed with open tree item.  You can specify the icon
    * filename using a relative path.  As with IMG, you can use an image
    * supplied with ColdFusion.
    */
   attr imgopen;
   /**
    * Optional.  URL to associate with the tree item or a query column for a
    * tree that is populated from a query.  If HREF is a query column, then the
    * HREF value is the value populated by the query.  If HREF is not recognized
    * as a query column, it is assumed that the HREF text is an actual HTML
    * HREF.
    * <P>
    * When populating a CFTREE with data from a CFQUERY, HREFs can be specified
    * in a comma-separated list
    * <PRE>
    * HREF="http://dept_server,http://emp_server"
    * </PRE>
    */
   attr href;
   /**
    * Optional.  Target attribute for HREF URL.  When populating a CFTREE with
    * data from a CFQUERY, targets are specified in a comma-separated list:
    * <PRE>
    * TARGET="FRAME_BODY,_blank"
    * </PRE>
    */
   attr target;
   /**
    * Optional. Query name used to generate data for the tree item.
    */
   attr query;
   /**
    * Optional.  Yes or No.  Defines specified query as the root level.  As in
    * Example 1, this option prevents having to create an additional parent
    * CFTREEITEM.
    */
   attr queryasroot {
      yes no
   }
   /**
    * Optional.  Yes or No.  Yes expands tree to show tree item children.  No
    * keeps tree item collapsed.  Default is Yes.
    */
   attr expand {
      yes no
   }

}
/**
 * Used with one or more CFCATCH tags, the CFTRY tag allows developers to
 * catch and process exceptions in ColdFusion pages.  Exceptions include any
 * event that disrupts the normal flow of instructions in a ColdFusion page
 * such as failed database operations, missing include files, and
 * developer-specified events.
 *
 * <PRE>
 * &lt;CFTRY&gt;
 * ... Add code here
 * &lt;CFCATCH TYPE="exceptiontype"&gt;
 * ... Add exception processing code here
 * &lt;/CFCATCH&gt;
 * ... Additional CFCATCH blocks go here
 * &lt;/CFTRY&gt;
 * </PRE>
 *
 * <P>
 * You must code at least one CFCATCH tag within a CFTRY block.  Code CFCATCH
 * tags at the end of the CFTRY block.  ColdFusion tests CFCATCH tags in the
 * order in which they appear on the page.
 * <P>
 * If you specify the type to be ANY, do so in the last CFCATCH tag in the
 * block so that all of the other tests are executed first.
 * <P>
 * <B>Note:</B> Specifying the type as ANY causes the ColdFusion Application Server
 * to catch exceptions from any CFML tag, data source, or external object,
 * which your application may not be prepared to handle.
 * <P>
 * Applications can optionally use the CFTHROW tag to raise custom
 * exceptions.  Such exceptions are caught with any of the following type
 * specifications:
 * <PRE>
 * TYPE="custom_type"
 * TYPE="APPLICATION"
 * TYPE="ANY".
 * </PRE>
 * <P>
 * The custom_type type designates the name of a user-defined type specified
 * with a CFTHROW tag.  CFCATCH has a catch handler that can catch a custom
 * type by pattern, providing the custom type is defined as a series of
 * strings concatenated together by periods, as in
 * MyApp.BusinessRuleException.InvalidAccount".  CFCATCH searches for a
 * custom type match starting with the most specific and ending with the
 * least specific.  For example, you could define a type as follows:
 * <PRE>
 * &lt;CFTHROW TYPE="MyApp.BusinessRuleException.InvalidAccount"&gt;
 * </PRE>
 * <P>
 * CFCATCH first searches for the entire type string defined in the CFTHROW
 * tag, as follows:
 * <PRE>
 * &lt;CFCATCH TYPE="MyApp.BusinessRuleException.InvalidAccount"&gt;
 * </PRE>
 * <P>
 * Then it searches for the next most specific:
 * <PRE>
 * &lt;CFCATCH TYPE="MyApp.BusinessRuleException"&gt;
 * </PRE>
 * <P>
 * Finally, it searches for the least specific:
 * <PRE>
 * &lt;CFCATCH TYPE="MyApp"&gt;
 * </PRE>
 * <P>
 * The order in which you code CFCATCH tags designed to catch a custom
 * exception type within an application does not matter.  A CFCATCH tag
 * searches for the custom exception types from most specific to least
 * specific.
 * <P>
 * If you specify the type to be "APPLICATION, " the CFCATCH tag catches only
 * those custom exceptions that have been specified as having the APPLICATION
 * type in the CFTHROW tag that defines them.
 * <P>
 * The tags that throw an exception of TYPE="TEMPLATE" are CFINCLUDE,
 * CFMODULE, and CFERROR.
 * <P>
 * An exception raised within a CFCATCH block cannot be handled by the CFTRY
 * block that immediately encloses the CFCATCH tag.  However, you can rethrow
 * the currently active exception by using the CFRETHROW tag.
 * <P>
 * You can use the CFCATCH variable to access exception information:
 * <UL>
 * <LI>
 * Type -- Exception type, as specified in CFCATCH.
 * <LI>
 * Message -- The exception's diagnostic message, if one was provided.  If no
 * diagnostic message is available, this is an empty string.
 * <LI>
 * Detail -- A detailed message from the CFML interpreter.  This message,
 * which contains HTML formatting, can help determine which tag threw the
 * exception.
 * <LI>
 * TagContext -- The tag stack: the name and position of each tag in the tag
 * stack, and the full path names of the files that contain the tags in the
 * tag stack.  See the note that follows this list for more information.
 * <LI>
 * NativeErrorCode -- TYPE=Database only.  The native error code associated
 * with this exception.  Database drivers typically provide error codes to
 * assist diagnosis of failing database operations.  If no error code was
 * provided, the value of NativeErrorCode is -1.
 * <LI>
 * SQLSTATE -- TYPE=Database only.  The SQLState associated with this
 * exception.  Database drivers typically provide error codes to assist
 * diagnosis of failing database operations.  If no SQLState value was
 * provided, the value of SQLSTATE is -1.
 * <LI>
 * ErrNumber -- TYPE=Expression only.  Internal expression error number.
 * <LI>
 * MissingFileName -- TYPE=MissingInclude only.  Name of the file that could
 * not be included.
 * <LI>
 * LockName -- TYPE=Lock only.  The name of the affected lock (set to
 * anonymous if the lock was unnamed).
 * <LI>
 * LockOperation -- TYPE=Lock only.  The operation that failed (set to
 * Timeout, Create Mutex, or Unknown).
 * <LI>
 * ErrorCode -- TYPE=Custom type only.  A string error code.
 * <LI>
 * ExtendedInfo -- TYPE=APPLICATION and custom only.  A custom error message.
 * </UL>
 * <P>
 * <B>Note:</B> In order to see the tag stack displayed by TagContext, use the
 * ColdFusion Administrator to enable the CFML stack trace.Under Debugging in
 * the ColdFusion Administrator, choose the checkbox next to "Enable CFML
 * stack trace.  "
 *
 * <P>
 * @example
 * CFTRY example, using TagContext to display the tag stack.
 * <PRE>
 * &lt;HTML&gt;
 *
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;
 * CFTRY Example
 * &lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BASEFONT FACE="Arial, Helvetica" SIZE=2&gt;
 *
 * &lt;BODY  bgcolor="#FFFFD5"&gt;
 *
 * &lt;H3&gt;CFTRY Example&lt;/H3&gt;
 *
 * &lt;!--- open a CFTRY block ---&gt;
 * &lt;CFTRY&gt;
 *
 * &lt;!--- note that we have misspelled the tablename
 * "employees" as "employeeas" ---&gt;
 * &lt;CFQUERY NAME="TestQuery" DATASOURCE="cfsnippets"&gt;
 * SELECT
 * FROM EMPLOYEEAS
 * &lt;/CFQUERY&gt;
 *
 * &lt;P&gt;... other processing goes here
 *
 * &lt;!--- specify the type of error for which we are fishing ---&gt;
 * &lt;CFCATCH TYPE="Database"&gt;
 * &lt;!--- the message to display ---&gt;
 *     &lt;H3&gt;You've Thrown a Database &lt;B&gt;Error&lt;/B&gt;&lt;/H3&gt;
 * &lt;CFOUTPUT&gt;
 * &lt;!--- and the diagnostic message from the ColdFusion server ---&gt;
 *     &lt;P&gt;#CFCATCH.message#&lt;/P&gt;
 *     &lt;P&gt;Caught an exception, type = #CFCATCH.TYPE# &lt;/P&gt;
 *     &lt;P&gt;The contents of the tag stack are:&lt;/P&gt;
 *     &lt;CFLOOP index=i from=1 to = #ArrayLen(CFCATCH.TAGCONTEXT)#&gt;
 *           &lt;CFSET sCurrent = #CFCATCH.TAGCONTEXT[i]#&gt;
 *               &lt;BR&gt;#i# #sCurrent["ID"]#
 * (#sCurrent["LINE"]#,#sCurrent["COLUMN"]#) #sCurrent["TEMPLATE"]#
 *     &lt;/CFLOOP&gt;
 * &lt;/CFOUTPUT&gt;
 * &lt;/CFCATCH&gt;
 *
 * &lt;/CFTRY&gt;
 *
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFTRY {
   /**
    * Optional. Specifies the type of exception to be handled by the CFCATCH block:
    */
   attr type {
      APPLICATION
      Database
      Template
      Security
      Object
      MissingInclude
      Expression
      Lock
      Custom_type
      Any
   }
}
/**
The CFUPDATE tag updates existing records in data sources.

 * <PRE>
 * &lt;CFUPDATE DATASOURCE="ds_name"
 *     DBTYPE="type"
 *     DBSERVER="dbms"
 *     DBNAME="database name"
 *     TABLENAME="table_name"
 *     TABLEOWNER="name"
 *     TABLEQUALIFIER="qualifier"
 *     USERNAME="username"
 *     PASSWORD="password"
 *     PROVIDER="COMProvider"
 *     PROVIDERDSN="datasource"
 *     FORMFIELDS="field_names"&gt;
 * </PRE>
 *
 * <P>
 * @example
 * This example shows the use of CFUPDATE to change
 * records in a data source.
 * <PRE>
 * &lt;!--- if course_ID has been passed to this form, then
 * perform the update on that record in the data source ---&gt;
 * &lt;CFIF IsDefined("form.course_ID") is "True"&gt;
 * &lt;CFUPDATE DATASOURCE="cfsnippets"
 * TABLENAME="courses" FORMFIELDS="course_ID,number,Descript"&gt;
 * &lt;/CFIF&gt;
 *
 * &lt;!--- perform a query to reflect any updated information
 * if course_ID is passed through a url, we are selecting a
 * record to update ... select only that record with the
 * WHERE clause
 *  ---&gt;
 * &lt;CFQUERY NAME="GetCourseInfo" DATASOURCE="cfsnippets"&gt;
 * SELECT     Number, Course_ID, Descript
 * FROM       Courses
 * &lt;CFIF IsDefined("url.course_ID") is True&gt;
 * WHERE        Course_ID = #url.course_ID#
 * &lt;/CFIF&gt;
 * ORDER by Number
 * &lt;/CFQUERY&gt;
 *
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 * &lt;TITLE&gt;CFUPDATE Example&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 *
 * &lt;BODY bgcolor=silver&gt;
 * &lt;H3&gt;CFUPDATE Example&lt;/H3&gt;
 *
 * &lt;!--- if we are updating a record, don't show
 * the entire list ---&gt;
 * &lt;CFIF NOT IsDefined("url.course_ID")&gt;
 * &lt;P&gt;&lt;H3&gt;&lt;a href="cfupdate.cfm"&gt;Show Entire List&lt;/A&gt;&lt;/H3&gt;
 *
 * &lt;FORM METHOD="POST" ACTION="cfupdate.cfm"&gt;
 *
 * &lt;H3&gt;You can alter the contents of this
 * record, and then click "submit" to use
 * CFUPDATE and alter the database&lt;/H3&gt;
 *
 * &lt;P&gt;Course Number &lt;INPUT TYPE="Text" NAME="number"
 *   VALUE="&lt;CFOUTPUT&gt;#GetCourseInfo.number#&lt;/CFOUTPUT&gt;"&gt;
 * &lt;P&gt;Course Description&lt;BR&gt;
 * &lt;TEXTAREA NAME="Descript" COLS="40" ROWS="5"&gt;
 * &lt;CFOUTPUT&gt;#GetCourseInfo.Descript#&lt;/CFOUTPUT&gt;
 * &lt;/TEXTAREA&gt;
 * &lt;INPUT TYPE="Hidden" NAME="course_id"
 *   VALUE="&lt;CFOUTPUT&gt;#GetCourseInfo.Course_ID#&lt;/CFOUTPUT&gt;"&gt;
 * &lt;P&gt;&lt;INPUT TYPE="Submit" NAME=""&gt;
 * &lt;/FORM&gt;
 *
 * &lt;CFELSE&gt;
 * &lt;!--- Show the entire record set in CFTABLE form ---&gt;
 * &lt;CFTABLE QUERY="GetCourseInfo" HTMLTABLE&gt;
 * &lt;CFCOL  TEXT="&lt;a href='cfupdate.cfm?course_ID=#course_ID#'&gt;Edit Me&lt;/a&gt;"
 *   WIDTH=10 HEADER="Edit&lt;br&gt;this Entry"&gt;
 * &lt;CFCOL  TEXT="#Number#" WIDTH="4" HEADER="Course Number"&gt;
 * &lt;CFCOL  TEXT="#Descript#" WIDTH=100 HEADER="Course Description"&gt;
 * &lt;/CFTABLE&gt;
 * &lt;/CFIF&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFUPDATE (empty) : DATABASE_ATTRIBUTES {
   /**
    * Optional.  A comma-separated list of form fields to update.  If this
    * attribute is not specified, all fields in the form are included in the
    * operation.
    */
   attr formfields;
}
/**
 * The CFWDDX tag serializes and de-serializes CFML data structures to the
 * XML-based WDDX format.  You can also use it to generate JavaScript
 * statements instantiating JavaScript objects equivalent to the contents of
 * a WDDX packet or some CFML data structures.
 *
 * <PRE>
 * &lt;CFWDDX ACTION="action"
 *     INPUT="inputdata"
 *     OUTPUT="resultvariablename"
 *     TOPLEVELVARIABLE="toplevelvariablenameforjavascript"
 *     USETIMEZONEINFO="Yes/No"&gt;
 * </PRE>
 *
 * <P>
 * Use this tag to serialize and deserialize packets of data used to
 * communicate with the browser.
 * <P>
 * For complete information on WDDX, see the "Programming with XML " chapter
 * in Developing Web Applications with ColdFusion.
 *
 * <P>
 * @example
 * This snippet shows basic use of the CFWDDX tag.
 * <PRE>
 * &lt;HTML&gt;
 * &lt;HEAD&gt;
 *     &lt;TITLE&gt;CFWDDX Tag&lt;/TITLE&gt;
 * &lt;/HEAD&gt;
 * &lt;BODY&gt;
 * &lt;!--- Create a simple query  ---&gt;
 * &lt;CFQUERY NAME='q' DATASOURCE='cfsnippets'&gt;
 *     select Message_Id, Thread_id, Username from messages
 * &lt;/CFQUERY&gt;
 *
 * The recordset data is:...&lt;P&gt;
 * &lt;CFOUTPUT QUERY=q&gt;
 *     #Message_ID# #Thread_ID# #Username#&lt;br&gt;
 * &lt;/CFOUTPUT&gt;&lt;P&gt;
 *
 * &lt;!--- Serialize data to WDDX format ---&gt;
 * Serializing CFML data...&lt;P&gt;
 * &lt;CFWDDX ACTION='cfml2wddx' input=#q# output='wddxText'&gt;
 *
 * &lt;!--- Display WDDX XML packet ---&gt;
 * Resulting WDDX packet is:
 * &lt;xmp&gt;&lt;CFOUTPUT&gt;#wddxText#&lt;/CFOUTPUT&gt;&lt;/xmp&gt;
 *
 * &lt;!--- Deserialize to a variable named wddxResult ---&gt;
 * Deserializing WDDX packet...&lt;P&gt;
 * &lt;CFWDDX ACTION='wddx2cfml' input=#wddxText# output='qnew'&gt;
 *
 * The recordset data is:...&lt;P&gt;
 * &lt;CFOUTPUT QUERY=qnew&gt;
 *     #Message_ID# #Thread_ID# #Username#&lt;br&gt;
 * &lt;/CFOUTPUT&gt;&lt;P&gt;
 * &lt;/BODY&gt;
 * &lt;/HTML&gt;
 * </PRE>
 */
tag CFWDDX (empty) {
   /**
    * Specifies the action taken by the CFWDDX tag.
    */
   attr action {
      /**
       * Serialize CFML to WDDX format
       */
      CFML2WDDX
      /**
       * Deserialize WDDX to CFML
       */
      WDDX2CFML
      /**
       * Serialize CFML to JavaScript format
       */
      CFML2JS
      /**
       * Deserialize WDDX to JavaScript
       */
      WDDX2JS
   }
   /**
    * Required. The value to be processed.
    */
   attr input;
   /**
    * The name of the variable to hold the output of the operation.  This
    * attribute is required for ACTION=WDDX2CFML.  For all other actions, if
    * this attribute is not provided, the result of the WDDX processing is
    * outputted in the HTML stream.
    */
   attr output;
   /**
    * Required when ACTION=WDDX2JS or ACTION=CFML2JS.  The name of the top-level
    * JavaScript object created by the deserialization process.  The object
    * created by this process is an instance of the WddxRecordset object,
    * explained in WddxRecordset Object .
    * <P>
    * This attribute applies only when the ACTION is WDDX2JS or CFML2JS.
    */
   attr toplevelvariable {
      yes no
   }
   /**
    * Optional.  Indicates whether to output time-zone information when
    * serializing CFML to WDDX.  If time-zone information is taken into account,
    * the hour-minute offset, as represented in the ISO8601 format, is
    * calculated in the date-time output.  If time-zone information is not taken
    * into account, the local time is output.  The default is Yes.
    */
   attr usetimezoneinfo {
      yes no
   }

}
