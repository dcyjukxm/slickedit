
/**
 * terminates a task abnormally.
 * <PRE>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ABEND____________________________________________><                |
 * |            |_ABCODE(name)_|  |_CANCEL_|  |_NODUMP_|                    |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 *
 * </PRE>
 * <p>The main storage associated with the terminated task is
 * released; optionally, a transaction dump of this storage can
 * be obtained.
 *
 * @example
 * <p>The following example shows how to terminate a task
 * abnormally:
 * <PRE>
 * EXEC CICS ABEND ABCODE('BCDE')
 * </PRE>
 * @param ABCODE(name)
 *               specifies that main storage related to the task that is
 *               being terminated is to be dumped. The ABCODE is used
 *               as a transaction dumpcode to identify the dump. The
 *               name should have four characters and should not
 *               contain any leading or imbedded blanks. If ABCODE is
 *               not coded, the dump is identified by ????.
 *               <p>Do not start the name with the letter A, because this is
 *               reserved for CICS itself.
 * @param CANCEL
 *               specifies that exits established by HANDLE ABEND
 *               commands are to be ignored. An ABEND CANCEL
 *               command cancels all exits at any level in the task (and
 *               terminates the task abnormally). If the PL/I STAE
 *               execution-time option has been specified, an abnormal
 *               termination exit is established by PL/I. This exit is
 *               revoked by the CANCEL option.
 * @param NODUMP
 *               allows you to request an abend without causing a dump
 *               to be taken.
 */
function ABEND(ABCODE(name),CANCEL,NODUMP);


/**
 * Obtain access to CICS storage areas.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ADDRESS__________________________________________________________> |
 * |              |_ACEE(ptr-ref)_|  |_COMMAREA(ptr-ref)_|                  |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CWA(ptr-ref)_|  |_EIB(ptr-ref)_|  |_TCTUA(ptr-ref)_|              |
 * |                                                                        |
 * | >____________________><                                                |
 * |    |_TWA(ptr-ref)_|                                                    |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Note for dynamic transaction routing</B>
 * <p>Using ADDRESS with CWA could create inter-transaction affinities that adversely affect the use of dynamic transaction
 * routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><B>Description</B>
 * <p>ADDRESS accesses the following areas:
 * <UL>
 * <LI>The access control environment element (ACEE)
 * <LI>The communication area available to the invoked
 * program (COMMAREA)
 * <LI>The common work area (CWA)
 * <LI>The EXEC interface block (EIB)
 * <LI>The terminal control table user area (TCTUA)
 * <LI>The transaction work area (TWA)
 * </UL>
 * <p>In OS/VS COBOL (but not VS COBOL II), if an ADDRESS
 * command is included in a COBOL program that is to be
 * compiled using the optimization feature, it must be followed
 * by SERVICE RELOAD statements to reload the BLL cell
 * being used.
 * <p>In assembler language, no more than four options may be
 * specified in one ADDRESS command.
 *
 * @param ACEE(ptr-ref)
 *               returns a pointer to the access control environment
 *               element, the control block that is generated by an
 *               external security manager (ESM) when the user signs
 *               on. If the user is not signed on, the address of the CICS
 *               DFLTUSER's ACEE is returned. If an ACEE does not
 *               exist, CICS sets the pointer reference to the null value,
 *               X'FF000000'.
 *               <p><b>Note</b>:  Take care when addressing an ACEE in a server
 *               program invoked by a distributed program link.
 *               The ACEE address returned depends on the link
 *               security and may not be the same as the
 *               address of the user signed on at the local
 *               system.
 * @param COMMAREA(ptr-ref)
 *               returns a pointer reference, set to the address of the
 *               communication area (COMMAREA) available to the
 *               currently executing program. COMMAREA is used to
 *               pass information between application programs. If the
 *               COMMAREA does not exist, the pointer reference is set
 *               to the null value, X'FF000000'.
 *               I<p>n C, you must use ADDRESS COMMAREA to get the
 *               address of the communication area, because this is not
 *               passed as an argument to a C main function.
 * @param CWA(ptr-ref)
 *               returns a pointer reference, set to the address of the
 *               common work area (CWA). This area makes information
 *               available to applications running in a single CICS
 *               system. If a CWA does not exist, CICS sets the pointer
 *               reference to the null value, X'FF000000'.
 * @param EIB(ptr-ref)
 *               returns a pointer reference set to the address of the
 *               EXEC interface block (EIB). You must use this option to
 *               get addressability to the EIB in application routines other
 *               than the first invoked by CICS (where addressability to
 *               the EIB is provided automatically). If the application
 *               program is translated with SYSEIB in the XOPTS
 *               parameter list, this option returns the address of the
 *               system EIB.
 *               <p>If TASKDATALOC(ANY) is defined on the transaction
 *               definition, the address of the data may be above or
 *               below the 16MB line.
 *               <p>If TASKDATALOC(BELOW) is defined on the transaction
 *               definition, and the data resides above the 16MB line, the
 *               data is copied below the 16MB line, and the address of
 *               this copy is returned.
 *               <p>C functions must use ADDRESS EIB to get the address
 *               of the EXEC interface block, because this address is not
 *               passed as an argument to a C main function. You must
 *               code an ADDRESS EIB statement at the beginning of
 *               each application if you want access to the EIB, or if you
 *               are using a command that includes the RESP or RESP2
 *               option.
 * @param TCTUA(ptr-ref)
 *               returns a pointer reference, set to the address of the
 *               terminal control table user area (TCTUA) for the principal
 *               facility, not that for any alternate facility that may have
 *               been allocated. This area is used for passing information
 *               between application programs, but only if the same
 *               terminal is associated with the application programs
 *               involved. If a TCTUA does not exist, the pointer
 *               reference is set to the null value, X'FF000000'.
 * @param TWA(ptr-ref)
 *               returns a pointer reference, set to the address of the
 *               transaction work area (TWA). This area is used for
 *               passing information between application programs, but
 *               only if they are in the same task. If a TWA does not
 *               exist, the pointer reference is set to the null value,
 *               X'FF000000'.
 *               <p>If TASKDATALOC(ANY) is defined on the transaction
 *               definition, the address of the data may be above or
 *               below the 16MB line.
 *               <p>If TASKDATALOC(BELOW) is defined on the transaction
 *               definition, and the data resides above the 16MB line, the
 *               data is copied below the 16MB line, and the address of
 *               this copy is returned.
 */
function ADDRESS(ACEE(ptr-ref),COMMAREA(ptr-ref),CWA(ptr-ref),
   EIB(ptr-ref),TCTUA(ptr-ref),TWA(ptr-ref));

/**
 * Set the address of a structure or pointer.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ADDRESS____SET(data-area)__USING(ptr-ref)____><                    |
 * |              |_SET(ptr-ref)__USING(data-area)_|                        |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <p>The value from the USING option is used to set the
 * reference in the SET option.
 *
 * SET( data-area/ptr-ref)
 *
 * USING( ptr-ref/data-area)
 * @example
 * <p><b><i>COBOL example of ADDRESS SET</i></b>:  To set the address of
 * a structure to a known pointer value:
 * <pre>
 * EXEC CICS ADDRESS SET(address of struc) USING(ptr)
 * </pre>
 * <p>To set a pointer variable to the address of a structure:
 * <pre>
 * EXEC CICS ADDRESS SET(ptr) USING(address of struc01)
 * </pre>
 * @param SET(data-area/ptr-ref)
 *               sets a pointer reference.
 * @param USING(ptr-ref/data-area)
 *               supplies a pointer value.
 */
function "ADDRESS SET"(SET(data-area/ptr-ref),USING(ptr-ref/data-area));

/**
 * <p>Acquire a session to a remote APPC logical unit for use by an APPC mapped conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ALLOCATE____SYSID(systemname)____________________________________> |
 * |               |                    |_PROFILE(name)_| |                 |
 * |               |_PARTNER(name)________________________|                 |
 * |                                                                        |
 * | >________________________________><                                    |
 * |    |_NOQUEUE_|  |_STATE(cvda)_|                                        |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, INVREQ, NETNAMEIDERR, PARTNERIDERR, SYSBUSY,      |
 * | SYSIDERR                                                               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><b>Description</b>
 * <p>ALLOCATE acquires the session and optionally selects a set
 * of session-processing options. CICS makes one of the
 * sessions associated with the named system available to the
 * application program.
 *
 * <p>CICS returns, in EIBRSRCE in the EIB, the 4-byte CONVID
 * (conversation identifier) that the application program uses in
 * all subsequent commands that relate to the conversation.
 *
 * <p>If the session requested is not available, the application is
 * suspended until the session does become available. In such
 * a case, the suspension of the application can be prevented
 * by specifying either the NOQUEUE or the NOSUSPEND
 * option. NOSUSPEND is still supported as an equivalent for
 * NOQUEUE, but NOQUEUE is the preferred keyword.
 *
 * <p>A session is available for allocation only if it is  all of the
 * following:
 * <UL>
 * <LI>A contention winner
 * <LI>Already bound
 * <LI>Not already allocated
 * @conditions
 * <DL>
 * <DT>CBIDERR<DD>
 * occurs if the requested PROFILE cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if the ALLOCATE command is not valid for the
 * device to which it is directed.
 * <p>Default action: terminate the task abnormally.
 * <DT>NETNAMEIDERR<DD>
 * occurs if the name specified in the NETNAME parameter
 * of the RDO definition for the PARTNER specified on the
 * allocate command is invalid.
 * <p>Default action: terminate the task abnormally.
 * <DT>PARTNERIDERR<DD>
 * occurs if the name specified in the PARTNER option is
 * not recognized by CICS.
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>SYSBUSY<DD>
 * occurs for one of the following reasons:
 * <UL>
 * <LI>The request for a session cannot be serviced
 * immediately. This is only possible if the NOQUEUE
 * option is set, or a HANDLE CONDITION for
 * SYSBUSY is active.
 * <LI>The ALLOCATE command is issued when
 * persistent session recovery is still in process and
 * the sessions needed to satisfy the command are not
 * yet recovered.
 * </UL>
 * <p>Default action: ignore the condition.
 * <DT>SYSIDERR<DD>
 * occurs if CICS is unable to provide the application
 * program with a suitable session, for one of the following
 * reasons:
 * <UL>
 * <LI>The name specified in the SYSID option is not
 * recognized by CICS.
 * <LI>The mode name derived from the PROFILE option
 * is not one of the mode names defined for the APPC
 * system entry.
 * <LI>All the sessions in the group specified by SYSID
 * and mode name are out of service, or all sessions
 * are out of service.
 * <LI>The AID (automatic initiate descriptor) representing
 * your ALLOCATE has been canceled.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param SYSID(systemname)
 *                specifies the name (1-4 characters) by which the remote
 *                APPC LU is known to this CICS. This option requests
 *                that one of the sessions to the named system is to be
 *                allocated.
 * @param PROFILE(name)
 *                specifies the name (1-8 characters) of a set of
 *                session-processing options that are to be used during
 *                the execution of mapped commands for the session
 *                specified in the SYSID option. If you specify SYSID and
 *                omit PROFILE, a default profile (DFHCICSA) is selected.
 * @param PARTNER(name)
 *                specifies the name (8 characters) of a set of definitions
 *                that include the names of a remote LU (NETNAME) and
 *                a communication profile to be used on the allocated
 *                session. You can use this option as an alternative to
 *                specifying SYSID and PROFILE explicitly.
 * @param NOQUEUE
 *                overrides the default action when a SYSBUSY condition
 *                arises. This indicates that the session requested is not
 *                immediately available. The default action is to suspend
 *                application execution until the session is available.
 *                NOQUEUE inhibits this waiting; control returns
 *                immediately to the application program instruction
 *                following the command.
 *                <p>Note, however, that if a HANDLE CONDITION for
 *                SYSBUSY is active when the command is executed, this
 *                also overrides the default action, and control is passed
 *                to the user label supplied in the HANDLE CONDITION.
 *                This takes precedence over the NOQUEUE option but
 *                is, of course, negated by either NOHANDLE or RESP.
 *                For a single session APPC ALLOCATE request, issued
 *                from the loser half session, the NOQUEUE option
 *                always causes SYSBUSY to be returned rather than
 *                allowing the request to bid for the session.
 * @param STATE(cvda)
 *                gets the state of the current conversation. The cvda
 *                value returned by CICS is ALLOCATED.
 */
function "ALLOCATE <APPC>"(SYSID(systemname),PROFILE(name),PARTNER(name),NOQUEUE,STATE(cvda));

/**
 * <p>Acquire a session to a remote LUTYPE6.1 logical unit.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ALLOCATE____SESSION(name)________________________________________> |
 * |               |_SYSID(systemname)_|  |_PROFILE(name)_|                 |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_NOQUEUE_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, EOC, INVREQ, SESSBUSY, SESSIONERR, SYSBUSY,       |
 * | SYSIDERR                                                               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <p>ALLOCATE acquires an alternate facility and optionally
 * selects a set of session-processing options. If SYSID is
 * specified, CICS makes available to the application program
 * one of the sessions associated with the named system. The
 * name of this session can be obtained from EIBRSRCE in the
 * EIB. If SESSION is specified, CICS makes the named
 * session available.
 *
 * <p>If the session requested is not available, the application is
 * suspended until the session does become available. In such
 * a case, the suspension of the application can be prevented
 * by specifying either the NOQUEUE or the NOSUSPEND
 * option. NOSUSPEND is still supported as an equivalent for
 * NOQUEUE, but NOQUEUE is the preferred keyword.
 * @conditions
 * <DL>
 * <DT>CBIDERR<DD>
 * occurs if the requested PROFILE cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>EOC<DD>
 * occurs when a request/response unit (RU) is received
 * with the end-of-chain indicator set. Field EIBEOC also
 * contains this indicator.
 * <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 * occurs when the specified session is already allocated to
 * this task, or the session is an APPC session.
 * <p>Default action: terminate the task abnormally.
 * <DT>SESSBUSY<DD>
 * occurs if the request for the specified session cannot be
 * serviced immediately. This is only possible if the
 * NOQUEUE option is set, or a HANDLE CONDITION for
 * SESSBUSY is active.
 * <p>Default action: ignore the condition.
 * <DT>SESSIONERR<DD>
 * occurs if the name specified in the SESSION option is
 * not that of an LUTYPE6.1 session TCTTE, or if the
 * session cannot be allocated because it is out of service.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSBUSY<DD>
 * occurs for one of the following reasons:
 * <UL>
 * <LI>The request for a session cannot be serviced
 * immediately. This is only possible if the NOQUEUE
 * option is set, or a HANDLE CONDITION for
 * SYSBUSY is active.
 * <LI>The ALLOCATE command is issued when
 * persistent session recovery is still in process and
 * the sessions needed to satisfy the command are not
 * yet recovered.
 * </UL>
 * <p>Default action: ignore the condition.
 * <DT>SYSIDERR<DD>
 * occurs if CICS is unable to provide the application
 * program with a suitable session, for one of the following
 * reasons:
 * <UL>
 * <LI>The name specified in the SYSID option is not
 * recognized by CICS.
 * <LI>All sessions are out of service.
 * <LI>The AID (automatic initiate descriptor) representing
 * your ALLOCATE has been canceled.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param SESSION(name)
 *                specifies the symbolic identifier (1-4 characters) of a
 *                session TCTTE. This option specifies the alternate
 *                facility to be used.
 * @param SYSID(systemname)
 *                specifies the name (1-4 characters) of a system TCTSE.
 *                This option specifies that one of the sessions to the
 *                named system is to be allocated.
 * @param PROFILE(name)
 *                specifies the name (1-8 characters) of a set of
 *                session-processing options that are to be used during
 *                execution of terminal control commands for the session
 *                specified in the SYSID or SESSION options. If the
 *                PROFILE option is omitted, a default profile
 *                (DFHCICSA) is selected.
 * @param PARTNER(name)
 * @param NOQUEUE
 *                overrides the default action when a SESSBUSY or
 *                SYSBUSY condition arises. These conditions indicate
 *                that the session requested is not immediately available.
 *                The default action is to suspend application execution
 *                until the session is available. NOQUEUE inhibits this
 *                waiting; control returns immediately to the application
 *                program instruction following the command.
 *                <p>Note, however, that if a HANDLE CONDITION for
 *                SESSBUSY or SYSBUSY is active when the command
 *                is executed, this also overrides the default action, and
 *                control is passed to the user label supplied in the
 *                HANDLE CONDITION. This takes precedence over the
 *                NOQUEUE option but is, of course, negated by either
 *                NOHANDLE or RESP.
 */
function "ALLOCATE <LUTYPE6.1>"(SESSION(name),SYSID(systemname),PROFILE(name),PARTNER(name),NOQUEUE);

/**
 * <P>Acquire an MRO session.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ALLOCATE__SYSID(systemname)________________________________><      |
 * |                                  |_NOQUEUE_|  |_STATE(cvda)_|          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, SYSBUSY, SYSIDERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <p>ALLOCATE acquires an alternate facility. CICS makes
 * available to the application program one of the sessions
 * associated with the system named in the SYSID option. The
 * name of this session can be obtained from EIBRSRCE in the
 * EIB.
 * <p>(If the PROFILE option is specified, it is ignored on an MRO
 * session. This is useful if you want to code a command that
 * can be used on either an LUTYPE6.1 or MRO session.)
 * <p>If the session requested is not available, the application is
 * suspended until the session does become available. In such
 * a case, the suspension of the application can be prevented
 * by specifying the NOQUEUE option.
 * <p>For more information about MRO and IRC, see the  CICS
 * Intercommunication Guide.
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs if an incorrect command has been issued for the
 * LU or terminal in use.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSBUSY<DD>
 * occurs if the request for a session cannot be serviced
 * immediately. This is only possible if the NOQUEUE
 * option is set, or a HANDLE CONDITION for SYSBUSY
 * is active.
 * <p>Default action: ignore the condition.
 * <DT>SYSIDERR<DD>
 * occurs if CICS is unable to provide the application
 * program with a suitable session, for one of the following
 * reasons:
 * <UL>
 * <LI>The name specified in the SYSID option is not
 * recognized by CICS.
 * <LI>All sessions are out of service.
 * <LI>The AID (automatic initiate descriptor) representing
 * your ALLOCATE has been canceled.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DL>
 * @param SYSID(systemname)
 *                specifies the name (1-4 characters) of a system TCTSE.
 *                This option specifies that one of the sessions to the
 *                named system is to be allocated.
 * @param NOQUEUE
 *                overrides the default action when a SYSBUSY condition
 *                arises. This condition indicates that the session
 *                requested is not immediately available. The default
 *                action is to suspend application execution until the
 *                session is available. NOQUEUE inhibits this waiting;
 *                control returns immediately to the application program
 *                instruction following the command.
 *                <p>Note, however, that if a HANDLE CONDITION for
 *                SYSBUSY is active when the command is executed, this
 *                also overrides the default action, and control is passed
 *                to the user label supplied in the HANDLE CONDITION.
 *                This takes precedence over the NOQUEUE option but
 *                is, of course, negated by either NOHANDLE or RESP.
 * @param STATE(cvda)
 *                gets the state of the current conversation. The cvda
 *                value returned by CICS is ALLOCATED.
 */
function "ALLOCATE <MRO>"(SYSID(systemname),NOQUEUE,STATE(cvda));

/**
 * Request current date and time of day.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ASKTIME__________________________><                                |
 * |              |_ABSTIME(data-area)_|                                    |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <P>ASKTIME updates the date (EIBDATE) and CICS time-of-day
 * clock (EIBTIME) fields in the EIB. These two fields initially
 * contain the date and time when the task started.
 *
 * <p>In response to an ASKTIME command, CICS issues an MVS
 * STCK macro and modifies this by a local time difference.
 * Thus, if your MVS TOD (hardware) clock is set to, say, GMT,
 * and the local time is defined as British Summer Time (BST),
 * it is BST that is stored in the EIBTIME field.
 *
 * <p>See "EXEC interface block"
 * for details of the EIB.
 *
 * @example
 * For example, after execution of:
 * <pre>
 * EXEC CICS ASKTIME ABSTIME(utime)
 * </pre>
 * "utime" contains a value similar in format to
 * 002837962864820.
 * The format of "data-area" is:
 * <PRE>
 * COBOL: PIC S9(15) COMP-3
 * C  char data_area[8];
 * PL/I:  FIXED DEC(15)
 * ASM:  PL8
 * </pre>
 *
 * @param ABSTIME(data-area)
 *               ABSTIME( data-area)
 *               specifies the data area for the time, in packed decimal,
 *               since 00:00 on 1 January 1900 (in milliseconds rounded
 *               to the nearest hundredth of a second).
 *               <P>You can use FORMATTIME to change the data into
 *               other familiar formats.
 */
function ASKTIME(ABSTIME(data-area));

/**
 * Request values from outside the application program's local environment.
 *
 * <p><b>Description</B>
 * <p>ASSIGN gets values from outside the local environment of
 * the application program. The data obtained depends on the
 * specified options. Up to sixteen options can be specified in
 * one ASSIGN command.
 * <p>Where any of the following options apply to terminals or
 * terminal-related data, the reference is always to the principal
 * facility.
 * <p>If the principal facility is a remote terminal, the data returned
 * is obtained from the local copy of the information; the request
 * is not routed to the system to which the remote terminal is
 * attached.
 * <p>Transaction routing is as far as possible transparent to the
 * ASSIGN command. In general, the values returned are the
 * same whether the transaction is local or remote.
 * <p>For more details on these options, see the  CICS
 * Intercommunication Guide.
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The task does not have a signed-on user.
 * <DT>2<DD> No BMS command has yet been issued, BMS
 * routing is in effect, or no map has yet been
 * positioned.
 * <DT>3<DD> No batch data interchange (BDI) command has
 * yet been issued.
 * <DT>4<DD> The task is not initiated by automatic transaction
 * initiation (ATI).
 * <DT>5<DD> The task is not associated with a terminal; or the
 * task has no principal facility; or the principal facility
 * is not an MRO, LU6.1, or APPC session.
 * <DT>6<DD> A CICS BTS request is issued from outside the
 * CICS BTS environment. (Therefore, it is not
 * executing on behalf of a BTS activity.)
 * <DT>200<DD> Command syntax options are not allowed in a
 * server program invoked by a distributed program
 * link.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * An example of RETURNPROG:
 * <pre>
 * Program A links to program B
 * Program B links to program C
 * Program C transfers control to program D
 * Program D issues an ASSIGN RETURNPROG command,
 *    and CICS returns the name of Program B.
 * </pre>
 * @param ABCODE(data-area)
 *               returns a 4-character current abend code. (Abend codes
 *               are documented in the  CICS Messages and Codes
 *               manual). If an abend has not occurred, the variable is
 *               set to blanks.
 * @param ABDUMP(data-area)
 *               returns a 1-byte value. X'FF' indicates that a dump has
 *               been produced and that ABCODE contains an abend
 *               code. X'00' indicates either that no dump has been
 *               produced, or that ABCODE contains blanks.
 * @param ABPROGRAM(data-area)
 *               returns an 8-character name of the failing program for
 *               the latest abend.
 *               <p>If the abend originally occurred in a DPL server program
 *               running in a remote system, ABPROGRAM returns the
 *               DPL server program name.
 *               <p>This field is set to binary zeros if it is not possible to
 *               determine the failing program at the time of the abend.
 * @param ACTIVITY(data-area)
 *               returns, if this program is executing on behalf of a CICS
 *               business transaction services (BTS) activity, the
 *               16-character name of the activity.
 *               <p>BTS is described in the  CICS Business Transaction
 *               Services manual.
 * @param ACTIVITYID(data-area)
 *               returns, if this program is executing on behalf of a BTS
 *               activity, the 52-character, CICS-assigned, identifier of the
 *               activity-instance.
 *               <p>BTS is described in the  CICS Business Transaction
 *               Services manual.
 * @param ALTSCRNHT(data-area)
 *               returns the alternate screen height defined for the
 *               terminal as a halfword binary variable. If the task is not
 *               initiated from a terminal, INVREQ occurs.
 * @param ALTSCRNWD(data-area)
 *               returns the alternate screen width defined for the
 *               terminal as a halfword binary variable. If the task is not
 *               initiated from a terminal, INVREQ occurs.
 * @param APLKYBD(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               keyboard has the APL keyboard feature. X'FF'
 *               indicates "yes". X'00' indicates "no". If the task is not
 *               initiated from a terminal, INVREQ occurs.
 * @param APLTEXT(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               keyboard has the APL text feature. X'FF' indicates
 *               "yes". X'00' indicates "no". If the task is not initiated
 *               from a terminal, INVREQ occurs.
 * @param APPLID(data-area)
 *               returns an 8-character applid of the CICS system owning
 *               the transaction.
 *               <p>If your system is using XRF (that is, XRF=YES has been
 *               specified in the system initialization parameters), the
 *               value returned is the  generic applid (that is, the applid
 *               that identifies the active and alternate CICS systems).
 *               An application program is unaffected by a takeover from
 *               the active to the alternate.
 * @param ASRAINTRPT(data-area)
 *               returns an 8-character program status word (PSW)
 *               containing interrupt information at the point when the
 *               latest abend with a code of ASRA, ASRB, ASRD, or
 *               AICA occurred.
 *               <p>The field contains binary zeros if no ASRA, ASRB,
 *               ASRD, or AICA abend occurred during the execution of
 *               the issuing transaction, or if the abend originally
 *               occurred in a remote DPL server program.
 * @param ASRAKEY(cvda)
 *               returns the execution key at the time of the last ASRA,
 *               ASRB, AICA, or AEYD, abend, if any. CVDA values are:
 *               <DL>
 *               <DT>CICSEXECKEY<DD>
 *               is returned if the task was executing in CICS-key
 *               at the time of the last ASRA, ASRB, AICA, or
 *               AEYD abend. Note that all programs execute in
 *               CICS key if CICS subsystem storage protection is
 *               not active.
 *               <DT>USEREXECKEY<DD>
 *               is returned if the task was executing in user-key at
 *               the time of the last ASRA, ASRB, AICA, or AEYD
 *               abend.
 *               <DT>NONCICS<DD>
 *               is returned if the execution key at the time of the
 *               last abend was not one of the CICS keys; that is,
 *               not key 8 or key 9.
 *
 *               <DT>NOTAPPLIC<DD>
 *               is returned if there has not been an ASRA, ASRB,
 *               AICA, or AEYD abend.
 *               </DL>
 * @param ASRAPSW(data-area)
 *               returns an 8-character program status word (PSW) at
 *               the point when the latest abend with a code of ASRA,
 *               ASRB, ASRD, or AICA occurred.
 *               <p>The field contains binary zeros if no ASRA, ASRB,
 *               ASRD, or AICA abend occurred during the execution of
 *               the issuing transaction, or if the abend originally
 *               occurred in a remote DPL server program.
 * @param ASRAREGS(data-area)
 *               returns the contents of general registers 0-15 at the
 *               point when the latest ASRA, ASRB, ASRD, or AICA
 *               abend occurred.
 *               <p>The contents of the registers are returned in the data
 *               area (64 bytes long) in the order 0, 1, ..., 14, 15.
 *               <p>Note that the data area is set to binary zeros if no
 *               ASRA, ASRB, ASRD, or AICA abend occurred during
 *               the execution of the issuing transaction or the abend
 *               originally occurred in a remote DPL server program.
 * @param ASRASPC(cvda)
 *               returns the type of space in control at the time of the last
 *               ASRA, ASRB, AICA, or AEYD, abend, if any. The CVDA
 *               values on the ASRASPC option are:
 *               <DL>
 *               <DT>SUBSPACE<DD>
 *               is returned if the task was executing in either its
 *               own subspace or the common subspace at the
 *               time of the last ASRA, ASRB, AICA, or AEYD
 *               abend.
 *               <DT>BASESPACE<DD>
 *               is returned if the task was executing in the base
 *               space at the time of the last ASRA, ASRB, AICA,
 *               or AEYD abend. Note that all tasks execute in
 *               base space if transaction isolation is not active.
 *               <DT>NOTAPPLIC<DD>
 *               is returned if there has not been an ASRA, ASRB,
 *               AICA, or AEYD abend.
 *               </DL>
 * @param ASRASTG(cvda)
 *               returns the type of storage being addressed at the time
 *               of the last ASRA or AEYD, abend, if any. The CVDA
 *               values are:
 *               <DL>
 *               <DT>CICS<DD>
 *               is returned if the storage being addressed is
 *               CICS-key storage. This can be in one of the CICS
 *               dynamic storage areas (CDSA or ECDSA), or, in
 *               one of the read-only dynamic storage areas
 *               (RDSA or ERDSA) when CICS is running with the
 *               NOPROTECT option on the RENTPGM system
 *               initialization parameter or when storage protection
 *               is not active.
 *               <DT>USER<DD>
 *               is returned if the storage being addressed is
 *               user-key storage in one of the user dynamic
 *               storage areas (UDSA or EUDSA).
 *               <DT>READONLY<DD>
 *               is returned if the storage being addressed is
 *               read-only storage in one of the read-only dynamic
 *               storage areas (RDSA or ERDSA) when CICS is
 *               running with the PROTECT option on the
 *               RENTPGM system initialization parameter.
 *               <DT>NOTAPPLIC<DD>
 *               is returned if:
 *               <UL>
 *               <LI>There is no ASRA or AEYD abend found for
 *               this task.
 *               <LI>The affected storage in an abend is not
 *               managed by CICS.
 *               <LI>The ASRA abend is not caused by an 0C4
 *               abend.
 *               <LI>An ASRB or AICA abend has occurred since
 *               the last ASRA or AEYD abend.
 *               </UL>
 *               </DL>
 * @param BRIDGE(data-area)
 *               returns the 4-character TRANSID of the bridge monitor
 *               transaction that issued a START BREXIT TRANSID
 *               command to start the user transaction that issued this
 *               command. Blanks are returned if:
 *               <UL>
 *               <LI>The user transaction was not started by a bridge
 *               monitor transaction.
 *               <LI>This command was issued by a program started by
 *               a distributed program link (DPL) request.
 *               </ul>
 *               <p>Note:  If the START BREXIT command was issued from
 *               a bridge exit, the TRANSID returned is the that
 *               of the bridge monitor that issued a START
 *               BREXIT naming the bridge exit.
 * @param BTRANS(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the background transparency
 *               capability (X'FF') or not (X'00'). If the task is not
 *               initiated from a terminal, INVREQ occurs.
 * @param CMDSEC(data-area)
 *               returns a 1-byte indicator showing whether command
 *               security checking has been defined for the current task.
 *               (X for "yes", blank for "no".)
 * @param COLOR(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the extended color capability
 *               (X'FF') or not (X'00'). If the task is not initiated from a
 *               terminal, INVREQ occurs.
 * @param CWALENG(data-area)
 *               returns a halfword binary field indicating the length of the
 *               CWA. If no CWA exists, a zero length is returned.
 * @param DEFSCRNHT(data-area)
 *               returns a halfword binary variable that contains the
 *               default screen height defined for the terminal. If the task
 *               is not initiated from a terminal, INVREQ occurs.
 * @param DEFSCRNWD(data-area)
 *               returns a halfword binary variable that contains the
 *               default screen width defined for the terminal. If the task
 *               is not initiated from a terminal, INVREQ occurs.
 * @param DELIMITER(data-area)
 *               returns a 1-byte data-link control character for a 3600.
 *               This can be:
 *               <DL compact>
 *               <DT><b>X'80'</b><DD> Input ended with end-of-text (ETX).
 *               <DT><b>X'40'</b><DD> Input ended with end-of-block (ETB).
 *               <DT><b>X'20'</b><DD> Input ended with inter-record separator (IRS).
 *               <DT><b>X'10'</b><DD> Input ended with start of header (SOH).
 *               <DT><b>X'08'</b><DD>  Transparent input.
 *               </DL>
 *               <p>If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param DESTCOUNT(data-area)
 *               <p>returns a halfword binary field. This option has two uses:
 *               <OL>
 *               <LI>Following a BMS ROUTE command, it shows that
 *               the value required is the number of different terminal
 *               types in the route list, and hence the number of
 *               overflow control areas that may be required.
 *               <LI>Within BMS overflow processing, it shows that the
 *               value required is the relative overflow control
 *               number of the destination that has encountered
 *               overflow. If this option is specified when overflow
 *               processing is not in effect, the value obtained is
 *               meaningless. If no BMS commands have been
 *               issued, INVREQ occurs.
 *               </OL>
 * @param DESTID(data-area)
 *               returns an 8-byte identifier of the outboard destination,
 *               padded with blanks on the right to eight characters. If
 *               this option is specified before a batch data interchange
 *               command has been issued in the task, INVREQ occurs.
 * @param DESTIDLENG(data-area)
 *               returns a halfword binary length of the destination
 *               identifier obtained by DESTID. If this option is specified
 *               before a batch data interchange command has been
 *               issued in the task, INVREQ occurs.
 * @param DSSCS(data-area)
 *               returns a 1-byte indicator showing whether the principal
 *               facility is a basic SCS data stream device. (X'FF' for
 *               "yes", or X'00' for "no".)
 *               <p>If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param DS3270(data-area)
 *               returns a 1-byte indicator showing whether the principal
 *               facility is a 3270 data stream device. (X'FF' for "yes", or
 *               X'00' for "no".)
 *               <p>If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param EWASUPP(data-area)
 *               returns a 1-byte indicator showing whether Erase Write
 *               Alternative is supported. (X'FF' for "yes", X'00' for
 *               "no".)
 *               <p>If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param EXTDS(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               accepts the 3270 extended data stream, (X'FF') or not
 *               (X'00'). Extended data stream capability is required for
 *               a terminal that supports the query feature, color,
 *               extended highlighting, programmed symbols or
 *               validation. A terminal that accepts the query structured
 *               field command also has this indicator set. If extended
 *               data stream is on, the device supports the write
 *               structured field COMMAND and Outbound Query
 *               Structured field.
 *               <p>(For guidance information about query structured fields,
 *               see the  CICS 3270 Data Stream Device Guide.)
 *               <p>If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param FACILITY(data-area)
 *               returns a 4-byte identifier of the principal facility that
 *               initiated the transaction issuing this command. If this
 *               option is specified, and there is no allocated facility,
 *               INVREQ occurs.
 *               <p><B>Note</B>:  You can use the QNAME option
 *               to get the name of the transient data
 *               intrapartition queue if the transaction was
 *               initiated by expiry of a transient data trigger level.
 * @param FCI(data-area)
 *               returns a 1-byte facility control indicator, see "ASSIGN
 *               FCI". This indicates the type of facility
 *               associated with the transaction; for example, X'01'
 *               indicates a terminal or logical unit. The obtained value is
 *               always returned.
 * @param GCHARS(data-area)
 *               returns a halfword binary graphic character set global
 *               identifier (the GCSGID). The value is a number in the
 *               range 1 through 65 534 representing the set of graphic
 *               characters that can be input or output at the terminal. If
 *               the task is not initiated from a terminal, INVREQ occurs.
 * @param GCODES(data-area)
 *               returns a halfword binary code page global identifier (the
 *               CPGID). The value is a number in the range 1 through
 *               65 534 representing the EBCDIC or ASCII code page
 *               defining the code points for the characters that can be
 *               input or output at the terminal. If the task is not initiated
 *               from a terminal, INVREQ occurs.
 * @param GMMI(data-area)
 *               returns a 1-byte indicator showing whether a "good
 *               morning" message applies to the terminal associated
 *               with the running transaction. (X'FF' for "yes", or X'00'
 *               for "no".) If this option is specified and the current task is
 *               not associated with a terminal, the INVREQ condition
 *               occurs.
 * @param HILIGHT(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the extended highlight capability
 *               (X'FF') or not (X'00'). If the task is not initiated from a
 *               terminal, INVREQ occurs.
 * @param INITPARM(data-area)
 *               returns the 60-character data-area containing any
 *               initialization parameters specified for the program in the
 *               INITPARM system initialization parameter. If there are
 *               no parameters for the program, the area is filled with
 *               binary zeros. (See the  CICS System Definition Guide for
 *               further information about the INITPARM parameter.)
 * @param INITPARMLEN(data-area)
 *               returns a halfword binary length of the INITPARM. If
 *               there is no parameter for it, INITPARMLEN contains
 *               binary zeros.
 * @param INPARTN(data-area)
 *               returns the 1- or 2-character name of the most recent
 *               input partition. If no map has yet been positioned, or if
 *               BMS routing is in effect, or if the task is not initiated from
 *               a terminal, INVREQ occurs.
 * @param INVOKINGPROG(data-area)
 *               returns the 8-character name of the application program
 *               that used the LINK or XCTL command to link or transfer
 *               control to the current program.
 *               <p>If you issue the ASSIGN INVOKINGPROG command in
 *               a remote program that was invoked by a distributed
 *               program link (DPL) command, CICS returns the name of
 *               the program that issued the DPL command.
 *               <p>If you issue the ASSIGN INVOKINGPROG command in
 *               an application program at the highest level, CICS returns
 *               eight blanks.
 *               <p>If you issue the ASSIGN INVOKINGPROG command in
 *               a user-replaceable program, a Bridge Exit program or a
 *               program list table program, CICS returns eight blanks.
 *               <p>If you issue the ASSIGN INVOKINGPROG command
 *               from a global user exit, task-related exit, or application
 *               program linked to from such an exit, CICS returns the
 *               name of the most recent invoking program that was not
 *               a global user exit or task-related user exit.
 * @param KATAKANA(data-area)
 *               returns a 1-byte indicator showing whether the principal
 *               facility supports Katakana (X'FF') or not (X'00'). If the
 *               task is not initiated from a terminal, INVREQ occurs.
 * @param LANGINUSE(data-area)
 *               returns a 3-byte mnemonic code showing the language
 *               in use. The 3-byte mnemonic has a 1:1 correspondence
 *               with the 1-byte NATLANGINUSE option. See
 *               Appendix I, "National language codes" for
 *               possible values of the code.
 * @param LDCMNEM(data-area)
 *               returns a 2-byte logical device code (LDC) mnemonic of
 *               the destination that has encountered overflow. If this
 *               option is specified when overflow processing is not in
 *               effect, the value obtained not significant. If no BMS
 *               commands have been issued, INVREQ occurs.
 * @param LDCNUM(data-area)
 *               returns a 1-byte LDC numeric value of the destination
 *               that has encountered overflow. This indicates the type of
 *               the LDC, such as printer or console. If this option is
 *               specified when overflow processing is not in effect, the
 *               value obtained is not significant.
 * @param MAPCOLUMN(data-area)
 *               returns a halfword binary number of the column on the
 *               display containing the origin of the most recently
 *               positioned map. If no map has yet been positioned, or if
 *               BMS routing is in effect, or if the task is not initiated from
 *               a terminal, INVREQ occurs.
 * @param MAPHEIGHT(data-area)
 *               returns a halfword binary height of the most recently
 *               positioned map. If no map has yet been positioned, or if
 *               BMS routing is in effect, or if the task is not initiated from
 *               a terminal, INVREQ occurs.
 * @param MAPLINE(data-area)
 *               returns a halfword binary number of the line on the
 *               display containing the origin of the most recently
 *               positioned map. If no map has yet been positioned, or if
 *               BMS routing is in effect, or if the task is not initiated from
 *               a terminal, INVREQ occurs.
 * @param MAPWIDTH(data-area)
 *               returns a halfword binary width of the most recently
 *               positioned map. If no map has yet been positioned, or if
 *               BMS routing is in effect, or if the task is not initiated from
 *               a terminal, INVREQ occurs.
 * @param MSRCONTROL(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               supports magnetic slot reader (MSR) control (X'FF') or
 *               not (X'00'). If the task is not initiated from a terminal,
 *               INVREQ occurs.
 * @param NATLANGINUSE(data-area)
 *               returns a 1-byte mnemonic code showing the national
 *               language in use. See Appendix I, "National language
 *               codes" for possible values of the code.
 *               (NATLANGINUSE does not show the system default
 *               language as specified on the NATLANG system
 *               initialization parameter.)
 * @param NETNAME(data-area)
 *               returns the 8-character name of the logical unit in the
 *               VTAM(R) network. If the task is not initiated from a
 *               terminal, INVREQ occurs. If the principal facility is not a
 *               local terminal, CICS no longer returns a null string but
 *               the netname of the remote terminal.
 *
 *               If this command was issued by a user transaction which
 *               was started by a Bridge Transaction, the value returned
 *               is the termid of the Bridge Facility.
 * @param NEXTTRANSID(data-area)
 *               returns the 4-character next transaction identifier as set
 *               by SET NEXTTRANSID or RETURN TRANSID. It
 *               returns blanks if there are no more transactions.
 * @param NUMTAB(data-area)
 *               returns a 1-byte number of the tabs required to position
 *               the print element in the correct passbook area of the
 *               2980. If the task is not initiated from a terminal, INVREQ
 *               occurs.
 * @param OPCLASS(data-area)
 *               returns, in a 24-bit string, the operator class used by
 *               BMS for routing terminal messages, as defined in the
 *               CICS segment of the External Security Manager.
 * @param OPERKEYS(data-area)
 *               is accepted for compatibility with previous releases. If
 *               specified, a 64-bit null string is returned.
 *               OPID( data-area)
 *               returns the 3-character operator identification. This is
 *               used by BMS for routing terminal messages, as defined
 *               in the CICS segment of the External Security Manager.
 *               If the task is initiated from a remote terminal, the OPID
 *               returned by this command is not necessarily that
 *               associated with the user that is signed on at the remote
 *               terminal. If you wish to know the OPID of the signed on
 *               user, you should use the the INQUIRE TERMINAL
 *               system programming command, which is described in
 *               the  CICS System Programming Reference manual.
 *               The OPID may also be different from that of the user
 *               currently signed on, if it has been changed with the SET
 *               TERMINAL command.
 * @param OPSECURITY(data-area)
 *               is accepted for compatibility with previous releases. If
 *               specified, a 24-bit null string is returned.
 * @param ORGABCODE(data-area)
 *               returns as a 4-byte original abend code in cases of
 *               repeated abends.
 * @param OUTLINE(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the field outlining capability (X'FF')
 *               or not (X'00'). If the task is not initiated from a
 *               terminal, INVREQ occurs.
 * @param PAGENUM(data-area)
 *               returns a halfword binary current page number for the
 *               destination that has encountered an overflow. If this
 *               option is specified when overflow processing is not in
 *               effect, the value obtained is meaningless. If no BMS
 *               commands have been issued, INVREQ occurs.
 * @param PARTNPAGE(data-area)
 *               returns a 2-byte name of the partition that most recently
 *               caused page overflow. If no BMS commands have been
 *               issued, INVREQ occurs.
 * @param PARTNS(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               supports partitions (X'FF') or not (X'00'). If the task is
 *               not initiated from a terminal, INVREQ occurs.
 * @param PARTNSET(data-area)
 *               returns the name (1-6 characters) of the application
 *               partition set. A blank value is returned if there is no
 *               application partition set. If the task is not initiated from a
 *               terminal, INVREQ occurs.
 * @param PRINSYSID(data-area)
 *               returns the 4-character name by which the other system
 *               is known in the local system; that is, the CONNECTION
 *               definition that defines the other system. For a
 *               single-session APPC device defined by a terminal
 *               definition, the returned value is the terminal identifier.
 *               <p>This only applies when the principal facility is one of the
 *               following:
 *               <UL>
 *               <LI>An MRO session to another CICS system
 *               <LI>An LU6.1 session to another CICS or IMS(TM) system
 *               <LI>An APPC session to another CICS system, or to
 *               another APPC system or device
 *               </UL>
 *               <p>If the principal facility is not an MRO, LU6.1, or APPC
 *               session, or if the task has no principal facility, INVREQ
 *               occurs.
 *               <p><B>Note:</B>  Special considerations apply generally when
 *               transaction routing. In particular an ASSIGN
 *               PRINSYSID command cannot be used in a
 *               routed transaction to find the name of the
 *               terminal-owning region. (See the  CICS
 *               Intercommunication Guide for more information
 * @param PROCESS(data-area)
 *               returns, if this program is executing on behalf of a CICS
 *               business transaction services (BTS) activity, the
 *               36-character name of the BTS process that contains the
 *               activity.
 *               <p>BTS is described in the  CICS Business Transaction
 *               Services manual.
 * @param PROCESSTYPE(data-area)
 *               returns, if this program is executing on behalf of a BTS
 *               activity, the 8-character process-type of the BTS process
 *               that contains the activity.
 *               <p>BTS is described in the  CICS Business Transaction
 *               Services manual.
 * @param PROGRAM(data-area)
 *               returns an 8-character name of the currently running
 *               program.
 * @param PS(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the programmed symbols capability
 *               (X'FF') or not (X'00'). If the task is not initiated from a
 *               terminal, INVREQ occurs.
 * @param QNAME(data-area)
 *               returns a 4-character name of the transient data
 *               intrapartition queue that caused this task to be initiated
 *               by reaching its trigger level. If the task is not initiated by
 *               automatic transaction initiation (ATI), INVREQ occurs.
 * @param RESSEC(data-area)
 *               returns a 1-byte indicator showing whether resource
 *               security checking has been defined for the transaction
 *               running. (X for "yes", blank for "no".)
 * @param RESTART(data-area)
 *               returns a 1-byte indicator showing whether a restart of
 *               the task (X'FF'), or a normal start of the task (X'00'),
 *               has occurred.
 * @param RETURNPROG(data-area)
 *               returns the 8-character name of the program to which
 *               control is to be returned when the current program has
 *               finished executing. The values returned depend on how
 *               the current program was given control, as follows:
 *               <UL>
 *               <LI>If the current program was invoked by a LINK
 *               command, including a distributed program link,
 *               RETURNPROG returns the same name as
 *               INVOKINGPROG.
 *               <LI>If the current program was invoked by an XCTL
 *               command, RETURNPROG returns the name of the
 *               application program in the chain that last issued a
 *               LINK command.
 *               <p>If the program that invoked the current program with
 *               an XCTL command is at the highest level, CICS
 *               returns eight blanks.
 *               <LI>If the ASSIGN RETURNPROG command is issued
 *               in the program at the top level, CICS returns eight
 *               blanks.
 *               <LI>If the ASSIGN RETURNPROG command is issued
 *               in a user-replaceable module, or a program list table
 *               program, CICS returns eight blanks.
 *               <LI>If the ASSIGN RETURNPROG is issued in a global
 *               user exit, task-related exit, or application program
 *               linked to from such an exit, CICS returns the name
 *               of the program that control is returned to when all
 *               intermediate global user exit and task-related user
 *               exit programs have completed.
 *               </UL>
 * @param SCRNHT(data-area)
 *               returns a halfword binary variable that contains the
 *               height of the 3270 screen defined for the current task. If
 *               the task is not initiated from a terminal, INVREQ occurs.
 * @param SCRNWD(data-area)
 *               returns a halfword binary variable that contains the width
 *               of the 3270 screen defined for the current task. If the
 *               task is not initiated from a terminal, INVREQ occurs.
 * @param SIGDATA(data-area)
 *               returns a 4-byte character string containing the inbound
 *               signal data received from a logical unit. If the task is not
 *               initiated from a terminal, INVREQ occurs.
 * @param SOSI(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the mixed EBCDIC/DBCS fields
 *               capability (X'FF') or not (X'00'). The DBCS subfields
 *               within an EBCDIC field are delimited by SO (shift-out)
 *               and SI (shift-in) characters. If the task is not initiated
 *               from a terminal, INVREQ occurs.
 * @param STARTCODE(data-area)
 *               returns a 2-byte indicator showing how the transaction
 *               issuing the request was started. It can have the following
 *               values:
 *               <DL compact>
 *               <DT><B>Code</B><DD><B>Transaction started by</B>
 *               <DT>D<DD> A distributed program link (DPL) request that did
 *               not specify the SYNCONRETURN option. The
 *               task cannot issue I/O requests against its
 *               principal facility, nor can it issue any syncpoint
 *               requests.
 *               <DT>DS<DD> A distributed program link (DPL) request, as in
 *               code D, that did specify the SYNCONRETURN
 *               option. The task can issue syncpoint requests.
 *               <DT>QD<DD> Transient data trigger level.
 *               <DT>S<DD> START command without data.
 *               <DT>SD<DD> START command with data.
 *               <DT>SZ<DD> FEPI START command.
 *               <DT>TD<DD> Terminal input or permanent transid.
 *               <DT>U<DD>  User-attached task.
 *               </DL>
 * @param STATIONID(data-area)
 *               returns a 1-byte station identifier of a 2980. If the task is
 *               not initiated from a terminal, INVREQ occurs.
 * @param SYSID(data-area)
 *               returns the 4-character name given to the local CICS
 *               system. This value may be specified in the SYSID option
 *               of a file control, interval control, temporary storage, or
 *               transient data command, in which case the resource to
 *               be accessed is assumed to be on the local system.
 * @param TASKPRIORITY(data-area)
 *               returns a halfword binary filed indicating the current
 *               priority of the issuing task (0-255). When the task is first
 *               attached, this is the sum of the user, terminal, and
 *               transaction priorities. This value can be changed during
 *               execution by a CHANGE TASK command.
 * @param TCTUALENG(data-area)
 *               returns a halfword binary length of the terminal control
 *               table user area (TCTUA). If no TCTUA exists, a zero
 *               length is returned.
 * @param TELLERID(data-area)
 *               returns a 1-byte teller identifier of a 2980. If the task is
 *               not initiated from a terminal, INVREQ occurs.
 * @param TERMCODE(data-area)
 *               returns a 2-byte code giving the type and model number
 *               of the terminal associated with the task.
 *               The first byte is a code identifying the terminal type,
 *               derived from the terminal resource definition. This is the
 *               DEVICE attribute (described in the  CICS Resource
 *               Definition Guide). The second byte is a single-character
 *               model number as specified in the TERMMODEL
 *               attribute.
 *               The meanings of the type codes are given in
 *               Appendix B, "Codes returned by ASSIGN".
 * @param TERMPRIORITY(data-area)
 *               returns a halfword binary terminal priority (0-255).
 * @param TEXTKYBD(data-area)
 *               returns a 1-byte indicator showing whether the principal
 *               facility supports TEXTKYBD. (X'FF' for "yes", or X'00'
 *               for "no".) If the task is not initiated from a terminal,
 *               INVREQ occurs.
 * @param TEXTPRINT(data-area)
 *               returns a 1-byte indicator showing whether the principal
 *               facility supports TEXTPRINT. (X'FF' for "yes", or X'00'
 *               for "no".) If the task is not initiated from a terminal,
 *               INVREQ occurs.
 * @param TRANPRIORITY(data-area)
 *               returns a halfword binary transaction priority (0-255).
 * @param TWALENG(data-area)
 *               returns a halfword binary length of the transaction work
 *               area (TWA). If no TWA exists, a zero length is returned.
 * @param UNATTEND(data-area)
 *               returns a 1-byte indicator showing whether the mode of
 *               operation of the terminal is unattended, that is to say no
 *               person is actually attending the terminal. These
 *               indicators are X'FF' for unattended and X'00' for
 *               attended. If the task is not initiated from a terminal,
 *               INVREQ occurs.
 * @param USERID(data-area)
 *               returns an 8-byte userid of the signed-on user. If no user
 *               is explicitly signed on, CICS returns the default userid.
 *               Special considerations apply if you are using an
 *               intercommunication environment. See the  CICS
 *               Intercommunication Guide for more information about
 *               the ASSIGN command for LUTYPE6.1, APPC, and
 *               MRO.
 * @param USERNAME(data-area)
 *               returns a 20-character name of the user obtained from
 *               the external security manager (ESM).
 * @param USERPRIORITY(data-area)
 *               returns a halfword binary operator priority (0-255).
 * @param VALIDATION(data-area)
 *               returns a 1-byte indicator showing whether the terminal
 *               is defined as having the validation capability (X'FF') or
 *               not (X'00'). Validation capability consists of the
 *               mandatory fill, mandatory enter, and trigger attributes. If
 *               the task is not initiated from a terminal, INVREQ occurs.
 */
function ASSIGN(ABCODE(data-area),ABDUMP(data-area),ABPROGRAM(data-area),
    ACTIVITY(data-area),ACTIVITYID(data-area),ALTSCRNHT(data-area),
    ALTSCRNWD(data-area),APLKYBD(data-area),APLTEXT(data-area),
    APPLID(data-area),ASRAINTRPT(data-area),ASRAKEY(cvda),
    ASRAPSW(data-area),ASRAREGS(data-area),ASRASPC(cvda),
    ASRASTG(cvda),BRIDGE(data-area),BTRANS(data-area),
    CMDSEC(data-area),COLOR(data-area),CWALENG(data-area),
    DEFSCRNHT(data-area),DEFSCRNWD(data-area),DELIMITER(data-area),
    DESTCOUNT(data-area),DESTID(data-area),DESTIDLENG(data-area),
    DSSCS(data-area),DS3270(data-area),EWASUPP(data-area),
    EXTDS(data-area),FACILITY(data-area),FCI(data-area),
    GCHARS(data-area),GCODES(data-area),GMMI(data-area),
    HILIGHT(data-area),INITPARM(data-area),INITPARMLEN(data-area),
    INPARTN(data-area),INVOKINGPROG(data-area),KATAKANA(data-area),
    LANGINUSE(data-area),LDCMNEM(data-area),LDCNUM(data-area),
    MAPCOLUMN(data-area),MAPHEIGHT(data-area),MAPLINE(data-area),
    MAPWIDTH(data-area),MSRCONTROL(data-area),NATLANGINUSE(data-area),
    NETNAME(data-area),NEXTTRANSID(data-area),NUMTAB(data-area),
    OPCLASS(data-area),OPERKEYS(data-area),OPSECURITY(data-area),
    ORGABCODE(data-area),OUTLINE(data-area),PAGENUM(data-area),
    PARTNPAGE(data-area),PARTNS(data-area),PARTNSET(data-area),
    PRINSYSID(data-area),PROCESS(data-area),PROCESSTYPE(data-area),
    PROGRAM(data-area),PS(data-area),QNAME(data-area),
    RESSEC(data-area),RESTART(data-area),RETURNPROG(data-area),
    SCRNHT(data-area),SCRNWD(data-area),SIGDATA(data-area),
    SOSI(data-area),STARTCODE(data-area),STATIONID(data-area),
    SYSID(data-area),TASKPRIORITY(data-area),TCTUALENG(data-area),
    TELLERID(data-area),TERMCODE(data-area),TERMPRIORITY(data-area),
    TEXTKYBD(data-area),TEXTPRINT(data-area),TRANPRIORITY(data-area),
    TWALENG(data-area),UNATTEND(data-area),USERID(data-area),
    USERNAME(data-area),USERPRIORITY(data-area),VALIDATION(data-area)
    );

/**
 * Deediting (built-in function).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__BIF DEEDIT__FIELD(data-area)__________________________><           |
 * |                                   |_LENGTH(data-value)_|               |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <p>BIF DEEDIT provides the built-in function DEEDIT. It
 * specifies that alphabetic and special characters are removed
 * from an EBCDIC data field, and the remaining digits
 * right-aligned and padded to the left with zeros as necessary.
 * If the field ends with a minus sign or a carriage-return (CR),
 * a negative zone (X'D') is placed in the rightmost (low-order)
 * byte.
 * <p>If the zone portion of the rightmost byte contains one of the
 * characters X'A' through X'F', and the numeric portion
 * contains one of the hexadecimal digits X'0' through X'9',
 * the rightmost byte is returned unaltered (see the example).
 * <p>This permits the application program to operate on a zoned
 * numeric field. The returned value is in the field that initially
 * contained the unedited data.
 * <p>Note that a 1-byte field is returned unaltered, no matter what
 * the field contains.
 * @conditions
 * <DL>
 * <DT>LENGERR<DD>
 * occurs if the LENGTH value is less than 1.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * <pre>
 * EXEC CICS BIF DEEDIT
 *   FIELD(CONTG)
 *   LENGTH(9)
 * </pre>
 * <p>This removes all characters other than digits from CONTG, a
 * 9-byte field, and returns the edited result in that field to the
 * application program. Two examples of the contents of
 * CONTG before and after execution of the command are:
 * <pre>
 * <B>Original value    Returned value</B>
 * 14-6704/B         00146704B
 * $25.68            000002568
 * </pre>
 * Note that a decimal point is an EBCDIC special character
 * and as such is removed.
 * @param FIELD(data-area)
 *               specifies the field to be edited.
 * @param LENGTH(data-value)
 *               specifies the field length in bytes.
 */
function "BIF DEEDIT"(FIELD(data-area),LENGTH(data-value));

/**
 * BUILD ATTACH (LUTYPE6.1)
 * <P>Specify values for an LUTYPE6.1 attach header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__BUILD ATTACH__ATTACHID(name)_____________________________________> |
 * |                                   |_PROCESS(name)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RESOURCE(name)_|  |_RPROCESS(name)_|  |_RRESOURCE(name)_|         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_QUEUE(name)_|  |_IUTYPE(data-value)_|                             |
 * |                                                                        |
 * | >__________________________________________________><                  |
 * |    |_DATASTR(data-value)_|  |_RECFM(data-value)_|                      |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <p>BUILD ATTACH (LUTYPE6.1) specifies a set of values to be
 * placed in the named attach header control block. This control
 * block contains values that are to be sent in an LUTYPE6.1
 * attach FMH (Function Management Header) that is
 * constructed by CICS, and is sent only when a SEND
 * ATTACHID or CONVERSE ATTACHID command is
 * executed. The specified values override existing values in the
 * control block; unspecified values are set to default values.
 * <P>For more information about MRO and IRC, see the CICS
 * Intercommunication Guide.
 *
 * @param ATTACHID(name)
 *               specifies that the set of values is to be placed in an
 *               attach header control block identified by the specified
 *               name (1-8 characters).
 * @param DATASTR(data-value)
 * corresponds to the data stream profile field, ATTDSP, in
 * an LUTYPE6.1 attach FMH.
 * <P>For communication between two CICS systems, no
 * particular significance is attached by CICS to the data
 * stream profile field in an attach FMH. For most CICS
 * applications, the option can be omitted.
 * <P>The "data-value" is a binary halfword. Only the low-order
 * byte is used. The SNA-defined meanings of the bits are
 * as follows:
 * <pre>
 * 0-7      reserved - must be set to zero
 * 8-11     0000 - user-defined
 *          1111 - SCS data stream
 *          1110 - 3270 data stream
 *          1101 - structured field
 *          1100 - logical record management
 * 12-15    defined by the user if bits 8-11
 *          are set to 0000; otherwise reserved
 *          (must be set to zero)
 * </pre>
 * <p>A value of "structured field" indicates that chains begin
 * with four bytes of data that are used to interpret the
 * following data; overall length (2 bytes), class identifier (1
 * byte), and subclass identifier (1 byte). A value of "logical
 * record management" indicates that chains can be split
 * into separate fields by the data receiver.
 * <P>If the option is omitted, a value of "user-defined" is
 * assumed.
 * @param IUTYPE(data-value)
 * corresponds to the interchange unit field, ATTIU, in an
 * LUTYPE6.1 attach FMH.
 * <p>The "data-value" is a halfword binary. Only the low-order
 * 7 bits are used. The SNA-defined meanings of the bits
 * are as follows:
 * <pre>
 * 0-10     reserved - must be set to zero
 * 11       0 - not end of multichain interchange unit
 *          1 - end of multichain interchange unit
 * 12,13    reserved - must be set to zero
 * 14,15    00 - multichain interchange unit
 *          01 - single chain interchange unit
 *          10 - reserved
 *          11 - reserved
 * </pre>
 * <p>If the option is omitted, values of "not end of multichain
 * interchange unit" and "multichain interchange unit" are
 * assumed.
 * @param PROCESS(name)
 *               corresponds to the process name, ATTDPN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, a
 *               transaction running in one system can acquire a session
 *               to the second system and can identify the transaction to
 *               be attached; in the second system the identification is
 *               carried in the first chain of data sent across the session.
 *               In general, the first four bytes of data identify the
 *               transaction to be attached. However an attach FMH,
 *               identifying the transaction to be attached, can be built
 *               and sent; the PROCESS option is used to specify the
 *               transaction name. (Note that the receiving CICS system
 */
function "BUILD ATTACH <LUTYPE6.1>"(ATTACHID(name),DATASTR(data-value),IUTYPE(data-value),PROCESS(name));

/**
 * Specify values for an MRO attach header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__BUILD ATTACH__ATTACHID(name)_____________________________________> |
 * |                                   |_PROCESS(name)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RESOURCE(name)_|  |_RPROCESS(name)_|  |_RRESOURCE(name)_|         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_QUEUE(name)_|  |_IUTYPE(data-value)_|                             |
 * |                                                                        |
 * | >__________________________________________________><                  |
 * |    |_DATASTR(data-value)_|  |_RECFM(data-value)_|                      |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>BUILD ATTACH (MRO) specifies a set of values to be
 * placed in the named attach header control block. This control
 * block contains values that are to be sent in an MRO attach
 * FMH (Function Management Header) that is constructed by
 * CICS, and is sent only when a SEND ATTACHID or
 * CONVERSE ATTACHID command is executed. The
 * specified values override existing values in the control block;
 * unspecified values are set to default values.
 * <p>For more information about MRO and IRC, see the  CICS
 * Intercommunication Guide.
 *
 * @param ATTACHID(name)
 *               specifies that the set of values is to be placed in an
 *               attach header control block identified by the specified
 *               name (1-8 characters).
 * @param DATASTR(data-value)
 * corresponds to the data stream profile field, ATTDSP, in
 * an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the data
 * stream profile field in an attach FMH. For most CICS
 * applications, the option can be omitted.
 * <p>The "data-value" is a binary halfword. Only the low-order
 * byte is used. The SNA-defined meanings of the bits are
 * as follows:
 * <pre>
 * 0-7    reserved - must be set to zero
 * 8-11   0000 - user-defined
 *        1111 - SCS data stream
 *        1110 - 3270 data stream
 *        1101 - structured field
 *        1100 - logical record management
 * 12-15  defined by the user if bits 8-11
 *        are set to 0000; otherwise reserved
 *        (must be set to zero)
 * </pre>
 * <p>A value of "structured field" indicates that chains begin
 * with four bytes of data that are used to interpret the
 * following data; overall length (2 bytes), class identifier (1
 * byte), and subclass identifier (1 byte). A value of "logical
 * record management" indicates that chains can be split
 * into separate fields by the data receiver.
 * <p>If the option is omitted, a value of "user-defined" is
 * assumed.
 * @param IUTYPE(data-value)
 * corresponds to the interchange unit field, ATTIU, in an
 * LUTYPE6.1 attach FMH.
 * <p>The "data-value" is a halfword binary. Only the low-order
 * 7 bits are used. The SNA-defined meanings of the bits
 * are as follows:
 * <pre>
 * 0-10    reserved - must be set to zero
 * 11      0 - not end of multichain interchange unit
 *         1 - end of multichain interchange unit
 * 12,13   reserved - must be set to zero
 * 14,15   00 - multichain interchange unit
 *         01 - single chain interchange unit
 *         10 - reserved
 *         11 - reserved
 * </pre>
 * <p>If the option is omitted, values of "not end of multichain
 * interchange unit" and "multichain interchange unit" are
 * assumed.
 * @param PROCESS(name)
 *               corresponds to the process name, ATTDPN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, a
 *               transaction running in one system can acquire a session
 *               to the second system and can identify the transaction to
 *               be attached; in the second system the identification is
 *               carried in the first chain of data sent across the session.
 *               In general, the first four bytes of data identify the
 *               transaction to be attached. However an attach FMH,
 *               identifying the transaction to be attached, can be built
 *               and sent; the PROCESS option is used to specify the
 *               transaction name. (Note that the receiving CICS system
 *               uses just the first four bytes of the process name as a
 *               transaction name.)
 *               <p>No significance is attached by CICS to process names in
 *               attach FMHs sent in chains of data other than the first.
 *               For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the process name field in
 *               an attach FMH.
 * @param QUEUE(name)
 *               corresponds to the queue name, ATTDQN, in an attach
 *               FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the queue name in
 *               an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the queue name field in an
 *               attach FMH.
 * @param RECFM(data-value)
 * corresponds to the deblocking algorithm field, ATTDBA,
 * in an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the
 * deblocking algorithm field in an attach FMH. For most
 * CICS applications, the option can be omitted.
 * The "data-value" is a halfword binary value. Only the
 * low-order 8 bits are used. The SNA-defined meanings of
 * the bits are as follows:
 * <pre>
 * 0-7    reserved - must be set to zero
 * 8-15   X'00' - reserved
 *        X'01' - variable-length
 *                variable-blocked
 *        X'02' - reserved
 *        X'03' - reserved
 *        X'04' - chain of RUs
 *        X'05' to X'FF' - reserved
 * </pre>
 * <p>If the option is omitted, a value of "chain of RUs" is
 * assumed.
 * @param RESOURCE(name)
 *               corresponds to the resource-name, ATTPRN, in an
 *               LUTYPE6.1 attach FMH.
 * @param RPROCESS(name)
 *               corresponds to the return-process name, ATTRDPN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return-process
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return-process name
 *               field in an attach FMH.
 * @param RRESOURCE(name)
 *               corresponds to the return-resource name, ATTRPRN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return-resource
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return-resource name
 *               field in an attach FMH.
 */
function "BUILD ATTACH <MRO>"(
   ATTACHID(name),
   DATASTR(data-value),
   IUTYPE(data-value),
   PROCESS(name),
   QUEUE(name),
   RECFM(data-value),
   RESOURCE(name),
   RPROCESS(name),
   RRESOURCE(name),
   );
/**
 * Cancel interval control requests.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CANCEL___________________________________________________________> |
 * |                                                                        |
 * | >_____________________________________________________________><       |
 * |    |_REQID(name)___________________________________________|           |
 * |                   |_SYSID(systemname)_|  |_TRANSID(name)_|             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ISCINVREQ, NOTAUTH, NOTFND, SYSIDERR                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Note for dynamic transaction routing</b>
 * <p>Using CANCEL with REQID (of a POST, DELAY, or START) could create inter-transaction affinities that adversely affect
 * the use of dynamic transaction routing. See the  CICS Application Programming Guide for more information about
 * transaction affinities.
 * <p><b>Description</b>
 * <p>CANCEL cancels a previously issued DELAY, POST, or
 * START command. If you include the SYSID option, the
 * command is shipped to a remote system. If you omit SYSID,
 * the TRANSID option, if present, indicates where the
 * command is to be executed. The effect of the cancelation
 * varies depending on the type of command being canceled,
 * as follows:
 * <UL>
 * <LI>A DELAY command can be canceled only before it has
 * expired, and only by a task other than the task that
 * issued the DELAY command (which is suspended for
 * the duration of the request). The REQID used by the
 * suspended task must be specified. The effect of the
 * cancelation is the same as an early expiration of the
 * original DELAY. That is, the suspended task becomes
 * dispatchable as though the original expiration time had
 * been reached.
 * <LI>When a POST command issued by the same task is to
 * be canceled, no REQID need be specified. Cancelation
 * can be requested either before or after the original
 * request has expired. The effect of the cancelation is as if
 * the original request had never been made.
 * <LI>When a POST command issued by another task is to be
 * canceled, the REQID of that command must be
 * specified. The effect of the cancelation is the same as
 * an early expiration of the original POST request. That is,
 * the timer event control area for the other task is posted
 * as though the original expiration time had been reached.
 * <LI>When a START command is to be canceled, the REQID
 * associated with the original command must be specified.
 * The effect of the cancelation is as if the original
 * command had never been issued. The cancelation is
 * effective only before the original command has been
 * honored.
 * </UL>
 *
 * @condition
 * <DL>
 * <dt>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <dt>NOTAUTH<DD>
 * occurs when a resource security check has failed on the
 * specified TRANSID or on the TRANSID of the START
 * command that corresponds to the request identification.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * occurs if the request identifier specified fails to match an
 * unexpired interval control command.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs when the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION). It also
 * occurs when the link to the remote system is closed.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param REQID(name)
 *               specifies a name (1-8 characters), which should be
 *               unique, to identify a command. This name is used as a
 *               temporary storage identifier. The temporary storage
 *               queue thus identified must be defined as a local queue
 *               on the CICS system where the CANCEL command is
 *               processed.
 *               <p>This option cannot be used to cancel a POST command
 *               issued by the same task (for which, the REQID option is
 *               ignored if it is specified).
 * @param SYSID(systemname)
 *               (remote systems only) specifies the name (1-4
 *               characters) of the system for the CANCEL command.
 * @param TRANSID(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               transaction to be used to determine where the CANCEL
 *               command is to be executed, if SYSID is not specified. If
 *               the TRANSID is defined as REMOTE, the CANCEL
 *               request is function-shipped to the remote system.
 */
function CANCEL(REQID(name),SYSID(systemname),TRANSID(name));

/**
 * Change the password recorded by an external security manager (ESM) for a specified userid.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CHANGE PASSWORD(data-value)__NEWPASSWORD(data-value)_____________> |
 * |                                                                        |
 * | >__USERID(data-value)________________________________________________> |
 * |                        |_ESMREASON(data-area)_|                        |
 * |                                                                        |
 * | >__________________________><                                          |
 * |    |_ESMRESP(data-area)_|                                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTAUTH, USERIDERR                                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>Unlike the SIGNON command, CHANGE PASSWORD does
 * not depend upon the principal facility, so it can be issued
 * when the facility is an APPC session.
 * <p><b>Attention</b>: You should clear the password fields on the
 * EXEC CICS commands that have a password option as soon
 * as possible after use. This is to ensure that passwords are
 * not revealed in system or transaction dumps.
 *
 * <p>Options ESMRESP and ESMREASON return the response
 * and reason codes, if any, from the external security
 * manager.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>13<DD> There is an unknown return code in ESMRESP
 * from the external security manager.
 * <DT>18<DD> The CICS external security manager interface is
 * not initialized.
 * <DT>29<DD> The external security manager is not responding.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>2<DD> The supplied password is wrong. If the external
 * security manager is RACF, the revoke count
 * maintained by RACF is incremented.
 * <DT>4<DD> The new password is not acceptable.
 * <DT>19<DD> The USERID is revoked.
 * <DT>22<DD> The change password request failed during
 * SECLABEL processing.
 * <DT>31<DD> The user is revoked in the connection to the
 * default group.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>USERIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>8<DD> The USERID is not known to the external security
 * manager.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param EAMREASON(data-area)
 *               returns the reason code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               If the ESM is RACF, this field is the RACF reason code.
 * @param ESMRESP(data-area)
 *               returns the response code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               If the ESM is RACF, this field is the RACF return code.
 * @param NEWPASSWORD(data-value)
 *               specifies the new password, 8 characters, for the
 *               specified userid. The password is changed only if the
 *               current password is correctly specified.
 * @param PASSWORD(data-value)
 *               specifies the current password, 8 characters, for the
 *               specified userid.
 * @param USERID(data-value)
 *               specifies the userid, 8 characters, of the user whose
 *               password is being changed.
 */
function "CHANGE PASSWORD"(
   PASSWORD(data-value),
   EAMREASON(data-area),
   ESMRESP(data-area),
   NEWPASSWORD(data-value),
   USERID(data-value)
   );

/**
 * Change priority of a task.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CHANGE TASK____________________________><                          |
 * |                  |_PRIORITY(data-value)_|                              |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</B>
 * <p>CHANGE TASK changes the priority of the issuing task. It
 * has immediate effect (unlike SET TASK), because control is
 * relinquished during execution of the command so that the
 * current task has to be redispatched. The redispatch does not
 * happen until tasks that are of higher or equal priority, and
 * that are also ready to run, are dispatched.
 * <p>If you omit the PRIORITY option, the task does not lose
 * control and the priority remains the same. This is effectively
 * a no-op.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> Your PRIORITY value is outside the range -1-255.
 * </DL>
 * </DL>
 * @param PRIORITY(data-value)
 *               specifies a fullword binary value in the range 0-255,
 *               defining the priority of the task. You can also have a
 *               value of -1 but this does not change the priority or
 *               cause a redispatch.
 */
function "CHANGE TASK"(PRIORITY(data-value));

/**
 * Initiate APPC mapped conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONNECT PROCESS____CONVID(name)__________________________________> |
 * |                      |_SESSION(name)_|                                 |
 * |                                                                        |
 * | >____PROCNAME(data-area)_____________________________________________> |
 * |    |                      |_PROCLENGTH(data-value)_| |                 |
 * |    |_PARTNER(name)___________________________________|                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PIPLIST(data-area)____________________________|                   |
 * |                          |_PIPLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >__SYNCLEVEL(data-value)___________________><                          |
 * |                           |_STATE(cvda)_|                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC, PARTNERIDERR, TERMERR           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>CONNECT PROCESS allows an application to specify a
 * process name and synchronization level to be passed to
 * CICS and used when the remote partner is attached.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD>A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>A synchronization level other than 0, 1, or 2, has
 * been requested in the SYNCLEVEL option.
 * <LI>The command is not valid for the terminal or LU in
 * use.
 * <LI>The command has been used on a conversation
 * that is in use by CPI-Communications or that is an
 * APPC basic conversation. In the latter case, GDS
 * CONNECT PROCESS should have been used.
 * </UL>
 * <P>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>An out-of-range value is supplied in the
 * PROCLENGTH option.
 * <LI>The value specified in the PIPLENGTH option is
 * less than 0.
 * <LI>The value specified in the PIPLENGTH option
 * exceeds the CICS implementation limit of 32 763.
 * <LI>A PIPLIST length element (LL) has a value less
 * than 4.
 * <LI>The sum of the length elements (LLs) in the
 * PIPLIST does not equal the value specified by
 * PIPLENGTH.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value does not relate to
 * a conversation owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>PARTNERIDERR<DD>
 * occurs if the name specified in the PARTNER option is
 * not recognized by CICS.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE causes an ATCV
 * abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) can cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name specifies the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB.
 *               <p>For compatibility with earlier releases, SESSION is
 *               accepted as a synonym for CONVID. New programs
 *               should use CONVID.
 * @param PARTNER(name)
 *               specifies the name (8 characters) of a set of definitions
 *               that includes the name (or extended name) of a remote
 *               partner transaction (TPNAME or XTPNAME). You can
 *               use this option as an alternative to PROCNAME and
 *               PROCLENGTH.
 * @param PIPLENGTH(data-value)
 *               specifies the total length (halfword binary value) of the
 *               specified process initialization parameter (PIP) list.
 * @param PIPLIST(data-area)
 *               specifies the PIP data to be sent to the remote system.
 *               <p>The PIP list consists of variable-length records, each
 *               containing a single PIP. A PIP starts with a 2-byte
 *               inclusive length field (LL), followed by a 2-byte reserved
 *               field, and then the parameter data.
 * @param PROCLENGTH(data-value)
 *               specifies the length (as a halfword binary value in the
 *               range 1-64) of the name specified by the PROCNAME
 *               option.
 * @param PROCNAME(data-area)
 *               specifies the partner process (that is, the transaction) to
 *               be attached in the remote system.
 *               <p>One byte is sufficient to identify a CICS transaction. The
 *               APPC architecture allows a range of 1-64 bytes but
 *               leaves each product free to set its own maximum. CICS
 *               complies by allowing a range of 1-64 bytes. If the
 *               remote system is CICS, this option can specify the
 *               4-byte transaction identifier or the TPNAME value given
 *               in the relevant TRANSACTION definition. Alternatively,
 *               you can examine the full identifier by coding the user
 *               exit XZCATT.
 *               <p>No character checking is performed on the TPN by
 *               CICS.
 *               <p>For programming information about the user exit
 *               XZCATT, see the  CICS Customization Guide.
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 */
function "CONNECT PROCESS"(CONVID(name),PARTNER(name),PIPLENGTH(data-value),PIPLIST(data-area),PROCLENGTH(data-value),PROCNAME(data-area),SESSION(name),STATE(cvda));


/**
 * Communicate on standard CICS terminal support.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P></b>Description</b>
 * This form of the CONVERSE command is used by all CICS-supported VTAM terminals for which the other CONVERSE
 * descriptions are not appropriate.
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * </DL>
 * @param DEST(name)
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-value)
 *                   is a fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover in response to a
 *                   CONVERSE (default) command. If INTO is specified,
 *                   MAXLENGTH overrides the use of TOLENGTH as an
 *                   input to CICS. If SET is specified, MAXLENGTH
 *                   provides a way for the program to limit the amount of
 *                   data it receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the TOLENGTH
 *                   option is set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   TOLENGTH option is set to the length of data returned.
 *                   <p>If no argument is coded for MAXLENGTH, CICS defaults
 *                   to TOLENGTH.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param TOFLENGTH(data-value)
 * @param TOLENGTH(data-value)
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "CONVERSE <VTAM default>"(
   DEST(name),FROMFLENGTH(data-value),FROMLENGTH(data-value),
   INTO(data-area),MAXFLENGTH(data-value),MAXLENGTH(data-value),
   NOTRUNCATE,TOFLENGTH(data-value),TOLENGTH(data-value),
   SET(ptr-ref));

/**
 * CONVERSE sends, then receives, data on an APPC mapped conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE____________________FROM(data-area)______________________> |
 * |               |_CONVID(name)_|                                         |
 * |                                                                        |
 * | >____FROMLENGTH(data-value)_______INTO(data-area)____________________> |
 * |    |_FROMFLENGTH(data-value)_|  |_SET(ptr-ref)____|                    |
 * |                                                                        |
 * | >____TOLENGTH(data-area)_____________________________________________> |
 * |    |_TOFLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                |
 * |                              |_MAXFLENGTH(data-value)_|                |
 * |                                                                        |
 * | >___________________________________><                                 |
 * |    |_NOTRUNCATE_|  |_STATE(cvda)_|                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INVREQ, LENGERR, NOTALLOC, SIGNAL, TERMERR            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD>A distributed program link server application
 *    specified the function shipping session (its
 *    principal facility)
 *    </DL>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
      <UL>
 *    <LI>The command is used on a conversation that is in
 *    use by CPI Communications, or that is an APPC
 *    basic conversation. In the latter case, the application
 *    should have issued a GDS SEND INVITE followed
 *    by a GDS RECEIVE.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application, or does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CONVID(name)
 *                   identifies the conversation to which the command
 *                   relates. The 4-character name identifies either the token
 *                   returned by a previously executed ALLOCATE command
 *                   in EIBRSRCE in the EIB, or the token representing the
 *                   principal session (returned by a previously executed
 *                   ASSIGN command).
 *                   <p>For compatibility with earlier releases, SESSION is
 *                   accepted as a synonym for CONVID. New programs
 *                   should use CONVID.
 *                   <p>If the option is omitted, the principal facility for the task is
 *                   used by default.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STATE(cvda)
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <APPC>"(
   CONVID(name),FROM(data-area),FROMFLENGTH(data-value),
   FROMLENGTH(data-value),INTO(data-area),MAXFLENGTH(data-area),
   MAXLENGTH(data-area),NOTRUNCATE,SET(ptr-ref),
   STATE(cvda),TOFLENGTH(data-area),TOLENGTH(data-area)
   );

/**
 * Communicates on a 3270-display logical unit (LUTYPE2) or 3270-printer logical unit (LUTYPE3).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)_________________________________________________> |
 * |    |_SET(ptr-ref)____|                                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_ERASE________________|  |_CTLCHAR(data-value)_| |               |
 * |    |          |_DEFAULT___|                            |               |
 * |    |          |_ALTERNATE_|                            |               |
 * |    |_STRFIELD__________________________________________|               |
 * |                                                                        |
 * | >____TOLENGTH(data-area)_____________________________________________> |
 * |    |_TOFLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                |
 * |                              |_MAXFLENGTH(data-value)_|                |
 * |                                                                        |
 * | >_________________________________________><                           |
 * |    |_DEFRESP_|  |_NOTRUNCATE_|  |_ASIS_|                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, LENGERR, TERMERR                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><B>Note</B>:   If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 *                   This note applies to any command that is used to
 *                   receive katakana characters, not just to
 *                   CONVERSE commands.
 * @param CTLCHAR(data-area)
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   <p>The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE definition.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command must be used if the data area contains a read
 *                   partition structured field. (Structured fields are described
 *                   in the  CICS 3270 Data Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <LUTYPE2/LUTYPE3>"(
   ALTERNATE,
   ASIS,
   CTLCHAR(data-area),
   DEFAULT,
   DEFRESP,
   ERASE,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   STRFIELD,
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );
/**
 * Communicates on an LUTYPE4 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >_______________________________________________________><             |
 * |    |_MAXLENGTH(data-value)__|  |_FMH_|  |_NOTRUNCATE_|                 |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, IGREQCD, INBFMH, LENGERR, SIGNAL, TERMERR       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>IGREQCD<DD>
 *    occurs when an attempt is made to execute a
 *    CONVERSE command after a SIGNAL data-flow control
 *    command with a request change direction (RCD) code
 *    has been received from an LUTYPE4 logical unit.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-value)
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <LUTYPE4>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-value),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );
/**
 * communicates on an LUTYPE6.1 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE_________________________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)____FROMLENGTH(data-value)_____________|           |
 * |                       |_FROMFLENGTH(data-value)_|  |_FMH_|             |
 * |                                                                        |
 * | >___________________________________________INTO(data-area)__________> |
 * |    |_CONVID(name)__|  |_ATTACHID(name)_|  |_SET(ptr-ref)____|          |
 * |    |_SESSION(name)_|                                                   |
 * |                                                                        |
 * | >____TOLENGTH(data-area)_____________________________________________> |
 * |    |_TOFLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                |
 * |                              |_MAXFLENGTH(data-value)_|                |
 * |                                                                        |
 * | >_______________________________><                                     |
 * |    |_NOTRUNCATE_|  |_DEFRESP_|                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, EOC, INBFMH, LENGERR, NOTALLOC, SIGNAL, TERMERR   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>CBIDERR<DD>
 *    occurs if the requested attach header control block
 *    named in ATTACHID cannot be found.
 *    <p>Default action: terminate the task abnormally.
 *
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application, or does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ATTACHID(name)
 *                   specifies that an attach header (created by a BUILD
 *                   ATTACH command) is to precede, and be concatenated
 *                   with, the user data supplied in the FROM option.
 *                   "name" (1-8 characters) identifies the attach header
 *                   control block to be used in the local task.
 * @param CONVID(name)
 *                   identifies the conversation to which the command
 *                   relates. The 4-character name identifies either the token
 *                   returned by a previously executed ALLOCATE command
 *                   in EIBRSRCE in the EIB, or the token representing the
 *                   principal session (returned by a previously executed
 *                   ASSIGN command).
 *                   <p>For compatibility with earlier releases, SESSION is
 *                   accepted as a synonym for CONVID. New programs
 *                   should use CONVID.
 *                   <p>If the option is omitted, the principal facility for the task is
 *                   used by default.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If both this option and CONVID are
 *                   omitted, the principal facility for the task is used.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <LUTYPE6.1>"(
   ATTACHID(name),
   CONVID(name),
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SESSION(name),
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * Communicate on a 3270 SCS printer logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_DEFRESP_|  |_STRFIELD_|               |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >__________________><                                                  |
 * |    |_NOTRUNCATE_|                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, TERMERR                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3270 SNA character string (SCS) printer logical unit. The SCS printer logical unit accepts a
 * character string as defined by Systems Network Architecture (SNA). Some devices connected under SNA can send a signal
 * that can be detected by the HANDLE CONDITION SIGNAL command, which in turn can invoke an appropriate handling
 * routine. If necessary, a WAIT SIGNAL command can be used to make the application program wait for the signal. The PA keys
 * on a 3287 can be used in this way, or with a RECEIVE command.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command must be used if the data area contains a read
 *                   partition structured field. (Structured fields are described
 *                   in the  CICS 3270 Data Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <SCS>"(
   DEFRESP,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   STRFIELD,
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3270 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)_________________________________________________> |
 * |    |_SET(ptr-ref)____|                                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_ERASE________________|  |_CTLCHAR(data-value)_| |               |
 * |    |          |_DEFAULT___|                            |               |
 * |    |          |_ALTERNATE_|                            |               |
 * |    |_STRFIELD__________________________________________|               |
 * |                                                                        |
 * | >____TOLENGTH(data-area)_____________________________________________> |
 * |    |_TOFLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                |
 * |                              |_MAXFLENGTH(data-value)_|                |
 * |                                                                        |
 * | >_________________________________________><                           |
 * |    |_DEFRESP_|  |_NOTRUNCATE_|  |_ASIS_|                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD>A distributed program link server application
 *    specified the function shipping session (its
 *    principal facility)
 *    </DL>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
      <UL>
 *    <LI>The command is used on a conversation that is in
 *    use by CPI Communications, or that is an APPC
 *    basic conversation. In the latter case, the application
 *    should have issued a GDS SEND INVITE followed
 *    by a GDS RECEIVE.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><B>Note</B>:   If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 *                   This note applies to any command that is used to
 *                   receive katakana characters, not just to
 *                   CONVERSE commands.
 * @param CTLCHAR(data-area)
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   <p>The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE definition.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command must be used if the data area contains a read
 *                   partition structured field. (Structured fields are described
 *                   in the  CICS 3270 Data Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3270 logical>"(
   ALTERNATE,
   ASIS,
   CTLCHAR(data-area),
   DEFAULT,
   DEFRESP,
   ERASE,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   STRFIELD,
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );


/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_LDC(name)_|        |
 * |                                                   |_FMH_______|        |
 * |                                                                        |
 * | >___________________________________________________________><         |
 * |    |_DEFRESP_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|             |
 * |                 |_MAXFLENGTH(data-value)_|                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, LENGERR, SIGNAL, TERMERR                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3600 logical unit. This form of the CONVERSE command also applies to the 3630 plant
 * communication system.
 * <p>A logical device code (LDC) is a code that can be included in an outbound Function Management Header (FMH) to specify the
 * disposition of the data (for example, to which subsystem terminal it should be sent). Each code can be represented by a
 * unique LDC mnemonic.
 * <p>The installation can specify up to 256 2-character mnemonics for each TCTTE, and two or more TCTTEs can share a list of
 * these mnemonics. A numeric value (0 through 255) corresponds to each LDC mnemonic for each TCTTE.
 * <p>A 3600 device and a logical page size are also associated with an LDC. "LDC" or "LDC value" is used in this book to refer to
 * the code specified by the user; "LDC mnemonic" refers to the 2-character symbol that represents the LDC numeric value.
 *
 * <P>When the LDC option is specified in the CONVERSE command, the numeric value associated with the mnemonic for the
 * particular TCTTE is inserted in the FMH. This value is chosen by the installation, and is interpreted by the 3601 application
 * program.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LDC(name)
 *                   specifies the 2-character mnemonic used to determine
 *                   the appropriate logical device code (LDC) numeric value.
 *                   The mnemonic identifies an LDC entry defined by a
 *                   DFHTCT TYPE=LDC macro.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3600-3601>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   LDC(name),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, TERMERR                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3600 logical unit.
 * <p>The data stream and communication format used between a CICS application program and a 3614 is determined by the 3614.
 * The application program is therefore device_dependent when handling 3614 communication.
 * <p>For further information about designing 3614 application programs for CICS, refer to the  IBM 4700/3600/3630 Guide.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3600-3614>"(
   DEFRESP,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3650 interpreter logical unit.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >_______________________________________________________><             |
 * |    |_FMH_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                 |
 * |             |_MAXFLENGTH(data-value)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, LENGERR, TERMERR                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3650 interpreter>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * Communicate on a 3650 host conversational (3270) logical unit.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|  |_ERASE________________|  |_DEFRESP_|      |
 * |                                      |_DEFAULT___|                     |
 * |                                      |_ALTERNATE_|                     |
 * |                                                                        |
 * | >_______________________________________________________><             |
 * |    |_FMH_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                 |
 * |             |_MAXFLENGTH(data-value)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, TERMERR                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-area)
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   <p>The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE definition.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3650-3270>"(
   ALTERNATE,
   CTLCHAR(data-area),
   DEFAULT,
   DEFRESP,
   ERASE,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * Communicate on a 3650 host conversational (3653) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, LENGERR, TERMERR                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3650-3653>"(
   DEFRESP,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );
/**
 * Communicate on a 3650 host command processor (3680) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_FMH_|              |
 * |                                                                        |
 * | >___________________________________________________________><         |
 * |    |_DEFRESP_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|             |
 * |                 |_MAXFLENGTH(data-value)_|                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, TERMERR                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3650-3680>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, LENGERR, SIGNAL, TERMERR                              |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3767 interactive logical unit. This command also applies to the 3770 interactive logical unit.
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3767>"(
   DEFRESP,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3770 batch logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >_______________________________________________________><             |
 * |    |_FMH_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                 |
 * |             |_MAXFLENGTH(data-value)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, LENGERR, SIGNAL, TERMERR                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3770>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3790 full-function or inquiry logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_FMH_|              |
 * |                                                                        |
 * | >___________________________________________________________><         |
 * |    |_DEFRESP_|  |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|             |
 * |                 |_MAXFLENGTH(data-value)_|                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, LENGERR, SIGNAL, TERMERR                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a logical unit or session, or
 *    the partner transaction. EIBSIG is always set when an
 *    inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3790 full-function or inquiry>"(
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3790 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_DEFRESP_|          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|                                             |
 * |                                                                        |
 * | >_______________________________________________________><             |
 * |    |_ERASE_________________| CON12 |_________________|                 |
 * |             |_DEFAULT___|             |_NOTRUNCATE_|                   |
 * |             |_ALTERNATE_|                                              |
 * |                                                                        |
 * | CON12:                                                                 |
 * | |______________________________|                                       |
 * |    |_MAXLENGTH(data-value)__|                                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, TERMERR                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI>EODS
 *      <LI>INBFMH
 *      <LI>EOC.
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data received is discarded by CICS because its
 *    length exceeds the maximum that the program
 *    accepts (see TOLENGTH and MAXLENGTH
 *    options), and the NOTRUNCATE option is not
 *    specified.
 *    <LI>An out-of-range value is supplied in one of the
 *    options, FROMLENGTH, FROMFLENGTH,
 *    MAXLENGTH, MAXFLENGTH, TOLENGTH, or
 *    TOFLENGTH.
 *    </UL>
 *    <P>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal or session-related error. Any action
 *    on that conversation other than a FREE causes an
 *    ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-area)
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   <p>The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE definition.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data. For a description of a safe upper limit, see
 *                   "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference to be set to the address
 *                   of the data read from the terminal. pointer reference,
 *                   unless changed by other commands or statements, is
 *                   valid until the next CONVERSE (default) command or
 *                   the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length (halfword binary value) of the data to
 *                   be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3790 3270-display>"(
   ALTERNATE,
   CTLCHAR(data-area),
   DEFAULT,
   DEFRESP,
   ERASE,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );


/**
 * Communicate on standard CICS terminal support.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p>
 * This form of the CONVERSE command is used by all CICS-supported terminals for which the other CONVERSE descriptions
 * are not appropriate.
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <non-VTAM default>"(
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area),
   );

/**
 * CONVERSE communicates on an MRO session. For more information about MRO and IRC, see the  CICS
 * Intercommunication Guide.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE_________________________________________________________> |
 * |               |_CONVID(name)__|  |_ATTACHID(name)_|                    |
 * |               |_SESSION(name)_|                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)____FROMLENGTH(data-value)_____________|           |
 * |                       |_FROMFLENGTH(data-value)_|  |_FMH_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_DEFRESP_|             |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_STATE(cvda)_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, EOC, INBFMH, LENGERR, NOTALLOC, TERMERR           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>CBIDERR<DD>
 *    occurs if the requested attach header control block
 *    named in ATTACHID cannot be found.
 *    <p>Default action: terminate the task abnormally.
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 *    EOF (not TCAM)
 *    occurs when an end-of-file indicator is received.
 *    Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ATTACHID(name)
 *                   specifies that an attach header (created by a BUILD
 *                   ATTACH command) is to precede, and be concatenated
 *                   with, the user data supplied in the FROM option.
 *                   "name" (1-8 characters) identifies the attach header
 *                   control block to be used in the local task.
 * @param CONVID(name)
 *                   identifies the conversation to which the command
 *                   relates. The 4-character name identifies either the token
 *                   returned by a previously executed ALLOCATE command
 *                   in EIBRSRCE in the EIB, or the token representing the
 *                   principal session (returned by a previously executed
 *                   ASSIGN command).
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If both this option and CONVID are
 *                   omitted, the principal facility for the task is used.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STATE(cvda)
 * gets the state of the transaction program. The cvda
 * values returned by CICS are:
 * <pre>
 *    ALLOCATED
 *    FREE
 *    PENDFREE
 *    RECEIVE
 *    ROLLBACK
 *    SEND
 *    SYNCFREE
 *    SYNCRECEIVE
 *    SYNCSEND
 * </pre>
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <MRO>"(
   ATTACHID(name),
   CONVID(name),
   DEFRESP,
   FMH,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SESSION(name),
   SET(ptr-ref),
   STATE(cvda),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a System/3 terminal.
 * <P>CONVERSE in this form also applies to the following devices:
 * <UL>
 * <li>2770 data communication system
 * <li>2780 data transmission terminal
 * <li>3660 supermarket scanning system
 * <li>3780 communication terminal.
 * </UL>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <System/3>"(
   ASIS,
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|  |_ASIS_|             |
 * |                                                                        |
 * | >_________________><                                                   |
 * |    |_PSEUDOBIN_|                                                       |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a System/7 terminal.
 * <P>Transactions are normally initiated from the System/7 by issuing a 4-character transaction code that is transmitted in BCD
 * mode. Pseudobinary mode can be used only while communicating with an active CICS transaction; it cannot be used to initiate
 * the transaction. The message length is given as the number of words to be transmitted (not as the number of characters).
 * <P>When a transaction is initiated on a System/7, CICS services that System/7 only for the duration of the transaction; that is, to
 * ensure efficient use of the line, any other System/7s on the same line are locked out for the duration of the transaction. CICS
 * application programs for the multipoint System/7 should be designed with the shortest possible execution time.
 * <P>The first word (two characters) of every message sent to the System/7 must be an identification word, except words beginning
 * with "@", which are reserved by CICS.
 *
 * <P>When the PSEUDOBIN option is specified on RECEIVE or SEND, the length of the data area provided by the application
 * program must be at least twice that of the data to be read.
 * <P>In the case of a System/7 on a dial-up (switched) line, the System/7 application program must, initially, transmit a
 * four-character terminal identification. (This terminal identification is generated during preparation of the TCT through use of the
 * DFHTCT TYPE=TERMINAL, TRMIDNT=parameter specification.) CICS responds with either a 'ready' message, indicating that
 * the terminal identifier is valid and that the System/7 may proceed as if it were on a leased line, or an 'INVALID TERMINAL
 * IDENTIFICATION' message, indicating that the terminal identifier sent by the System/7 did not match the TRMIDNT=
 * parameter specification.
 * <P>Whenever CICS initiates the connection to a dial-up System/7, CICS writes a null message, consisting of three idle characters,
 * prior to starting the transaction. If there is no program resident in the System/7 capable of supporting the Asynchronous
 * Communication Control Adapter (ACCA), BTAM error routines cause a data check message to be recorded on the CICS (host)
 * system console. This is normal if the task initiated by CICS is to IPL the System/7. Although the data check message is
 * printed, CICS ignores the error and continues normal processing. If a program capable of supporting the ACCA is resident in
 * the System/7 at the time this message is transmitted, no data check occurs.
 * <P>When a disconnect is issued to a dial-up System/7, the "busy" bit is sometimes left on in the interrupt status word of the ACCA.
 * If the line connection is reestablished by dialing from the System/7 end, the 'busy' condition of the ACCA prevents message
 * transmission from the System/7. To overcome this problem, the System/7 program must reset the ACCA after each disconnect
 * and before message transmission is attempted. This can be done by issuing the following instruction:
 * <PRE>
 *    PWRI  0,8,3,0 RESET ACCA
 * <PRE>
 * <P>This procedure is not necessary when the line is reconnected by CICS (that is, by an automatically initiated transaction).
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param PSEUDOBIN
 *                   specifies that the data being read and written is to be
 *                   translated from System/7 pseudobinary representation to
 *                   hexadecimal.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <System/7>"(
   ASIS,
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   PSEUDOBIN,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >__________________________________________________________________><  |
 * |    |_CTLCHAR(data-value)_|  |_LINEADDR(data-value)_|  |_LEAVEKB_|      |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 2260 or 2265 display station.
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CTLCHAR(data-area)
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param LEAVEKB
 *                   specifies that the keyboard is to remain locked at the
 *                   completion of the data transfer.
 * @param LINEADDR(data-value)
 *                   specifies that the writing is to begin on a specific line of
 *                   a 2260/2265 screen. The data value is a halfword binary
 *                   value in the range 1 through 12 for a 2260, or 1 through
 *                   15 for a 2265.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <2260>"(
   CTLCHAR(data-area),
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMFLENGTH(data-value),
   INTO(data-area),
   LEAVEKB,
   LINEADDR(data-value),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, RDATT, WRBRK                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 2741 terminal.
 * <p><b>Read attention</b>:   If the terminal operator presses the attention key on the 2741 after typing a message, it is recognized as a
 * read attention if:
 * <UL>
 * <LI>Read attention is supported by the system
 * <LI>The message is read by a RECEIVE command.
 * </UL>
 * <p>When this occurs, control is transferred to a CICS read-attention exit routine, if it has been generated into the system. This
 * routine is a skeleton program that can be tailored by the system programmer to carry out actions such as the following:
 * <UL>
 * <LI>Perform data analysis or modification on a read attention.
 * <LI>Return a common response to the terminal operator following a read attention.
 * <LI>Return a response and request additional input that can be read into the initial input area or into a new area.
 * <LI>Request new I/O without requiring a return to the task to request additional input.
 * </UL>
 * <p>When the read-attention exit routine is completed, control is returned to the application program at the address specified in the
 * HANDLE CONDITION RDATT command. The return is made when either of the following occurs:
 * <UL>
 * <LI>The exit routine issues no more requests for input.
 * <LI>The exit routine issues a RECEIVE request and the operator terminates the input with a carriage return. (If the operator
 * </UL>
 * terminates the input with an attention, the exit routine is reentered and is free to issue another RECEIVE request.)
 * If a HANDLE CONDITION RDATT command is not included in the application program or read attention is not supported, the
 * attention is treated as if the return key had been pressed.
 * <p><b>Write break</b>:  If the terminal operator presses the attention key on the 2741 while a message is being received, it is
 * recognized as a write break if:
 * <UL>
 * <LI>Write break is supported by the system.
 * <LI>A HANDLE CONDITION WRBRK command is active in the application program.
 * </UL>
 * <p>When this occurs, the remaining portion of the message is not sent to the terminal. The write is terminated as though it were
 * successful, and a new-line character (X'15') is sent to cause a carrier return. Control is returned to the application program at
 * the address specified for the WRBRK condition.
 * <p>If a HANDLE CONDITION WRBRK command is not included in the application program or if write break is not supported, the
 * break is treated as an I/O error.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>RDATT<DD>
 *    occurs if the "receive" part of the conversation is
 *    terminated by the attention (ATTN) key rather than the
 *    return key.
 *    <p>Default action: ignore the condition.
 * <DT>WRBRK<DD>
 *    occurs if the "send" part of the conversation is
 *    terminated by the attention (ATTN) key rather than the
 *    return key.
 *    <p>Default action: ignore the condition.
 * </DL>
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <2741>"(
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );


/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P>CONVERSE in this form also applies to the following devices:
 * <UL>
 * <li>2770 data communication system
 * <li>2780 data transmission terminal
 * <li>3660 supermarket scanning system
 * <li>3780 communication terminal.
 * </UL>
 *
 * <p>The support and command syntax for 2770 is the same as for System/3.
 * <p>The 2770 recognizes a read interrupt and responds by transmitting the contents of the I/O buffer. After the contents of the
 * buffer have been transmitted, the 2770 responds to the next read continue with an EOT. If the I/O buffer is empty, the 2770
 * transmits an EOT. CICS issues a read interrupt and read continue to relinquish use of the line and to enable the application
 * program to write to the 2770.
 * <p>Input from a 2770 consists of one or more logical records. CICS provides one logical record for each read request to the
 * application program. The size of a logical record cannot exceed the size of the I/O buffer. If the input spans multiple buffers,
 * multiple reads must be issued by the application program.
 * <p>The 2265 component of the 2770 Data Communication System is controlled by data stream characters, not by BTAM macros;
 * appropriate screen control characters should be included in the output area.
 * <p>For 2770 input, data is deblocked to ETX, ETB, RS, and US characters. These characters are moved with the data to the input
 * area but are not included in the data length; characters such as NL, CR, and LF are passed in the input area as data.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <2770>"(
   ASIS,
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );
/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P>CONVERSE in this form also applies to the following devices:
 * <UL>
 * <li>2770 data communication system
 * <li>2780 data transmission terminal
 * <li>3660 supermarket scanning system
 * <li>3780 communication terminal.
 * </UL>
 *
 * Output to a 2780 requires that the application program contains an appropriate "escape sequence" for component selection
 * associated with the output message. For details of the 2780, see the publication  IBM 2780 Data Transmission Terminal:
 * Component Description manual.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <2780>"(
   ASIS,
   DEST(name),
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * CONVERSE communicates on a 3270 information display system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_ERASE________________|  |_CTLCHAR(data-value)_| |               |
 * |    |          |_DEFAULT___|                            |               |
 * |    |          |_ALTERNATE_|                            |               |
 * |    |_STRFIELD__________________________________________|               |
 * |                                                                        |
 * | >____________><                                                        |
 * |    |_ASIS_|                                                            |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ALTERNATE
 *                   set the terminal to use the ALTERNATE screen size.
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param CTLCHAR(data-area)
 * @param DEFAULT
 *                   set the terminal to use the DEFAULT screen size.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the section on
 *                   the CICS-TCAM interface in the  CICS Customization
 *                   Guide for programming information.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   <p>The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE definition.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command, rather than a SEND command, must be used
 *                   if the data area contains a read partition structured field.
 *                   (Structured fields are described in the  CICS 3270 Data
 *                   Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3270 display>"(
   ALTERNATE,
   ASIS,
   CTLCHAR(data-area),
   DEFAULT,
   DEST(name),
   ERASE,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   STRFIELD,
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3600 finance communication system.
 * <p>This form of the CONVERSE command also applies to
 * the 4700 finance communication system. See "BTAM programmable terminals".
 * <p><b>Input</b>:  The unit of transmission from a 3601 Finance Communication Controller to CICS is a segment consisting of the
 * start-of-text data-link control character (STX), the 1-byte identification of the 3600 logical workstation that issued the processor
 * write, the data, and either an end-of-block (ETB) or an end-of-text (ETX) control character.
 * <p>A logical workstation sends a message either in one segment, in which case the segment ends with ETX, or in more than one
 * segment, in which case only the last segment ends with ETX, all others ending with ETB.
 * <p>The input area passed to the user-written application program consists of the data only. The 1-byte field TCTTEDLM, which
 * can be obtained using an ASSIGN DELIMITER command, contains flags describing the data-link control character (ETB, ETX,
 * or IRS) that ended the segment. The application program can issue terminal control commands to read the data until it
 * receives a segment ending with ETX. If blocked data is transmitted, it is received by CICS as blocks of segments. Only the first
 * segment in a block starts with the STX control character, and all segments are separated by IRS characters. None of the
 * segments contains ETB or ETX characters except the last, which has the ETX character.
 * <p>For blocked input, the flags in TCTTEDLM only indicate end of segment, not end of message. The CICS application program
 * still receives only the data, but user-defined conventions may be required to determine the end of the message.
 * <p>The field TCTTEDLM also indicates the mode of the input, either transparent or nontransparent. Blocked input is
 * nontransparent.
 * <p>The terminal control facility does not pass input containing a start-of-header (SOH) data-link control character to a user-written
 * application program. If it receives an SOH, it sets an indicator in TCTTEDLM, passes the input to the user exit in the terminal
 * control facility, and then discards it.
 * <p><b>Output</b>:  When an application program issues a SEND command, the terminal control facility determines, from the value
 * specified in the BUFFER parameter of the DFHTCT TYPE=TERMINAL system macro, the number of segments to be built for
 * the message. It sends the message to the 3600 logical unit either in one segment consisting of a start-of-text character (STX),
 * the data, and an end-of-text character (ETX); or in more than one segment, in which case only the last ends with ETX, all
 * others ending with ETB.
 * <p>The host input buffer of the 3600 controller and the input segment of the receiving logical unit must be large enough to
 * accommodate the data sent by CICS. However, space for the data-link control characters need not be included. The 3600
 * application program reads the data from the host, by means of an LREAD, until it has received the entire message.
 * <p>CICS system output messages begin with DFH followed by a 2-byte component id, 4-byte message number and the message
 * text. These messages are sent in nontransparent mode. CICS user-written application programs should not send messages
 * starting with DFH to the 3601.
 * <p><b>Resend message</b>:  When a logical unit sends a message to the host and a 'short on storage' condition exists or the input is
 * unsolicited (the active task associated with the terminal has not issued a read), the terminal control facility sends a "resend"
 * message to the logical unit. No message is sent to the destinations CSMT or CSTL.
 * <p>The first eight bytes of data sent to CICS can be used by the 3600 application program to define a convention to associate
 * responses received from CICS with transactions sent to the host; for example, sequence numbers could be used.
 * <p?>If a CICS user-written application program has already issued a SEND command when a resend situation occurs, the resend
 * message is not sent to the 3601 until the user-written application program message has been sent. A 3600 logical unit cannot
 * receive a resend message while receiving a segmented message.
 * <p>Only one resend message at a time can be queued for a logical unit. If a second resend situation occurs before CICS has
 * written the first, a resend message is sent containing the eight bytes of data that accompanied the second input transaction
 * from the 3600 logical unit.
 * <p>The resend message is sent in transparent mode if the input data from the 3601 to be retransmitted is received by CICS in
 * transparent mode. Otherwise it is sent in nontransparent mode.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3600 BTAM>"(
   ASIS,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOF, LENGERR                                               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3735 programmable buffered terminal.
 * <P>The 3735 programmable buffered terminal may be
 * serviced by CICS in response to terminal-initiated input (automatic answering), or as a result of an automatic calling or
 * time-initiated transaction.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>EOF<DD>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3735>"(
   ASIS,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__CONVERSE__FROM(data-area)____FROMLENGTH(data-value)______________> |
 * |                                |_FROMFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____INTO(data-area)______TOLENGTH(data-area)________________________> |
 * |    |_SET(ptr-ref)____|  |_TOFLENGTH(data-area)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Condition: LENGERR                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * CONVERSE communicates on a 3740 data entry system.
 * <P>In batch mode, many files are exchanged between the 3740 and CICS in a single transmission. The transmission of an input
 * batch must be complete before an output transmission can be started.
 *
 * @conditions
 *    Some of the following conditions can occur in combination
 *    with others. CICS checks for these conditions in the following
 *    order:
 *      <OL>
 *      <LI> INBFMH
 *      <LI> EOC
 *      </OL>
 *    <p>If more than one occurs, only the first is passed to the
 *    application program. EIBRCODE, however, is set to indicate
 *    all the conditions that occurred.
 * <DL>
 * <DT>LENGERR<DD>
 *    occurs in any of the following situations:
 *    <UL>
 *    <LI>Data is discarded by CICS because its length
 *    exceeds the maximum that the program accepts
 *    and the NOTRUNCATE option is not specified.
 *    <LI>An out-of-range value is supplied in the
 *    FROMLENGTH option.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>: If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FROM(data-area)
 *                   specifies the data to be written to the terminal or logical
 *                   unit, or sent to the partner transaction. This option may,
 *                   when relevant, be omitted if ATTACHID is specified.
 * @param FROMFLENGTH(data-value)
 *                   is a fullword alternative to FROMLENGTH.
 * @param FROMLENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. If you use this option, you must also
 *                   specify FROM. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal.
 * @param MAXFLENGTH(data-area)
 * @param MAXLENGTH(data-area)
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but retained for retrieval by subsequent
 *                   RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference to be set to the address of
 *                   data received from the conversation partner in an MRO
 *                   conversation. The pointer reference, unless changed by
 *                   other commands or statements, is valid until the next
 *                   CONVERSE (MRO) command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param TOFLENGTH(data-area)
 *                   is a fullword alternative to TOLENGTH.
 * @param TOLENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be received. If you specify INTO, but omit
 *                   MAXLENGTH, "data-area" specifies the maximum length
 *                   that the program accepts. If the value is less than zero,
 *                   zero is assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   NOTRUNCATE is omitted, the data is truncated to that
 *                   value, and the LENGERR condition occurs. When the
 *                   data is received, the data area is set to the length of the
 *                   data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 */
function "CONVERSE <3740>"(
   ASIS,
   FROM(data-area),
   FROMFLENGTH(data-value),
   FROMLENGTH(data-value),
   INTO(data-area),
   MAXFLENGTH(data-area),
   MAXLENGTH(data-area),
   NOTRUNCATE,
   SET(ptr-ref),
   TOFLENGTH(data-area),
   TOLENGTH(data-area)
   );

/**
 * Define a named counter.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DEFINE COUNTER(name)_____________________________________________> |
 * |                            |_POOL(name)_|  |_VALUE(data-value)         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MINIMUM(data-value)_|  |_MAXIMUM(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>These counter commands create a new named counter in a
 * named counter pool in the coupling facility.
 * <p>DEFINE COUNTER creates counters that are handled as
 * fullword  signed binary values, and DEFINE DCOUNTER
 * creates counters that are handled as doubleword  unsigned
 * binary values.
 * <p><b>Note</b>:  Although the CICS API allows you to operate with
 * either fullword (signed) or doubleword (unsigned)
 * binary values, the named counter server stores  all
 * values as doubleword unsigned values. This can give
 * rise to overflow conditions if, for example, you define
 * a counter with the DCOUNTER command and try to
 * access it using the COUNTER command. You should
 * always access a named counter using commands
 * from the  same command set that you used to define
 * the counter.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 *    <DL>
 *    <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>202<DD> Duplicate counter name. A named counter of this
 *    name already exists.
 *    <DT>301<DD> The server has reported an error code that is not
 *    understood by the named counter interface.
 *    Generally, this is not possible unless the interface
 *    load module, DFHNCIF, is at a lower maintenance
 *    or release level than the server itself.
 *    <DT>302<DD> The server cannot create the new named counter
 *    because there is not enough space in the named
 *    counter pool.
 *    <DT>303<DD> An unexpected error, such as structure failure or
 *    loss of connectivity, has occurred on a macro
 *    used to access the coupling facility. Further
 *    information can be found in message DFHNC0441
 *    in the CICS job log.
 *    <DT>304<DD> The pool selection parameter specified in the
 *    program cannot be resolved to a valid server
 *    name using the current options table.
 *    <DT>305<DD> The interface is unable to establish a connection
 *    to the server for the selected named counter pool.
 *    Further information can be found in an AXM
 *    system services message (AXMSC nnnn) in the
 *    CICS job log.
 *    <DT>306<DD> An abend occurred during server processing of a
 *    request. Further information can be found in a
 *    message in the CICS job log and the server job
 *    log.
 *    <DT>308<DD> The DFHNCOPT options table module, required
 *    for resolving a pool name, could not be loaded.
 *    <DT>309<DD> During processing of the options table, the named
 *    counter interface encountered an unknown entry
 *    format. Either the options table is not correctly
 *    generated, or the DFHNCIF interface load module
 *    is not at the same release level as the options
 *    table.
 *    <DT>310<DD> An options table entry matching the given pool
 *    name specified a user exit program, but the user
 *    exit program is not link-edited with the options
 *    table and cannot be loaded.
 *    <DT>403<DD> The POOL parameter contains invalid characters
 *    or embedded spaces.
 *    <DT>404<DD> The COUNTER parameter contains invalid
 *    characters or embedded spaces.
 *    <DT>406<DD> The VALUE parameter is invalid. Initial values
 *    cannot be less than the minimum value, and
 *    cannot be greater than the maximum value plus 1.
 *    <DT>407<DD> The MINIMUM or MAXIMUM parameter is invalid.
 *    Either the MAXIMUM parameter specifies a value
 *    that is less than the minimum value, or (for
 *    COUNTER only) one of the parameters specifies a
 *    negative value.
 *    <p>Default action: terminate the task abnormally.
 *    </DL>
 *    </DL>
 * @param COUNTER(name)
 *                   specifies the 16-character name of the named counter to
 *                   be created. All value fields for this counter are handled
 *                   as fullword signed binary values. Valid characters for
 *                   names are A through Z, 0 through 9, $ @ # and _
 *                   (underscore). If  name is a variable that contains a name
 *                   that is less than 16 characters, the name must be
 *                   padded with trailing blanks.
 * @param MAXIMUM(data-value)
 *                   specifies the maximum number for the named counter,
 *                   using a fullword signed binary value for COUNTER and
 *                   a doubleword unsigned value for DCOUNTER. This is
 *                   the maximum number that can be assigned on a GET
 *                   command, after which the counter must be reset by a
 *                   REWIND command.
 *                   If you omit the MAXIMUM parameter, the named counter
 *                   is defined with a default maximum of high-values
 *                   (X'7FFFFFFF' for the signed fullword case, or a
 *                   doubleword filled with X'FF').
 * @param MINIMUM(data-value)
 *                   specifies the minimum number for the named counter,
 *                   using a fullword signed binary value for COUNTER and
 *                   a doubleword unsigned value for DCOUNTER. This is
 *                   the value to which a named counter is reset as a result
 *                   of a REWIND command.
 *                   If you omit the MINIMUM parameter, the named counter
 *                   is defined with a default minimum of low-values (a
 *                   fullword or doubleword filled with X'00').
 * @param POOL(name)
 *                   specifies an 8-character string to be used as a pool
 *                   selection parameter to select the pool in which the
 *                   named counter is to be created. The string can be a
 *                   logical pool name, or the actual pool name.
 *                   Valid characters for the pool selector string are A
 *                   through Z, 0 through 9, $ @ # and _ (underscore). If
 *                   name is a variable that contains a name that is less than
 *                   8 characters, the name must be padded with trailing
 *                   blanks.
 *                   This parameter is optional. If you omit the name of the
 *                   pool, a pool selector value of 8 blanks is assumed.
 *                   If there is no matching entry in the DFHNCOPT options
 *                   table, CICS uses the name specified on the NCPLDFT
 *                   system initialization parameter, which specifies the
 *                   default named counter pool.
 *                   For information about generating a named counter
 *                   options table using the DFHNCO macro, see the  CICS
 *                   System Definition Guide.
 * @param VALUE(data-value)
 *                   specifies the initial number at which the new named
 *                   counter is to start, using a fullword signed binary value
 *                   for COUNTER and a doubleword unsigned value for
 *                   DCOUNTER.
 *                   You can specify a number that is equal to, or greater
 *                   than, the minimum value, up to the maximum value plus
 *                   1. If you specify an initial number that is equal to the
 *                   maximum value plus 1, the counter is created with the
 *                   counter-at-limit condition set and it cannot be used until
 *                   it is rewound.
 *                   If you omit both the VALUE and MINIMUM parameters,
 *                   the named counter is created with an initial value of
 *                   zero.
 *                   If you omit VALUE but specify a MINIMUM , the
 *                   translator issues an error --the VALUE parameter is
 *                   required if you specify the MINIMUM parameter.
 */
function "DEFINE COUNTER"(
   COUNTER(name),
   MAXIMUM(data-value),
   MINIMUM(data-value),
   POOL(name),
   VALUE(data-value)
   );


/**
 * Define a named counter.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DEFINE DCOUNTER(name)____________________________________________> |
 * |                             |_POOL(name)_|  |_VALUE(data-value)        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MINIMUM(data-value)_|  |_MAXIMUM(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>These counter commands create a new named counter in a
 * named counter pool in the coupling facility.
 * <p>DEFINE COUNTER creates counters that are handled as
 * fullword  signed binary values, and DEFINE DCOUNTER
 * creates counters that are handled as doubleword  unsigned
 * binary values.
 * <p><b>Note</b>:  Although the CICS API allows you to operate with
 * either fullword (signed) or doubleword (unsigned)
 * binary values, the named counter server stores  all
 * values as doubleword unsigned values. This can give
 * rise to overflow conditions if, for example, you define
 * a counter with the DCOUNTER command and try to
 * access it using the COUNTER command. You should
 * always access a named counter using commands
 * from the  same command set that you used to define
 * the counter.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 *    <DL>
 *    <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>202<DD> Duplicate counter name. A named counter of this
 *    name already exists.
 *    <DT>301<DD> The server has reported an error code that is not
 *    understood by the named counter interface.
 *    Generally, this is not possible unless the interface
 *    load module, DFHNCIF, is at a lower maintenance
 *    or release level than the server itself.
 *    <DT>302<DD> The server cannot create the new named counter
 *    because there is not enough space in the named
 *    counter pool.
 *    <DT>303<DD> An unexpected error, such as structure failure or
 *    loss of connectivity, has occurred on a macro
 *    used to access the coupling facility. Further
 *    information can be found in message DFHNC0441
 *    in the CICS job log.
 *    <DT>304<DD> The pool selection parameter specified in the
 *    program cannot be resolved to a valid server
 *    name using the current options table.
 *    <DT>305<DD> The interface is unable to establish a connection
 *    to the server for the selected named counter pool.
 *    Further information can be found in an AXM
 *    system services message (AXMSC nnnn) in the
 *    CICS job log.
 *    <DT>306<DD> An abend occurred during server processing of a
 *    request. Further information can be found in a
 *    message in the CICS job log and the server job
 *    log.
 *    <DT>308<DD> The DFHNCOPT options table module, required
 *    for resolving a pool name, could not be loaded.
 *    <DT>309<DD> During processing of the options table, the named
 *    counter interface encountered an unknown entry
 *    format. Either the options table is not correctly
 *    generated, or the DFHNCIF interface load module
 *    is not at the same release level as the options
 *    table.
 *    <DT>310<DD> An options table entry matching the given pool
 *    name specified a user exit program, but the user
 *    exit program is not link-edited with the options
 *    table and cannot be loaded.
 *    <DT>403<DD> The POOL parameter contains invalid characters
 *    or embedded spaces.
 *    <DT>404<DD> The COUNTER parameter contains invalid
 *    characters or embedded spaces.
 *    <DT>406<DD> The VALUE parameter is invalid. Initial values
 *    cannot be less than the minimum value, and
 *    cannot be greater than the maximum value plus 1.
 *    <DT>407<DD> The MINIMUM or MAXIMUM parameter is invalid.
 *    Either the MAXIMUM parameter specifies a value
 *    that is less than the minimum value, or (for
 *    COUNTER only) one of the parameters specifies a
 *    negative value.
 *    <p>Default action: terminate the task abnormally.
 *    </DL>
 *    </DL>
 * @param DCOUNTER(name)
 *                   specifies the 16-character name of the named counter to
 *                   be created. All value fields for this counter are handled
 *                   as doubleword unsigned binary values. Valid characters
 *                   for names are A through Z, 0 through 9, $ @ # and _
 *                   (underscore). If  name is a variable that contains a name
 *                   that is less than 16 characters, the name must be
 *                   padded with trailing blanks.
 * @param MAXIMUM(data-value)
 *                   specifies the maximum number for the named counter,
 *                   using a fullword signed binary value for COUNTER and
 *                   a doubleword unsigned value for DCOUNTER. This is
 *                   the maximum number that can be assigned on a GET
 *                   command, after which the counter must be reset by a
 *                   REWIND command.
 *                   If you omit the MAXIMUM parameter, the named counter
 *                   is defined with a default maximum of high-values
 *                   (X'7FFFFFFF' for the signed fullword case, or a
 *                   doubleword filled with X'FF').
 * @param MINIMUM(data-value)
 *                   specifies the minimum number for the named counter,
 *                   using a fullword signed binary value for COUNTER and
 *                   a doubleword unsigned value for DCOUNTER. This is
 *                   the value to which a named counter is reset as a result
 *                   of a REWIND command.
 *                   If you omit the MINIMUM parameter, the named counter
 *                   is defined with a default minimum of low-values (a
 *                   fullword or doubleword filled with X'00').
 * @param POOL(name)
 *                   specifies an 8-character string to be used as a pool
 *                   selection parameter to select the pool in which the
 *                   named counter is to be created. The string can be a
 *                   logical pool name, or the actual pool name.
 *                   Valid characters for the pool selector string are A
 *                   through Z, 0 through 9, $ @ # and _ (underscore). If
 *                   name is a variable that contains a name that is less than
 *                   8 characters, the name must be padded with trailing
 *                   blanks.
 *                   This parameter is optional. If you omit the name of the
 *                   pool, a pool selector value of 8 blanks is assumed.
 *                   If there is no matching entry in the DFHNCOPT options
 *                   table, CICS uses the name specified on the NCPLDFT
 *                   system initialization parameter, which specifies the
 *                   default named counter pool.
 *                   For information about generating a named counter
 *                   options table using the DFHNCO macro, see the  CICS
 *                   System Definition Guide.
 * @param VALUE(data-value)
 *                   specifies the initial number at which the new named
 *                   counter is to start, using a fullword signed binary value
 *                   for COUNTER and a doubleword unsigned value for
 *                   DCOUNTER.
 *                   You can specify a number that is equal to, or greater
 *                   than, the minimum value, up to the maximum value plus
 *                   1. If you specify an initial number that is equal to the
 *                   maximum value plus 1, the counter is created with the
 *                   counter-at-limit condition set and it cannot be used until
 *                   it is rewound.
 *                   If you omit both the VALUE and MINIMUM parameters,
 *                   the named counter is created with an initial value of
 *                   zero.
 *                   If you omit VALUE but specify a MINIMUM , the
 *                   translator issues an error --the VALUE parameter is
 *                   required if you specify the MINIMUM parameter.
 */
function "DEFINE DCOUNTER"(
   DCOUNTER(name),
   MAXIMUM(data-value),
   MINIMUM(data-value),
   POOL(name),
   VALUE(data-value)
   );

/**
 * Delay the processing of a task.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |             _INTERVAL(0)______________________                         |
 * | >>__DELAY__|__________________________________|___________________><   |
 * |            |_INTERVAL(hhmmss)_________________|  |_REQID(name)_|       |
 * |            |_TIME(hhmmss)_____________________|                        |
 * |            |      <_______________________    |                        |
 * |            |_FOR_____HOURS(data-value)____|___|                        |
 * |            |       |_MINUTES(data-value)_|    |                        |
 * |            |       |_SECONDS(data-value)_|    |                        |
 * |            |        <_______________________  |                        |
 * |            |_UNTIL_____HOURS(data-value)____|_|                        |
 * |                      |_MINUTES(data-value)_|                           |
 * |                      |_SECONDS(data-value)_|                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EXPIRED, INVREQ                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using DELAY with REQID if later CANCELed could create inter-transaction affinities that adversely affect the use of
 * dynamic transaction routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>DELAY suspends the processing of the issuing task for a
 * specified interval of time or until a specified time of day. It
 * supersedes any previously initiated POST command for the
 * task.
 * <p>The default is INTERVAL(0), but for C the default is FOR
 * HOURS(0) MINUTES(0) SECONDS(0).
 *
 * @conditions
 * <DL>
 * <DT>EXPIRED<DD>
 * occurs if the time specified has already expired when the
 * command is issued.
 * <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>4<DD> Hours are out of range.
 * <DT>5<DD> Minutes are out of range.
 * <DT>6<DD> Seconds are out of range.
 * </DL>
 * also occurs (RESP2 not set) if the DELAY command is
 * not valid for processing by CICS.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows you how to suspend the
 * processing of a task for five minutes:
 * <pre>
 * EXEC CICS DELAY
 *   INTERVAL(500)
 *   REQID('GXLBZQMR')
 * EXEC CICS DELAY FOR MINUTES(5)
 * </pre>
 * The following example shows you how, at 09:00, to suspend
 * the processing of a task until 12:45:
 * <pre>
 * EXEC CICS DELAY
 *   TIME(124500)
 *   REQID('UNIQCODE')
 * </pre>
 * There are two ways to enter the time under FOR or UNTIL.
 * <UL>
 * <LI>A combination of at least two of HOURS(0-99),
 * MINUTES(0-59) and SECONDS(0-59). HOURS(1)
 * SECONDS(3) would mean one hour and three seconds
 * (the minutes default to zero).
 * <LI>Any one of HOURS(0-99), MINUTES(0-5999), or
 * SECONDS(0-359999). HOURS(1) means one hour.
 * MINUTES(62) means one hour and two minutes.
 * SECONDS(3723) means one hour, two minutes, and
 * three seconds.
 * </UL>
 * @param FOR
 *               specifies the duration of the delay.
 * @param INTERVAL(hhmmss)
 *               specifies, in packed decimal format, the interval of time
 *               that is to elapse from the time when the DELAY
 *               command is issued. The mm and ss are in the range
 *               0-59. The time specified is added to the current clock
 *               time by CICS when the command is executed to
 *               calculate the expiration time.
 *               When using the C language, you are recommended to
 *               use the FOR/UNTIL HOURS, MINUTES, and SECONDS
 *               options as C does not provide a packed decimal data
 *               type. You may use INTERVAL, but if the value specified
 *               is not an integer constant, the application is responsible
 *               for ensuring that the value passed to CICS is in packed
 *               decimal format.
 * @param MINUTES(data-value)
 *               specifies a fullword binary value in the range 0-59, when
 *               HOURS or SECONDS are also specified, or 0-5999
 *               when MINUTES is the only option specified.
 * @param REQID(name)
 *               specifies a name (1-8 characters), which should be
 *               unique, to identify the DELAY request. Using this option
 *               to specify an application-defined name enables another
 *               transaction to cancel the DELAY request.
 *               To enable other tasks to cancel unexpired DELAY
 *               requests, you must make the request identifier
 *               dynamically available. For example, storing it in a TS
 *               queue, whose name is known to other applications that
 *               may want to cancel the DELAY request, is one way you
 *               can pass a request identifier to other transactions.
 * @param SECONDS(data-value)
 *               specifies a fullword binary value in the range 0-59, when
 *               HOURS or MINUTES are also specified, or 0-359 999
 *               when SECONDS is the only option specified.
 * @param TIME(hhmmss)
 *               specifies, in packed decimal format, the time when the
 *               task should resume processing.
 *               When using the C language, you are recommended to
 *               use the FOR/UNTIL HOURS, MINUTES, and SECONDS
 *               options as C does not provide a packed decimal data
 *               type. You may use TIME, but if the value specified is
 *               not an integer constant, the application is responsible for
 *               ensuring that the value passed to CICS is in packed
 *               decimal format. See the section about expiration times in
 *               the  CICS Application Programming Guide.
 * @param UNTIL
 *               specifies the time at the end of the delay and when the
 *               task should resume processing.
 */
function "DELAY"(
   FOR,
   INTERVAL(hhmmss),
   MINUTES(data-value),
   REQID(name),
   SECONDS(data-value),
   TIME(hhmmss),
   UNTIL,
   );

/**
 * Delete a record from a file  -- VSAM KSDS, VSAM RRDS, and data tables only.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DELETE__FILE(filename)___________________________________________> |
 * |                             |_TOKEN(data-area)_|                       |
 * |                             |_| DEL2 |_________|                       |
 * |                                                                        |
 * | >__________________________________><                                  |
 * |    |_SYSID(systemname)_|  |_RBA_|                                      |
 * |                           |_RRN_|                                      |
 * |                                                                        |
 * | DEL2:                                                                  |
 * | |__RIDFLD(data-area)__| DEL4 |__|                                      |
 * |                                                                        |
 * | DEL4:                                                                  |
 * | |_________________________________________________________________|    |
 * |    |_KEYLENGTH(data-value)_____________________________________|       |
 * |                             |_GENERIC________________________|         |
 * |                                        |_NUMREC(data-area)_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, DUPKEY, FILENOTFOUND, ILLOGIC, INVREQ, IOERR,    |
 * | ISCINVREQ, LOADING, NOTAUTH, NOTFND, NOTOPEN, SYSIDERR                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><b>Description</b>
 * <p>
 * DELETE deletes a record from a file on a KSDS, a path over
 * a KSDS, a CICS or user-maintained data table, or an RRDS.
 * You cannot delete from a VSAM ESDS or a BDAM file. <b>All
 * references to KSDS apply equally to CICS maintained
 * data tables and, except where stated otherwise, to paths
 * over a KSDS</b>. The file may be on a local or a remote
 * system. You identify, in the RIDFLD option, the specific
 * record to be deleted.
 * <p>You can delete a group of records in a similar way with a
 * single invocation of this command, identifying the group by
 * the GENERIC option (not available for RRDS).
 * <p>You can also use this command to delete a single record
 * that has previously been retrieved for update (by a READ
 * UPDATE command). In this case, you must not specify the
 * RIDFLD option.
 * <p>When this command is used to delete records from a
 * CICS-maintained data table, the update is made to both the
 * source VSAM KSDS data set and the in-memory data table.
 * When this command is used to delete records from a
 * user-maintained data table, the update is made only to the
 * in-memory data table.
 * <p>When this command is used to delete records from a
 * coupling facility data table, the update is made only to the
 * data table in the coupling facility.
 *
 * @conditions
 * <p><b>Note</b>: RESP2 values are not set for files that are on remote
 * systems.
 * <DL>
 * <DT>CHANGED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>109<DD> A DELETE command (without RIDFLD) is issued
 * for a file that is a defined as a coupling facility
 * data table using the contention update model and
 * the record has been changed since the application
 * program read it for update. To perform the
 * DELETE successfully, repeat the read for update
 * to get the latest version of the record, and try the
 * DELETE again.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * <DT>DISABLED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>50<DD> A file is disabled. A file may be disabled because:
 * <UL>
 * <LI>It was initially defined as disabled and has not
 * since been enabled.
 * <LI>It has been disabled by a SET FILE or a
 * CEMT SET FILE command.
 * </UL>
 * <p>This condition cannot occur when the DELETE
 * follows any read with the UPDATE option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>DUPKEY<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>140<DD> A record is accessed by way of an alternate index
 * with the NONUNIQUEKEY attribute, and another
 * alternate index record with the same key follows.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The file name referred to in the FILE option cannot
 * be found in the file resource definition.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" 
 * for details.)
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>20<DD> Delete operations are not allowed according to the
 * file entry specification in the FCT.
 * <DT>21<DD> A DELETE command is issued for a file referring
 * to a VSAM ESDS.
 * <DT>22<DD> A generic delete is issued for a file that is not a
 * VSAM KSDS.
 * <DT>25<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is greater than or equal to the
 * length of a full key.
 * <DT>26<DD> The KEYLENGTH option is specified (but the
 * GENERIC option is not specified), and the
 * specified length does not equal the length defined
 * for the data set to which this file refers.
 * <DT>27<DD> A DELETE command is issued for a file referring
 * to a BDAM data set.
 * <DT>31<DD> A DELETE command without the RIDFLD option
 * is issued for a file for which no previous READ
 * UPDATE command has been issued.
 * <DT>42<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is less than zero.
 * <DT>44<DD> The DELETE command does not conform to the
 * format of DELETE for a user-maintained or
 * coupling facility data table; for example if RBA was
 * specified.
 * <DT>47<DD> A DELETE instruction includes a token whose
 * value cannot be matched against any token in use
 * for an existing read for UPDATE request.
 * <DT>51<DD> A DELETE command specifying the RBA keyword
 * is issued against a KSDS file that is being
 * accessed in RLS mode. RLS does not support
 * relative byte address (RBA) access to KSDS files.
 * <DT>55<DD> NOSUSPEND is specified for a non-RLS file.
 * <DT>56<DD> An attempt to update a recoverable coupling
 * facility data table has failed because the current
 * unit of work has already updated 1024 recoverable
 * coupling facility data tables. You cannot update
 * more than 1024 recoverable coupling facility data
 * tables within a unit of work
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * <p>(Further information is available in the EXEC
 * interface block; refer to Appendix A, "EXEC
 * interface block" for details.)
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOADING<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>104<DD> A delete request is issued for a user-maintained
 * data table that is currently being loaded. A
 * user-maintained data table cannot be modified
 * during loading.
 * <p>LOADING is also returned for a coupling facility
 * data table if the delete request is for a key that is
 * not yet loaded. A coupling facility data table can
 * be modified during loading, but only if the
 * requested key is within the range of those records
 * already loaded.
 * <p>The LOADING response can also be returned for
 * a coupling facility data table that has failed during
 * loading. For more information about what happens
 * if the load for a coupling facility data table fails,
 * see the description of the XDTLC global user exit
 * in the  CICS Customization Guide.
 * <p>If your application programs encounter the
 * LOADING condition persistently or too frequently,
 * check that this is not caused by conflicting file
 * definitions that reference the same data set.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>106<DD> An attempt is made to delete a record specifying
 * the RIDFLD, but a  retained lock exists against this
 * key (see "Retained and active locks").
 * If the request specifies the GENERIC keyword, all
 * possible records are deleted, but the locked
 * records remain. The number of records deleted is
 * returned by NUMREC.
 * <p>The LOCKED condition can also occur for a
 * DELETE request to a recoverable CFDT that uses
 * the locking model, if the record being read is
 * locked by a retained lock. See the  CICS Recovery
 * and Restart Guide for information about
 * investigating retained locks on records in a
 * coupling facility data table.
 * </DL>
 * <p>Default action: abend the task with code AEX8.
 *
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>80<DD> An attempt to delete a record based on the search
 * argument provided is unsuccessful.
 * <p>For user-maintained data and coupling facility data
 * tables, this condition occurs if an attempt to delete
 * a record is unsuccessful because there is no entry
 * with the specified key in the data table. This can
 * occur on an attempt to delete a record using a
 * DELETE without RIDFLD, if the delete is
 * associated with a READ UPDATE request for a
 * record that this transaction has deleted (using
 * DELETE with RIDFLD) after it was read for
 * update.
 * <p>This does not mean that there is no such record in
 * the source data set (if the table was created from
 * one); it may be that such a record is present but
 * was either rejected during initial loading by the
 * user exit XDTRD, or was subsequently deleted
 * from the data table.
 * <p>For coupling facility data tables, this condition can
 * also occur when a DELETE command (without a
 * RIDFLD) is issued to a coupling facility data table
 * using the contention model, and the record has
 * been deleted since it was read for update.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>60<DD> NOTOPEN (RESP2 60) is returned for one of the
 * following reasons:
 * <UL>
 * <LI>The requested file is CLOSED and
 * UNENABLED. The CLOSED, UNENABLED
 * state is reached after a CLOSE request has
 * been received against an OPEN ENABLED
 * file and the file is no longer in use. You can
 * also make CLOSED, UNENABLED the initial
 * state, by specifying STATUS(UNENABLED)
 * and OPENTIME(FIRSTREF) on the FILE
 * resource definition.
 * <LI>The requested file is OPEN and in use by
 * other transactions, but a CLOSE request
 * against the file has been received.
 * <LI>A DELETE command is issued against a data
 * set that is quiesced, or is being quiesced, as
 * a result of a SET DSNAME QUIESCED or
 * IMMQUIESCED command.
 * </UL>
 * </DL>
 * <p>This condition does not occur if the request is made to
 * either a CLOSED, ENABLED file or a CLOSED,
 * DISABLED file. In the first case, the file is opened as
 * part of executing the request. In the second case, the
 * DISABLED condition occurs.
 * <p>This condition also cannot occur when deleting a record
 * just read for update.
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>107<DD> The NOSUSPEND keyword is specified for the
 * deletion of a record that is locked by a VSAM
 * active lock (see "Retained and active locks").
 * <p>If the request specifies the GENERIC keyword, all
 * possible records are deleted except for the locked
 * records which remain. The number of records
 * deleted is returned by NUMREC.
 * <p>Default action: abend the task with code AEX9.
 * </DL>
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The DELETE is issued against a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * <p><b>Description</B>
 * <p><b>Retained and active locks</b>:  RECORDBUSY refers to active
 * locks and LOCKED refers to retained locks:
 * <UL>
 * <LI>DELETE requests for records that have  retained locks
 * are always rejected with a LOCKED response.
 * <LI>DELETE requests for records that have  active locks wait
 * for the lock to be released, except when the
 * NOSUSPEND keyword is specified, in which case CICS
 * returns the RECORDBUSY response.
 * </UL>
 * @example
 * The following example shows you how to delete a group of
 * records in a VSAM data set:
 * <pre>
 * EXEC CICS DELETE
 *   FILE('MASTVSAM')
 *   RIDFLD(ACCTNO)
 *   KEYLENGTH(len)
 *   GENERIC
 *   NUMREC(NUMDEL)
 * </pre>
 * @param FILE(filename)
 *                  specifies the name of the file to be accessed.
 *                  <p>If SYSID is specified, the data set to which this file refers
 *                  is assumed to be on a remote system irrespective of
 *                  whether the name is defined in the FCT. Otherwise, the
 *                  FCT entry is used to find out whether the data set is on
 *                  a local or a remote system.
 * @param GENERIC
 *                  (VSAM KSDS only) specifies that the search key is a generic key with a
 *                  length specified in the KEYLENGTH option. The search
 *                  for a record is satisfied when a record is found with a
 *                  key that has the same starting characters (generic key)
 *                  as those specified.
 * @param KEYLENGTH(data-value)
 *                  specifies the length (halfword binary) of the key that has
 *                  been specified in the RIDFLD option, except when RBA
 *                  or RRN is specified, in which case it is not valid. This
 *                  option must be specified if GENERIC is specified, and it
 *                  may be specified whenever a key is specified. However,
 *                  if the length specified is different from the length defined
 *                  for the data set and the operation is not generic, the
 *                  INVREQ condition occurs.
 *                  <p>The INVREQ condition also occurs if you specify
 *                  GENERIC, and the KEYLENGTH is not less than that
 *                  specified in the VSAM definition.
 *                  <p>You should not specify a zero value of KEYLENGTH
 *                  because the results of this are unpredictable.
 * @param NOSUSPEND
 *                  (RLS only) specifies that the request is not to wait if VSAM is
 *                  holding an active lock against the record, including
 *                  records locked as the result of a DEADLOCK.
 * @param NUMREC(data-area)
 *                  (VSAM KSDS only) specifies a halfword binary data area that CICS sets to
 *                  the number of deleted records.
 * @param RBA
 *                  (VSAM KSDS base data sets only, not paths) specifies
 *                  that the record identification field specified in the
 *                  RIDFLD option contains a relative byte address. This
 *                  option should be used only when deleting records using
 *                  relative byte addresses instead of keys to identify the
 *                  records.
 *                  <p>You cannot use RBA for:
 *                  <UL>
 *                  <LI>User-maintained data tables
 *                  <LI>Coupling facility data tables
 *                  <LI>Any files opened in RLS access mode
 *                  <LI>KSDS files that are capable of holding more than
 *                  4GB of data
 *                  </UL>
 * @param RIDFLD(data-area)
 *                  specifies the record identification field. The contents can
 *                  be a key, a relative byte address, or a relative record
 *                  number. For a relative byte address or a relative record
 *                  number, the format of this field must be fullword binary.
 *                  For a relative byte address, the RIDFLD can be greater
 *                  than or equal to zero. For a relative record number, the
 *                  RIDFLD can be greater than or equal to 1.
 *                  <p>The contents must be a key for user-maintained data
 *                  tables or coupling facility data tables.
 *                  <p>You must specify this option if you have also specified
 *                  GENERIC.
 * @param RRN
 *                  (VSAM RRDS only) specifies that the record identification field specified in
 *                  the RIDFLD option contains a relative record number.
 *                  This option should be used only with files referencing
 *                  relative record data sets.
 * @param SYSID(systemname)
 *                  specifies the name (1-4 characters) of the system the
 *                  request is directed to.
 *                  <p>If you specify SYSID, and omit both RBA and RRN, you
 *                  must also specify KEYLENGTH; it cannot be found in
 *                  the FCT.
 * @param TOKEN(data-area)
 *                  Specifies, as a fullword binary value, a unique identifier
 *                  for this DELETE request. Use this to associate the
 *                  delete request with a record returned on a previous
 *                  READ UPDATE or BROWSE for UPDATE request. The
 *                  value to use is the value returned in the TOKEN held by
 *                  the earlier READ UPDATE or BROWSE for UPDATE
 *                  request.
 *                  <p>TOKEN can be function shipped. However, if a request
 *                  specifying TOKEN is function shipped to a member of
 *                  the CICS family of products that does not recognize this
 *                  option, the request fails.
 */
function "DELETE FILE"(
   FILE(filename),
   GENERIC,
   KEYLENGTH(data-value),
   NOSUSPEND,
   NUMREC(data-area),
   RBA,
   RIDFLD(data-area),
   RRN,
   SYSID(systemname),
   TOKEN(data-area)
   );

/**
 * Delete the named counter
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DELETE COUNTER(name)_____________________________________________> |
 * |                            |_POOL(name)_|                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><b>Description</b>
 * <p>These commands delete the named counter from the
 * specifed pool. COUNTER operates on a fullword counter,
 * and DCOUNTER operates on a doubleword counter.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The pool selection parameter contains characters
 * that are not allowed, or embedded spaces.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param COUNTER(name)
 *               specifies the name of the fullword counter to be deleted.
 *               The name can be up to 16 alphanumeric characters. If
 *               name is a variable that contains a name that is less than
 *               16 characters, the name must be padded with trailing
 *               blanks.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "DELETE COUNTER"(
   COUNTER(name),
   POOL(poolname),
   );

/**
 * Delete the named counter
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DELETE DCOUNTER(name)____________________________________________> |
 * |                            |_POOL(name)_|                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><b>Description</b>
 * <p>These commands delete the named counter from the
 * specifed pool. COUNTER operates on a fullword counter,
 * and DCOUNTER operates on a doubleword counter.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The pool selection parameter contains characters
 * that are not allowed, or embedded spaces.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DCOUNTER(name)
 *               specifies the name of the doubleword counter to be
 *               deleted. The name can be up to 16 alphanumeric
 *               characters. If  name is a variable that contains a name
 *               that is less than 16 characters, the name must be
 *               padded with trailing blanks.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "DELETE DCOUNTER"(
   DCOUNTER(name),
   POOL(poolname),
   );


/**
 * Delete all transient data.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DELETEQ TD__QUEUE(name)_________________________><                 |
 * |                              |_SYSID(systemname)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, INVREQ, ISCINVREQ, NOTAUTH, QIDERR, SYSIDERR     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>DELETEQ TD deletes all the transient data associated with a
 * particular intrapartition destination (queue). All storage
 * associated with the destination is released (deallocated).
 * Note that you cannot use this command to delete an
 * extrapartition transient data queue. An attempt to do so
 * results in an INVREQ condition.
 *
 * @conditions
 * <DL>
 * <DT>DISABLED<DD>
 * occurs when the queue has been disabled.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if DELETEQ names an extrapartition queue.
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * occurs when the request cannot be performed because
 * use of the queue has been restricted owing to a unit of
 * work failing in-doubt. This can happen on any request
 * for a logically-recoverable queue defined with
 * WAIT(YES) and WAITACTION(REJECT) in the
 * TDQUEUE resource definition.
 * <p>Specify WAIT(YES) and WAITACTION(QUEUE) in the
 * TDQUEUE resource definition if you want the transaction
 * to wait.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * occurs if the symbolic destination to be used with
 * DELETEQ TD cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs when the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the remote
 * system is closed.
 * <p>Default action: terminate the task abnormally.
 *
 * @param QUEUE(name)
 *               specifies the symbolic name (1-4 alphanumeric
 *               characters) of the queue to be deleted. The named
 *               queue must be defined to CICS.
 *               <p>If SYSID is specified, the queue is assumed to be on a
 *               remote system, irrespective of how it is defined.
 *               Otherwise the resource definition is used to find out
 *               whether the queue is on a local or a remote system.
 * @param SYSID(systemname)
 *               (remote systems only) specifies the name (1-4
 *               characters) of the system the request is directed.
 */
function "DELETEQ TD"(
   QUEUE(name),
   SYSID(systemname),
   );

/**
 * Delete a temporary storage queue.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DELETEQ TS__QUEUE(name)_________________________><                 |
 * |                              |_SYSID(systemname)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, ISCINVREQ, NOTAUTH, QIDERR, SYSIDERR               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>DELETEQ TS deletes all the temporary data associated with
 * a temporary storage queue. All storage associated with the
 * queue is freed.
 * <p>You should delete temporary data as soon as possible to
 * avoid using excessive amounts of storage.
 * <p>When a recoverable temporary storage queue is deleted, you
 * must issue a syncpoint before issuing a subsequent WRITEQ
 * TS for the same queue.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs in either of the following situations:
 * <UL>
 * <LI>the queue was created by CICS internal code.
 * <LI>the queue name specified consists solely of binary
 * zeroes.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * occurs when the request cannot be performed because
 * use of the queue has been restricted owing to a unit of
 * work failing in-doubt.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * occurs when the specified queue cannot be found in
 * either main or auxiliary storage.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>When the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION)
 * <LI>When the link to the remote system is closed
 * <LI>When the CICS region in which the temporary
 * storage command is executed fails to connect to the
 * TS server managing the TS pool that supports the
 * referenced temporary storage queue. (For example,
 * this can happen if the CICS region is not authorized
 * to access the temporary storage server).
 * <p>SYSIDERR can also occur if the temporary storage
 * server has not been started, or because the server
 * has failed (or been stopped) while CICS continues
 * executing.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param QUEUE(name)
 *               specifies the symbolic name (1-8 characters) of the
 *               queue to be deleted. The name may not consist solely of
 *               binary zeros and must be unique within the CICS
 *               system.
 * @param QNAME(name)
 *               an alternative to QUEUE, QNAME specifies the symbolic
 *               name (1-16 characters) of the queue to be deleted. The
 *               name may not consist solely of binary zeros and must
 *               be unique within the CICS system.
 * @param SYSID(systemname)
 *               (remote and shared queues only) specifies the system
 *               name (1-4 characters) identifying the remote system or
 *               shared queue pool to which the request is directed.
 */
function "DELETEQ TS"(
   QUEUE(name),
   QNAME(name),
   SYSID(systemname),
   );

/**
 * Schedule use of a resource by a task (dequeue).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DEQ__RESOURCE(data-area)_________________________________________> |
 * |                               |_LENGTH(data-value)_|                   |
 * |                                                                        |
 * |     _LUW_______________                                                |
 * | >__|___________________|__><                                           |
 * |    |_MAXLIFETIME(cvda)_|                                               |
 * |    |_TASK______________|                                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><b>Note for dynamic transaction routing</b>
 * Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing,
 * unless the name specified in RESOURCE matches the name specified in an installed ENQMODEL resource definition, that
 * has sysplex-wide scope. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>DEQ causes a resource currently enqueued on by the task to
 * be released for use by other tasks.
 * <p>If a task enqueues on, but does not dequeue from, a
 * resource, CICS automatically releases the resource during
 * syncpoint processing or when the task is terminated. A
 * resource in the context of this command is any string of
 * 1-255 bytes, established by in-house standards, to protect
 * against conflicting actions between tasks, or to cause
 * single-threading within a program.
 * <p>When issuing the DEQ command, the resource to be
 * dequeued from must be identified by the method used when
 * enqueuing on the resource. If no enqueue has been issued
 * for the resource, the dequeue is ignored.
 * <p>If more than one ENQ command is issued for a resource by
 * a task, that resource remains owned by the task until the
 * task issues a matching number of DEQ commands.
 * <p>When an EXEC CICS DEQ (or ENQ) command is issued for
 * a resource whose name matches that of an installed
 * ENQMODEL resource definition, CICS checks the value of
 * the ENQSCOPE attribute to determine whether the scope is
 * local or sysplex-wide. If the ENQSCOPE attribute is left blank
 * (the default value), CICS treats the DEQ as local to the
 * issuing CICS region. If no ENQMODEL matches the
 * resource name, the scope of the DEQ command is local.
 * See the  CICS Resource Definition Guide for more
 * information about the ENQMODEL resource definition.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>2<DD> The MAXLIFETIME option is set with an incorrect
 * CVDA.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The value you specified for the LENGTH option is
 * outside the range 1 through 255.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following examples show how to dequeue from a
 * resource:
 * <pre>
 * EXEC CICS DEQ
 *   RESOURCE(RESNAME)
 *
 * EXEC CICS DEQ
 *   RESOURCE(SOCSECNO)
 *   LENGTH(8)
 * </pre>
 * @param LENGTH(data-value)
 *               specifies that the resource to be dequeued from has a
 *               length given by the data value. The data value is a
 *               halfword binary value in the range 1 through 255. If the
 *               value you specify is outside this range, a LENGERR
 *               condition occurs. If the LENGTH option is specified in an
 *               ENQ command, it must also be specified in the DEQ
 *               command for that resource, and the values of these
 *               options must be the same.
 * @param MAXLIFETIME(cvda)
 *               specifies the duration of the ENQ being released. CVDA
 *               values are:
 *               <DL>
 *               <DT>UOW<DD>
 *               The ENQ was acquired with a duration of a unit of
 *               work. This is the default value.
 *               <p><b>Note</b>:  For compatibility with previous releases of
 *               CICS, a CVDA value of LUW is also
 *               supported.
 *               <DT>TASK<DD>
 *               The ENQ was acquired with a duration of a task.
 *               </DL>
 * @param RESOURCE(data-area)
 *               specifies either an area whose address represents the
 *               resource to be dequeued from, or a variable that
 *               contains the resource (an employee name, for example).
 *               In the latter case, you must use the LENGTH option.
 */
function "DEQ"(
   LENGTH(data-value),
   MAXLIFETIME(cvda),
   RESOURCE(data-area),
   );

/**
 * Create a document.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DOCUMENT__CREATE__DOCTOKEN(data-area)____________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |______FROM(data-area)_______LENGTH(data-value)_|  |                |
 * |      |  |_TEXT(data-area)___|                         |                |
 * |      |  |_BINARY(data-area)_|                         |                |
 * |      |                                                |                |
 * |      |_FROMDOC(data-area)_____________________________|                |
 * |      |_TEMPLATE(name)_________________________________|                |
 * |                                                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_SYMBOLLIST(data-area)_LISTLENGTH(data-value)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DOCSIZE(data-area)___|  |_HOSTCODEPAGE(name)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTFND, SYMBOLERR, TEMPLATERR                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>DOCUMENT CREATE signals the start of the document
 * creation process. The document being created can be an
 * empty document, or it can be based on an existing
 * document, a template, or data contained in an application
 * buffer.
 *
 * @param BINARY(data-area)
 * specifies a buffer of data which is to be used as the
 * contents of the new document being created. The data
 * is copied unchanged to the document content and no
 * attempt is made to parse the data for symbol substition.
 * The purpose of the BINARY option is to allow the
 * application to insert blocks of data that must not undergo
 * conversion to a client code page when the data is sent.
 * @param DOCSIZE(data-area)
 * specifies a binary fullword area that will be updated with
 * the current size of the document in bytes. This is the
 * maximum size of the buffer needed to contain a copy of
 * the document when a RETRIEVE command is issued.
 * @param DOCTOKEN(data-area)
 * specifies a data area to contain the symbolic name of
 * the document. The area must be 16 bytes in length and
 * will be set to a CICS-generated name by which the
 * document can be referred to in later commands.
 * @param FROM(data-area)
 * specifies that data supplied by the application is to be
 * used to create the contents of the new document. The
 * data content could be a template or a document which
 * was created and retrieved. If the data is a template,
 * symbol substitution will take place where the symbols
 * exist in the symbol table. If the data is a previously
 * retrieved document, the conversion and bookmark tags
 * which were inserted during retrieval will be removed
 * from the content and stored in the internal format
 * required by the API commands. Note that symbol
 * substitution will not be attempted on any unresolved
 * symbols contained in a retrieved document.
 * @param FROMDOC(data-area)
 * specifies the symbolic name (see the DOCTOKEN
 * option) of a document whose contents are to be copied
 * to the new document being created. All bookmark and
 * conversion tags are copied to the new document. The
 * symbol table will be not be copied.
 * @param HOSTCODEPAGE(name)
 * dspecifies the name of the host codepage that the data
 * being added is encoded in. This option applies to the
 * TEXT, SYMBOL and TEMPLATE options only. The
 * name must be eight characters long; if it is shorter than
 * eight characters it must be padded on the right with
 * blanks.
 * @param LENGTH(data-value)
 * specifies the length, as a fullword binary value, of the
 * application supplied buffer.
 * @param LISTLENGTH(data-value)
 * specifies the length, as a fullword binary value, of the
 * symbol list.
 * @param SYMBOLLIST(data-area)
 * specifies a buffer which contains a symbol list. A symbol
 * list is a character string consisting of one or more
 * symbol definitions separated by ampersands. Each
 * symbol definition consists of a name, an equals sign,
 * and a value.
 * <p>The name is case-sensitive. It can contain only
 * uppercase and lowercase letters, numbers, and
 * underscores ("_"). Unlike the symbols in the template,
 * the names in the symbol list have neither an ampersand
 * at the beginning, nor a semicolon at the end. For
 * example, the symbol &mytitle; in the template
 * corresponds to the name  mytitle in the symbol list.
 * Symbols in the symbol list are separated by the &
 * character. For example:
 * <pre>
 * applid=IYCQ&jobname=test
 * </pre>
 * <p>The following restrictions apply to the characters allowed
 * in the value in the symbol list:
 * <UL>
 * <LI>A percent sign may be followed by two hexadecimal
 * digits. When the value is put into the symbol table,
 * the percent sign and the two hexadecimal digits
 * following it are interpreted as the EBCDIC
 * equivalent of the single ASCII character denoted by
 * the two digits. If you want a percent sign in the
 * value in the symbol table, you may put %25 in the
 * symbol list. If the characters following the percent
 * sign are not two valid hexadecimal digits, the
 * percent sign and the following characters are put
 * into the symbol table as they appear in the symbol
 * list.
 * <LI>An ampersand is not allowed. If you want an
 * ampersand in the value in the symbol table, you
 * must put %26 in the value in the symbol list.
 * <LI>When the value is put into the symbol table, a plus
 * sign is interpreted as a space. If you want a plus
 * sign in the value in the symbol table, you must put
 * %2B in the value in the symbol list.
 * <LI>If you want a space in the value in the symbol table,
 * the value in your symbol list may contain a space, a
 * plus sign, or %20.
 * </ul>
 * @param TEMPLATE(name)
 * specifies the 48-byte name of a template. The template
 * must be defined to CICS using RDO. If the name is
 * shorter than 48 bytes, it must be padded on the right
 * with blanks.
 * @param TEXT(data-area)
 * specifies a buffer of data which is to be used as the
 * contents of the new document being created. The data
 * is copied unchanged to the document content and no
 * attempt is made to parse the data for symbol substition.
 * The data will be marked as requiring conversion to the
 * client code page when the document is sent.
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values are:
 * <DL compact>
 * <DT>1<DD> The retrieved document specified on the
 * FROM option is not in a valid RETRIEVE
 * format.
 * </DL>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>2<DD> The document specified on the FROMDOC option
 * could not be found or was named incorrectly.
 * <DT>3<DD> The template specified on the TEMPLATE option
 * could not be found or was named incorrectly.
 * <DT>7<DD> The host codepage specified on the
 * HOSTCODEPAGE option could not be found or
 * was named incorrectly.
 * </DL>
 * <DT>SYMBOLERR<DD>
 * a symbol specified in the symbol list does not conform to
 * the naming rules for symbols. RESP2 contains the offset
 * of the symbol in the list.
 * <DT>TEMPLATERR<DD>
 * an invalid #set, #include or #echo command has been
 * encountered while processing the supplied template
 * data. RESP2 contains the offset of the invalid command.
 * </dl>
 */
function "DOCUMENT CREATE"(
   BINARY(data-area),
   DOCSIZE(data-area),
   TEMPLATE(name),
   TEXT(data-area),
   DOCTOKEN(data-area),
   FROM(data-area),
   FROMDOC(data-area),
   HOSTCODEPAGE(name),
   LENGTH(data-value),
   LISTLENGTH(data-value),
   SYMBOLLIST(data-area),
   );

/**
 * Insert document objects.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DOCUMENT__INSERT__DOCTOKEN(data-area)____________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |______FROM(data-area)_______LENGTH(data-value)_|  |                |
 * |      |  |_TEXT(data-area)___|                         |                |
 * |      |  |_BINARY(data-area)_|                         |                |
 * |      |                                                |                |
 * |      |_SYMBOL(name)___________________________________|                |
 * |      |_FROMDOC(data-area)_____________________________|                |
 * |      |_TEMPLATE(name)_________________________________|                |
 * |      |_BOOKMARK(name)_________________________________|                |
 * |                                                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DOCSIZE(data-area)___|  |_HOSTCODEPAGE(name)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_AT(name)________________|                                         |
 * |                |_TO(name)_|                                            |
 * |
 * |                                                                        |
 * | Conditions: DUPREC, INVREQ, NOTFND, TEMPLATERR                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * DOCUMENT INSERT allows the application to insert
 * document objects at insertion points within the document.
 * The insertion points (bookmarks) define relative positions
 * within the document. Bookmarks must be defined before
 * being referenced. Data is always inserted after the position
 * identified by the bookmark.
 *
 * @conditions
 * <DL>
 * <DT>DUPREC<DD>
 * the bookmark has already been defined.
 * <DT>INVREQ<DD>
 * RESP2 values are:
 * <DL compact>
 * <DT>0<DD> The bookmark specified on the TO option
 * appears before the bookmark specifed on
 * the AT bookmark.
 * <DT>1<DD> The retrieved document specified on the
 * FROM option is not in a valid RETRIEVE
 * format.
 * <DT>2<DD> The bookmark name on the BOOKMARK
 * option is invalid.
 * </DL>
 * <DT>NOTFND<DD>
 * one of the following documents or templates could not
 * be found, or its name was incorrect.
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The document specified on the DOCUMENT
 * option.
 * <DT>2<DD> The document specified on the FROMDOC option.
 * <DT>3<DD> The template specified on the TEMPLATE option.
 * <DT>4<DD> The document specified on the SYMBOL option.
 * <DT>5<DD> The document specified on the AT option.
 * <DT>6<DD> The document specified on the TO option.
 * <DT>7<DD> The document specified on the HOSTCODEPAGE
 * option.
 * </dl>
 * <DT>TEMPLATERR<DD>
 * an invalid #set, #include or #echo command has been
 * encountered while processing the supplied template
 * data. RESP2 contains either a zero (if the maximum of
 * 32 levels of embedded templates is exceeded), or the
 * offset of the invalid command.
 * </DL>
 * @param AT(name)
 *                 specifies the 16-byte symbolic name of a bookmark
 *                 which identifies the position of the insertion point in the
 *                 document. Data is inserted after the bookmark, and any
 *                 data following the bookmark is shifted down. The
 *                 application can use a combination of the AT and TO
 *                 options to perform an overlay operation. If the AT
 *                 operand is not specified, the data is inserted at the end
 *                 of the document. A pre-defined bookmark of TOP is
 *                 provided to allow the application to insert data at the
 *                 beginning of the document.
 * @param BINARY(data-area)
 *                 specifies a buffer of data to be inserted into the
 *                 document. The data is copied unchanged to the insertion
 *                 point in the document, and no attempt is made to parse
 *                 the data for symbol substitution. The BINARY option
 *                 allows the application to insert blocks of data that must
 *                 not undergo conversion to a client code page when the
 *                 data is sent.
 * @param BOOKMARK(name)
 *                 specifies a bookmark to be inserted into the document.
 *                 A bookmark is a symbolic name which identifies an
 *                 insertion point in the document. The name can be up to
 *                 16 characters in length, and must not contain any
 *                 imbedded spaces.
 * @param DOCSIZE(data-value)
 *                 specifies a binary fullword area to be updated with the
 *                 current size of the document in bytes. This is the
 *                 maximum size of the buffer needed to contain a copy of
 *                 the document when a RETRIEVE command is issued.
 * @param DOCTOKEN(data-area)
 *                 specifies the 16-byte symbolic name of the document
 *                 into which data is to be inserted.
 * @param FROM(data-area)
 *                 specifies that a buffer of data supplied by the application
 *                 is to be inserted into the document. The data content
 *                 can be a template or a document that was previously
 *                 created and retrieved. If the data is a template, symbol
 *                 substitution takes place where the symbols exist in the
 *                 symbol table. If the data is a previously retrieved
 *                 document, the conversion and bookmark tags which
 *                 were inserted during the retrieval will be removed from
 *                 the content and stored in the internal form required by
 *                 the API commands. Note that symbol substitution will not
 *                 be attempted on any unresolved symbols contained in a
 *                 retrieved document.
 * @param FROMDOC(data-area)
 *                 specifies the symbolic name of a document (see the
 *                 DOCTOKEN option) whose contents are copied to the
 *                 insertion point of the target document. All bookmarks
 *                 and conversion tags are copied to the target document.
 *                 The symbol table is not copied.
 * @param HOSTCODEPAGE(name)
 *                 specifies the symbolic name (see the DOCTOKEN
 *                 option) of the host codepage that the data being added
 *                 is encoded in. This option applies to the TEXT, SYMBOL
 *                 and TEMPLATE options only. The name must be eight
 *                 characters long; if it is shorter than eight characters, it
 *                 must be padded on the right with blanks.
 * @param LENGTH(data-value)
 *                 specifies the length, as a fullword binary value, of the
 *                 buffer containing the TEXT, BINARY or FROM data.
 * @param SYMBOL(name)
 *                 specifies the 32-byte name of a symbol in the symbol
 *                 table. The data associated with the symbol in the symbol
 *                 table is inserted, but not the symbol itself.
 * @param TEMPLATE(name)
 *                 specifies the 48-byte name of a template. The template
 *                 must be defined to CICS using RDO. If the name is less
 *                 than 48 bytes, it must be padded on the right with
 *                 blanks.
 * @param TEXT(data-area)
 *                 specifies a buffer of data to be inserted into the
 *                 document. The data is copied unchanged to the insertion
 *                 point in the document, and no attempt is made to parse
 *                 the data for symbol substitution. When the document is
 *                 sent, it is marked as requiring conversion to the client
 *                 code page.
 * @param TO(name)
 *                 specifies the symbolic name of a bookmark identifying
 *                 the end position of an overlay operation. Data between
 *                 the bookmarks identified by the AT and TO operands is
 *                 deleted, and new data is inserted in its place. It is
 *                 possible to delete data between two bookmarks by
 *                 specifying a null string on the TEXT or BINARY option
 *                 with a LENGTH of zero.
 */
function "DOCUMENT INSERT"(
   AT(name),
   BINARY(data-area),
   BOOKMARK(name),
   DOCSIZE(data-value),
   DOCTOKEN(data-area),
   FROM(data-area),
   FROMDOC(data-area),
   HOSTCODEPAGE(name),
   LENGTH(data-value),
   SYMBOL(name),
   TEMPLATE(name),
   TEXT(data-area),
   TO(name),
   );

/**
 * Copy a document into the application's own buffer.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DOCUMENT RETRIEVE__DOCTOKEN(data-area)____INTO(data-area)________> |
 * |                                                                        |
 * | >__LENGTH(data-value)__MAXLENGTH(data-value)_________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CLNTCODEPAGE(name)_|  |_DATAONLY_|                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, NOTFND                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>DOCUMENT RETRIEVE allows the application to obtain a
 * copy of the document in its own buffer, which it can then
 * manipulate directly. The document is managed by CICS, and
 * the application does not have direct access to the buffer
 * containing the contents of the document. The document
 * exists only for the duration of the current transaction, so the
 * application must retrieve the document and store it if the
 * document is to exist over transaction boundaries. The
 * retrieved document can be used as a basis for a new
 * document by using the FROM option of the DOCUMENT
 * CREATE command.
 * <p>When the document is retrieved, CICS inserts tags into the
 * document contents to identify the bookmarks and to delimit
 * the blocks that do not require codepage conversion. To
 * request a copy without tags, specify DATAONLY. The
 * extracted document can also be converted into a single client
 * codepage by using the CLNTCODEPAGE option.
 *
 * @conditions
 * <DL>
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> MAXLENGTH is less than or equal to zero. The
 * document is truncated.
 * <DT>2<DD> The length of the receiving buffer is zero, or is too
 * short to contain the document contents. The
 * document is truncated.
 * </DL>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The document has not been created, or the name
 * is incorrectly specified.
 * <DT>7<DD> The specified client codepage can not be found.
 * </dl>
 * </dl>
 * @param CLNTCODEPAGE(name)
 *                 specifies the name of the client codepage to which the
 *                 data should be converted. The name can be up to 40
 *                 characters in length; if it is shorter than 40 characters, it
 *                 must be padded on the right with blanks.
 * @param DATAONLY
 *                 specifies that the data should be retrieved without any
 *                 imbedded tags.
 * @param DOCTOKEN(data-area)
 *                 specifies the 16-byte symbolic name of the document to
 *                 be retrieved.
 * @param INTO(data-area)
 *                 specifies the buffer that is to contain the copy of the
 *                 document content.
 * @param LENGTH(data-value)
 *                 specifies the length, as a fullword binary value, of the
 *                 amount of data being returned to the application.
 * @param MAXLENGTH(data-value)
 *                 specifies the length, as a fullword binary value, of the
 *                 maximum amount of data the buffer can receive.
 */
function "DOCUMENT RETRIEVE"(
   CLNTCODEPAGE(name),
   DATAONLY,
   DOCTOKEN(data-area),
   INTO(data-area),
   LENGTH(data-value),
   MAXLENGTH(data-value),
   );

/**
 * Add symbols and values to symbol table.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DOCUMENT SET__DOCTOKEN(data-area)________________________________> |
 * |                                                                        |
 * | >____SYMBOL(name)__VALUE(data-area)_____LENGTH(data-value)___________> |
 * |    |_SYMBOLLIST(data-area)__________|                                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NOTFND, SYMBOLERR                                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>DOCUMENT SET allows the application to add symbols and
 * their associated values to the symbol table. If the symbol
 * being added already exists in the table, it is replaced by the
 * new definition.
 *
 * @conditions
 * <DL>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The document has not been created or the name
 * is incorrectly specified.
 * </DL>
 * <DT>SYMBOLERR<DD>
 * a symbol name is invalid. RESP2 values:
 * <DL compact>
 * <DT>0<DD> SYMBOLLIST was not used.
 * offset RESP2 contains the offset of the invalid symbol in
 * the list.
 * </DL>
 * </DL>
 * @param DOCTOKEN(data-area)
 *               specifies the 16-byte symbolic name of the document
 *               that owns the symbol table.
 * @param LENGTH(data-value)
 *               specifies the length, as a fullword binary value, of the
 *               buffer containing the data value associated with the
 *               symbol or the length of the buffer containing the symbol
 *               list when the SYMBOLLIST option is used.
 * @param SYMBOL(name)
 *               specifies the name of the symbol that is to be added to
 *               the table. The name can be 1 to 32 characters in length
 *               with no embedded spaces.
 * @param SYMBOLLIST(data-area)
 * specifies a buffer which contains a symbol list. A symbol
 * list is a character string consisting of one or more
 * symbol definitions separated by ampersands. Each
 * symbol definition consists of a name, an equals sign,
 * and a value.
 * <p>The name is case-sensitive. It can contain only
 * uppercase and lowercase letters, numbers, and
 * underscores ("_"). Unlike the symbols in the template,
 * the names in the symbol list have neither an ampersand
 * at the beginning, nor a semicolon at the end (for
 * example, the symbol :&mytitle; in the template
 * corresponds to the name  mytitle in the symbol list).
 * Symbols in the symbol list are separated by the &
 * character. For example:
 * <pre>
 * applid=IYCQ&jobname=test
 * </pre>
 * <p>The following restrictions apply to the characters allowed
 * in the value in the symbol list:
 * <UL>
 * <LI>A percent sign may be followed by two hexadecimal
 * digits. When the value is put into the symbol table,
 * the percent sign and the two hexadecimal digits
 * following it are interpreted as the EBCDIC
 * equivalent of the single ASCII characcter denoted
 * by the two digits. If you want a percent sign in the
 * value in the symbol table, you may put %25 in the
 * symbol list. If the characters following the percent
 * sign are not two valid hexadecimal digits, the
 * percent sign and the following characters are put
 * into the symbol table as they appear in the symbol
 * list.
 * <LI>An ampersand is not allowed. If you want an
 * ampersand in the value in the symbol table, you
 * must put %26 in the value in the symbol list.
 * <LI>When the value is put into the symbol table, a plus
 * sign is interpreted as a space. If you want a plus
 * sign in the value in the symbol table, you must put
 * %2B in the value in the symbol list.
 * <LI>If you want a space in the value in the symbol table,
 * the value in your symbol list may contain a space, a
 * plus sign, or %20.
 * </UL>
 * @param VALUE(data-area)
 *               specifies an area containing the value to be associated
 *               with the SYMBOL.
 */
function "DOCUMENT SET"(
   DOCTOKEN(data-area),
   LENGTH(data-value),
   SYMBOL(name),
   SYMBOLLIST(data-area),
   VALUE(data-area),
   );

/**
 * Request a transaction dump.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__DUMP TRANSACTION__DUMPCODE(name)_________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)____LENGTH(data-value)____|  |_COMPLETE_|          |
 * |                       |_FLENGTH(data-value)_|                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TRT_|                                                             |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_| DUT8 |__LENGTHLIST(data-area)__NUMSEGMENTS(data-area)_|         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TASK_|  |_STORAGE_|  |_PROGRAM_|  |_TERMINAL_|  |_TABLES_|        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DCT_|  |_FCT_|  |_PCT_|  |_PPT_|  |_SIT_|  |_TCT_|                |
 * |                                                                        |
 * | >_________________________><                                           |
 * |    |_DUMPID(data-area)_|                                               |
 * |                                                                        |
 * | DUT8:                                                                  |
 * | |__SEGMENTLIST(data-area)__|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, NOSPACE, NOSTG, NOTOPEN, OPENERR,           |
 * | SUPPRESSED                                                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * DUMP TRANSACTION dumps all, a series, or any single
 * main storage area related to a task, any or all of the CICS
 * tables (DCT, FCT, PCT, PPT, SIT, or TCT), or all of these
 * together.
 * <p>Note that if you issue a DUMP TRANSACTION for a
 * DUMPCODE that is defined in the transaction dump table
 * with SYSDUMP, you also get a system dump.
 * <P>If there is no entry in the system dump table for the specified
 * DUMPCODE, a temporary entry is made. This entry is lost
 * on the next CICS start. The system dump table is described
 * in the  CICS Problem Determination Guide.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>13<DD> An incorrect DUMPCODE is specified.
 * DUMPCODE contains unprintable characters, or
 * leading or imbedded blanks.
 * <p>The dump is produced but no entry is added to
 * the system dump table.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>9<DD> The SDUMP process is not authorized.
 * <DT>10<DD> An error occurred during system dumping.
 * <DT>13<DD> The CICS routine issuing the SDUMP is unable to
 * establish a recovery routine (FESTAE).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>4<DD> The transaction dump is incomplete due to lack of
 * space.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSTG<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>5<DD> CICS has run out of working storage.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>6<DD> The current CICS dump data set is not open.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>OPENERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>7<DD>There is an error on opening, closing, or writing to
 * the current CICS dump routine.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The transaction dump is suppressed by
 * MAXIMUM in table.
 * <DT>2<DD> The transaction dump is suppressed by
 * NOTRANDUMP in table.
 * <DT>3<DD> The transaction dump is suppressed by a user exit
 * program.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows how to request a dump of all
 * the task-related storage areas, the terminal control table, and
 * a specified data area:
 * <pre>
 * EXEC CICS DUMP TRANSACTION
 *   DUMPCODE('name')
 *   FROM(data-area)
 *   LENGTH(data-value)
 * </pre>
 * This second example (written in PL/I) shows you a case in
 * which five task-related storage areas are dumped:
 * <pre>
 * DCL storage_address(5) POINTER,
 *   storage_length(5)  FIXED BIN(31),
 *   nsegs FIXED BIN(31);
 * storage_address(1) = ADDR(areal);
 * storage_length(1)  = CSTG(areal); . . .
 * nsegs = 5;
 * EXEC CICS DUMP TRANSACTION
 *   DUMPCODE('name')
 *   SEGMENTLIST(storage_address)
 *   LENGTHLIST(storage_length)
 *   NUMSEGMENTS(nsegs);
 * </pre>
 * @param COMPLETE
 *                 dumps all main storage areas related to a task, all the
 *                 CICS tables, and the DL/I control blocks.
 * @param DCT
 *                 dumps the destination control table.
 * @param DUMPCODE(name)
 *                 specifies a name (1-4 characters) that identifies the
 *                 dump. If the name contains any leading or imbedded
 *                 blanks, the dump is produced but INVREQ is raised. No
 *                 entry is added to the system dump table.
 *                 <p>If you omit all the options except DUMPCODE, you get
 *                 the same dump as if you specified TASK, but without the
 *                 DL/I control blocks.
 * @param FCT
 *                 dumps the file control table.
 * @param FLENGTH(data-value)
 *                 specifies the length (fullword binary value) of the storage
 *                 area (specified in the FROM option) that is to be
 *                 dumped. The maximum length that you can specify is
 *                 16 777 215 bytes.
 *                 <p>FLENGTH and LENGTH are mutually exclusive.
 * @param FROM(data-area)
 *                 dumps the specified data area, which must be a valid
 *                 area; that is, storage allocated by the operating system
 *                 within the CICS region. In addition, the following areas
 *                 are dumped:
 *                 <UL>
 *                 <LI>Task control area (TCA) and, if applicable, the
 *                 transaction work area (TWA).
 *                 <LI>Common system area (CSA), including the user's
 *                 portion of the CSA (CWA).
 *                 <LI>If TRAN is specified for the TRTRANTY SIT
 *                 parameter, only the trace entries associated with the
 *                 current task are formatted. If TRTRANTY=ALL is
 *                 specified, the entire internal trace table is formatted.
 *                 This applies only when the CICS trace facility is
 *                 active.
 *                 <LI>Either the terminal control table terminal entry
 *                 (TCTTE) or the destination control table entry
 *                 associated with the requesting task.
 *                 </UL>
 *                 <p>Whenever the TCTTE is dumped, the terminal control
 *                 table user area (if any) and the message control blocks
 *                 (if any) associated with the TCTTE are dumped. The
 *                 latter are used by basic mapping support.
 * @param LENGTH(data-value)
 *                 specifies the length (halfword binary) of the data area
 *                 specified in the FROM option. For a description of a safe
 *                 upper limit, see "LENGTH options".
 *
 *                 <p>LENGTH and FLENGTH are mutually exclusive.
 * @param LENGTHLIST(data-area)
 *                 specifies a list of 32-bit binary values showing the
 *                 lengths of the storage areas to be dumped. This
 *                 corresponds to the list of segments specified in the
 *                 SEGMENTLIST option. You must use both the
 *                 SEGMENTLIST and NUMSEGMENTS options when you
 *                 use the LENGTHLIST option.
 * @param NUMSEGMENTS(data-area)
 *                 specifies the number (fullword binary) of areas to be
 *                 dumped. You must use both the SEGMENTLIST and
 *                 LENGTHLIST options when you use the
 *                 NUMSEGMENTS option.
 * @param PCT
 *                 formats a summary of each installed transaction
 *                 definition.
 * @param PPT
 *                 dumps the processing program table.
 * @param PROGRAM
 *                 specifies that program storage areas associated with this
 *                 task are to be dumped, as follows:
 *                 <UL>
 *                 <LI>Task control area (TCA) and, if applicable, the
 *                 transaction work area (TWA)
 *                 <LI>Common system area (CSA), including the user's
 *                 portion of the CSA (CWA)
 *                 <LI>Trace entries relating to the task written to the
 *                 internal trace table (only when the CICS trace
 *                 facility is active)
 *                 <LI>All program storage areas containing user-written
 *                 application programs active on behalf of the
 *                 requesting task
 *                 <LI>Register save areas (RSAs) indicated by the RSA
 *                 chain off the TCA
 *                 <LI>Either the terminal control table terminal entry
 *                 (TCTTE) or the destination control table entry
 *                 associated with the requesting task.
 *                 </UL>
 *                 <p>Whenever the TCTTE is dumped, the terminal control
 *                 table user area (if any) and the message control blocks
 *                 (if any) associated with the TCTTE are dumped.
 * @param SEGMENTLIST(data-area)
 *                 specifies a list of addresses, which are the starting
 *                 points of the segments to be dumped. Each segment is
 *                 a task-related storage area. You must use both the
 *                 NUMSEGMENTS and LENGTHLIST options when you
 *                 use the SEGMENTLIST option.
 * @param SIT
 *                 dumps the system initialization table.
 * @param STORAGE
 *                 specifies that storage areas associated with this task are
 *                 to be dumped, as follows:
 *                 <UL>
 *                 <LI>Task control area (TCA) and, if applicable, the
 *                 transaction work area (TWA)
 *                 <LI>Common system area (CSA), including the user's
 *                 portion of the CSA (CWA)
 *                 <LI>Trace entries relating to the task written to the
 *                 internal trace table (only when the CICS trace
 *                 facility is active)
 *                 <LI>All transaction storage areas
 *                 <LI>Either the terminal control table terminal entry
 *                 (TCTTE) or the destination control table entry
 *                 associated with the requesting task
 *                 </UL>
 *                 <p>Whenever the TCTTE is dumped, the terminal control
 *                 table user area (if any) and the message control blocks
 *                 (if any) associated with the TCTTE are dumped.
 * @param TABLES
 *                 dumps the DCT, FCT, PCT, PPT, SIT, and the TCT.
 * @param TASK
 *                 specifies that storage areas associated with this task are
 *                 to be dumped, as follows:
 *                 <UL>
 *                 <LI>A summary of the transaction environment
 *                 associated with this task
 *                 <LI>Common system area (CSA), including the user's
 *                 portion of the CSA (CWA)
 *                 <LI>Trace entries relating to the task written to the
 *                 internal trace table (only when the CICS trace
 *                 facility is active)
 *                 <LI>All program storage areas containing user-written
 *                 application programs active on behalf of the
 *                 requesting task
 *                 <LI>All transaction storage areas
 *                 <LI>Either the terminal control table terminal entry
 *                 (TCTTE) or the destination control table entry
 *                 associated with the requesting task
 *                 <LI>Register save areas (RSAs) indicated by the RSA
 *                 chain off the TCA
 *                 <LI>All terminal input/output areas (TIOAs) chained off
 *                 the terminal control table terminal entry (TCTTE) for
 *                 the terminal associated with the requesting task
 *                 <LI>DL/I control blocks
 *                 </UL>
 *                 <p>Whenever the TCTTE is dumped, the terminal control
 *                 table user area (if any) and the message control blocks
 *                 (if any) associated with the TCTTE are dumped.
 * @param TCT
 *                 dumps the terminal control table.
 * @param TERMINAL
 *                 specifies that storage areas associated with the terminal
 *                 are to be dumped, as follows:
 *                 <UL>
 *                 <LI>Task control area (TCA) and, if applicable, the
 *                 transaction work area (TWA)
 *
 *                 <LI>Common system area (CSA), including the user's
 *                 portion of the CSA (CWA)
 *                 <LI>Trace entries relating to the task written to the
 *                 internal trace table (only when the CICS trace
 *                 facility is active)
 *                 <LI>All terminal input/output areas (TIOAs) chained off
 *                 the terminal control table terminal entry (TCTTE) for
 *                 the terminal associated with the requesting task as
 *                 long as the request is not a write, or storage
 *                 freezing is on for the task or the terminal
 *                 <LI>Either the terminal control table terminal entry
 *                 (TCTTE) or the destination control table entry
 *                 associated with the requesting task.
 *                 </UL>
 *                 <p>Whenever the TCTTE is dumped, the terminal control
 *                 table user area (if any) and the message control blocks
 *                 (if any) associated with the TCTTE are dumped. The
 *                 latter are used by basic mapping support.
 * @param TRT
 *                 dumps the trace entries relating to the task written to the
 *                 internal trace table.
 */
function "DUMP TRANSACTION"(
   COMPLETE,
   DCT,
   DUMPCODE(name),
   FCT,
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   LENGTHLIST(data-area),
   NUMSEGMENTS(data-area),
   PCT,
   PPT,
   PROGRAM,
   SEGMENTLIST(data-area),
   SIT,
   STORAGE,
   TABLES,
   TASK,
   TCT,
   TERMINAL,
   TRT,
   );

/**
 * End browse of a file.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ENDBR__FILE(filename)____________________________________________> |
 * |                            |_REQID(data-value)_|                       |
 * |                                                                        |
 * | >_________________________><                                           |
 * |    |_SYSID(systemname)_|                                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FILENOTFOUND, ILLOGIC, INVREQ, IOERR, ISCINVREQ, NOTAUTH,  |
 * | SYSIDERR                                                               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ENDBR ends a browse on a file or data table on a local or a
 * remote CICS region.
 * <p>The UPDATE option is available within browse so we
 * recommend that you use this because otherwise you would
 * need to issue an ENDBR command before using READ
 * UPDATE to avoid self deadlock abends. We recommend
 * issuing an ENDBR before syncpoint for similar reasons.
 * <p>If STARTBR was not successful, you need not issue
 * ENDBR.
 *
 * @conditions
 * <p><b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <DL>
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The name referred to in the FILE option cannot be
 * found in the FCT.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC (VSAM)<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" 
 * for details.)
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>35<DD> The REQID, if any, does not match that of any
 * successful STARTBR command.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>(Further information is available in the EXEC
 * interface block; see Appendix A, "EXEC interface
 * block" for details.)
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FILE(filename)
 *               specifies the name of the file being browsed.
 *               <p>If SYSID is specified, the data set to which this file refers
 *               is assumed to be on a remote system irrespective of
 *               whether the name is defined in the FCT. Otherwise, the
 *               FCT entry is used to find out whether the data set is on
 *               a local or a remote system.
 * @param REQID(data-value)
 *               specifies a unique (halfword binary value) request
 *               identifier for a browse, used to control multiple browse
 *               operations on a data set. If this option is not specified, a
 *               default value of zero is assumed.
 * @param SYSID(systemname)
 *               specifies the name (1-4 characters) of the system the
 *               request is directed to.
 */
function "ENDBR"(
   FILE(filename),
   REQID(data-value),
   SYSID(systemname),
   );

/**
 * Schedule use of a resource by a task (enqueue).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ENQ RESOURCE(data-area)__________________________________________> |
 * |                               |_LENGTH(data-value)_|                   |
 * |                                                                        |
 * |     _LUW_______________                                                |
 * | >__|___________________|_________________><                            |
 * |    |_MAXLIFETIME(cvda)_|  |_NOSUSPEND_|                                |
 * |    |_TASK______________|                                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ENQBUSY, LENGERR, INVREQ                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * 
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing,
 * unless the name specified in RESOURCE matches a name specified in an installed ENQMODEL resource definition, that
 * has sysplex-wide scope. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>ENQ causes further execution of the task issuing the ENQ
 * command to be synchronized with the availability of the
 * specified resource; control is returned to the task when the
 * resource is available.
 * <p>A resource in the context of this command is any string of
 * 1-255 bytes, established by in-house standards, to protect
 * against conflicting actions between tasks, or to cause single
 * threading within a program.
 * <p>If a task enqueues on a resource but does not dequeue from
 * it, CICS automatically releases the resource during syncpoint
 * processing (including DL/I, PCB, and TERM calls), or when
 * the task is terminated. Option UOW forces the dequeue at
 * the end of a unit of work (UOW). Option TASK forces the
 * dequeue at the end of a task. If there are several units of
 * work in a task, the enqueue carries over the UOWs.
 * <p>If more than one ENQ command is issued for the same
 * resource by a given task, the resource remains owned by
 * that task until the task issues a matching number of DEQ
 * commands.
 * <p>The resource to be enqueued on must be identified by one of
 * the following methods:
 * <UL>
 * <LI>Specifying a data area that is the resource. It is the
 * location (address) of the data area in storage that
 * matters, not its contents.
 * <LI>Specifying a data area that contains a unique argument
 * (for example, an employee name) that represents the
 * resource. It is the contents of the data value that
 * matters, not its location. LENGTH is required; the
 * presence of the LENGTH option tells CICS to enqueue
 * on the contents of the data value.
 * </UL>
 * <p>When an EXEC CICS ENQ (or DEQ) command is issued for
 * a resource whose name matches that of an installed
 * ENQMODEL resource definition, CICS checks the value of
 * the ENQSCOPE attribute to determine whether the scope is
 * local or sysplex-wide. If the ENQSCOPE attribute is left blank
 * (the default value), CICS treats the ENQ as local to the
 * issuing CICS region. If no ENQMODEL matches the
 * resource name, the scope of the ENQ command is local.
 * See the  CICS Resource Definition Guide for more
 * information about the ENQMODEL resource definition.
 * <p><b>Resource unavailability</b>:  If a resource is not available
 * when ENQ is issued, the application program is suspended
 * until it becomes available. However, if the NOSUSPEND
 * option has been specified and the resource is unavailable,
 * the ENQBUSY condition is raised, as it is also raised if you
 * have an active HANDLE condition. This allows the
 * application program to handle the case of resource
 * unavailability (by HANDLE CONDITION ENQBUSY) without
 * waiting for the resource to become available.
 * 
 * @conditions 
 * <DL>
 * <DT>ENQBUSY<DD>
 * occurs when an ENQ command specifies a resource
 * that is unavailable and the NOSUSPEND option is
 * specified, or there is an active HANDLE CONDITION
 * ENQBUSY.
 * <p>If the NOSUSPEND option is not specified, and the ENQ
 * command specifies a resource that is unavailable, the
 * application program is suspended and the ENQBUSY
 * condition is not raised.
 * <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 * RESP2 values: CVDA values are:
 * <DL compact>
 * <DT>2<DD> The MAXLIFETIME option is set with an incorrect
 * CVDA.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The value specified for the LENGTH option is
 * outside the range 1 through 255.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example 
 * Two tasks, enqueuing on the same resource and specifying
 * a data area that is the resource, must refer to the same
 * location in storage. They could both, for example, refer to the
 * same location in the CWA.
 * <pre>
 * EXEC CICS ENQ
 *   RESOURCE(RESNAME)
 * </pre>
 * <p>Two tasks, enqueuing on the same resource and specifying
 * a data area that contains a unique argument, can refer to the
 * same location or to different locations, but the contents of the
 * locations must be the same. The length must be supplied in
 * the LENGTH option.
 * <pre>
 * EXEC CICS ENQ
 *   RESOURCE(SOCSECNO)
 *   LENGTH(8)
 * </pre>
 * </DL>
 * @param LENGTH(data-value)
 *                  specifies as a halfword binary value the length of the
 *                  resource to be enqueued on. The value must be in the
 *                  range 1 through 255; otherwise, the LENGERR condition
 *                  occurs. If the LENGTH option is specified in an ENQ
 *                  command, it must also be specified in the DEQ
 *                  command for that resource, and the values of these
 *                  options must be the same. You must specify LENGTH
 *                  when using the method that specifies a data value
 *                  containing a unique argument, but not for the method
 *                  that specifies a data area as the resource. It is the
 *                  presence or absence of LENGTH that tells CICS which
 *                  method you are using.
 * @param MAXLIFETIME(cvda)
 *                  specifies the duration of the ENQ to be automatically
 *                  released by CICS. CVDA values are:
 *                  <UL>
 *                  <li>UOW
 *                  <li>LUW
 *                  <li>TASK
 *                  </ul>
 *                  
 * @param UOW
 *                  Same as LUW.  The duration of the ENQ is a unit of work.
 *                  Examples are a syncpoint rollback or syncpoint, if
 *                  the application does not issue a DEQ before the
 *                  unit of work ends. This is the default value.
 *                  <p><b>Note</b>:  For compatibility with previous releases of
 *                  CICS/ESA, a CVDA value of LUW is also
 *                  supported.
 * @param LUW
 *                  Same as UOW. The duration of the ENQ is a unit of work.
 *                  Examples are a syncpoint rollback or syncpoint, if
 *                  the application does not issue a DEQ before the
 *                  unit of work ends. This is the default value.
 * @param TASK 
 * The duration of the ENQ is a task. The enqueue
 * carries over the units of work within the task. Use
 * MAXLIFETIME(TASK) with great care because
 * other tasks issuing ENQ commands on the same
 * resource could be suspended until the end of this
 * task.
 * <p>There are two ways to code this option.
 * <UL>
 * <LI>You can assign a cvda value with the translator
 * routine DFHVALUE. This allows you to change a
 * cvda value in the program. For example:
 * <pre>
 * MOVE DFHVALUE(UOW) TO AREA-A
 * EXEC CICS ENQ RESOURCE(RESNAME)
 *   MAXLIFETIME(AREA-A)
 * </pre>
 * <LI>If the required action is always the same, you can
 * declare the value directly. For example:
 * <pre>
 * EXEC CICS ENQ RESOURCE(RESNAME) UOW
 * or
 * EXEC CICS ENQ RESOURCE(RESNAME) TASK
 * </pre>
 * </UL>
 * @param NOSUSPEND
 *                  specifies that the application program is not to be
 *                  suspended if the resource on the ENQ command is
 *                  unavailable, but the ENQBUSY condition occurs.
 *                  <p>Note, however, that if a HANDLE CONDITION for
 *                  ENQBUSY is active when the command is executed,
 *                  action, control is passed to the user label supplied in the
 *                  HANDLE CONDITION. This takes precedence over the
 *                  NOSUSPEND option but is, of course, negated by either
 *                  NOHANDLE or RESP.
 * @param RESOURCE(data-area)
 *                  identifies the resource to be enqueued on by:
 *                  <UL>
 *                  <LI>Specifying an area whose address represents the
 *                  resource.
 *                  <LI>Specifying a variable that contains the resource (an
 *                  employee name, for example). In this case, you
 *                  must use the LENGTH option.
 *                  </UL>
 */
function "ENQ"(
   LENGTH(data-value),
   MAXLIFETIME(cvda),
   UOW,
   TASK,
   NOSUSPEND,
   RESOURCE(data-area),
   );

/**
 * Specify a user trace entry point or an event monitoring point (EMP).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ENTER TRACEID(data-value)________________________________________> |
 * |                                |_MONITOR_|  |_FROM(data-area)_|        |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_RESOURCE(name)_|  |_ENTRYNAME(name)_|  |_PERFORM_|                |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * This command is now superseded by ENTER TRACENUM and MONITOR, but is still supported for compatibility with previous releases
 */
function "ENTER TRACEID"(
   TRACEID(data-value),
   MONITOR,
   FROM(data-area),
   RESOURCE(name),
   ENTRYNAME(name),
   PERFORM,
   );
/**
 * Write a trace entry.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ENTER TRACENUM(data-value)_______________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)____________________________|                      |
 * |                       |_FROMLENGTH(data-area)_|                        |
 * |                                                                        |
 * | >_____________________________________><                               |
 * |    |_RESOURCE(name)_|  |_EXCEPTION_|                                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>The ENTER TRACENUM command makes a trace entry in
 * the currently active trace destinations. CICS writes the trace
 * entry only if the master and user trace flags are on, unless
 * you specify the EXCEPTION option, in which case a user
 * trace entry is always written, even if the master and user
 * trace flags are off. Exception trace entries are always written
 * to the internal trace table (even if internal tracing is set off),
 * but they are written to other destinations only if they are
 * active.
 * <p>You can use the exception trace option in an application
 * program to write a trace entry when the program detects an
 * exception or abnormal condition. To do this, include an
 * ENTER TRACENUM(data-value) EXCEPTION command in
 * your program's exception or abnormal condition
 * error-handling routine.
 * <p>To write an exception trace entry in an error situation when
 * an application program has given up control, you can issue
 * an ENTER TRACENUM(data-value) EXCEPTION command
 * from a user-written program error program (PEP). See the
 * CICS Customization Guide for programming information
 * about modifying the DFHPEP program.
 * <p><b>Note</b> ENTER TRACENUM replaces the earlier ENTER
 * TRACEID command, which is still supported for compatibility
 * with releases of CICS earlier than Version 3. You should use
 * ENTER TRACENUM for all new programs, and whenever
 * you apply maintenance to old programs.
 * <p>For information about the trace entry format, see  CICS
 * Problem Determination Guide.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> TRACENUM is outside the range 0 through 199.
 * <DT>2<DD> There is no valid trace destination.
 * <DT>3<DD> The user trace flag is set OFF and EXCEPTION
 * has not been specified.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DT>4<DD> FROMLENGTH is outside the range 0 through
 * 4000.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * @example
 * The following COBOL example shows how to write a user
 * trace entry with a trace identifier of 123, with trace data from
 * a data area called USER-TRACE-ENTRY:
 * <pre>
 * EXEC CICS ENTER TRACENUM(123)
 *   FROM(USER-TRACE-ENTRY)
 * END-EXEC.
 * </pre>
 * </DL>
 * @param EXCEPTION
 *                  specifies that CICS is to write a user exception trace
 *                  entry. The EXCEPTION option overrides the master user
 *                  trace flag, and CICS writes the trace entry even if the
 *                  user trace flag is off. Exception trace entries are
 *                  identified by the characters *EXCU when the trace
 *                  entries are formatted by the trace utility program. See
 *                  the  CICS Problem Determination Guide for more
 *                  information about user exception trace entries.
 * @param FROM(data-area)
 *                  specifies a data area whose contents are to be entered
 *                  into the data field of the trace table entry. If you omit the
 *                  FROM option, two fullwords of binary zeros are passed.
 * @param FROMLENGTH(data-area)
 *                  specifies a halfword binary data area containing the
 *                  length of the trace data, in the range 0-4000 bytes. If
 *                  FROMLENGTH is not specified, a length of 8 bytes is
 *                  assumed.
 * @param RESOURCE(name)
 *                  specifies an 8-character name to be entered into the
 *                  resource field of the trace table entry.
 * @param TRACENUM(data-value)
 *                  specifies the trace identifier for a user trace table entry
 *                  as a halfword binary value in the range 0 through 199.
 */
function "ENTER TRACENUM"(
   TRACENUM(data-value),
   EXCEPTION,
   FROM(data-area),
   FROMLENGTH(data-area),
   RESOURCE(name),
   );

/**
 * Retrieve values from an LUTYPE6.1 attach header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT ATTACH___________________________________________________> |
 * |                     |_ATTACHID(name)_|  |_PROCESS(data-area)_|         |
 * |                     |_CONVID(name)___|                                 |
 * |                     |_SESSION(name)__|                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RESOURCE(data-area)_|  |_RPROCESS(data-area)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RRESOURCE(data-area)_|  |_QUEUE(data-area)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_IUTYPE(data-area)_|  |_DATASTR(data-area)_|                       |
 * |                                                                        |
 * | >________________________><                                            |
 * |    |_RECFM(data-area)_|                                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, INVREQ, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>EXTRACT ATTACH retrieves a set of values that are held in
 * an attach header control block, or that have been built
 * previously. For the command to retrieve information from a
 * received attach Function Management Header (FMH),
 * EIBATT must have been set during a RECEIVE or
 * CONVERSE command.
 *
 * @conditions
 * <DL>
 * <DT>CBIDERR<DD>
 * occurs if the requested attach header control block
 * cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if incorrect data is found.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ATTACHID(name)
 *               specifies that values are to be retrieved from an attach
 *               header control block. The name (1-8 characters)
 *               identifies this control block to the local task.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param DATASTR(data-area)
 * corresponds to the data stream profile field, ATTDSP, in
 * an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is given by CICS to the data
 * stream profile field in an attach FMH. For most CICS
 * applications, the option can be omitted.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order byte is used; the SNA-defined
 * meanings of the bits are as follows:
 * <pre>
 * 0-7    reserved - must be set to zero
 * 8-11   0000 - user-defined
 *        1111 - SCS data stream
 *        1110 - 3270 data stream
 *        1101 - structured field
 *        1100 - logical record management
 * 12-15  defined by the user if bits 8-11
 *        are set to 0000; otherwise reserved
 *        (must be set to zero)
 * </pre>
 * @param IUTYPE(data-area)
 * corresponds to the interchange unit field, ATTIU, in an
 * LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the
 * interchange unit field in an attach FMH. For most CICS
 * applications the option can be omitted.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order 7 bits are used; the
 * SNA-defined meanings of the bits are as follows:
 * <pre>
 * 0-10   reserved - must be set to zero
 * 11     0 - not end of multichain interchange unit
 *        1 - end of multichain interchange unit
 * 12,13  reserved - must be set to zero
 * 14,15  00 - multichain interchange unit
 *        01 - single-chain interchange unit
 *        10 - reserved
 *        11 - reserved
 * </pre>
 * @param PROCESS(data-area)
 *               corresponds to the process name, ATTDPN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, a
 *               transaction running in one system can acquire a session
 *               to the second system and can identify the transaction to
 *               be attached; in the second system the identification is
 *               carried in the first chain of data sent across the session.
 *               <p>In general, the first four bytes of data identify the
 *               transaction to be attached. However an attach FMH,
 *               identifying the transaction to be attached, can be built
 *               and sent. The receiving CICS system uses just the first
 *               four bytes of the process name as a transaction name.
 *               <p>No significance is attached by CICS to process names in
 *               attach FMHs sent in chains of data other than the first.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the process name field in
 *               an attach FMH.
 * @param QUEUE(data-area)
 *               corresponds to the queue name, ATTDQN, in an attach
 *               FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the queue name in
 *               an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the queue name field in an
 *               attach FMH.
 * @param RECFM(data-area)
 * corresponds to the deblocking algorithm field, ATTDBA,
 * in an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the
 * deblocking algorithm field in an attach FMH. For most
 * CICS applications, the option can be omitted.
 * <p>For communication between a CICS system and another
 * subsystem, refer to documentation supplied by the
 * subsystem about how to use the interchange unit field in
 * an attach FMH.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order byte is used; the SNA-defined
 * meanings of the bits are as follows:
 * <pre>
 * 0-7     reserved - must be set to zero
 * 8-15    X'00' - reserved
 *         X'01' - variable-length
 *                 variable-blocked
 *         X'02' - reserved
 *         X'03' - reserved
 *         X'04' - chain of RUs
 *         X'05' through X'FF' - reserved
 * </pre>
 * @param RESOURCE(data-area)
 *               corresdponds to the resource name, ATTPRN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the resource name in
 *               an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the resource name field in
 *               an attach FMH.
 * @param RPROCESS(data-area)
 *               corresponds to the return process name, ATTRDPN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return process
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return process name
 *               field in an attach FMH.
 * @param RRESOURCE(data-area)
 *               corresponds to the return resource name, ATTRPRN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return resource
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return resource name
 *               field in an attach FMH.
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 */
function "EXTRACT ATTACH <LUTYPE6.1>"(
   ATTACHID(name),
   CONVID(name),
   DATASTR(data-area),
   IUTYPE(data-area),
   PROCESS(data-area),
   QUEUE(data-area),
   RECFM(data-area),
   RESOURCE(data-area),
   RPROCESS(data-area),
   RRESOURCE(data-area),
   SESSION(name)
   );

/**
 * Retrieve values from an MRO attach header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT ATTACH___________________________________________________> |
 * |                     |_ATTACHID(name)_|  |_PROCESS(data-area)_|         |
 * |                     |_CONVID(name)___|                                 |
 * |                     |_SESSION(name)__|                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RESOURCE(data-area)_|  |_RPROCESS(data-area)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RRESOURCE(data-area)_|  |_QUEUE(data-area)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_IUTYPE(data-area)_|  |_DATASTR(data-area)_|                       |
 * |                                                                        |
 * | >________________________><                                            |
 * |    |_RECFM(data-area)_|                                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, INVREQ, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>EXTRACT ATTACH retrieves a set of values that are held in
 * an attach header control block, or that have been built
 * previously. For the command to retrieve information from a
 * received attach Function Management Header (FMH),
 * EIBATT must have been set during a RECEIVE or
 * CONVERSE command.
 * <p>For more information about MRO and IRC, see the  CICS
 * Intercommunication Guide.
 *
 * @conditions
 * <DL>
 * <DT>CBIDERR<DD>
 * occurs if the requested attach header control block
 * cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if incorrect data is found.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ATTACHID(name)
 *               specifies that values are to be retrieved from an attach
 *               header control block. The name (1-8 characters)
 *               identifies this control block to the local task.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param DATASTR(data-area)
 * corresponds to the data stream profile field, ATTDSP, in
 * an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is given by CICS to the data
 * stream profile field in an attach FMH. For most CICS
 * applications, the option can be omitted.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order byte is used; the SNA-defined
 * meanings of the bits are as follows:
 * <pre>
 * 0-7     reserved - must be set to zero
 * 8-11    0000 - user-defined
 *         1111 - SCS data stream
 *         1110 - 3270 data stream
 *         1101 - structured field
 *         1100 - logical record management
 * 12-15   defined by the user if bits 8-11
 *         are set to 0000; otherwise reserved
 *         (must be set to zero)
 * </pre>
 * IUTYPE( data-area)
 * corresponds to the interchange unit field, ATTIU, in an
 * LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the
 * interchange unit field in an attach FMH. For most CICS
 * applications the option can be omitted.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order 7 bits are used; the
 * SNA-defined meanings of the bits are as follows:
 * <pre>
 * 0-10    reserved - must be set to zero
 * 11      0 - not end of multichain interchange unit
 *         1 - end of multichain interchange unit
 * 12,13   reserved - must be set to zero
 * 14,15   00 - multichain interchange unit
 *         01 - single chain interchange unit
 *         10 - reserved
 *         11 - reserved
 * </pre>
 * @param PROCESS(data-area)
 *               corresponds to the process name, ATTDPN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, a
 *               transaction running in one system can acquire a session
 *               to the second system and can identify the transaction to
 *               be attached; in the second system the identification is
 *               carried in the first chain of data sent across the session.
 *               <p>In general, the first four bytes of data identify the
 *               transaction to be attached. However an attach FMH,
 *               identifying the transaction to be attached, can be built
 *               and sent. The receiving CICS system uses just the first
 *               four bytes of the process name as a transaction name.
 *               <p>No significance is attached by CICS to process names in
 *               attach FMHs sent in chains of data other than the first.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the process name field in
 *               an attach FMH.
 * @param QUEUE(data-area)
 *               corresponds to the queue name, ATTDQN, in an attach
 *               FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the queue name in
 *               an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the queue name field in an
 *               attach FMH.
 * @param RECFM(data-area)
 * corresponds to the deblocking algorithm field, ATTDBA,
 * in an LUTYPE6.1 attach FMH.
 * <p>For communication between two CICS systems, no
 * particular significance is attached by CICS to the
 * deblocking algorithm field in an attach FMH. For most
 * CICS applications, the option can be omitted.
 * <p>For communication between a CICS system and another
 * subsystem, refer to documentation supplied by the
 * subsystem about how to use the interchange unit field in
 * an attach FMH.
 * <p>The value returned in the data area is a halfword binary
 * value. Only the low-order byte is used; the SNA-defined
 * meanings of the bits are as follows:
 * <pre>
 * 0-7    reserved - must be set to zero
 * 8-15   X'00' - reserved
 *        X'01' - variable-length
 *                variable-blocked
 *        X'02' - reserved
 *        X'03' - reserved
 *        X'04' - chain of RUs
 *        X'05'through X'FF' - reserved
 * </pre>
 * @param RESOURCE(data-area)
 *               corresponds to the resource name, ATTPRN, in an
 *               LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the resource name in
 *               an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the resource name field in
 *               an attach FMH.
 * @param RPROCESS(data-area)
 *               corresponds to the return process name, ATTRDPN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return process
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return process name
 *               field in an attach FMH.
 * @param RRESOURCE(data-area)
 *               corresponds to the return resource name, ATTRPRN, in
 *               an LUTYPE6.1 attach FMH.
 *               <p>For communication between two CICS systems, no
 *               significance is attached by CICS to the return resource
 *               name in an attach FMH.
 *               <p>For communication between a CICS system and another
 *               subsystem, refer to documentation supplied by the
 *               subsystem about how to use the return resource name
 *               field in an attach FMH.
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 */
function "EXTRACT ATTACH <MRO>"(
   ATTACHID(name),
   CONVID(name),
   DATASTR(data-area),
   PROCESS(data-area),
   QUEUE(data-area),
   RECFM(data-area),
   RESOURCE(data-area),
   RPROCESS(data-area),
   RRESOURCE(data-area),
   SESSION(name),
   );
/**
 * Obtain the state of the APPC conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT ATTRIBUTES____________________STATE(cvda)__><              |
 * |                         |_CONVID(name)_|                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>EXTRACT ATTRIBUTES extracts conversation state
 * information for APPC mapped conversations.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * explicitly, or implicitly by default, specified the
 * function-shipping session (its principal facility) on
 * the CONVID option.
 * </DL>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The command is issued against a
 * CPI-Communications conversation.
 * <LI>The command is issued against an APPC basic
 * conversation. (A GDS EXTRACT ATTRIBUTES
 * should have been used instead.)
 * <p>Default action: terminate the task abnormally.
 * </UL>
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value does not relate to
 * a conversation owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 *               <p>For compatibility with earlier releases, SESSION is
 *               accepted as a synonym for CONVID. New programs
 *               should use CONVID.
 *               By default, the principal facility is assumed.
 * @param STATE(cvda)
 * gets the state of the transaction program. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "EXTRACT ATTRIBUTES <APPC>"(
   CONVID(name),
   STATE(cvda)
   );

/**
 * Extract attributes from an MRO conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT ATTRIBUTES_____________________STATE(cvda)__><             |
 * |                         |_CONVID(name)__|                              |
 * |                         |_SESSION(name)_|                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>EXTRACT ATTRIBUTES (MRO) extracts conversation state
 * information for MRO conversations.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * explicitly, or implicitly by default, specified the
 * function-shipping session (its principal facility) on
 * the CONVID option.
 * </DL>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>An incorrect command has been issued for the
 * terminal or LU in use.
 * <p>Default action: terminate the task abnormally.
 * </UL>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 *               <p>If both this option and CONVID are omitted, the principal
 *               facility for the task is used.
 * @param STATE(cvda)
 * gets the state of the transaction program. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     FREE
 *     PENDFREE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "EXTRACT ATTRIBUTES <MRO>"(
   CONVID(name),
   SESSION(name),
   STATE(cvda),
   );

/**
 * Obtain information from the client certificate received over a TCP/IP service that specifed client authentication.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT CERTIFICATE(ptr-ref)_____________________________________> |
 * |                                   |_LENGTH(data-area)|                 |
 * |                                                        _OWNER___       |
 * | >_____________________________________________________|________|_____> |
 * |    |_SERIALNUM(ptr-ref)_| |_SERIALNUMLEN(data-area)_| |_ISSUER_|
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_COMMONNAM(ptr-ref)_|  |_COMMONNAMLEN(data-area)_|                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_COUNTRY(ptr-ref)_|  |_COUNTRYLEN(data-area)_| |_STATE(ptr-ref)_|  |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_STATELEN(data-area)_| |_LOCALITY(ptr-ref)_|                       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LOCALITYLEN(data-area)_|  |_ORGANIZATION(ptr-ref)_|               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ORGANIZATLEN(data-area)_|  |_ORGUNIT(ptr-ref)_|                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ORGUNITLEN(data-area)_|                                           |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>EXTRACT CERTIFICATE allows the application to obtain
 * information from the X.509 certificate that was received from
 * a client during a Secure Sockets Layer (SSL) handshake
 * over a TCPIPSERVICE that specified SSL(CLIENTAUTH).
 * The certificate contains fields that identify the owner (or
 * subject) of the certificate, and fields that identify the
 * Certificate Authority that issued the certificate. You can select
 * the fields that you require by specifying the OWNER or
 * ISSUER option. You cannot retrieve both OWNER and
 * ISSUER fields with one command.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs for the following conditions:
 * <UL>
 * <LI>the command is being issued in a non-CICS Web
 * Interface application.
 * <LI>the command is being issued for a non-HTTP
 * request.
 * <IL>if an error occurs retrieving the certificate data from
 * CICS intermediate storage.
 * </UL>
 * <DT>LENGERR<DD>
 * the string being extracted is longer than the length
 * specified for one of the options.
 * </DL>
 * @param CERTIFICATE(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the full binary certificate received from the client. The
 *               pointer reference is valid until the next CICS command
 *               or the end of task.
 * @param COMMONNAME(ptr-ref)
 *               specifies a pointer reference to be set to the common
 *               name from the client certificate. The pointer reference is
 *               valid until the next CICS command or the end of task.
 * @param COMMONNAMLEN(data-area)
 *               specifies a fullword binary data area to be set to the
 *               length of the common name from the client certificate.
 * @param COUNTRY(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the country from the client certificate. The pointer
 *               reference is valid until the next CICS command or the
 *               end of task.
 * @param COUNTRYLEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the country from the client certificate.
 * @param ISSUER
 *               indicates that the values returned by this command refer
 *               to the Certificate Authority that issued this certificate.
 * @param LENGTH(data-area)
 *               specifies a fullword binary data area to be set to the
 *               length of the body of the client certificate.
 * @param LOCALITY(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the locality from the client certificate. The pointer
 *               reference is valid until the next CICS command or the
 *               end of task.
 * @param LOCALITYLEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the locality from the client certificate.
 * @param ORGANIZATION(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the organization from the client certificate. The pointer
 *               reference is valid until the next CICS command or the
 *               end of task.
 * @param ORGANIZATLEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the organization from the client certificate.
 * @param ORGUNIT(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the organization unit from the client certificate. The
 *               pointer reference is valid until the next CICS command
 *               or the end of task.
 * @param ORGUNITLEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the organization unit from the client certificate.
 * @param OWNER
 *               indicates that the values returned by this command refer
 *               to the owner of the certificate.
 * @param SERIALNUM(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the serial numberof the certificate assigned by the
 *               certificate issuer. The pointer reference is valid until the
 *               next CICS command or the end of task.
 * @param SERIALNUMLEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the serial number.
 * @param STATE(ptr-ref)
 *               specifies a pointer reference to be set to the address of
 *               the state or province from the client certificate. The
 *               pointer reference is valid until the next CICS command
 *               or the end of task.
 * @param STATELEN(data-area)
 *               specifies a halfword binary data area to be set to the
 *               length of the state or province from the client certificate.
 * @param USERID(ptr-ref)
 *               specifies a pointer reference to be set to the userid
 *               connected with the client certificate. The pointer
 *               reference is valid until the next CICS command or the
 *               end of task.
 */
function "EXTRACT CERTIFICATE"(
   CERTIFICATE(ptr-ref),
   COMMONNAME(ptr-ref),
   COMMONNAMLEN(data-area),
   COUNTRY(ptr-ref),
   COUNTRYLEN(data-area),
   ISSUER,
   LENGTH(data-area),
   LOCALITY(ptr-ref),
   LOCALITYLEN(data-area),
   ORGANIZATION(ptr-ref),
   ORGANIZATLEN(data-area),
   ORGUNIT(ptr-ref),
   ORGUNITLEN(data-area),
   OWNER,
   SERIALNUM(ptr-ref),
   SERIALNUMLEN(data-area),
   STATE(ptr-ref),
   STATELEN(data-area),
   USERID(ptr-ref),
   );

/**
 * Access VTAM logon data.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT LOGONMSG____INTO(data-area)____LENGTH(data-area)__><       |
 * |                       |_SET(ptr-ref)____|                              |
 * |                                                                        |
 * |                                                                        |
 * | Condition: NOTALLOC                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <p>EXTRACT LOGONMSG accesses VTAM logon data. This
 * data may have been specified by the terminal operator at
 * logon or in the ISSUE PASS command, for example. This
 * data is only available if the system initialization parameter
 * LGNMSG=YES is specified. The data can only be extracted
 * once. It is possible to force the first transaction that runs on
 * the terminal to be that which issues EXTRACT LOGONMSG
 * by using the the system initialization parameter GMTRAN.
 * <p>All the logon data is extracted and its length placed in the
 * field specified by the LENGTH option. Because the LENGTH
 * option cannot be used to limit the amount of data extracted,
 * it is recommended that a field of 256 bytes is always used
 * for this option.
 * <p>If you use the SET option, the VTAM logon data is not freed
 * until the session terminates (CLSDST). If you use the INTO
 * option, the VTAM logon data is copied into user storage and
 * then freed.
 *
 * @conditions
 * <DL>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param INTO(data-area)
 *               specifies the receiving field for the data extracted.
 * @param LENGTH(data-area)
 *               specifies the length, as a halfword binary value, of the
 *               data extracted. If no data is available, LENGTH is set to
 *               zero.
 * @param SET(ptr-ref)
 *               specifies the pointer reference that is to be set to the
 *               address of the data extracted. The pointer reference,
 *               unless changed by other commands or statements, is
 *               valid until the next EXTRACT LOGONMSG command or
 *               the end of task.
 *               <p>If DATALOCATION(ANY) is associated with the
 *               application program, the address of the data can be
 *               above or below the 16MB line.
 *               <p>If DATALOCATION(BELOW) is associated with the
 *               application program, and the data resides above the
 *               16MB line, the data is copied below the 16MB line, and
 *               the address of this copy is returned.
 *               <p>If TASKDATAKEY(USER) is specified for the running
 *               task, and storage protection is active, the data returned
 *               is in a user-key. If TASKDATAKEY(CICS) is specified
 *               and storage protection is active, the data returned is in a
 *               CICS-key.
 */
function "EXTRACT LOGONMSG"(
   INTO(data-area),
   LENGTH(data-area),
   SET(ptr-ref),
   );

/**
 * Retrieve values from APPC conversation attach header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT PROCESS__________________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PROCNAME(data-area)__| EPR3 |_____________________________|       |
 * |                                     |_MAXPROCLEN(data-value)_|         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CONVID(name)_|  |_SYNCLEVEL(data-area)_|                          |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_PIPLIST(ptr-ref)__PIPLENGTH(data-area)_|                          |
 * |                                                                        |
 * | EPR3:                                                                  |
 * | |__PROCLENGTH(data-area)__|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>EXTRACT PROCESS lets an application program access
 * conversation-related data, specified to CICS when the
 * program is attached. The attach receiver does not have to
 * execute an EXTRACT PROCESS command unless it
 * requires this information.
 * <P>The EXTRACT PROCESS command is valid only on an
 * APPC conversation that is the principal facility for the task.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * </DL>
 * <UL>
 * <LI>EXTRACT PROCESS has been used on a
 * conversation other than APPC mapped (for
 * example, LUTYPE6.1, APPC basic, or CPI
 * Communications).
 * <LI>EXTRACT PROCESS has been used on a
 * conversation that was not started by input from the
 * network, and whose session is not a principal
 * facility.
 * <LI>The command is issued against a
 * CPI-Communications conversation.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if the actual length of PROCNAME is greater
 * than MAXPROCLEN, or greater than 32 bytes if
 * MAXPROCLEN is not specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value specified does not
 * relate to a conversation owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies the token
 *               representing the principal session (EIBTRMID).
 *               <P>For compatibility with earlier releases, SESSION is
 *               accepted as a synonym for CONVID. New programs
 *               should use CONVID.
 *               <P>If CONVID and SESSION are both omitted, the principal
 *               facility for the task is used by default.
 * @param MAXPROCLEN(data-value)
 *               specifies the buffer length of PROCNAME. If
 *               MAXPROCLEN is not specified, the buffer is assumed to
 *               have 32 bytes.
 * @param PIPLENGTH(data-area)
 *               specifies a halfword binary data area in which the total
 *               length of the process initialization parameter (PIP) list is
 *               returned.
 * @param PIPLIST(ptr-ref)
 *               specifies a pointer reference that is set to the address of
 *               a CICS-provided data area containing a PIP list. This list
 *               contains variable-length records in the same format as
 *               the list in the CONNECT PROCESS command. A
 *               returned value of zero means that no PIP data has been
 *               received by CICS.
 * @param PROCLENGTH(data-area)
 *               specifies a halfword data area that is set by CICS to the
 *               length of the process name. If PROCNAME is specified,
 *               this option must be specified.
 * @param PROCNAME(data-area)
 *               specifies the data area to receive the process name
 *               specified by the remote system that caused the task to
 *               start. The data area can be 1-64 bytes long. The
 *               process name is padded on the right with blanks if it is
 *               too short. The PROCNAME data area should not be
 *               shorter than the MAXPROCLEN value.
 * @param SYNCLEVEL(data-area)
 *               specifies a halfword data area that is set by CICS to the
 *               SYNCLEVEL value. For further information about
 *               synchronization levels, see the  CICS Intercommunication
 *               Guide.
 */
function "EXTRACT PROCESS"(
   CONVID(name),
   MAXPROCLEN(data-value),
   PIPLENGTH(data-area),
   PIPLIST(ptr-ref),
   PROCLENGTH(data-area),
   PROCNAME(data-area),
   SYNCLEVEL(data-area),
   );

/**
 * Obtain information about TCPIP characteristics of the current transaction.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT TCPIP____________________________________________________>_|
 * |                   |_CLIENTNAME(data-area)__CNAMELENGTH(data-area)_|    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_SERVERNAME(data-area)_|  |_SNAMELENGTH(data-area)_|               |
 * |                                                                        |
 * | >____CLIENTADDR(data-area)__CADDRLENGTH(data-area)___________________> |
 * |    |_CLIENTADDRNU(data-area)_________________________|                 |
 * |    |_SERVERADDR(data-area)__SADDRLENGTH(data-area)___|                 |
 * |    |_SERVERADDRNU(data-area)_________________________|
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_SSLTYPE(cvda)_|  |_TCPIPSERVICE(data-area)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PORTNUMBER(data-area)_|  |_PORTNUMNU(data-area)_|                 |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ, LENGERR                                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * is returned under the following conditions:
 * <UL>
 * <LI>The command is being issued in a non-TCPIP
 * application.
 * </ul>
 * <DT>LENGERR<DD>
 * the string being extracted is longer than the length
 * specified for one of the options.
 * </dl>
 * @param CADDRLENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               CLIENTADDR option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated.
 * @param CLIENTADDR(data-area)
 *               specifies a buffer to contain the client's TCP/IP address.
 * @param CLIENTADDRNU(data-area)
 *               specifies a fullword binary field containing the client's
 *               TCP/IP address in binary form.
 * @param CLIENTNAME(data-area)
 *               specifies a buffer to contain the client's name as known
 *               by the Domain Name Server.
 * @param CNAMELENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               CLIENTNAME option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated.
 * @param PORTNUMBER(data-area)
 *               Specifies a 5-character field to contain the port number
 *               associated with this transaction in character form. This is
 *               the port on which the incoming data that initiated this
 *               transaction was received.
 * @param PORTNUMNU(data-area)
 *               Fullword field to contain the port number associated with
 *               this transaction in binary form. This is the port on which
 *               the incoming data that initiated this transaction was
 *               received.
 * @param SADDRLENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               SERVERADDR option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated.
 * @param SERVERADDR(data-area)
 *               specifies a buffer to contain the server's TCP/IP address
 *               in dotted decimal character form (nnn.nnn.nnn.nnn).
 * @param SERVERADDRNU(data-area)
 *               specifies a fullword binary field containing the server's
 *               TCP/IP address in binary form.
 * @param SERVERNAME(data-area)
 *               specifies a buffer to contain the server's name as known
 *               by the Domain Name Server.
 * @param SNAMELENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               SERVERNAME option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated.
 * @param SSLTYPE(CVDA)
 *               Returns a CVDA indicating whether the Secure Sockets
 *               Layer (SSL) is being used to secure communications for
 *               this transaction. Possible values are:
 *               <ul>
 *               <LI>SSL
 *               <LI>NOSSL
 *               <LI>CLIENTAUTH
 *               </ul>
 * @param TCPIPSERVICE(data-area)
 *               An 8-byte field to contain the name of the
 *               TCPIPSERVICE associated with this transaction.
 */
function "EXTRACT TCPIP"(
   CADDRLENGTH(data-area),
   CLIENTADDR(data-area),
   CLIENTADDRNU(data-area),
   CLIENTNAME(data-area),
   CNAMELENGTH(data-area),
   PORTNUMBER(data-area),
   PORTNUMNU(data-area),
   SADDRLENGTH(data-area),
   SERVERADDR(data-area),
   SERVERADDRNU(data-area),
   SERVERNAME(data-area),
   SNAMELENGTH(data-area),
   SSLTYPE(CVDA),
   TCPIPSERVICE(data-area)
   );

/**
 * Convert an 8-character name to a 4-character name on an LUTYPE6.1 logical unit.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__EXTRACT TCT__NETNAME(name)_________________________><              |
 * |                                 |_SYSID(systemname)_|                  |
 * |                                 |_TERMID(data-area)_|                  |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ, NOTALLOC                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>EXTRACT TCT converts the 8-character VTAM network
 * name for a logical unit into the corresponding 4-character
 * name it is known by in the local CICS system.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs if NETNAME is not valid.
 * <P>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <P>Default action: terminate the task abnormally.
 * </dl>
 * @param NETNAME(name)
 *               specifies the 8-character name of the logical unit in the
 *               VTAM network.
 * @param SYSID(systemname)
 *               specifies the variable to be set to the equivalent local
 *               name of the system.
 * @param TERMID(data-area)
 *               specifies the variable to be set to the equivalent local
 *               name of the terminal.
 */
function "EXTRACT TCT"(
   NETNAME(name),
   SYSID(systemname),
   TERMID(data-area)
   );

/**
 * Transform absolute date and time into a specified format.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FORMATTIME__ABSTIME(data-area)___________________________________> |
 * |                                     |_DATE(data-area)_|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FULLDATE(data-area)_|  |_DATEFORM(data-area)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DATESEP___________________|  |_DAYCOUNT(data-area)_|              |
 * |               |_(data-value)_|                                         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DAYOFMONTH(data-area)_|  |_DAYOFWEEK(data-area)_|                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DDMMYY(data-area)_|  |_DDMMYYYY(data-area)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MMDDYY(data-area)_|  |_MMDDYYYY(data-area)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MONTHOFYEAR(data-area)_|                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TIME(data-area)________________________________|                  |
 * |                       |_TIMESEP___________________|                    |
 * |                                  |_(data-value)_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_YEAR(data-area)_|  |_YYDDD(data-area)_|                           |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_YYDDMM(data-area)_|  |_YYMMDD(data-area)_|                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_YYYYDDD(data-area)_|  |_YYYYDDMM(data-area)_|                     |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_YYYYMMDD(data-area)_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>FORMATTIME transforms the absolute date and time into
 * any of a variety of formats. Normally, the ABSTIME argument
 * is the value returned by an ASKTIME ABSTIME command.
 * <P>If the milliseconds come to 500 or more, the returned
 * seconds and, if necessary, the minutes and hours, are
 * rounded up. The day, month, and year are, however, never
 * rounded up. However, in the case where the ABSTIME
 * argument contains a value representing the half-second
 * before midnight, no rounding is performed, and the TIME
 * parameter returns 23:59:59.
 * <P>To obtain an elapsed time in a particular format, the
 * ABSTIME data value can be the difference between two
 * values returned by ASKTIME, and options such as
 * DAYCOUNT(d) and TIME(t) can be specified.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> The ABSTIME option is in an incorrect form.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows the effect of some of the
 * options of the command. Let "utime" contain the value
 * 002837962864828 in milliseconds.
 * <pre>
 * EXEC CICS ASKTIME ABSTIME(utime)
 * EXEC CICS FORMATTIME ABSTIME(utime)
 *   DATESEP('-') DDMMYY(date)
 *   TIME(time) TIMESEP
 * </pre>
 * This gives the values 06-12-89 for "date" and 19:01:05 for
 * "time".
 * </DL>
 * @param ABSTIME(data-area)
 * specifies the data value for the time, in packed decimal,
 * since 00:00 hours on 1 January 1900 (in milliseconds
 * rounded to the nearest hundredth of a second) that is to
 * be converted to an alternative format.
 * <P>The format of the parameter is:
 * <PRE>
 * COBOL: PIC S9(15) COMP-3
 * C:     char data_ref[8];
 * PL/I:  FIXED DEC(15);
 * ASM:   PL8
 * </PRE>
 * @param DATE(data-area)
 *               specifies the variable that is to receive the date in the
 *               format specified in the DATFORM system initialization
 *               parameter. A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field. You should normally use this option only when a
 *               date is needed for output purposes. Where a date is
 *               needed for analysis, you should request the date in
 *               explicit form, for example, using the MMDDYY option.
 * @param DATEFORM(data-area)
 *               specifies the format of the installation-defined date. CICS
 *               returns YYMMDD, DDMMYY, or MMDDYY (six
 *               characters) according to the DATFORM system
 *               initialization parameter.
 * @param DATESEP(data-value)
 *               specifies the character to be inserted as the separator
 *               between the year and the month, and between the day
 *               and the month; or between the year and the day if form
 *               YYDDD is specified.
 *               <P>If you omit this option, no separator is supplied. If you
 *               omit "data-value", a slash (/) is assumed as the
 *               separator.
 * @param DAYCOUNT(data-area)
 *               returns the number of days since 1 January 1900 (day
 *               1), as a fullword binary number. This is useful if you
 *               need to compare the current date with a previous date
 *               that has, for example, been stored in a data set.
 * @param DAYOFMONTH(data-area)
 *               returns the number of the day in the month as a fullword
 *               binary number.
 * @param DAYOFWEEK(data-area)
 *               returns the relative day number of the week as a
 *               fullword binary number: Sunday=0, Saturday=6. This
 *               number can be converted to a textual form of day in any
 *               language.
 * @param DDMMYY(data-area)
 *               specifies the 8-character user field where CICS is to
 *               return the date, in day/month/year format (for example,
 *               21/10/98). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field.
 * @param DDMMYYYY(data-area)
 *               specifies the 10-character user field where CICS is to
 *               return the date, in day/month/year format (for example
 *               17/06/1995). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 10-character user
 *               field.
 * @param FULLDATE(data-area)
 *               specifies the 10-character user field where CICS is to
 *               return the date, in the format specified in the DATFORM
 *               system initialization parameter, with the year expanded
 *               to 4 digits. A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 10-character user
 *               field. You should normally use this option only when a
 *               date is needed for output purposes. Where a date is
 *               needed for analysis, you should request the date in
 *               explicit form, for example, using the MMDDYYYY option.
 * @param MMDDYY(data-area)
 *               specifies the 8-character user field in which CICS is to
 *               return the date, in month/day/year format (for example,
 *               10/21/95). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field.
 * @param MMDDYYYY(data-area)
 *               specifies the 10-character user field where CICS is to
 *               return the date, in month/day/year format (for example
 *               11/21/1995). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 10-character user
 *               field.
 * @param MONTHOFYEAR(data-area)
 *               "data-area" is set to the relative month number of the
 *               year as a fullword binary number (January=1,
 *               December=12). You can convert this number, in your
 *               application program, to the name of the month in any
 *               language.
 * @param TIME(data-area)
 *               "data-area" is set as an 8-character field to the current
 *               24-hour clock time in the form hh:mm:ss, where the
 *               separator is specified by the TIMESEP option.
 * @param TIMESEP(data-value)
 *               specifies the character to be used as the separator in
 *               the returned time. If you omit this option, no separator is
 *               assumed and six bytes are returned in an 8-character
 *               field. If you omit the "data-value", a colon (:) is used as a
 *               separator.
 * @param YEAR(data-area)
 *               specifies the full 4-figure number of the year as a
 *               fullword binary number (for example, 1995, 2001).
 * @param YYDDD(data-area)
 *               specifies the 6-character user field where CICS is to
 *               return the date, in year/day format (for example, 95/301).
 *               A separator is present if requested by the DATESEP
 *               option. If no separator is requested, the returned value is
 *               left-justified in the 6-character user field.
 * @param YYDDMM(data-area)
 *               specifies the 8-character user field where CICS is to
 *               return the date, in year/day/month format (for example,
 *               95/30/10). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field.
 * @param YYMMDD(data-area)
 *               specifies the 8-character user field where CICS is to
 *               return the date, in year/month/day format (for example,
 *               95/10/21). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field.
 * @param YYYYDDD(data-area)
 *               specifies the 8-character user field where CICS is to
 *               return the date, in year/day format (for example
 *               1995/200). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 8-character user
 *               field.
 * @param YYYYDDMM(data-area)
 *               specifies the 10-character user field where CICS is to
 *               return the date, in year/day/month format (for example
 *               1995/21/06). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 10-character user
 *               field.
 * @param YYYYMMDD(data-area)
 *               specifies the 10-character user field where CICS is to
 *               return the date, in year/month/day format (for example
 *               1995/06/21). A separator is present if requested by the
 *               DATESEP option. If no separator is requested, the
 *               returned value is left-justified in the 10-character user
 *               field.
 */
function "FORMATTTIME"(
   ABSTIME(data-area),
   DATE(data-area),
   DATEFORM(data-area),
   DATESEP(data-value),
   DAYCOUNT(data-area),
   DAYOFMONTH(data-area),
   DAYOFWEEK(data-area),
   DDMMYY(data-area),
   DDMMYYYY(data-area),
   FULLDATE(data-area),
   MMDDYY(data-area),
   MMDDYYYY(data-area),
   MONTHOFYEAR(data-area),
   TIME(data-area),
   TIMESEP(data-value),
   YEAR(data-area),
   YYDDD(data-area),
   YYDDMM(data-area),
   YYMMDD(data-area),
   YYYYDDD(data-area),
   YYYYDDMM(data-area),
   YYYYMMDD(data-area),
   );

/**
 * Return a terminal or logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FREE__><                                                           |
 * |                                                                        |
 * |                                                                        |
 * | Condition: NOTALLOC                                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>FREE returns a terminal or logical unit when the transaction
 * owning it no longer requires it. The principal facility is freed.
 * If you are running EDF, and the transaction frees the
 * principal facility, EDF is terminated.
 *
 * @conditions
 * <dl>
 * <DT>NOTALLOC<DD>
 * occurs if the task is not associated with the terminal.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "FREE"(
   );

/**
 * Return an APPC mapped session to CICS.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FREE_____________________________________><                        |
 * |           |_CONVID(name)_|  |_STATE(cvda)_|                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>FREE returns an APPC session to CICS when a transaction
 * owning it no longer requires it. The session can then be
 * allocated for use by other transactions.
 * <P>If you omit CONVID, the principal facility is freed. Facilities
 * not freed explicitly are freed by CICS when the task
 * terminates.
 * <P>If you are running EDF, and the transaction frees the
 * principal facility, EDF is terminated.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The CONVID value specified in the command
 * relates to a basic (unmapped) APPC conversation.
 * <LI>The CONVID value specified in the command
 * relates to a CPI-Communications conversation.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value does not relate to
 * a conversation owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the APPC mapped session to be freed. The
 *               4-character name identifies either the token returned by
 *               a previously executed ALLOCATE command in
 *               EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGNcommand).
 *               If this option is omitted, the principal facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The STATE
 * option on a FREE command returns a cvda code of 00 if
 * there is no longer an active conversation. The other
 * output cvda values are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 */
function "FREE <APPC>"(
   CONVID(name),
   STATE(cvda)
   );

/**
 * Return LUTYPE6.1 sessions to CICS.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FREE_____________________><                                        |
 * |           |_CONVID(name)__|                                            |
 * |           |_SESSION(name)_|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>FREE returns an LUTYPE6.1 session to CICS when a
 * transaction owning it no longer requires it. The session can
 * then be allocated for use by other transactions.
 * <p>If you omit both CONVID and SESSION, the principal facility
 * is freed. Facilities not freed explicitly are freed by CICS
 * when the task terminates.
 * <p>If you are running EDF, and the transaction frees the
 * principal facility, EDF is terminated.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs if the session specified in the command was
 * allocated for a basic (unmapped) APPC conversation.
 * (See also EIBRCODE in Appendix A, "EXEC interface
 * block")
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the session specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the LUTYPE6.1 session to be freed. The
 *               4-character name identifies either the token returned by
 *               a previously executed ALLOCATE command in
 *               EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 */
function "FREE <LUTYPE6.1>"(
   CONVID(name),
   SESSION(name)
   );

/**
 * Return MRO sessions to CICS.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FREE______________________________________><                       |
 * |           |_CONVID(name)__|  |_STATE(cvda)_|                           |
 * |           |_SESSION(name)_|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>FREE returns an MRO session to CICS when a transaction
 * owning it no longer requires it. The session can then be
 * allocated for use by other transactions.
 * <p>If you omit both CONVID and SESSION, the principal facility
 * is freed. Facilities not freed explicitly are freed by CICS
 * when the task terminates.
 * <p>If you are running EDF, and the transaction frees the
 * principal facility, EDF is terminated.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs in any one of the following situations:
 * <UL>
 * <LI>The session specified in the command was
 * allocated for a basic (unmapped) APPC
 * conversation
 * <LI>The session is in the wrong state to be freed.
 * (See also EIBRCODE in Appendix A, "EXEC interface
 * block")
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the session specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CONVID(name)
 *               identifies the MRO session to be freed. The 4-character
 *               name identifies either the token returned by a previously
 *               executed ALLOCATE command in EIBRSRCE in the
 *               EIB, or the token representing the principal session
 *               (returned by a previously executed ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 * @param STATE(cvda)
 * gets the state of the current conversation. The STATE
 * on a FREE command returns a cvda code of 00 if there
 * is no longer an active conversation. The other output
 * cvda values are:
 * <pre>
 *     ALLOCATED
 *     FREE
 *     PENDFREE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "FREE <MRO>"(
   CONVID(name),
   SESSION(name),
   STATE(cvda),
   );

/**
 * Release main storage acquired by a GETMAIN command.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FREEMAIN____DATA(data-area)___________><                           |
 * |               |_DATAPOINTER(ptr-value)_|                               |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using FREEMAIN of storage GETMAINed with SHARED, or of a resource defined with RELOAD=YES that has been
 * LOADed could create inter-transaction affinities that adversely affect the use of dynamic transaction routing. See the  CICS
 * Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>FREEMAIN releases main storage previously acquired by a
 * GETMAIN command issued by the application, or by a LOAD
 * for a program, map, or table, defined with RELOAD=YES. If
 * the task that GETMAINed the storage or LOADed the
 * program does not release it, CICS releases it at task end,
 * unless:
 * <UL>
 * <LI>The GETMAIN command specified the SHARED option.
 * <LI>The program is defined with RELOAD=YES.
 * <LI>The program is defined with RELOAD=NO but was
 * LOADed with the HOLD option.
 * </UL>
 * <p>In the first two cases, the storage remains allocated until
 * some other task issues a FREEMAIN to release it. In the
 * third case, the program remains available until it is
 * RELEASEd by another task.
 * <p>You can release CICS-key storage from a program only if it
 * is being executed in CICS key. If the previously-acquired
 * storage was obtained from CICS-key storage, and the
 * program issuing the FREEMAIN is in user-key, an INVREQ
 * condition occurs with a RESP2 value of 2.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The storage specified by the DATA or
 * DATAPOINTER parameter is not storage acquired
 * by a GETMAIN command.
 * <DT>2<DD> The storage area specified by the DATA or
 * DATAPOINTER parameter is in CICS-key storage,
 * and the program issuing the FREEMAIN command
 * is in user-key.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * Here are some examples of the use of FREEMAIN.
 * <p><b><i>COBOL:</i></b>
 * <pre>
 * DATA DIVISION.
 * WORKING-STORAGE SECTION.
 * 77 AREA-POINTER USAGE IS POINTER.
 * LINKAGE SECTION.
 *   01  WORKAREA PIC X(100).
 * PROCEDURE DIVISION.
 * EXEC CICS GETMAIN SET(AREA-POINTER)
 *   LENGTH(100)
 *   END-EXEC.
 *    .
 *   SET ADDRESS OF WORKAREA TO AREA-POINTER.
 *    .
 *    .
 *   EXEC CICS FREEMAIN DATA(WORKAREA)
 *   END-EXEC.
 *   EXEC CICS RETURN
 *   END-EXEC.
 * </pre>
 * Alternatively, the previous COBOL example could free the
 * storage by the following command:
 * <pre>
 *   EXEC CICS FREEMAIN DATAPOINTER(AREA-POINTER)
 *   END-EXEC.
 * </pre>
 * <p><b><i>C:</i></b>
 * <pre>
 * #pragma XOPTS(CICS);
 * #define MAINSIZE 100;
 * main()
 * {
 *    char *buffer;
 *    struct eib_record dfheiptr;
 *    EXEC CICS ADDRESS EIB(dfheiptr);
 *    EXEC CICS GETMAIN SET(buffer)
 *                     LENGTH(MAINSIZE);
 *    buffer[2] = 'a';
 *      .
 *      .
 *    EXEC CICS FREEMAIN DATA(buffer);
 *    EXEC CICS RETURN;
 * }
 * </pre>
 * <p><b><i>PL/I:</i></b>
 * <pre>
 * DCL AREA_PTR POINTER,
 *     WORKAREA  CHAR(100) BASED(AREA_PTR);
 *    .
 *    .
 *    .
 * EXEC CICS GETMAIN SET(AREA_PTR) LENGTH(100);
 *  .
 * EXEC CICS FREEMAIN DATA(WORKAREA);
 * </pre>
 * <p><b><i>Assembler:</i></b>
 * <pre>
 * WORKAREA  DS  CL100
 *  .
 *  .
 *           EXEC CICS GETMAIN SET(9) LENGTH(100)
 *           USING WORKAREA,9
 *           EXEC CICS FREEMAIN DATA(WORKAREA)
 * </pre>
 * Alternatively, you can free storage using the DATAPOINTER
 * option as shown in the following example:
 * <pre>
 * WORKAREA  DS CL100
 *  .
 *           EXEC CICS GETMAIN SET(9) LENGTH(100)
 *           USING WORKAREA,9
 *  .
 *  .
 *           DROP 9
 *  .
 *           EXEC CICS FREEMAIN DATAPOINTER(9)
 * </pre>
 * @param DATA(data-area)
 *               specifies the data area of main storage to be released.
 *               <p>This storage must have been acquired by a previous
 *               GETMAIN command, except in the case of BMS pages.
 *               (For more guidance about BMS pages, see the
 *               description of the SET option in the  CICS Application
 *               Programming Guide.)
 *               <p>Note that this option specifies the data area that was
 *               acquired by the GETMAIN command, not the pointer
 *               reference that was set to that address. You must use the
 *               DATAPOINTER option to specify a pointer-reference:
 *               DATA and DATAPOINTER are mutually exclusive.
 *               Therefore, in assembler language, "data-area" must be a
 *               relocatable expression that is a data reference; in
 *               COBOL or C it must be a data name; and in PL/I it must
 *               be a data reference. (See the  CICS Application
 *               Programming Guide for a discussion of argument
 *               values.)
 *               <p>The length of storage released is the length obtained by
 *               the GETMAIN and not necessarily the length of the data
 *               area.
 * @param DATAPOINTER(ptr-value)
 *               specifies the address of the main storage to be released.
 *               This option is an alternative to the DATA option, and
 *               specifies the pointer reference that was returned by a
 *               GETMAIN command using the SET option.
 *               The length of storage released is the length obtained by
 *               the GETMAIN.
 */
function "FREEMAIN"(
   DATA(data-area),
   DATAPOINTER(ptr-value),
   );

/**
 * Acquire a session to a remote system for use by APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ALLOCATE____SYSID(systemname)________________________________> |
 * |                   |                    |_MODENAME(name)_| |            |
 * |                   |_PARTNER(name)_________________________|            |
 * |                                                                        |
 * | >__CONVID(data-area)__RETCODE(data-area)_____________________________> |
 * |                                           |_NOQUEUE_|                  |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_STATE(cvda)_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <p>GDS ALLOCATE acquires a session to a remote system.
 * <P>The return code is given in RETCODE (see Table 1).
 *  For a list of return code values, see the  CICS
 * Distributed Transaction Programming Guide. EXEC CICS
 * conditions are never raised on GDS commands.
 *
 * In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVID(data-area)
 *                specifies the 4-character application data area that is to
 *                contain the token returned by an ALLOCATE command
 *                to identify the allocated conversation. This token is
 *                required in subsequent GDS commands issued on the
 *                conversation.
 * @param MODENAME(name)
 *                specifies the name of the mode group from which the
 *                session is to be acquired. If you specify SYSID and omit
 *                MODENAME, CICS selects a modename from those
 *                defined for the system.
 * @param NOQUEUE
 *                specifies that the request to allocate a session is not to
 *                be queued when a suitable APPC session cannot be
 *                acquired immediately. A session is acquired immediately
 *                only if it is a bound contention winner that is not already
 *                allocated to another conversation.
 *                <p>The return code in RETCODE indicates whether or not a
 *                session has been acquired.
 *                <p>If the NOQUEUE option is not used, a delay may occur
 *                before control is passed back to the application program.
 *                A delay can occur for any of the following reasons:
 *                <UL>
 *                <LI>All sessions for the specified SYSID and
 *                MODENAME are in use.
 *                <LI>The CICS allocation algorithm has selected a
 *                session that is not currently bound (in which case,
 *                CICS has to bind).
 *                <LI>The CICS allocation algorithm has selected a
 *                contention loser (in which case, CICS has to bid).
 *                </UL>
 *                If there is a delay, the program waits until the session
 *                has been acquired.
 * @param PARTNER(name)
 *                specifies the name (eight characters) of a set of
 *                definitions that include the names of a remote LU
 *                (NETNAME) and a communication profile to be used on
 *                the allocated session. For APPC basic conversations,
 *                the only relevant attribute set by the profile is
 *                MODENAME.
 *                <p>If you use this option as an alternative to SYSID and
 *                MODENAME, CICS uses the NETNAME and
 *                MODENAME from the PARTNER definition.
 * @param RETCODE(data-area)
 *                specifies the 6-byte application data area into which
 *                return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 * specifies the remote system to which an APPC session
 * is to be allocated. The name, which is 1-4 characters,
 * identifies an entry (defined as an APPC connection) in
 * the CICS terminal control table.
 *
 * <p>Table  1.  GDS ALLOCATE return codes
 * <pre>
 * RETCODE        Description
 * (hexadecimal)
 * 01 0C 00       SYSID is unrecognized.
 * 01 0C 04       SYSID is not an LUTYPE6.2 connection name.
 * 01 04 04       NOQUEUE is specified but no bound
 *                connection-winner sessions are available.
 * 01 04 08       MODENAME is not known.
 * 01 04 0C       The MODENAME value is SNASVCMG which
 *                is restricted to use by CICS.
 * 01 04 0C       VTAM has no class of service (COS) table for
 *                the MODENAME value.
 * 01 04 10       The task was canceled during queuing of the
 *                command.
 * 01 04 14       All modegroups are closed.
 * 01 04 14       The requested modegroup is closed.
 * 01 04 18       The requested modegroup is draining (closing
 *                down).
 * 01 08 00       All sessions in the requested modegroup are
 *                unusable.
 * 01 08 00       The connection is in quiesce state.
 * 01 08 00       The connection is out of service.
 * 01 08 00       The connection is not acquired.
 * 01 08 00       The requested modegroup's local max
 *                (maximum permitted number of sessions) is 0.
 * 01 08 00       The VTAM ACB is closed.
 * 01 0C 14       The NETNAME specified in the PARTNER
 *                definition is not known.
 * 02 0C 00       PARTNER is not known.
 * 06 00 00       The PROFILE specified in the PARTNER
 *                definition is not known.
 * </pre>
 */
function "GDS ALLOCATE"(
   CONVID(data-area),
   MODENAME(name),
   NOQUEUE,
   PARTNER(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Get identifier of principal facility in use by APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ASSIGN_______________________________________________________> |
 * |                 |_PRINCONVID(data-area)_|                              |
 * |                                                                        |
 * | >____________________________RETCODE(data-area)__><                    |
 * |    |_PRINSYSID(data-area)_|                                            |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS ASSIGN gets the identifier of the principal facility.
 * The return code is given in RETCODE (see Table 2). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param PRINCONVID(data-area)
 *               specifies a 4-byte data area in which the conversation
 *               token (CONVID) of the principal facility is to be returned.
 * @param PRINSYSID(data-area)
 *               specifies a 4-byte data area in which the SYSID of the
 *               principal facility is to be returned.
 * @param RETCODE(data-area)
 * specifies the 6-byte application data area into which
 * return code information is to be moved.
 * <P>Table  2.  GDS ASSIGN return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           Principal facility is not APPC.
 * 03 04           Principal facility is not basic.
 * 04              No terminal principal facility exists.
 * </PRE>
 */
function "GDS ASSIGN"(
   PRINCONVID(data-area),
   PRINSYSID(data-area),
   RETCODE(data-area),
   );

/**
 * Initiate APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS CONNECT PROCESS__CONVID(name)________________________________> |
 * |                                                                        |
 * | >____PROCNAME(name)__________________________________________________> |
 * |    |                 |_PROCLENGTH(data-value)_| |                      |
 * |    |_PARTNER(name)______________________________|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PIPLIST(data-area)____________________________|                   |
 * |                          |_PIPLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >__SYNCLEVEL(data-value)__CONVDATA(data-area)__RETCODE(data-area)____> |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_STATE(cvda)_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>EXEC CICS conditions are never raised on GDS commands.
 * The return code is given in RETCODE (see Table 3
 * ). For a list of return code values, see the  CICS
 * Distributed Transaction Programming Guide. EXEC CICS
 * conditions are never raised on GDS commands.
 * GDS CONNECT PROCESS allows the application program
 * to specify a partner application that is to run in the remote
 * system.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param PARTNER(name)
 *               specifies the name (8 characters) of a set of definitions
 *               that includes the name (or extended name) of a remote
 *               partner transaction (TPNAME or XTPNAME). You can
 *               use this option as an alternative to PROCNAME and
 *               PROCLENGTH.
 * @param PIPLENGTH(data-value)
 *               specifies the total length of the process initialization
 *               parameter (PIP) list specified on a CONNECT
 *               PROCESS command.
 * @param PIPLIST(data-area)
 *               specifies the PIP data that is to be sent to the remote
 *               process. See the  CICS Distributed Transaction
 *               Programming Guide for information about PIP data.
 * @param PROCLENGTH(data-value)
 *               specifies the length (as a halfword binary value in the
 *               range 1-64) of the target process name.
 * @param PROCNAME(name)
 *               specifies the name of the remote application. The APPC
 *               architecture allows names of lengths (1-64 bytes), but
 *               leaves each product free to set its own maximum. If the
 *               remote system is CICS, you can use the standard
 *               4-character transaction ID. You can also use the
 *               TPNAME value in the transaction definition.
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * @param SYNCLEVEL(data-value)
 * specifies the synchronization level (halfword binary
 * value) desired for the current conversation. The possible
 * values are:
 *     <dl compact>
 *     <DT>0<DD> None
 *     <DT>1<DD> Confirm
 *     <DT>2<DD> Syncpoint
 *     </dl>
 * <p>Table  3.  GDS CONNECT PROCESS return codes
 * <pre>
 * RETCODE        Description
 * (hexadecimal)
 *
 * 02 0C 00       PARTNER is not known.
 * 03 00          CONVID is for a session that is not APPC.
 * 03 00          CONVID is for a session that is in use by CPI
 *                Communications.
 * 03 04          CONVID is for a conversation that is not basic.
 * 03 0C          The SYNCLEVEL option specifies a value
 *                other than 0, 1, or 2.
 * 03 0C          The SYNCLEVEL option requested either 1 or
 *                2, but it was unavailable.
 * 03 08          A state check occurred.
 * 04             CONVID is for a session that is not allocated
 *                to the task, or that is a relay link.
 * 05 00 00 00    PROCLENGTH is outside the range 1-64.
 * 00 20
 * 05 00 00 00    The PIPLENGTH value is outside the range
 * 7F FF          4-763.
 * 05 00 00 00    The 2-byte length field (LL) for one of the PIPs
 * 7F FF          is less than 4.
 * 05 00 00 00    The total of the LLs in PIP data is greater than
 * 7F FF          the PIPLENGTH value.
 * </pre>
 */
function "GDS CONNECT PROCESS"(
   CONVDATA(data-area),
   CONVID(name),
   PARTNER(name),
   PIPLENGTH(data-value),
   PIPLIST(data-area),
   PROCLENGTH(data-value),
   PROCNAME(name),
   RETCODE(data-area),
   STATE(cvda),
   SYNCLEVEL(data-value),
   );

/**
 * Access state information on an APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS EXTRACT ATTRIBUTES__CONVID(name)_____________________________> |
 * |                                           |_STATE(cvda)_|              |
 * |                                                                        |
 * | >__CONVDATA(data-area)__RETCODE(data-area)__><                         |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>GDS EXTRACT ATTRIBUTES accesses state information
 * about an APPC basic conversation.
 * <p>The return code is given in RETCODE (see Table 4). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <p>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 * <p>Table  4.  GDS EXTRACT ATTRIBUTES return codes
 * <pre>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 01           INVREQ for a DPL server program.
 * 03 04           CONVID is for a conversation that is not basic.
 * 04              CONVID is for a session that is not allocated
 *                 to the task, or that is a relay link.
 * </pre>
 */
function "GDS EXTRACT ATTRIBUTES"(
   CONVID(name),
   CONVDATA(data-area),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Retrieve values from an APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS EXTRACT PROCESS__CONVID(name)________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PROCNAME(data-area)__| GEP4 |_____________________________|       |
 * |                                     |_MAXPROCLEN(data-value)_|         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_SYNCLEVEL(data-area)_|                                            |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PIPLIST(pointer-ref)__PIPLENGTH(data-area)_|                      |
 * |                                                                        |
 * | >__RETCODE(data-area)__><                                              |
 * |                                                                        |
 * | GEP4:                                                                  |
 * | |__PROCLENGTH(data-area)__|                                            |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>GDS EXTRACT PROCESS retrieves values from an APPC
 * basic conversation. The data retrieved is valid only when the
 * command is issued against an APPC basic principal facility.
 * The return code is given in RETCODE (see Table 5). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 * @param CONVID(name)
 * identifies the conversation the command relates to. The
 * 4-character name identifies the token representing the
 * principal session (returned by a previously executed
 * GDS ASSIGN command).
 * @param MAXPROCLEN(data-value)
 * specifies the length (1-64 characters) of the
 * PROCNAME data area. If MAXPROCLEN is not
 * specified, the buffer is assumed to have 32 bytes.
 * @param PIPLENGTH(data-area)
 * specifies a halfword binary data area that is to receive
 * the length of the PIPLIST received by a GDS EXTRACT
 * PROCESS command.
 * @param PIPLIST(pointer-ref)
 * specifies the pointer reference that is to be set to the
 * address of the PIPLIST received by a GDS EXTRACT
 * PROCESS command. A zero setting indicates that no
 * PIPLIST was received.
 * @param PROCLENGTH(data-area)
 * specifies a halfword binary data area that is set to the
 * actual length of the process name.
 * @param PROCNAME(data-area)
 * specifies the application target data area (1-64 bytes)
 * into which the process name, specified in the APPC
 * attach function management header, is to be moved.
 * The area is padded with blanks, if necessary.
 * @param RETCODE(data-area)
 * specifies the 6-byte application data area into which
 * return code information is to be moved.
 * @param SYNCLEVEL(data-area)
 * specifies a halfword binary data area that is set to
 * indicate the synchronization level in effect for the current
 * conversation. The possible values are:
 *     <dl compact>
 *     <DT>0<DD> None
 *     <DT>1<DD> Confirm
 *     <DT>2<DD> Syncpoint
 *     </dl>
 * <p>Table  5.  GDS EXTRACT PROCESS return codes
 * <pre>
 * RETCODE          Description
 * (hexadecimal)
 * 03 00            CONVID is for a session that is not APPC.
 * 03 00            CONVID is for a session that is in use by CPI
 *                  Communications.
 * 03 00            CONVID is for a session that is not the
 *                  principal facility.
 * 03 00            Principal facility was not started by terminal
 *                  data.
 * 03 04            CONVID is for a conversation that is not basic.
 * 04               CONVID is for a session that is not allocated
 *                  to the task, or that is a relay link.
 * 05 00 00 00      PROCLENGTH value returned is greater than
 * 00 20            MAXPROCLEN value.
 * </pre>
 */
function "GDS EXTRACT PROCESS"(
   CONVID(name),
   MAXPROCLEN(data-value),
   PIPLENGTH(data-area),
   PIPLIST(pointer-ref),
   PROCLENGTH(data-area),
   PROCNAME(data-area),
   RETCODE(data-area),
   SYNCLEVEL(data-area),
   );

/**
 * Return an APPC session to CICS (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS FREE__CONVID(name)__CONVDATA(data-area)______________________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS FREE returns the session to CICS. The issue of this
 * command is valid only when the conversation is finished, that
 * is, the conversation state is FREE.
 * <P>The return code is given in RETCODE (see Table 6). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to be freed. The 4-character
 *               name identifies either the token returned by a previously
 *               executed GDS ALLOCATE command, or the token
 *               representing the principal session (returned by a
 *               previously executed GDS ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The STATE
 * on a FREE command returns a cvda code of 00 if there
 * is no longer an active conversation. The other output
 * cvda values are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  6.  GDS FREE return codes
 * <PRE>
 * RETCODE          Description
 * (hexadecimal)
 * 03 00            CONVID is for a session that is not APPC.
 * 03 00            CONVID is for a session that is in use by CPI
 *                  Communications.
 * 03 04            CONVID is for a conversation that is not basic.
 * 03 08            A state check has occurred.
 * 04               CONVID is for a session that is not allocated
 *                  to the task, or that is a relay link.
 * </PRE>
 */
function "GDS FREE"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Terminate APPC basic conversation abnormally (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ISSUE ABEND__CONVID(name)__CONVDATA(data-area)_______________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>GDS ISSUE ABEND causes an APPC basic conversation to
 * end immediately, regardless of the conversation state. The
 * partner transaction is informed.
 * <P>The return code is given in RETCODE (see Table 7). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  7.  GDS ISSUE ABEND return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 04              CONVID is for a session that is not allocated
 *                 to the task, or that is a relay link.
 * </PRE>
 */
function "GDS ISSUE ABEND"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Issue synchronization request on APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ISSUE CONFIRMATION__CONVID(name)__CONVDATA(data-area)________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS ISSUE CONFIRMATION issues a synchronization
 * request in response to a GDS SEND CONFIRM issued by a
 * partner transaction.
 * <P>The return code is given in RETCODE (see Table 8). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  8.  GDS ISSUE CONFIRMATION return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 03 14           The command was issued for a sync level 0
 *                 conversation.
 * 04              CONVID is for a session that is not allocated
 *                 to the task, or that is a relay link.
 * </PRE>
 */
function "GDS ISSUE CONFIRMATION"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Inform APPC basic conversation partner of error (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ISSUE ERROR__CONVID(name)__CONVDATA(data-area)_______________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS ISSUE ERROR informs the conversation partner that
 * there is an error.
 * <P>The return code is given in RETCODE, see below. For a list
 * of return code values, see the  CICS Distributed Transaction
 * Programming Guide. EXEC CICS conditions are never raised
 * on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  9.  GDS ISSUE ERROR return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 04              CONVID is for a session that is not allocated
 *                 to task, or that is a relay link.
 * </PRE>
 */
function "GDS ISSUE ERROR"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Issue first flow of syncpoint request on APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ISSUE PREPARE__CONVID(name)__CONVDATA(data-area)_____________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS ISSUE PREPARE issues first flow of syncpoint request.
 * The return code is given in RETCODE (see Table 10). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  10.  GDS ISSUE PREPARE return codes
 * <pre>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 0C           The command was issued on a conversation
 *                 that is not sync-level 2.
 * 03 24           A state error occurred.
 * 04              CONVID is for a session that is not allocated
 *                 to task, or that is a relay link.
 * </PRE>
 */
function "GDS ISSUE PREPARE"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda),
   );

/**
 * Request change of direction from sending transaction APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS ISSUE SIGNAL__CONVID(name)__CONVDATA(data-area)______________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><B>Description</B>
 * <P>GDS ISSUE SIGNAL requests a change of direction.
 * The return code is given in RETCODE (see Table 11). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 * <p>Table  11.  GDS ISSUE SIGNAL return codes
 * <pre>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 04              CONVID is for a session that is not allocated
 *                 to task, or that is a relay link.
 * </pre>
 */
function "GDS ISSUE SIGNAL"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda)
   );

/**
 * Receive data on an APPC basic conversation (assembler-language and C programs only).
 *
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS RECEIVE__CONVID(name)____INTO(data-area)_____________________> |
 * |                                |_SET(pointer-ref)_|                    |
 * |                                                                        |
 * | >__FLENGTH(data-area)________________________________BUFFER__________> |
 * |                        |_MAXFLENGTH(data-value)_|  |_LLID___|          |
 * |                                                                        |
 * | >__CONVDATA(data-area)__RETCODE(data-area)___________________><        |
 * |                                             |_STATE(cvda)_|            |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * GDS RECEIVE receives data and indicators from a partner
 * transaction.
 * <p>The return code is given in RETCODE (see Table 12
 * ). For a list of return code values, see the  CICS
 * Distributed Transaction Programming Guide. EXEC CICS
 * conditions are never raised on GDS commands.
 *
 * <p>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 * @param BUFFER
 * specifies that the length of the data passed to the
 * application program in response to the RECEIVE
 * command is to be restricted only by the length specified
 * in the MAXFLENGTH option, and is not to be affected
 * by GDS structured field boundaries. Control is returned
 * to the application program when this length has been
 * received, or when a synchronization request,
 * change-direction, or end-bracket is received.
 * @param CONVDATA(data-area)
 * specifies the 24-byte application data area into which
 * conversation-related information is to be moved. A
 * description of the format of the data area is given in the
 * discussion of CONVDATA fields in the  CICS Distributed
 * Transaction Programming Guide.
 * @param CONVID(name)
 * identifies the conversation to which the command
 * relates. The 4-character name identifies either the token
 * returned by a previously executed GDS ALLOCATE
 * command, or the token representing the principal
 * session (returned by a previously executed GDS
 * ASSIGN command).
 * @param FLENGTH(data-area)
 * specifies a fullword binary data area that is set to the
 * length of the data made available to the application
 * program.
 * @param INTO(data-area)
 * specifies the application target data area into which data
 * is to be received from the application program connected
 * to the other end of the current conversation. The length
 * of this area must not be less than the value specified in
 * the MAXFLENGTH option.
 * @param LLID
 * specifies that the delimiter to be used by CICS to
 * terminate the passing of data to the application program
 * is the end of a GDS structured field, if this occurs before
 * the MAXFLENGTH limit is reached.
 * @param MAXFLENGTH(data-value)
 * specifies, as a fullword binary value, either the length of
 * the target data area specified in the INTO option, or the
 * maximum length of data to be addressed by the pointer
 * reference specified in the SET option. The length must
 * not exceed 32 767 bytes. CICS does not receive more
 * data than the MAXFLENGTH value allows.
 * @param RETCODE(data-area)
 * specifies the 6-byte application data area into which
 * return code information is to be moved.
 * @param SET(pointer-ref)
 * specifies the pointer reference to be set to the address
 * of data received from the application program connected
 * to the other end of the current conversation. The pointer
 * reference, unless changed by other commands or
 * statements, is valid until the next RECEIVE (GDS or
 * APPC) command, or the end of the task.
 * <p>If DATALOCATION(ANY) is associated with the
 * application program, the address of the data can be
 * above or below the 16MB line.
 * <p>If DATALOCATION(BELOW) is associated with the
 * application program, and the data resides above the
 * 16MB line, the data is copied below the 16MB line, and
 * the address of this copy is returned.
 * <p>If TASKDATAKEY(USER) is specified for the running
 * task, and storage protection is active, the data returned
 * is in a user-key. If TASKDATAKEY(CICS) is specified
 * and storage protection is active, the data returned is in a
 * CICS-key.
 *
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 * <p><i>Table  12.  GDS RECEIVE return codes</i>
 * <pre>
 * RETCODE           Description
 * (hexadecimal)
 * <hr>03 00             CONVID is for a session that is not APPC.
 * 03 00             CONVID is for a session that is in use by CPI
 *                   Communications.
 * 03 04             CONVID is for a conversation that is not basic.
 * 03 08             A state check occurred.
 * 04                CONVID is for a session that is not allocated
 *                   to the task, or that is a relay link.
 * 05 00 00 00       MAXFLENGTH is outside the range 0 through
 * 7F FF             32 767.
 */
function "GDS RECEIVE"(
   BUFFER,
   CONVDATA(data-area),
   CONVID(name),
   FLENGTH(data-area),
   INTO(data-area),
   LLID,
   MAXFLENGTH(data-value),
   RETCODE(data-area),
   SET(pointer-ref),
   STATE(cvda),
   );

/**
 * Send data on an APPC basic conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS SEND__CONVID(name)___________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)__FLENGTH(data-value)_|  |_INVITE_|                |
 * |                                              |_LAST___|                |
 * |                                                                        |
 * | >_______________CONVDATA(data-area)__RETCODE(data-area)______________> |
 * |    |_CONFIRM_|                                                         |
 * |    |_WAIT____|                                                         |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_STATE(cvda)_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS SEND sends data.
 * <P>The return code is given in RETCODE (see Table 13
 * ). For a list of return code values, see the  CICS
 * Distributed Transaction Programming Guide. EXEC CICS
 * conditions are never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONFIRM
 *                allows an application working at synchronization level 1
 *                or 2 to synchronize its processing with that of a process
 *                in a remote system. The actions taken to synchronize
 *                processing are defined by the application programs
 *                involved. The CONFIRM option causes RQD2 to be
 *                added to the data already sent, and forces a WAIT. On
 *                receipt of the indicator, the remote process takes the
 *                agreed actions and then sends a response. When the
 *                WAIT completes, CDBERR is set to X'00' if the
 *                appropriate response has been received.
 * @param CONVDATA(data-area)
 *                specifies the 24-byte application data area into which
 *                conversation-related information is to be moved. A
 *                description of the format of the data area is given in the
 *                discussion of CONVDATA fields in the  CICS Distributed
 *                Transaction Programming Guide.
 * @param CONVID(name)
 *                identifies the conversation to which the command
 *                relates. The 4-character name identifies either the token
 *                returned by a previously executed GDS ALLOCATE
 *                command, or the token representing the principal
 *                session (returned by a previously executed GDS
 *                ASSIGN command).
 * @param FLENGTH(data-value)
 *                specifies the length (as a fullword binary value in the
 *                range 1-32 767) of the data specified in the FROM
 *                option.
 * @param FROM(data-area)
 *                specifies the data that is to be sent.
 * @param INVITE
 *                allows an application program to add a change-direction
 *                indicator to data already sent to a process in a
 *                connected APPC system. Control data is not transmitted
 *                by CICS until the subsequent execution of a WAIT or a
 *                SYNCPOINT command, unless CONFIRM or WAIT is
 *                also coded on the GDS SEND INVITE command.
 * @param LAST
 *                allows an application program to add CEB to data
 *                already sent to a process in a connected APPC system.
 *                CEB is not transmitted by CICS until the subsequent
 *                execution of a WAIT or a SYNCPOINT command,
 *                unless CONFIRM or WAIT is also coded on the GDS
 *                SEND LAST command. Note that if one of these
 *                commands fails because of a conversation-related error,
 *                the conversation remains in bracket. In such a case, the
 *                application program should execute a GDS RECEIVE
 *                command. However, GDS SEND LAST WAIT (with no
 *                data) always causes the conversation to be deallocated.
 * @param RETCODE(data-area)
 *                specifies the 6-byte application data area into which
 *                return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * @param WAIT
 * ensures that all data and indicators so far sent on a
 * conversation are erased from the partner transaction.
 * <P>If the WAIT option is not used, data from successive
 * SEND commands is accumulated by CICS, together with
 * any indicators, in an internal buffer. If the buffer
 * becomes full, most of the accumulated data is
 * transmitted to the remote system, but the accumulated
 * indicators are not. Transmission of the accumulated data
 * plus the indicators is forced by the WAIT or CONFIRM
 * options of the GDS SEND command, or by a GDS WAIT
 * command.
 * <P>Table  13.  GDS SEND return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * <hr>03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 03 14           The CONFIRM option has been used on a
 *                 sync level 0 conversation.
 * 03 10           LL error (incorrect or incomplete).
 * 04              CONVID is for a session that is not allocated
 *                 to the task, or that is a relay link.
 * 05 00 00 00     The FLENGTH value is outside the range 0
 * 7F FF           through 32 767.
 */
function "GDS SEND"(
   CONFIRM,
   CONVDATA(data-area),
   CONVID(name),
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   RETCODE(data-area),
   STATE(cvda),
   WAIT
   );

/**
 * Ensure accumulated data transmitted on an APPC conversation (assembler-language and C programs only).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GDS WAIT__CONVID(name)__CONVDATA(data-area)______________________> |
 * |                                                                        |
 * | >__RETCODE(data-area)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>GDS WAIT ensures that the accumulated data has been
 * sent.
 * <P>The return code is given in RETCODE (see Table 14). For a
 * list of return code values, see the  CICS Distributed
 * Transaction Programming Guide. EXEC CICS conditions are
 * never raised on GDS commands.
 *
 * <P>In general, the arguments can be replaced by absolute or
 * relocatable assembler-language expressions.
 *
 * @param CONVDATA(data-area)
 *               specifies the 24-byte application data area into which
 *               conversation-related information is to be moved. A
 *               description of the format of the data area is given in the
 *               discussion of CONVDATA fields in the  CICS Distributed
 *               Transaction Programming Guide.
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed GDS ALLOCATE
 *               command, or the token representing the principal
 *               session (returned by a previously executed GDS
 *               ASSIGN command).
 * @param RETCODE(data-area)
 *               specifies the 6-byte application data area into which
 *               return code information is to be moved.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * <P>Table  14.  GDS WAIT return codes
 * <PRE>
 * RETCODE         Description
 * (hexadecimal)
 * 03 00           CONVID is for a session that is not APPC.
 * 03 00           CONVID is for a session that is in use by CPI
 *                 Communications.
 * 03 04           CONVID is for a conversation that is not basic.
 * 03 08           A state check has occurred.
 * 04              CONVID is for a session that is not allocated
 *                 to task, or that is a relay link.
 * </PRE>
 */
function "GDS WAIT"(
   CONVDATA(data-area),
   CONVID(name),
   RETCODE(data-area),
   STATE(cvda)
   );

/**
 * Get the next number from the named counter.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GET COUNTER(name)__________________VALUE(data-area)_______________> |
 * |                        |_POOL(name)_|                                  |
 * |                                                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INCREMENT(data-value)______________|  |_WRAP_|                    |
 * |                             |_REDUCE_|                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_COMPAREMIN(data-value)_|  |_COMPAREMAX(data-value)_|              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SUPPRESSED                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>These counter commands obtain, from the named counter
 * server, the current number from the named counter in the
 * specifed pool, and updates the current number by the
 * default, or by a specified, increment. The default increment is
 * 1. COUNTER operates with fullword  signed binary values,
 * and DCOUNTER operates with doubleword  unsigned binary
 * values.
 * You can use the COMPAREMAX and COMPAREMIN
 * options to obtain a number only if it falls within a specified
 * range, or is above or below a specified value.
 * For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The INCREMENT value is invalid. The value
 * specified cannot be greater than the total range of
 * the counter ((maximum value - minimum value)
 * +  1).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * LENGERR occurs for COUNTER commands only and
 * does not apply to DCOUNTER requests. It occurs when
 * a counter that was defined by a DCOUNTER command
 * has become negative when acccessed as a fullword
 * signed binary value (that is, the counter uses more than
 * 31 bits).
 * <p>In each of the three cases of overflow, the named
 * counter server completes the operation, and returns a
 * warning response to CICS, which CICS returns to your
 * application program as the RESP2 value. The data area
 * contains the low-order 32 bits returned from the named
 * counter server, which could be a negative number.
 * RESP2 values:
 * <DL compact>
 * <DT>001<DD> The current value that the server has attempted to
 * return in the VALUE data area has overflowed into
 * the high-order (sign) bit (that is, the value returned
 * is negative).
 * <DT>002<DD> The current value is too large for a fullword data
 * area by only 1 bit. In this case, the overflow value
 * is exactly 1.
 * <DT>003<DD> The current value is too large for a fullword data
 * area by a value greater than 1.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> The maximum value for the named counter has
 * already been assigned and the counter is in the
 * 'counter-at-limit' condition. No more counter
 * numbers can be assigned until the named counter
 * has been reset, either by a REWIND command, or
 * by specifying the WRAP option on the GET
 * command.
 * <DT>103<DD> The current value of the named counter is:
 * <UL>
 * <LI>not within the range specified by the
 * COMPAREMAX and COMPAREMIN
 * parameters, when both are specified
 * <LI>greater than the COMPAREMAX parameter or
 * less than the COMPAREMIN parameter,
 * when only one option is specified.
 * </UL>
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param COMPAREMAX(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the GET command conditional on
 *               the comparison:
 *               <UL>
 *               <LI>If the current value to be assigned is less than, or
 *               equal to, the value specified on the COMPAREMAX
 *               parameter, the current value is returned, with
 *               response normal
 *               <LI>If the current value is greater than the specified
 *               value, CICS returns an exception condition.
 *               </UL>
 *               <p>The value you specify on the COMPAREMAX parameter
 *               can be less than the value on the COMPAREMIN
 *               parameter, in which case the current value is considered
 *               to be in range if it satisfies the COMPAREMIN  or the
 *               COMPAREMAX comparison. In the normal case where
 *               the COMPAREMIN value is less than the
 *               COMPAREMAX value, the current value must satisfy
 *               both comparisons (that is, it must be greater than, or
 *               equal to, the COMPAREMIN value,  and be less than, or
 *               equal to the COMPAREMAX value).
 *               COMPAREMIN( data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the GET command conditional on
 *               the comparison:
 *               <UL>
 *               <LI>If the current value to be assigned is equal to, or
 *               greater than, the value specified on the
 *               COMPAREMIN parameter, the CICS returns the
 *               current value, with response normal
 *               <LI>If the current value is less than the specified value,
 *               CICS returns an exception condition.
 *               </UL>
 *               <p><b>Note</b>:  The value you specify on the COMPAREMIN
 *               parameter can be greater than the value on the
 *               COMPAREMAX parameter. See the
 *               COMPAREMAX parameter for the effect of this.
 * @param COUNTER(name)
 *               specifies the name of the fullword counter from which
 *               the current number is to be assigned to the application
 *               program. The name can be up to 16 alphanumeric
 *               characters. If  name is a variable that contains a name
 *               that is less than 16 characters, the name must be
 *               padded with trailing blanks.
 * @param INCREMENT(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), an increment by
 *               which the named counter is to be updated, instead of
 *               the default value of 1. The counter is incremented after
 *               the current number has been assigned.
 *               <p>Specifying an increment to override the default
 *               increment of 1 enables the application program to obtain
 *               exclusive use of more than 1 number for each call. For
 *               example, if you want to obtain exclusive use of a block
 *               of 20 numbers, specify INCREMENT(20).
 *               <p>See the description of the REDUCE and WRAP options
 *               for the effect of specifying an increment when the
 *               counter is at, or near, the maximum value.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 * @param REDUCE
 *               specifies that you want the named counter server to
 *               reduce the specified increment if the range of numbers
 *               remaining to be assigned is too small.
 *               <p>The range of numbers is too small if the difference
 *               between the current value and the maximum value plus
 *               1 is less then the specified increment, in which case:
 *               <UL>
 *               <LI>If you specify REDUCE, the INCREMENT
 *               parameter value is reduced and the GET request
 *               succeeds. In this case, the GET command has
 *               reserved a range of numbers less than that
 *               specified by the INCREMENT parameter, and the
 *               current value is updated to the maximum value plus
 *               1.
 *               <LI>If you do not specify the REDUCE option, the result
 *               depends on whether or not you specify the WRAP
 *               option. If the REDUCE and WRAP options are both
 *               omitted, the request fails with the counter-at-limit
 *               error (SUPPRESSED, RESP2=101), but the current
 *               number is not changed. For example, if a request
 *               specifies an INCREMENT parameter value of 15
 *               when the current number is 199 990 and the counter
 *               maximum number is defined as 199 999, the GET
 *               command fails because updating the counter by the
 *               specified increment would cause the current number
 *               to exceed 200 000.
 *               </UL>
 *               <p>See the WRAP parameter description for information
 *               about the effect of WRAP when REDUCE is omitted.
 * @param VALUE(data-area)
 *               specifies the data area (fullword signed data-area for
 *               COUNTER, and doubleword unsigned data-area for
 *               DCOUNTER) into which CICS returns the current
 *               number, obtained from the named counter server for the
 *               specified pool.
 * @param WRAP
 * specifies that you want the named counter server
 * automatically to perform a rewind of the named counter
 * if it is in a counter-at-limit condition, avoiding the error
 * condition that would otherwise result.
 * <p>If it finds that the named counter is in the counter-at-limit
 * condition, or that the increment specified without the
 * REDUCE option would cause the condition, the server:
 * <UL>
 * <LI>Resets the current value of the named counter
 * equal to the minimum value defined for the counter
 * <LI>Returns the new current value to the application
 * program, with DFHRESP(NORMAL)
 * <LI>Updates the current value by the required increment
 * ready for the next request.
 * </UL>
 * If you omit the WRAP option, and the counter-at-limit
 * condition has been reached, CICS returns
 * <pre>
 * SUPPRESSED, RESP2=101.
 * </pre>
 */
function "GET COUNTER"(
   COUNTER(name),
   COMPAREMAX(data-value),
   INCREMENT(data-value),
   POOL(poolname),
   REDUCE,
   VALUE(data-area),
   WRAP,
   );


/**
 * Get the next number from the named counter.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GET DCOUNTER(name)__________________VALUE(data-area)______________> |
 * |                         |_POOL(name)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INCREMENT(data-value)______________|  |_WRAP_|                    |
 * |                             |_REDUCE_|                                 |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_COMPAREMIN(data-value)_|  |_COMPAREMAX(data-value)_|              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SUPPRESSED                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>These counter commands obtain, from the named counter
 * server, the current number from the named counter in the
 * specifed pool, and updates the current number by the
 * default, or by a specified, increment. The default increment is
 * 1. COUNTER operates with fullword  signed binary values,
 * and DCOUNTER operates with doubleword  unsigned binary
 * values.
 * You can use the COMPAREMAX and COMPAREMIN
 * options to obtain a number only if it falls within a specified
 * range, or is above or below a specified value.
 * For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The INCREMENT value is invalid. The value
 * specified cannot be greater than the total range of
 * the counter ((maximum value - minimum value)
 * +  1).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * LENGERR occurs for COUNTER commands only and
 * does not apply to DCOUNTER requests. It occurs when
 * a counter that was defined by a DCOUNTER command
 * has become negative when acccessed as a fullword
 * signed binary value (that is, the counter uses more than
 * 31 bits).
 * <p>In each of the three cases of overflow, the named
 * counter server completes the operation, and returns a
 * warning response to CICS, which CICS returns to your
 * application program as the RESP2 value. The data area
 * contains the low-order 32 bits returned from the named
 * counter server, which could be a negative number.
 * RESP2 values:
 * <DL compact>
 * <DT>001<DD> The current value that the server has attempted to
 * return in the VALUE data area has overflowed into
 * the high-order (sign) bit (that is, the value returned
 * is negative).
 * <DT>002<DD> The current value is too large for a fullword data
 * area by only 1 bit. In this case, the overflow value
 * is exactly 1.
 * <DT>003<DD> The current value is too large for a fullword data
 * area by a value greater than 1.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> The maximum value for the named counter has
 * already been assigned and the counter is in the
 * 'counter-at-limit' condition. No more counter
 * numbers can be assigned until the named counter
 * has been reset, either by a REWIND command, or
 * by specifying the WRAP option on the GET
 * command.
 * <DT>103<DD> The current value of the named counter is:
 * <UL>
 * <LI>not within the range specified by the
 * COMPAREMAX and COMPAREMIN
 * parameters, when both are specified
 * <LI>greater than the COMPAREMAX parameter or
 * less than the COMPAREMIN parameter,
 * when only one option is specified.
 * </UL>
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param COMPAREMAX(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the GET command conditional on
 *               the comparison:
 *               <UL>
 *               <LI>If the current value to be assigned is less than, or
 *               equal to, the value specified on the COMPAREMAX
 *               parameter, the current value is returned, with
 *               response normal
 *               <LI>If the current value is greater than the specified
 *               value, CICS returns an exception condition.
 *               </UL>
 *               <p>The value you specify on the COMPAREMAX parameter
 *               can be less than the value on the COMPAREMIN
 *               parameter, in which case the current value is considered
 *               to be in range if it satisfies the COMPAREMIN  or the
 *               COMPAREMAX comparison. In the normal case where
 *               the COMPAREMIN value is less than the
 *               COMPAREMAX value, the current value must satisfy
 *               both comparisons (that is, it must be greater than, or
 *               equal to, the COMPAREMIN value,  and be less than, or
 *               equal to the COMPAREMAX value).
 *               COMPAREMIN( data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the GET command conditional on
 *               the comparison:
 *               <UL>
 *               <LI>If the current value to be assigned is equal to, or
 *               greater than, the value specified on the
 *               COMPAREMIN parameter, the CICS returns the
 *               current value, with response normal
 *               <LI>If the current value is less than the specified value,
 *               CICS returns an exception condition.
 *               </UL>
 *               <p><b>Note</b>:  The value you specify on the COMPAREMIN
 *               parameter can be greater than the value on the
 *               COMPAREMAX parameter. See the
 *               COMPAREMAX parameter for the effect of this.
 * @param DCOUNTER(name)
 *               specifies the name of the doubleword counter from
 *               which the current number is to be assigned to the
 *               application program. The name can be up to 16
 *               alphanumeric characters. If  name is a variable that
 *               contains a name that is less than 16 characters, the
 *               name must be padded with trailing blanks.
 * @param INCREMENT(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), an increment by
 *               which the named counter is to be updated, instead of
 *               the default value of 1. The counter is incremented after
 *               the current number has been assigned.
 *               <p>Specifying an increment to override the default
 *               increment of 1 enables the application program to obtain
 *               exclusive use of more than 1 number for each call. For
 *               example, if you want to obtain exclusive use of a block
 *               of 20 numbers, specify INCREMENT(20).
 *               <p>See the description of the REDUCE and WRAP options
 *               for the effect of specifying an increment when the
 *               counter is at, or near, the maximum value.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 * @param REDUCE
 *               specifies that you want the named counter server to
 *               reduce the specified increment if the range of numbers
 *               remaining to be assigned is too small.
 *               <p>The range of numbers is too small if the difference
 *               between the current value and the maximum value plus
 *               1 is less then the specified increment, in which case:
 *               <UL>
 *               <LI>If you specify REDUCE, the INCREMENT
 *               parameter value is reduced and the GET request
 *               succeeds. In this case, the GET command has
 *               reserved a range of numbers less than that
 *               specified by the INCREMENT parameter, and the
 *               current value is updated to the maximum value plus
 *               1.
 *               <LI>If you do not specify the REDUCE option, the result
 *               depends on whether or not you specify the WRAP
 *               option. If the REDUCE and WRAP options are both
 *               omitted, the request fails with the counter-at-limit
 *               error (SUPPRESSED, RESP2=101), but the current
 *               number is not changed. For example, if a request
 *               specifies an INCREMENT parameter value of 15
 *               when the current number is 199 990 and the counter
 *               maximum number is defined as 199 999, the GET
 *               command fails because updating the counter by the
 *               specified increment would cause the current number
 *               to exceed 200 000.
 *               </UL>
 *               <p>See the WRAP parameter description for information
 *               about the effect of WRAP when REDUCE is omitted.
 * @param VALUE(data-area)
 *               specifies the data area (fullword signed data-area for
 *               COUNTER, and doubleword unsigned data-area for
 *               DCOUNTER) into which CICS returns the current
 *               number, obtained from the named counter server for the
 *               specified pool.
 * @param WRAP
 * specifies that you want the named counter server
 * automatically to perform a rewind of the named counter
 * if it is in a counter-at-limit condition, avoiding the error
 * condition that would otherwise result.
 * <p>If it finds that the named counter is in the counter-at-limit
 * condition, or that the increment specified without the
 * REDUCE option would cause the condition, the server:
 * <UL>
 * <LI>Resets the current value of the named counter
 * equal to the minimum value defined for the counter
 * <LI>Returns the new current value to the application
 * program, with DFHRESP(NORMAL)
 * <LI>Updates the current value by the required increment
 * ready for the next request.
 * </UL>
 * If you omit the WRAP option, and the counter-at-limit
 * condition has been reached, CICS returns
 * <pre>
 * SUPPRESSED, RESP2=101.
 * </pre>
 */
function "GET DCOUNTER"(
   DCOUNTER(name),
   COMPAREMAX(data-value),
   INCREMENT(data-value),
   POOL(poolname),
   REDUCE,
   VALUE(data-area),
   WRAP,
   );

/**
 * Get main storage.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__GETMAIN__SET(ptr-ref)____FLENGTH(data-value)_____________________> |
 * |                            |                      |_BELOW_| |          |
 * |                            |_LENGTH(data-value)_____________|          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INITIMG(data-value)_|  |_SHARED_|  |_NOSUSPEND_|                  |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_USERDATAKEY_|                                                     |
 * |    |_CICSDATAKEY_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, NOSTG                                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Dynamic transaction routing</b>
 * <p>Using GETMAIN with SHARED could create inter-transaction affinities that adversely affect the use of dynamic transaction
 * routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>GETMAIN gets a main storage area of the size indicated by
 * the FLENGTH option. (You can also use the LENGTH
 * option, but this is supported for compatibility purposes and
 * you are strongly recommended to use FLENGTH.) The
 * address of the area is returned in the pointer reference
 * supplied in the SET option.
 * <p>CICS always allocates on double-word boundaries and
 * rounds the requested length up to the nearest double-word
 * multiple. Because there is no default initialization, you must
 * use the INITIMG option if you require the storage to be
 * initialized to a specific bit configuration.
 * <p>CICS allocates storage from one of six different dynamic
 * storage areas (DSAs):
 * <UL>
 * <LI>The CICS dynamic storage area (CDSA), below the
 * 16MB line
 * <LI>The user dynamic storage area (UDSA), below the
 * 16MB line
 * <LI>The shared dynamic storage area (SDSA), below the
 * 16MB line
 * <LI>The extended CICS dynamic storage area (ECDSA),
 * above the 16MB line
 * <LI>The extended user dynamic storage area (EUDSA),
 * above the 16MB line
 * <LI>The extended shared dynamic storage area (ESDSA),
 * above the 16MB line
 * </UL>
 * <p><b>Note</b>:  There are two other dynamic storage areas --the
 * read-only DSA (RDSA) and the extended read-only
 * DSA (ERDSA) --but you cannot GETMAIN storage
 * from these DSAs.
 * <p>CICS determines whether to obtain the requested storage
 * above or below the 16MB line, from one of the CICS- or
 * user-key DSAs, or from one of the shared DSAs, according
 * to the following options:
 * <UL>
 * <LI>The FLENGTH option with BELOW also specified
 * <LI>The FLENGTH option alone, in conjunction with the
 * addressing mode of the requesting program
 * <LI>The LENGTH option
 * <LI>The SHARED option
 * </UL>
 * <p>The above- or below-the-line allocation is summarized in the
 * following table:
 * <pre>
 * Options            address mode
 *                    24-bit    31-bit
 * <hr>FLENGTH BELOW      A DSA     A DSA
 * FLENGTH along      A DSA     An EDSA
 * LENGTH             A DSA     A DSA
 * </pre>
 * <p>CICS decides whether to allocate storage from a CICS-key
 * or user-key DSA, or from a shared DSA, according to the
 * following options:
 * <UL>
 * <LI>The USERDATAKEY option on the GETMAIN command
 * <LI>The CICSDATAKEY option on the GETMAIN command
 * <LI>The TASKDATAKEY option on the RDO TRANSACTION
 * resource definition under which the requesting program
 * is running if the USERDATAKEY or CICSDATAKEY
 * option is omitted
 * <LI>The SHARED option on the GETMAIN command
 * </UL>
 * The data-key option on the GETMAIN command overrides
 * the TASKDATAKEY option on the RDO TRANSACTION
 * resource definition. The effect of the data-key options,
 * without the SHARED option, is summarized in the following
 * table:
 * <p><b>Without SHARED option</b>
 * <pre>
 * No data-key       USERDATAKEY        CICSDATAKEY
 *   Option           specified          specified
 * <hr>Determined by   User-key storage   CICS-KEY storage
 * TASKDATAKEY     (from USDA or      (from CDSA or
 * on transaction  EUDSA)             ECDSA)
 * definition
 * </pre>
 * The effect of the SHARED option is summarized in the
 * following table:
 * <p><b>Without SHARED option</b>
 * <pre>
 * No data-key       USERDATAKEY        CICSDATAKEY
 *   Option           specified          specified
 * <hr>Determined by   User-key storage   CICS-KEY storage
 * TASKDATAKEY     (from SSDA or      (from CDSA or
 * on transaction  ESDSA)             ECDSA)
 * definition
 * </pre>
 *
 * The storage that a task gets is available until it is released
 * with a FREEMAIN command. For an area obtained without
 * the SHARED option, only the task that acquired the storage
 * may release it, and at task end CICS automatically releases
 * such storage not already released. Note that any storage
 * acquired with the SHARED option is accessible by all tasks,
 * including those that are running with transaction isolation.
 * <p>A SHARED area, on the other hand, is not released at task
 * end and remains until explicitly freed; any task may issue the
 * FREEMAIN. This means that you can use SHARED storage
 * in task-to-task communication.
 * <p>You cannot, however, use the storage obtained as a TIOA
 * for subsequent terminal operations, because this could cause
 * storage violations.
 * <p>Specifying CICSDATAKEY ensures that the requesting
 * program obtains CICS-key storage from a CICS DSA, even if
 * TASKDATAKEY(USER) is specified on the RDO
 * TRANSACTION resource definition.
 *
 * @conditions
 * <DL>
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The FLENGTH value is less than 1 or greater than
 * the length of the target storage area from which
 * the request is to be satisfied. See the discussion
 * about DSAs.
 * also occurs if the LENGTH value is zero.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSTG<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>2<DD> The storage requested is more than is currently
 * available in the target DSA. See the discussion
 * about DSAs.
 * </DL>
 * <p>Default action: ignore the condition. An active HANDLE
 * CONDITION NOSTG also raises this condition.
 * </DL>
 * @example
 * The following example shows how to get a 1024-byte area
 * from user-key storage below the 16MB line (assuming that
 * TASKDATAKEY(USER) is specified on the RDO
 * TRANSACTION resource definition), and initialize it to
 * spaces:
 * <pre>
 * EXEC CICS GETMAIN SET(PTR)
 *   FLENGTH(1024)
 *   BELOW
 *   INITIMG(BLANK)
 * </pre>
 * You must define BLANK in your program as the character
 * representing a space.
 * The following example shows how to get a 2048-byte area
 * from CICS-key storage above the 16MB line (regardless of
 * the TASKDATAKEY option specified on the transaction
 * resource definition), and initialize it to spaces:
 * <pre>
 * EXEC CICS GETMAIN SET(PTR)
 *   FLENGTH(2048)
 *   INITIMG(BLANK)
 *   CICSDATAKEY
 * </pre>
 * @param BELOW
 *                  specifies that storage is to be obtained below the 16MB
 *                  line, that is, from the CICS DSA.
 * @param CICSDATAKEY
 *                  specifies that CICS is to allocate storage from one of the
 *                  CICS-key DSAs (the CDSA or ECDSA), overriding the
 *                  TASKDATAKEY option specified on the transaction
 *                  resource definition. If you do not specify the data key,
 *                  CICS determines the type of storage (CICS-key or
 *                  user-key) according to the TASKDATAKEY option on the
 *                  transaction resource definition.
 * @param FLENGTH(data-value)
 *                  specifies the number of bytes of storage required, in
 *                  fullword binary format.
 *                  <p>The maximum length that you can specify is the value of
 *                  the corresponding DSA limit parameter, either DSALIMIT
 *                  or EDSALIMIT. These are the system initialization
 *                  parameters that define the overall storage limit within
 *                  which CICS can allocate and manage the individual
 *                  DSAs.
 *                  <p>If the length requested is bigger than the DSALIMIT or
 *                  EDSALIMIT value, the LENGERR condition occurs. If it
 *                  is not bigger than these limits, but is more than is
 *                  available, NOSTG occurs.
 * @param INITIMG(data-value)
 *                  specifies an optional 1-byte initialization value. If you
 *                  specify INITIMG, CICS sets every byte of the acquired
 *                  storage to the bit string you provide. Otherwise, CICS
 *                  does not initialize the storage. In COBOL programs only,
 *                  you must use a data area rather than a data value to
 *                  define the initialization bit string.
 * @param LENGTH(data-value)
 *                  specifies the number of bytes (unsigned halfword binary
 *                  value) of storage required. LENGTH implies storage
 *                  from below the 16MB line and has an upper limit of
 *                  65 520 bytes. If you want storage above the 16MB line
 *                  or a larger area, use FLENGTH.
 *                  <p>If LENGTH is equal to zero, LENGERR occurs. If it is
 *                  greater than the amount of storage available, NOSTG
 *                  occurs.
 *                  <p><b>Note</b>:  FLENGTH, with or without BELOW, is the
 *                  recommended option: the LENGTH option is
 *                  supported for compatibility purposes for those
 *                  programs written to run under earlier releases of
 *                  CICS.
 * @param NOSUSPEND
 *                  prevents CICS from suspending the task if no storage is
 *                  available, and causes it to issue the NOSTG condition
 *                  instead.
 *                  <p>Note, however, that if a HANDLE CONDITION for
 *                  NOSTG is active when the command is executed,
 *                  control is passed to the user label supplied in the
 *                  HANDLE CONDITION. This takes precedence over the
 *                  NOSUSPEND option but is, of course, negated by either
 *                  NOHANDLE or RESP.
 * @param SET(ptr-ref)
 *                  sets the pointer reference to the address of the acquired
 *                  main storage. The pointer is set to the first byte of the
 *                  storage area.
 * @param SHARED
 *                  prevents the automatic release of storage obtained by a
 *                  GETMAIN command at the end of the task that
 *                  requested it. This enables task-to-task communication.
 *                  An area obtained with SHARED is not released until a
 *                  corresponding FREEMAIN is issued, whether by the
 *                  requesting task or some other task.
 *                  <p>Be aware that if a task abends, any shared storage
 *                  acquired is not automatically released.
 * @param USERDATAKEY
 *                  specifies that CICS is to allocate storage from one of the
 *                  user-key DSAs (the UDSA, SDSA, EUDSA, or ESDSA),
 *                  overriding the TASKDATAKEY option specified on the
 *                  transaction resource definition. If you do not specify the
 *                  data key, CICS determines the type of storage
 *                  (CICS-key or user-key) according to the TASKDATAKEY
 *                  option on the transaction resource definition.
 */
function "GETMAIN"(
   BELOW,
   CICSDATAKEY,
   FLENGTH(data-value),
   INITIMG(data-value),
   LENGTH(data-value),
   NOSUSPEND,
   SET(ptr-ref),
   SHARED,
   USERDATAKEY,
   );

/**
 * Handle an abnormal termination exit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                    _CANCEL________                                     |
 * | >>__HANDLE ABEND__|_______________|__><                                |
 * |                   |_PROGRAM(name)_|                                    |
 * |                   |_LABEL(label)__|                                    |
 * |                   |_RESET_________|                                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NOTAUTH, PGMIDERR (PROGRAM only)                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>HANDLE ABEND is used to activate, cancel, or reactivate an
 * exit for abnormal termination processing. You can suspend
 * the command by means of the PUSH HANDLE and POP
 * HANDLE commands as described in the  CICS Application
 * Programming Guide.
 * <P>When a task terminates abnormally, CICS searches for an
 * active abend exit, starting at the logical level of the
 * application program in which the abend occurred, and
 * proceeding to successively higher levels. The first active
 * abend exit found, if any, is given control.
 * <P>The HANDLE ABEND command cannot intercept abends
 * that are issued with the CANCEL option. Some internal
 * abends generated by CICS are issued with the CANCEL
 * option, for example the ASPx or APSJ abend codes.
 * <P>When the label specified in a HANDLE ABEND LABEL
 * command receives control, the registers are set as follows:
 * <PRE>
 * COBOL: Control returns to the HANDLE ABEND command
 *        with the registers restored; COBOL GO TO
 *        statement is then executed.
 *
 * ASM:  R15    - Abend label.
 *       R0-14  - Contents at the time of last CICS
 *       service request.
 * </PRE>
 * If LABEL is specified, the addressing mode and execution
 * key used are those of the program that issued the HANDLE
 * ABEND command.
 * <P>If PROGRAM is specified, the addressing mode is defined by
 * the way the program is link-edited and the execution key is
 * specified by the EXECKEY option on the program's resource
 * definition.
 * <P>If a COMMAREA has been established, it will be passed to
 * the specified PROGRAM.
 *
 * @param CANCEL
 * specifies that a previously established exit at the logical
 * level of the application program in control is to be
 * canceled.
 * @param LABEL(label)
 * specifies the program label to which control branches if
 * abnormal termination occurs.
 * <P>This option cannot be used for C or PL/I application
 * programs.
 * @param PROGRAM(name)
 * specifies the name of the program to which control is to
 * be passed if the task is terminated abnormally. If this
 * program has not already been defined, the program will
 * be autoinstalled in the event of the abend condition
 * being raised.
 * <P>The program named in this option should always
 * terminate with an abend, except when handling abends
 * generated as a result of application program logic.
 * @param RESET
 * specifies that an exit canceled by a HANDLE ABEND
 * CANCEL command, or by CICS, is to be reactivated.
 * This option is usually issued by an abnormal termination
 * exit routine.
 * @conditions
 * <DL>
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * PROGRAM(name).
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>PGMIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The program has no entry in the PPT and
 * autoinstall for programs is not active.
 * <DT>2<DD> The program is disabled.
 * <DT>9<DD> The installed program definition is for a remote
 * program.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows how to establish a program as
 * an exit:
 * <pre>
 * EXEC CICS HANDLE ABEND
 *   PROGRAM('EXITPGM')
 * </pre>
 */
function "HANDLE ABEND"(
   CANCEL,
   LABEL(label),
   PROGRAM(name),
   RESET,
   );

/**
 * Handle attention identifiers (AIDs).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                 <_________________________                             |
 * | >>__HANDLE AID____________________________|__><                        |
 * |                  |_ANYKEY________________|                             |
 * |                  |         |_(label)_|   |                             |
 * |                  |_CLEAR_________________|                             |
 * |                  |        |_(label)_|    |                             |
 * |                  |_CLRPARTN______________|                             |
 * |                  |           |_(label)_| |                             |
 * |                  |_ENTER_________________|                             |
 * |                  |        |_(label)_|    |                             |
 * |                  |_LIGHTPEN______________|                             |
 * |                  |           |_(label)_| |                             |
 * |                  |_OPERID________________|                             |
 * |                  |         |_(label)_|   |                             |
 * |                  |_PA1-PA3_______________|                             |
 * |                  |          |_(label)_|  |                             |
 * |                  |_PF1-PF24______________|                             |
 * |                  |           |_(label)_| |                             |
 * |                  |_TRIGGER_______________|                             |
 * |                             |_(label)_|                                |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>HANDLE AID is used to specify the label to which control is
 * to be passed when an AID is received from a display device.
 * Control is passed after the input command is completed; that
 * is, after any data received in addition to the AID has been
 * passed to the application program.
 * <P>To cause an AID to be ignored, issue a HANDLE AID
 * command that specifies the associated option  without a
 * label. This deactivates the effect of that option in any
 * previously-issued HANDLE AID command.
 * <P>If no HANDLE AIDs are in effect, that is none have been
 * issued or all have been canceled, control returns to the
 * application program at the instruction immediately following
 * the input command. Look in EIBAID to determine which key
 * was pressed.
 * <P>No more than 16 options are allowed in the same command.
 * <P>The C language does not support HANDLE AID.
 * <P>If a task is initiated from a terminal by means of an AID, the
 * first RECEIVE command in the task does not read from the
 * terminal but copies only the input buffer (even if the length of
 * the data is zero) so that control may be passed by means of
 * a HANDLE AID command for that AID.
 * <P>For the standard attention identifier list (DFHAID), and the
 * standard attribute and printer control character list
 * (DFHBMSCA), see Appendix J, "BMS-related constants".
 * <P>The execution key that the label receives control in, is the
 * execution key that the program was running in when the
 * HANDLE AID command was issued.
 * <P>A print key specified by the system PRINT initialization
 * parameter takes precedence over a HANDLE AID command.
 *
 * @param ANYKEY[(label)]
 *     for any PA key, any PF key, or the CLEAR key, but not ENTER.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param CLEAR[(label)]
 *     for the CLEAR key.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param CLRPARTN[(label)]
 *     for the CLRPARTN key.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param ENTER[(label)]
 *     for the ENTER key.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param LIGHTPEN[(label)]
 *     for a light-pen attention.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param OPERID[(label)]
 *      for the operator identification card reader, the
 *      magnetic slot reader (MSR), or the extended MSR
 *     (MSRE).
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param PA1..PA3[(label)]
 *     for any of the program access keys.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param PF1..PF24[(label)]
 *     for any of the program function keys.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @param TRIGGER[(label)]
 *     for a trigger field attention.
 *     To cause this AID to be ignored, omit the label
 *     This deactivates the effect of this option in any
 *     previously-issued HANDLE AID command.
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> The command was issued by a distributed
 * program link server application.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows a HANDLE AID command that
 * specifies one label for the PA1 key; and a second label for
 * CLEAR, PA2, PA3, and all the PF keys except PF10. If a
 * PF10 AID is received or ENTER is pressed, control returns
 * to the application program at the instruction immediately
 * following the input command.
 * <pre>
 * EXEC CICS HANDLE AID PA1(LAB1)
 *   ANYKEY(LAB2) PF10
 * </PRE>
 */
function "HANDLE AID"(
   ANYKEY[(label)],
   CLEAR[(label)],
   CLRPARTN[(label)],
   ENTER[(label)],
   LIGHTPEN[(label)],
   OPERID[(label)],
   PA1..PA3[(label)],
   PF1..PF24[(label)],
   TRIGGER[(label)],
   );

/**
 * Handle conditions.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                       <________________________                        |
 * | >>__HANDLE CONDITION____condition______________|__><                   |
 * |                                    |_(label)_|                         |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>You use HANDLE CONDITION to specify the label to which
 * control is to be passed if a condition occurs. You must
 * include the name of the condition and, optionally, a label to
 * which control is to be passed if the condition occurs.
 * <P>If you omit "label", any HANDLE CONDITION command for
 * the condition is deactivated, and the default action is taken if
 * the condition occurs. This is independent of the setting of the
 * generalized ERROR condition.
 * <P>You must ensure that the HANDLE CONDITION command is
 * executed before the command that may give rise to the
 * associated condition.
 * <P>You cannot include more than sixteen conditions in the same
 * command; the conditions should be separated by at least
 * one space. You must specify additional conditions in further
 * HANDLE CONDITION commands.
 * <P>If a condition occurs that is not specified in a HANDLE
 * CONDITION or IGNORE CONDITION command, the default
 * action is taken. If, however, the default action for a condition
 * not specified in a HANDLE CONDITION or IGNORE
 * CONDITION command terminates the task abnormally, and
 * the condition ERROR has been specified, the action for
 * ERROR is taken.
 * <P>The execution key that the label receives control in, is the
 * execution key that the program was running in when the
 * HANDLE CONDITION command was issued.
 * <P><B><I>Scope</I></B>:  The HANDLE CONDITION command for a given
 * condition applies only to the program in which it is specified.
 * <p>The HANDLE CONDITION command:
 * <UL>
 * <LI>Remains active while the program is being executed, or
 * until:
 * <UL>
 * <LI>An IGNORE CONDITION command for the same
 * condition is encountered, in which case the
 * HANDLE CONDITION command is overridden
 * <LI>Another HANDLE CONDITION command for the
 * same condition is encountered, in which case the
 * new command overrides the previous one.
 * <LI>A LINK command is executed to call another CICS
 * program. The HANDLE CONDITION options are not
 * inherited by the linked-to program.
 * </UL>
 * <LI>Is temporarily deactivated by the NOHANDLE or RESP
 * option on a command.
 * <p><b><i>Language considerations</i></b>:  In an assembler-language
 * application program, if a HANDLE CONDITION and the
 * command that causes the condition are at the same logical
 * level, the registers are restored to their values in the
 * application program at the point where the command that
 * caused the condition was issued. If, however, the command
 * that causes a condition occurs at a lower logical level, the
 * registers are restored to their current values saved in
 * DFHEISTG at the HANDLE CONDITION level. The
 * addressing mode is set to that in effect at the point where
 * the HANDLE CONDITION command is issued.
 * <p>In a PL/I application program, a branch to a label in an
 * inactive procedure or in an inactive begin block, caused by a
 * condition, produces unpredictable results.
 * <p>The C language does not support HANDLE CONDITION.
 *
 * @example
 * The following example shows you how to handle conditions,
 * such as DUPREC, LENGERR, and so on, that can occur
 * when you use a WRITE command to add a record to a data
 * set.
 * <p>Suppose that you want DUPREC to be handled as a special
 * case; that you want default action (that is, to terminate the
 * task abnormally) to be taken for LENGERR; and that you
 * want all other conditions to be handled by the error routine
 * ERRHANDL. You would code:
 * <pre>
 * EXEC CICS HANDLE CONDITION
 *   ERROR(ERRHANDL)
 *   DUPREC(DUPRTN) LENGERR
 * </pre>
 *
 * @param ALLOCERR[(label)]
 * @param CBIDERR[(label)]
 * @param CHANGED[(label)]
 * @param CHANGEDDISABLED[(label)]
 * @param DISABLED[(label)]
 * @param DSSTAT[(label)]
 * @param DUPKEY[(label)]
 * @param DUPREC[(label)]
 * @param ENDDATA[(label)]
 * @param ENDFILE[(label)]
 * @param ENDINPT[(label)]
 * @param ENQBUSY[(label)]
 * @param ENVDEFERR[(label)]
 * @param EOC[(label)]
 * @param EODS[(label)]
 * @param EOF[(label)]
 * @param ERROR[(label)]
 * @param EXPIRED[(label)]
 * @param FILENOTFOUND[(label)]
 * @param FUNCERR[(label)]
 * @param IGREQCD[(label)]
 * @param IGREQID[(label)]
 * @param ILLOGIC[(label)]
 * @param INBFMH[(label)]
 * @param INVERRTERM[(label)]
 * @param INVLDC[(label)]
 * @param INVMPSZ[(label)]
 * @param INVPARTN[(label)]
 * @param INVPARTNSET[(label)]
 * @param INVREQ[(label)]
 * @param IOERR[(label)]
 * @param ISCINVREQ[(label)]
 * @param ITEMERR[(label)]
 * @param JIDERR[(label)]
 * @param LENGERR[(label)]
 * @param LOADING[(label)]
 * @param LOCKED[(label)]
 * @param MAPFAIL[(label)]
 * @param NETNAMEIDERR[(label)]
 * @param NODEIDERR[(label)]
 * @param NOJBUFSP[(label)]
 * @param NONVAL[(label)]
 * @param NOPASSBKRD[(label)]
 * @param NOPASSBKWR[(label)]
 * @param NOSPACE[(label)]
 * @param NOSPOOL[(label)]
 * @param NOSTART[(label)]
 * @param NOSTG[(label)]
 * @param NOTALLOC[(label)]
 * @param NOTAUTH[(label)]
 * @param NOTFND[(label)]
 * @param NOTOPEN[(label)]
 * @param OPENERR[(label)]
 * @param OVERFLOW[(label)]
 * @param PARTNERIDERR[(label)]
 * @param PARTNFAIL[(label)]
 * @param PGMIDERR[(label)]
 * @param QBUSY[(label)]
 * @param QIDERR[(label)]
 * @param RDATT[(label)]
 * @param RETPAGE[(label)]
 * @param ROLLEDBACK[(label)]
 * @param RTEFAIL[(label)]
 * @param RTESOME[(label)]
 * @param SELNERR[(label)]
 * @param SESSBUSY[(label)]
 * @param SESSIONERR[(label)]
 * @param SIGNAL[(label)]
 * @param SPOLBUSY[(label)]
 * @param SPOLERR[(label)]
 * @param STRELERR[(label)]
 * @param SUPPRESSED[(label)]
 * @param SYMBOLERR[(label)]
 * @param SYSBUSY[(label)]
 * @param SYSIDERR[(label)]
 * @param TEMPLATERR[(label)]
 * @param TERMERR[(label)]
 * @param TERMIDERR[(label)]
 * @param TRANSIDERR[(label)]
 * @param TSIOERR[(label)]
 * @param UNEXPIN[(label)]
 * @param USERIDERR[(label)]
 * @param WRBRK[(label)]
 */
function "HANDLE CONDITION"(
   ALLOCERR[(label)],
   CBIDERR[(label)],
   CHANGED[(label)],
   CHANGEDDISABLED[(label)],
   DISABLED[(label)],
   DSSTAT[(label)],
   DUPKEY[(label)],
   DUPREC[(label)],
   ENDDATA[(label)],
   ENDFILE[(label)],
   ENDINPT[(label)],
   ENQBUSY[(label)],
   ENVDEFERR[(label)],
   EOC[(label)],
   EODS[(label)],
   EOF[(label)],
   ERROR[(label)],
   EXPIRED[(label)],
   FILENOTFOUND[(label)],
   FUNCERR[(label)],
   IGREQCD[(label)],
   IGREQID[(label)],
   ILLOGIC[(label)],
   INBFMH[(label)],
   INVERRTERM[(label)],
   INVLDC[(label)],
   INVMPSZ[(label)],
   INVPARTN[(label)],
   INVPARTNSET[(label)],
   INVREQ[(label)],
   IOERR[(label)],
   ISCINVREQ[(label)],
   ITEMERR[(label)],
   JIDERR[(label)],
   LENGERR[(label)],
   LOADING[(label)],
   LOCKED[(label)],
   MAPFAIL[(label)],
   NETNAMEIDERR[(label)],
   NODEIDERR[(label)],
   NOJBUFSP[(label)],
   NONVAL[(label)],
   NOPASSBKRD[(label)],
   NOPASSBKWR[(label)],
   NOSPACE[(label)],
   NOSPOOL[(label)],
   NOSTART[(label)],
   NOSTG[(label)],
   NOTALLOC[(label)],
   NOTAUTH[(label)],
   NOTFND[(label)],
   NOTOPEN[(label)],
   OPENERR[(label)],
   OVERFLOW[(label)],
   PARTNERIDERR[(label)],
   PARTNFAIL[(label)],
   PGMIDERR[(label)],
   QBUSY[(label)],
   QIDERR[(label)],
   RDATT[(label)],
   RETPAGE[(label)],
   ROLLEDBACK[(label)],
   RTEFAIL[(label)],
   RTESOME[(label)],
   SELNERR[(label)],
   SESSBUSY[(label)],
   SESSIONERR[(label)],
   SIGNAL[(label)],
   SPOLBUSY[(label)],
   SPOLERR[(label)],
   STRELERR[(label)],
   SUPPRESSED[(label)],
   SYMBOLERR[(label)],
   SYSBUSY[(label)],
   SYSIDERR[(label)],
   TEMPLATERR[(label)],
   TERMERR[(label)],
   TERMIDERR[(label)],
   TRANSIDERR[(label)],
   TSIOERR[(label)],
   UNEXPIN[(label)],
   USERIDERR[(label)],
   WRBRK[(label)],
   );
/**
 * Ignore conditions.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                       <___________                                     |
 * | >>__IGNORE CONDITION____condition_|__><                                |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>IGNORE CONDITION is not supported for C programs.
 * <p>For information about the conditions, see Appendix A,
 * "EXEC interface block".
 * <p>You use IGNORE CONDITION to specify that no action is to
 * be taken if a condition occurs (that is, control returns to the
 * instruction following the command that has failed to execute,
 * and the EIB is set). Execution of a command could result in
 * several conditions being raised. CICS checks these in a
 * predetermined order and only the first one that is not ignored
 * (by your IGNORE CONDITION command) is passed to your
 * application program.
 * <p>The IGNORE CONDITION command for a given condition
 * applies only to the program in which it is specified, and it
 * remains active while the program is being executed, or until
 * a HANDLE CONDITION command for the same condition is
 * encountered, in which case the IGNORE CONDITION
 * command is overridden.
 * <p>You cannot include more than sixteen conditions in the same
 * command; the conditions must be separated by at least one
 * space. You may specify additional conditions in further
 * IGNORE CONDITION commands.
 *
 * <p><i>condition</i> specifies the name of the condition to be ignored.
 *
 * @param ALLOCERR
 * @param CBIDERR
 * @param CHANGED
 * @param CHANGEDDISABLED
 * @param DISABLED
 * @param DSSTAT
 * @param DUPKEY
 * @param DUPREC
 * @param ENDDATA
 * @param ENDFILE
 * @param ENDINPT
 * @param ENQBUSY
 * @param ENVDEFERR
 * @param EOC
 * @param EODS
 * @param EOF
 * @param EXPIRED
 * @param FILENOTFOUND
 * @param FUNCERR
 * @param IGREQCD
 * @param IGREQID
 * @param ILLOGIC
 * @param INBFMH
 * @param INVERRTERM
 * @param INVLDC
 * @param INVMPSZ
 * @param INVPARTN
 * @param INVPARTNSET
 * @param INVREQ
 * @param IOERR
 * @param ISCINVREQ
 * @param ITEMERR
 * @param JIDERR
 * @param LENGERR
 * @param LOADING
 * @param LOCKED
 * @param MAPFAIL
 * @param NETNAMEIDERR
 * @param NODEIDERR
 * @param NOJBUFSP
 * @param NONVAL
 * @param NOPASSBKRD
 * @param NOPASSBKWR
 * @param NOSPACE
 * @param NOSPOOL
 * @param NOSTART
 * @param NOSTG
 * @param NOTALLOC
 * @param NOTAUTH
 * @param NOTFND
 * @param NOTOPEN
 * @param OPENERR
 * @param OVERFLOW
 * @param PARTNERIDERR
 * @param PARTNFAIL
 * @param PGMIDERR
 * @param QBUSY
 * @param QIDERR
 * @param RDATT
 * @param RETPAGE
 * @param ROLLEDBACK
 * @param RTEFAIL
 * @param RTESOME
 * @param SELNERR
 * @param SESSBUSY
 * @param SESSIONERR
 * @param SIGNAL
 * @param SPOLBUSY
 * @param SPOLERR
 * @param STRELERR
 * @param SUPPRESSED
 * @param SYMBOLERR
 * @param SYSBUSY
 * @param SYSIDERR
 * @param TEMPLATERR
 * @param TERMERR
 * @param TERMIDERR
 * @param TRANSIDERR
 * @param TSIOERR
 * @param UNEXPIN
 * @param USERIDERR
 * @param WRBRK
 */
function "IGNORE CONDITION"(
   ALLOCERR,
   CBIDERR,
   CHANGED,
   CHANGEDDISABLED,
   DISABLED,
   DSSTAT,
   DUPKEY,
   DUPREC,
   ENDDATA,
   ENDFILE,
   ENDINPT,
   ENQBUSY,
   ENVDEFERR,
   EOC,
   EODS,
   EOF,
   EXPIRED,
   FILENOTFOUND,
   FUNCERR,
   IGREQCD,
   IGREQID,
   ILLOGIC,
   INBFMH,
   INVERRTERM,
   INVLDC,
   INVMPSZ,
   INVPARTN,
   INVPARTNSET,
   INVREQ,
   IOERR,
   ISCINVREQ,
   ITEMERR,
   JIDERR,
   LENGERR,
   LOADING,
   LOCKED,
   MAPFAIL,
   NETNAMEIDERR,
   NODEIDERR,
   NOJBUFSP,
   NONVAL,
   NOPASSBKRD,
   NOPASSBKWR,
   NOSPACE,
   NOSPOOL,
   NOSTART,
   NOSTG,
   NOTALLOC,
   NOTAUTH,
   NOTFND,
   NOTOPEN,
   OPENERR,
   OVERFLOW,
   PARTNERIDERR,
   PARTNFAIL,
   PGMIDERR,
   QBUSY,
   QIDERR,
   RDATT,
   RETPAGE,
   ROLLEDBACK,
   RTEFAIL,
   RTESOME,
   SELNERR,
   SESSBUSY,
   SESSIONERR,
   SIGNAL,
   SPOLBUSY,
   SPOLERR,
   STRELERR,
   SUPPRESSED,
   SYMBOLERR,
   SYSBUSY,
   SYSIDERR,
   TEMPLATERR,
   TERMERR,
   TERMIDERR,
   TRANSIDERR,
   TSIOERR,
   UNEXPIN,
   USERIDERR,
   WRBRK
   );

/**
 * Abend the mapped conversation with an APPC partner.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ABEND_____________________________________><                 |
 * |                  |_CONVID(name)_|  |_STATE(cvda)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE ABEND abnormally ends the conversation. The
 * partner transaction sees the TERMERR condition.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>ISSUE ABEND is used on any conversation other
 * than an EXEC CICS APPC mapped conversation.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value relates to a
 * conversation that is not owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE command causes an
 * ATCV abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to be abended. The
 *               4-character name identifies either the symbolic identifier
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the symbolic identifier
 *               representing the principal facility (returned by a
 *               previously executed ASSIGN command).
 *               <P>For compatibility with earlier releases, SESSION is
 *               accepted as a synonym for CONVID. New programs
 *               should use CONVID.
 *               <P>If both CONVID and SESSION are omitted, the principal
 *               facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 */
function "ISSUE ABEND"(
   CONVID(name),
   STATE(cvda)
   );

/**
 * End processing of a data set abnormally.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ABORT______________________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DESTID(data-value)_____________________________|                  |
 * |    |                     |_DESTIDLENG(data-value)_| |                  |
 * |    |                       _CONSOLE__               |                  |
 * |    |_SUBADDR(data-value)__|__________|______________|                  |
 * |                           |_PRINT____|                                 |
 * |                           |_CARD_____|                                 |
 * |                           |_WPMEDIA1_|                                 |
 * |                           |_WPMEDIA2_|                                 |
 * |                           |_WPMEDIA3_|                                 |
 * |                           |_WPMEDIA4_|                                 |
 * |                                                                        |
 * | >______________________________________________________><              |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE ABORT ends communication with a data set in an
 * outboard controller, or the selected medium, abnormally. The
 * data set specified in the DESTID option is deselected
 * abnormally. The options CONSOLE, PRINT, CARD, and
 * WPMEDIA1-4 are alternatives to DESTID and
 * DESTIDLENG.
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * <p>The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CARD
 *                specifies that the output medium is a card reader or card
 *                punch device. This option is not valid with DESTID and
 *                DESTIDLENG.
 * @param CONSOLE
 *                specifies that the output medium is that provided for
 *                messages to the operator. This option is not valid with
 *                DESTID and DESTIDLENG. This refers to a
 *                programmable subsystem such as the IBM 3790 data
 *                communication system. It does not refer to a CICS or
 *                system console.
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param PRINT
 *                specifies that the output medium is a printer.
 * @param SUBADDR(data-value)
 *                specifies the medium subaddress as a halfword binary
 *                value (in the range 0 through 15) which allows media of
 *                the same type, for example, "printer 1" or "printer 2", to
 *                be defined. Value 15 means a medium of any type. The
 *                default is zero.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the VOLUME option.
 */
function "ISSUE ABORT"(
   CARD,
   CONSOLE,
   DESTID(data-value),
   DESTIDLENG(data-value),
   PRINT,
   SUBADDR(data-value),
   VOLUME(data-value),
   VOLUMELENG(data-value),
   WPMEDIA1..WPMEDIA4
   );
/**
 * Add a record to a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ADD__DESTID(data-value)____________________________________> |
 * |                                    |_DESTIDLENG(data-value)_|          |
 * |                                                                        |
 * | >__VOLUME(data-value)________________________________________________> |
 * |                        |_VOLUMELENG(data-value)_|                      |
 * |                                                                        |
 * | >__FROM(data-area)___________________________________________________> |
 * |                     |_LENGTH(data-value)_|                             |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_NUMREC(data-value)_|  |_DEFRESP_|  |_NOWAIT_|                     |
 * |                                                                        |
 * | >______________________________><                                      |
 * |    |_RIDFLD(data-area)__RRN_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE ADD adds records to a sequential or keyed direct
 * data set in an outboard controller. The FROM option is used
 * to specify the data to be written, and the LENGTH option
 * specifies its length.
 * <p>The RIDFLD option is only needed with this command when
 * it applies to a DPCX/DXAM data set. In this case, it specifies
 * the relative record number of the record to be added. When
 * RIDFLD is used, NUMREC must be 1 (the default).
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 *
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * <p>The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEFRESP
 *                specifies that all terminal control commands issued as a
 *                result of the ISSUE ADD command are to request a
 *                definite response from the outboard batch program,
 *                irrespective of the specification of message integrity for
 *                the CICS task (by the system programmer).
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param FROM(data-area)
 *                specifies the data to be written to the data set.
 * @param LENGTH(data-value)
 *                specifies the length (halfword binary value) of the data to
 *                be written. For a description of a safe upper limit, see
 *                "LENGTH options".
 * @param NOWAIT
 *                specifies that the CICS task continues processing
 *                without waiting for the ISSUE ADD command to
 *                complete. If this option is not specified, the task activity
 *                is suspended until the command is completed.
 * @param NUMREC(data-value)
 *                for a relative record data set, specifies as a halfword
 *                binary value the number of logical records to be added.
 *                Records are replaced sequentially starting with the one
 *                identified by the RIDFLD option.
 *                <p>For an indexed data set, NUMREC cannot be specified
 *                because only one record can be added.
 * @param RIDFLD(data-area)
 *                specifies, for a relative record data set, a 4-character
 *                field as the relative record number (starting from zero) of
 *                the record. The RRN option is also required.
 *                <p>For a keyed direct data set, RIDFLD should specify a
 *                key.
 * @param RRN
 *                specifies that the record identification field specified in
 *                the RIDFLD option contains a relative record number.
 *                <p>This option is required for a relative record data set.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the VOLUME option.
 */
function "ISSUE ADD"(
   DEFRESP,
   DESTID(data-value),
   DESTIDLENG(data-value),
   FROM(data-area),
   LENGTH(data-value),
   NOWAIT,
   NUMREC(data-value),
   RIDFLD(data-area),
   RRN,
   VOLUME(data-value),
   VOLUMELENG(data-value),
   );

/**
 * Issue a positive response to a SEND CONFIRM on an APPC mapped conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE CONFIRMATION_____________________________________><          |
 * |                         |_CONVID(name)_|  |_STATE(cvda)_|              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, SIGNAL, TERMERR                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE CONFIRMATION allows an application program to
 * respond positively when the CONFIRM option has been
 * specified on a SEND command executed by a partner
 * transaction.
 *
 * @param CONVID(name)
 * identifies the conversation in which to send the
 * response. The 4-character name identifies either the
 * token returned by a previously executed ALLOCATE
 * command in EIBRSRCE in the EIB, or the token
 * representing the principal facility (returned by a
 * previously executed ASSIGN command).
 * <P>For compatibility with earlier releases, SESSION is
 * accepted as a synonym for CONVID. New programs
 * should use CONVID.
 * <P>If both CONVID and SESSION are omitted, the principal
 * facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <PRE>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </PRE>
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session on the
 * CONVID option.
 * </dl>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>ISSUE CONFIRMATION is used on a conversation
 * that is either of the following:
 * <UL>
 * <LI>Sync level 0
 * <LI>Not APPC mapped
 * </UL>
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value relates to a
 * conversation that is not owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 * occurs when an inbound SIGNAL data-flow control
 * command is received from a partner transaction. EIBSIG
 * is always set when an inbound signal is received.
 * <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE causes an ATCV
 * abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE CONFIRMATION"(
   CONVID(name),
   STATE(cvda),
   );

/**
 * Copy data from 3270 information display system (BTAM).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE COPY__TERMID(name)_____________________________________><    |
 * |                               |_CTLCHAR(data-value)_|  |_WAIT_|        |
 * |                                                                        |
 * |                                                                        |
 * | Condition: NOTALLOC, TERMIDERR                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE COPY copies the format and data contained in the
 * buffer of a specified terminal into the buffer of the terminal
 * that started the transaction. Both terminals must be attached
 * to the same remote control unit.
 *
 * @param CTLCHAR(data-value)
 * specifies a 1-byte copy control character (CCC) that
 * defines the copy function. A COBOL user must specify a
 * data area containing this character. If the option is
 * omitted, the contents of the entire buffer (including nulls)
 * are copied.
 * @param TERMID(name)
 * specifies the name (1-4 characters) of the terminal
 * whose buffer is to be copied. The terminal must have
 * been defined in the TCT.
 * @param WAIT
 * specifies that processing of the command must be
 * completed before any subsequent processing is
 * attempted.
 * <p>If the WAIT option is not specified, control is returned to
 * the application program when processing of the
 * command has started. A subsequent input or output
 * request (terminal control, BMS, or batch data
 * interchange) to the terminal associated with the task
 * causes the application program to wait until the previous
 * request has been completed.
 * @conditions
 * <DL>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMIDERR<DD>
 * occurs if the specified terminal identifier cannot be found
 * in the terminal control table (TCT).
 * <P>Default action: terminate the task abnormally.
 * </DL>
 */
function "ISSUE COPY <3270 display>"(
   CTLCHAR(data-value),
   TERMID(name),
   WAIT,
   );

/**
 * Copy data from 3270 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE COPY__TERMID(name)_____________________________________><    |
 * |                               |_CTLCHAR(data-value)_|  |_WAIT_|        |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: LENGERR, NOTALLOC, TERMERR                                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE COPY copies the format and data contained in the
 * buffer of a specified terminal into the buffer of the terminal
 * that started the transaction. Both terminals must be attached
 * to the same remote control unit.
 *
 * @conditions
 * <DL>
 * <DT>LENGERR<DD>
 * occurs if an out-of-range value is supplied.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CTLCHAR(data-value)
 *               specifies a 1-byte copy control character (CCC) that
 *               defines the copy function. A COBOL user must specify a
 *               data area containing this character. If the option is
 *               omitted, the contents of the entire buffer (including nulls)
 *               are copied.
 * @param TERMID(name)
 *               specifies the name (1-4 characters) of the terminal
 *               whose buffer is to be copied. The terminal must have
 *               been defined in the TCT.
 * @param WAIT
 *               specifies that processing of the command must be
 *               completed before any subsequent processing is
 *               attempted.
 *               <p>If the WAIT option is not specified, control is returned to
 *               the application program once processing of the
 *               command has started. A subsequent input or output
 *               request (terminal control, BMS, or batch data
 *               interchange) to the terminal associated with the task
 *               causes the application program to wait until the previous
 *               request has been completed.
 */
function "ISSUE COPY <3270 logical>"(
   CTLCHAR(data-value),
   TERMID(name),
   WAIT,
   );

/**
 * Terminate a session between CICS and a logical unit or terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE DISCONNECT__><                                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: SIGNAL, TERMERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE DISCONNECT terminates sessions between CICS
 * and the following terminals or logical units:
 * <UL>
 * <LI>3270-display logical unit (LUTYPE2)
 * <LI>3270-printer logical unit (LUTYPE3)
 * <LI>LUTYPE4 logical unit
 * <LI>3270 SCS printer logical unit
 * <LI>System/7
 * <LI>2260 or 2265 display station
 * <LI>3270 information display system (BTAM or TCAM)
 * <LI>3270 logical unit
 * <LI>3600 pipeline logical unit
 * <LI>3600(3601) logical unit
 * <LI>3600(3614) logical unit
 * <LI>3630 plant communication system
 * <LI>3650 interpreter logical unit
 * <LI>3650 host conversational (3270) logical unit
 * <LI>3650 host conversational (3653) logical unit
 * <LI>3650(3680) host command processor logical unit
 * <LI>3735 programmable buffered terminal
 * <LI>3740 data entry system
 * <LI>3767/3770 interactive logical unit
 * <LI>3770 batch logical unit
 * <LI>3790 logical units
 * </UL>
 *
 * @conditions
 * <p>For most terminal and logical unit types, ISSUE
 * DISCONNECT raises no conditions. Exceptions are:
 * <DL>
 * <DT>SIGNAL<DD>
 * occurs only for an ISSUE DISCONNECT for LUTYPE4,
 * 3600(3601), 3767 interactive, 3770 batch, and 3790
 * full-function logical units.
 * <p>It occurs when an inbound SIGNAL data-flow control
 * command is received from a logical unit or session.
 * EIBSIG is always set when an inbound signal is
 * received.
 * <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 * occurs only for an ISSUE DISCONNECT for LUTYPE4
 * logical units.
 * <p>It occurs for a terminal-related error, such as a session
 * failure. This condition applies to VTAM-connected
 * terminals only. Because of the asynchronous nature of
 * this condition, the application program should check,
 * using SEND CONFIRM or SYNCPOINT, to make sure
 * any errors still outstanding have been resolved before it
 * relinquishes control. If you wish to handle this condition,
 * you must first issue a FREE command to free the
 * session. If you do not do this, an INVREQ condition
 * occurs, plus an ATCV abend if you do not handle this
 * condition.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE DISCONNECT <default>"(
   );

/**
 * Disconnect an LUTYPE6.1 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE DISCONNECT_____________________><                            |
 * |                       |_SESSION(name)_|                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NOTALLOC, TERMERR                                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE DISCONNECT disconnects the unit, if
 * DISCREQ=YES is set in the TYPETERM resource definition.
 *
 * @param SESSION(name)
 * specifies the symbolic identifier (1-4 characters) of a
 * session TCTTE. This option specifies the alternate
 * facility to be disconnected. If this option is omitted, the
 * principal facility for the task is disconnected.
 * @conditions
 * <DL>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error, such as a session
 * failure.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE DISCONNECT <LUTYPE6.1>"(
   SESSION(name),
   );

/**
 * End processing of a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE END________________________________________________________> |
 * |                |_DESTID(data-value)_____________________________|      |
 * |                |                     |_DESTIDLENG(data-value)_| |      |
 * |                |                       _CONSOLE__               |      |
 * |                |_SUBADDR(data-value)__|__________|______________|      |
 * |                                       |_PRINT____|                     |
 * |                                       |_CARD_____|                     |
 * |                                       |_WPMEDIA1_|                     |
 * |                                       |_WPMEDIA2_|                     |
 * |                                       |_WPMEDIA3_|                     |
 * |                                       |_WPMEDIA4_|                     |
 * |                                                                        |
 * | >______________________________________________________><              |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE END ends communication with a data set in an
 * outboard controller or with the selected medium. The data
 * set specified in the DESTID option, or the selected medium,
 * is deselected normally. The options CONSOLE, PRINT,
 * CARD, and WPMEDIA1-4 are alternatives to DESTID and
 * DESTIDLENG.
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during the execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <P>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CARD
 *                specifies that the output medium is a card reader or card
 *                punch device. This option is not valid with DESTID and
 *                DESTIDLENG.
 * @param CONSOLE
 *                specifies that the output medium is that provided for
 *                messages to the operator. This option is not valid with
 *                DESTID and DESTIDLENG. This refers to a
 *                programmable subsystem such as the IBM 3790 data
 *                communication system. It does not refer to a CICS or
 *                system console.
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param PRINT
 *                specifies that the output medium is a printer.
 * @param SUBADDR(data-value)
 *                specifies the medium subaddress as a halfword binary
 *                value (in the range 0-15) that allows media of the same
 *                type, for example, "printer 1" or "printer 2", to be defined.
 *                Value 15 means a medium of any type. The default is
 *                zero.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the VOLUME option.
 */
function "ISSUE END"(
   CARD,
   CONSOLE,
   DESTID(data-value),
   DESTIDLENG(data-value),
   PRINT,
   SUBADDR(data-value),
   VOLUME(data-value),
   VOLUMELENG(data-value),
   WPMEDIA1..WPMEDIA4,
   );

/**
 * Indicate the end-of-file condition to the 3740 data entry system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ENDFILE_________________><                                   |
 * |                    |_ENDOUTPUT_|                                       |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ, NOTALLOC                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE ENDFILE indicates the end-of-file condition to the
 * 3740.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * attempted to send on its function shipping session,
 * its principal facility.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ENDOUTPUT
 *                  indicates the end-of-output condition as well as end of
 *                  file.
 */
function "ISSUE ENDFILE"(
   ENDOUTPUT,
   );

/**
 * Indicate the end-of-output condition to the 3740 data entry system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ENDOUTPUT_______________><                                   |
 * |                      |_ENDFILE_|                                       |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ, NOTALLOC                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE ENDOUTPUT indicates the end-of-output condition to
 * the 3740.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * attempted to send on its function shipping session,
 * its principal facility.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ENDFILE
 *                indicates the end-of-file condition as well as end of
 *                output.
 */
function "ISSUE ENDOUTPUT"(
   ENDFILE,
   );

/**
 * Send end-of-data-set function management header to the 3650 interpreter logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE EODS__><                                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p>Description
 * ISSUE EODS issues the end-of-data-set management
 * header.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL>
 * <DT>200<DD> A distributed program link server application
 * attempted to send on its function shipping session,
 * its principal facility.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error, such as a session
 * failure.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE EODS"(
   );

/**
 * Delete a record from a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ERASE__DESTID(data-value)__________________________________> |
 * |                                      |_DESTIDLENG(data-value)_|        |
 * |                                                                        |
 * | >__VOLUME(data-value)________________________________________________> |
 * |                        |_VOLUMELENG(data-value)_|                      |
 * |                                                                        |
 * | >__RIDFLD(data-area)_________________________________________________> |
 * |                                                                        |
 * | >____KEYLENGTH(data-value)___________________________________________> |
 * |    |                        |_KEYNUMBER(data-value)_| |                |
 * |    |_RRN______________________________________________|                |
 * |                                                                        |
 * | >___________________________________________________><                 |
 * |    |_NUMREC(data-value)_|  |_DEFRESP_|  |_NOWAIT_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE ERASE deletes a record from a keyed direct data set
 * in an outboard controller, or erases a record from a DPCX or
 * DXAM relative record data set.
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * <p>The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEFRESP
 *                specifies that all terminal control commands issued as a
 *                result of the ISSUE ERASE command are to request a
 *                definite response from the outboard batch program,
 *                irrespective of the specification of message integrity for
 *                the CICS task (by the system programmer).
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param KEYLENGTH(data-value)
 *                specifies the length of the key specified in the RIDFLD
 *                option, as a halfword binary value.
 * @param KEYNUMBER(data-value)
 *                specifies the number, as a halfword binary value, of the
 *                index to be used to locate the record. There can be
 *                eight indexes (1-8). The default is 1. This option applies
 *                only to DPCX or DXAM and is mutually exclusive with
 *                RRN.
 * @param NOWAIT
 *                specifies that the CICS task continues processing
 *                without waiting for the ISSUE ERASE command to
 *                complete. If this option is not specified, the task activity
 *                is suspended until the command is completed.
 * @param NUMREC(data-value)
 *                for a relative record data set, specifies as a halfword
 *                binary value the number of logical records to be deleted.
 *                Records are replaced sequentially starting with the one
 *                identified by the RIDFLD option.
 *                <p>For an indexed data set, NUMREC cannot be specified,
 *                because only one record is deleted.
 * @param RIDFLD(data-area)
 *                specifies the record identification field.
 *                <p>For a relative record data set, the RIDFLD option
 *                specifies a fullword binary integer (the relative record
 *                number of the record starting from zero); and the RRN
 *                option is used.
 *                <p>For an indexed data set, the RIDFLD option specifies
 *                the key that is embedded in the data. The KEYLENGTH
 *                option is also required.
 * @param RRN
 *                specifies that the record identification field specified in
 *                the RIDFLD option contains a relative record number. If
 *                the option is not specified, RIDFLD is assumed to
 *                specify a key.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the VOLUME option.
 */
function "ISSUE ERASE"(
   DEFRESP,
   DESTID(data-value),
   DESTIDLENG(data-value),
   KEYLENGTH(data-value),
   KEYNUMBER(data-value),
   NOWAIT,
   NUMREC(data-value),
   RIDFLD(data-area),
   RRN,
   VOLUME(data-value),
   VOLUMELENG(data-value),
   );

/**
 * Erase all unprotected fields of a 3270 buffer.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ERASEAUP____________><                                       |
 * |                     |_WAIT_|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>ISSUE ERASEAUP erases unprotected fields by:
 * <OL>
 * <li>Clearing all unprotected fields to nulls (X'00')
 * <li>Resetting modified data tags in each unprotected field to
 * zero
 * <LI>Positioning the cursor to the first unprotected field
 * <LI>Restoring the keyboard
 * </OL>
 * <p>You can use the ISSUE ERASEAUP command for the
 * following types of 3270 logical units:
 * <UL>
 * <LI>3270-display logical unit (LUTYPE2)
 * <LI>3270-printer logical unit (LUTYPE3)
 * <LI>3270 information display system (BTAM or TCAM)
 * <LI>3270 logical unit
 * <LI>3650 host conversational (3270) logical unit
 * <LI>3790 (3270-display) logical unit
 * <LI>3790 (3270-printer) logical unit
 * </UL>
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs if there is a terminal-related error.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param WAIT
 *               ensures that the erase is completed before control
 *               returns to the application program. If you omit WAIT,
 *               control returns to the application program as soon as
 *               ISSUE ERASEAUP starts processing.
 */
function "ISSUE ERASEAUP"(
   WAIT,
   );

/**
 * Inform APPC mapped conversation partner of error.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE ERROR_____________________________________><                 |
 * |                  |_CONVID(name)_|  |_STATE(cvda)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, SIGNAL, TERMERR                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE ERROR allows an application program to inform a
 * process in a connected APPC system that some
 * program-detected error has occurred. For example, a remote
 * CICS application is notified by having EIBERR set, with
 * EIBERRCD=X'0889'. The actions required to recover from
 * the error are the responsibility of logic contained in both
 * application programs. The application program can use this
 * command to respond negatively when the CONFIRM option
 * has been specified on a SEND command executed by a
 * process in a connected APPC system.
 *
 * @param CONVID(name)
 * identifies the conversation to which the command
 * relates. The 4-character name identifies either the token
 * returned by a previously executed ALLOCATE command
 * in EIBRSRCE in the EIB, or the token representing the
 * principal facility (returned by a previously executed
 * ASSIGN command).
 * <p>For compatibility with earlier releases, SESSION is
 * accepted as a synonym for CONVID. New programs
 * should use CONVID.
 * <p>If both CONVID and SESSION are omitted, the principal
 * facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session on the
 * CONVID option.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The command is not valid for the APPC
 * conversation type in use.
 * <LI>The command is issued against a
 * CPI-Communications conversation.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value does not relate to
 * a conversation owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 * occurs when an inbound SIGNAL data-flow control
 * command is received from a partner transaction. EIBSIG
 * is always set when an inbound signal is received.
 * <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE command causes an
 * ATCV abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE ERROR"(
   CONVID(name),
   STATE(cvda),
   );

/**
 * Specify the name of a program on 3650 interpreter logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE LOAD__PROGRAM(name)________________><                        |
 * |                                |_CONVERSE_|                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NONVAL, NOTALLOC, NOSTART, TERMERR                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>ISSUE LOAD specifies the name of the 3650 application
 * program that is to be loaded.
 *
 * @conditions
 * <DL>
 * <DT>NONVAL<DD>
 * occurs if the 3650 application program name is not valid.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSTART<DD>
 * occurs if the 3651 is unable to initiate the requested
 * 3650 application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVERSE
 *                 specifies that the 3650 application program is able to
 *                 communicate with the host processor. If this option is not
 *                 specified, the 3650 application program cannot
 *                 communicate with the host processor.
 * @param PROGRAM(name)
 *                 specifies the name (1-8 characters) of the 3650
 *                 application program that is to be loaded.
 */
function "ISSUE LOAD"(
   CONVERSE,
   PROGRAM(name),
   );

/**
 * Request next record number.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE NOTE__DESTID(data-value)___________________________________> |
 * |                                     |_DESTIDLENG(data-value)_|         |
 * |                                                                        |
 * | >__VOLUME(data-value)________________________________________________> |
 * |                        |_VOLUMELENG(data-value)_|                      |
 * |                                                                        |
 * | >__RIDFLD(data-area)__RRN__><                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>ISSUE NOTE requests the number of the next record. It finds
 * the relative record number of the next record in an
 * addressed direct data set. The number is returned in the
 * data area specified in the RIDFLD option. The RRN option
 * must be specified, because a relative record number is
 * involved.
 *
 * @conditions
 * <dl>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <P>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * 200 A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DESTID(data-value)
 *               specifies the name (1-8 characters) of the data set in
 *               the outboard destination.
 * @param DESTIDLENG(data-value)
 *               specifies the length (halfword binary value) of the name
 *               specified in the DESTID option.
 * @param RIDFLD(data-area)
 *               specifies as a 4-character field a data area the relative
 *               record number of the next record is returned in.
 * @param RRN
 *               specifies that the record identification field specified in
 *               the RIDFLD option contains a relative record number.
 * @param VOLUME(data-value)
 *               specifies the name (1-6 characters) of a diskette in an
 *               outboard destination that contains the data set specified
 *               in the DESTID option.
 * @param VOLUMELENG(data-value)
 *               specifies the length (halfword binary value) of the name
 *               specified in the VOLUME option.
 */
function "ISSUE NOTE"(
   DESTID(data-value),
   DESTIDLENG(data-value),
   RIDFLD(data-area),
   RRN,
   VOLUME(data-value),
   VOLUMELENG(data-value),
   );

/**
 * VTAM application routing.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE PASS__LUNAME(name)_________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)__LENGTH(data-value)_|                             |
 * |                                                                        |
 * | >__________________________________________><                          |
 * |    |_LOGMODE(data-value)_|  |_NOQUIESCE_|                              |
 * |    |_LOGONLOGMODE________|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE PASS disconnects the terminal from CICS after the
 * task has terminated, and transfers it to the VTAM application
 * defined in the LUNAME option.
 * <p>This command requires that AUTH=PASS is coded on the
 * VTAM APPL macro for the CICS terminal-owning system that
 * issues it, with DISCREQ=YES or RELREQ=YES in the RDO
 * TYPETERM resource definition for any terminal where this
 * function might be used.
 * <p>If the LUNAME specified is the name of another CICS
 * system, you can use the EXTRACT LOGONMSG command
 * to access the data referred to by this command.
 * Because of a VTAM limitation, the maximum length of the
 * user data is restricted to 255 bytes.
 * <p><b>Note</b>:  The system initialization parameter
 * CLSDSTP=NOTIFY|NONOTIFY allows you to have
 * the node error program (NEP) and the console
 * notified of whether the PASS was successful or not.
 * The NEP can be coded to reestablish a session
 * ended by an unsuccessful PASS. For programming
 * information about how to do this, see the section
 * about NEP in the  CICS Customization Guide.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs if the command is not valid for the logical unit in
 * use.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if an out-of-range value is supplied in the
 * LENGTH option.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FROM(data-area)
 *                  specifies the data area containing the logon user data
 *                  that is to be passed to the application named in the
 *                  LUNAME option. This option may be omitted if
 *                  ATTACHID is specified on an LUTYPE6.1 command.
 * @param LENGTH(data-value)
 *                  specifies the length, as a halfword binary value, of the
 *                  data issued.
 * @param LOGMODE(data-value)
 *                  specifies the name (1-8 characters) of the VTAM logon
 *                  mode table entry used by VTAM to establish the new
 *                  session.
 * @param LOGONLOGMODE
 *                  specifies that the new session is to be established with
 *                  the VTAM logon mode table entry in use when the
 *                  session logged on.
 *                  <p><b>Note</b>:  The logmode name saved is taken from the
 *                  X'0D' control vector in the VTAM CINIT. This is
 *                  the logmode name known in this system.
 *                  If persistent sessions (PSDINT=nnn in the SIT) is
 *                  in use, then the TYPETERM definition for any
 *                  terminal to be ISSUE PASSed should use
 *                  RECOVOPTION(NONE), because the logon
 *                  LOGMODE name is not recovered across a
 *                  persistent sessions restart.
 *                  <p>If neither LOGMODE nor LOGONLOGMODE is
 *                  supplied, the new session will be established
 *                  with the default LOGMODE.
 * @param LUNAME(name)
 *                  specifies the name (1-8 characters) of the VTAM
 *                  application to which the terminal is to be passed.
 * @param NOQUIESCE
 *                  specifies that the user can choose to recover from
 *                  certain pass failures.
 */
function "ISSUE PASS"(
   FROM(data-area),
   LENGTH(data-value),
   LOGMODE(data-value),
   LOGONLOGMODE,
   LUNAME(name),
   NOQUIESCE,
   );

/**
 * Issue the first flow of a syncpoint request on an APPC mapped conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE PREPARE_____________________________________><               |
 * |                    |_CONVID(name)_|  |_STATE(cvda)_|                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE PREPARE applies only to distributed transaction
 * processing over APPC links. It enables a syncpoint initiator
 * to prepare a syncpoint slave for syncpointing by sending only
 * the first flow (prepare-to-commit) of the syncpoint exchange.
 * <p>Depending on the reply from the syncpoint slave, the initiator
 * can proceed with the syncpoint by issuing a SYNCPOINT
 * command, or initiate back-out by issuing a SYNCPOINT
 * ROLLBACK command.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The conversation is not an APPC mapped
 * conversation.
 * <LI>The conversation state is not valid for the request.
 * <LI>The sync level of the conversation is not 2.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the CONVID value in the command does not
 * relate to a conversation that is owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE causes an ATCV
 * abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal facility (returned by a previously executed
 *               ASSIGN command).
 *               <p>If this option is omitted, the principal facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "ISSUE PREPARE"(
   CONVID(name),
   STATE(cvda),
   );

/**
 * Print displayed data on first available printer.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE PRINT__><                                                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE PRINT prints displayed data on the first available
 * printer that can respond to a print request.
 * ISSUE PRINT can be used on a number of logical units,
 * using the printers defined below:
 * <UL>
 * <li>For a 3270 logical unit or a 3650 host conversational
 * (3270) logical unit, the printer must be defined by the
 * PRINTER or ALTPRINTER options on the RDO
 * TERMINAL resource definition, or by a printer supplied
 * by the autoinstall user program.
 * <li>For a 3270-display logical unit with the PTRADAPT
 * feature, used with a 3274 or 3276, the printer is
 * allocated by the printer authorization matrix. The
 * PTRADAPT feature is enabled by specifying
 * DEVICE=LUTYPE2 and PRINTADAPTER=YES on the
 * RDO TYPETERM resource definition.
 * <li>For a 3790 (3270-display) logical unit, the printer is
 * allocated by the 3790.
 * <P>The printer must be in service, not currently attached to
 * a task, and owned by the same CICS system that owns
 * the terminal running the transaction.
 * </UL>
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl COMPACT>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error.
 * <p>An ISSUE PRINT on a BTAM 3270 information display
 * system cannot raise the TERMERR condition.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program handles the session
 * error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 */
function "ISSUE PRINT"(
   );

/**
 * Interrogate a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE QUERY__DESTID(data-value)__________________________________> |
 * |                                      |_DESTIDLENG(data-value)_|        |
 * |                                                                        |
 * | >______________________________________________________><              |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>ISSUE QUERY interrogates a data set. It is used to request
 * that a sequential data set in an outboard controller be
 * transmitted to the host system. The application program
 * should either follow this command with ISSUE RECEIVE
 * commands to get the resulting inbound data, or terminate the
 * transaction to allow CICS to start a new transaction to
 * process the data.
 *
 * @param DESTID(data-value)
 * specifies the name (1-8 characters) of the data set in
 * the outboard destination.
 * @param DESTIDLENG(data-value)
 * specifies the length (halfword binary value) of the name
 * specified in the DESTID option.
 * @param VOLUME(data-value)
 * specifies the name (1-6 characters) of a diskette in an
 * outboard destination that contains the data set specified
 * in the DESTID option.
 * @param VOLUMELENG(data-value)
 * specifies the length (halfword binary value) of the name
 * specified in the VOLUME option.
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * <p>The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * <p>information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 */
function "ISSUE QUERY"(
   DESTID(data-value),
   DESTIDLENG(data-value),
   VOLUME(data-value),
   VOLUMELENG(data-value),
   );

/**
 * Read a record from a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE RECEIVE____INTO(data-area)___________________________><      |
 * |                    |_SET(ptr-ref)____|  |_LENGTH(data-area)_|          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DSSTAT, EOC, EODS, INVREQ, LENGERR, UNEXPIN                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>ISSUE RECEIVE reads a sequential data set in an outboard
 * controller.
 * <P>The INTO option specifies the area into which the data is to
 * be placed. The LENGTH option must specify a data area that
 * contains the maximum length of record that the program
 * accepts. If the record length exceeds the specified maximum
 * length, the record is truncated and the LENGERR condition
 * occurs. After the retrieval operation, the data area specified
 * in the LENGTH option is set to the record length (before any
 * truncation occurred).
 * <P>Alternatively, a pointer reference can be specified in the SET
 * option. CICS then acquires an area of sufficient size to hold
 * the record, and sets the pointer reference to the address of
 * that area. After the retrieval operation, the data area
 * specified in the LENGTH option is set to the record length.
 * <P>The outboard controller might not send the data from the
 * data set specified in the ISSUE QUERY command. The
 * ASSIGN command must be used to get the value of DESTID
 * (which identifies the data set that has actually been
 * transmitted) and the value of DESTIDLENG (which is the
 * length of the identifier in DESTID).
 *
 * @conditions
 * <DL>
 * <DT>DSSTAT<DD>
 * occurs when the destination status changes in one of
 * the following ways:
 * <UL>
 * <LI>The data stream is abended.
 * <LI>The data stream is suspended.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>EOC<DD>
 * occurs if the request/response unit (RU) is received with
 * the end-of-chain (EOC) indicator set. Field EIBEOC also
 * contains this indicator.
 * <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 * occurs when the end of the data set is encountered.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if the length of the retrieved data is greater than
 * the value specified by the LENGTH option.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param INTO(data-area)
 *               specifies the receiving field for the data read from the
 *               data set.
 *               <P>If you specify the ISSUE RECEIVE command with the
 *               INTO option, the parameter must be a data area that
 *               specifies the maximum length of data that the program is
 *               prepared to handle. If the value specified is less than
 *               zero, zero is assumed. If the length of the data exceeds
 *               the value specified, the data is truncated to that value
 *               and the LENGERR condition occurs. On completion of
 *               the retrieval operation, the data area is set to the original
 *               length of the data.
 * @param LENGTH(data-area)
 *               specifies the length (halfword binary value) of the data
 *               received.
 *               <p>If you have specified SET, you must also specify
 *               LENGTH.
 * @param SET(ptr-ref)
 *               specifies the pointer reference that is to be set to the
 *               address location of the data read from the data set.
 *               <p>If you specify the SET option, the parameter must be a
 *               data area. On completion of the retrieval operation, the
 *               data area is set to the length of the data.
 *               <p>If DATALOCATION(ANY) is associated with the
 *               application program, the address of the data can be
 *               above or below the 16MB line.
 *               <p>If DATALOCATION(BELOW) is associated with the
 *               application program, and the data resides above the
 *               16MB line, the data is copied below the 16MB line, and
 *               the address of this copy is returned.
 *               <p>If TASKDATAKEY(USER) is specified for the running
 *               task, and storage protection is active, the data returned
 *               is in a user-key. If TASKDATAKEY(CICS) is specified
 *               and storage protection is active, the data returned is in a
 *               CICS-key.
 *               <p>If you have specified SET, you must also specify
 *               LENGTH.
 */
function "ISSUE RECEIVE"(
   INTO(data-area),
   LENGTH(data-area),
   SET(ptr-ref),
   );


/**
 * Update a record in a data set.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE REPLACE__DESTID(data-value)________________________________> |
 * |                                        |_DESTIDLENG(data-value)_|      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * | >__FROM(data-area)___________________________________________________> |
 * |                     |_LENGTH(data-value)_|                             |
 * |                                                                        |
 * | >__________________________RIDFLD(data-area)_________________________> |
 * |    |_NUMREC(data-value)_|                                              |
 * |                                                                        |
 * | >____KEYLENGTH(data-value)___________________________________________> |
 * |    |                        |_KEYNUMBER(data-value)_| |                |
 * |    |_RRN______________________________________________|                |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_DEFRESP_|  |_NOWAIT_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>ISSUE REPLACE updates (replaces) a record in either a
 * relative (addressed direct) or an indexed (keyed direct) data
 * set in an outboard controller.
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEFRESP
 *                specifies that all terminal control commands issued as a
 *                result of the ISSUE REPLACE command request a
 *                definite response from the outboard batch program,
 *                irrespective of the specification of message integrity for
 *                the CICS task (by the system programmer).
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param FROM(data-area)
 *                specifies the data that is to be written to the data set.
 * @param KEYLENGTH(data-value)
 *                specifies the length (halfword binary value) of the key
 *                specified in the RIDFLD option.
 * @param KEYNUMBER(data-value)
 *                specifies the number, as a halfword binary value, of the
 *                index to be used to locate the record. There can be
 *                eight indexes (1 through 8). The default is 1. This option
 *                applies only to DPCX/DXAM and is mutually exclusive
 *                with RRN.
 * @param LENGTH(data-value)
 *                specifies the length (halfword binary value) of the data to
 *                be written.
 * @param NOWAIT
 *                specifies that the CICS task continues processing
 *                without waiting for the ISSUE REPLACE command to
 *                complete. If this option is not specified, the task activity
 *                is suspended until the command is completed.
 * @param NUMREC(data-value)
 *                for a relative data set, specifies as a halfword binary
 *                value the number of logical records to be replaced.
 *                Records are replaced sequentially starting with the one
 *                identified by the RIDFLD option.
 *                <p>For an indexed data set, NUMREC cannot be specified
 *                because only one record is replaced.
 * @param RIDFLD(data-area)
 *                specifies the record identification field.
 *                <p>For a relative record data set, the RIDFLD option
 *                specifies a fullword binary integer (the relative record
 *                number of the record starting from zero); and the RRN
 *                option is used.
 *                <p>For an indexed data set, the RIDFLD option specifies
 *                the key that is embedded in the data specified by the
 *                FROM option. The KEYLENGTH option is also required.
 * @param RRN
 *                specifies that the record identification field specified in
 *                the RIDFLD option contains a relative record number.
 *                This option is required for a relative record data set.
 *                <p>If the option is not specified, RIDFLD is assumed to
 *                specify a key.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the VOLUME option.
 */
function "ISSUE REPLACE"(
   DEFRESP,
   DESTID(data-value),
   DESTIDLENG(data-value),
   FROM(data-area),
   KEYLENGTH(data-value),
   KEYNUMBER(data-value),
   LENGTH(data-value),
   NOWAIT,
   NUMREC(data-value),
   RIDFLD(data-area),
   RRN,
   VOLUME(data-value),
   VOLUMELENG(data-value),
   );

/**
 * Relinquish use of a telecommunication line.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE RESET__><                                                    |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ, NOTALLOC                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P>This command is retained for compatability only. You should be using ISSUE DISCONNECT.
 */
function "ISSUE RESET"(
   );

/**
 * Send data to a named data set or to a selected medium.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE SEND_______________________________________________________> |
 * |                 |_DESTID(data-value)_____________________________|     |
 * |                 |                     |_DESTIDLENG(data-value)_| |     |
 * |                 |                       _CONSOLE__               |     |
 * |                 |_SUBADDR(data-value)__|__________|______________|     |
 * |                                        |_PRINT____|                    |
 * |                                        |_CARD_____|                    |
 * |                                        |_WPMEDIA1_|                    |
 * |                                        |_WPMEDIA2_|                    |
 * |                                        |_WPMEDIA3_|                    |
 * |                                        |_WPMEDIA4_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * | >__FROM(data-area)___________________________________________________> |
 * |                     |_LENGTH(data-value)_|  |_NOWAIT_|                 |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_DEFRESP_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, IGREQCD, INVREQ, SELNERR, UNEXPIN                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE SEND sends data to a named data set in an outboard
 * controller, or to a selected medium in a batch logical unit or
 * an LUTYPE4 logical unit. The options CONSOLE, PRINT,
 * CARD, and WPMEDIA1-4 are alternatives to DESTID and
 * DESTIDLENG.
 *
 * @conditions
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute an ISSUE
 * SEND command after a SIGNAL RCD data-flow control
 * code has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * <p>The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CARD
 *                specifies that the output medium is a card reader or card
 *                punch device. This option is not valid with DESTID and
 *                DESTIDLENG.
 * @param CONSOLE
 *                specifies that the output medium is that provided for
 *                messages to the operator. This option is not valid with
 *                DESTID and DESTIDLENG. This refers to a
 *                programmable subsystem such as the IBM 3790 data
 *                communication system. It does not refer to a CICS or
 *                system console.
 * @param DEFRESP
 *                specifies that all terminal control commands issued as a
 *                result of the ISSUE SEND command request a definite
 *                response from the outboard batch program, irrespective
 *                of the specification of message integrity for the CICS
 *                task (by the system programmer).
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param FROM(data-area)
 *                specifies the data to be written to the data set.
 * @param LENGTH(data-value)
 *                specifies a halfword binary value that is the length of the
 *                data to be written.
 * @param NOWAIT
 *                specifies that the CICS task continues processing
 *                without waiting for the ISSUE SEND command to
 *                complete. If this option is not specified, the task activity
 *                is suspended until the command is completed.
 * @param PRINT
 *                specifies that the output is to the print medium.
 * @param SUBADDR(data-value)
 *                specifies the medium subaddress as a halfword binary
 *                value (in the range 0-15) that allows media of the same
 *                type, for example, "printer 1" or "printer 2", to be defined.
 *                Value 15 means a medium of any type. The default is
 *                zero.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length of the name specified in the
 *                VOLUME option as a halfword binary value.
 */
function "ISSUE SEND"(
   CARD,
   CONSOLE,
   DEFRESP,
   DESTID(data-value),
   DESTIDLENG(data-value),
   FROM(data-area),
   LENGTH(data-value),
   NOWAIT,
   PRINT,
   SUBADDR(data-value),
   VOLUME(data-value),
   VOLUMELENG(data-value),
   WPMEDIA1..WPMEDIA4,
   );
/**
 * Request change of direction from sending transaction on an APPC mapped conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE SIGNAL_____________________________________><                |
 * |                   |_CONVID(name)_|  |_STATE(cvda)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>ISSUE SIGNAL, in a transaction in receive mode, signals to
 * the sending transaction that a mode change is needed. It
 * raises the SIGNAL condition on the next SEND, RECEIVE,
 * or CONVERSE command executed in the sending
 * transaction, and a previously executed HANDLE CONDITION
 * command for this condition can be used either to take some
 * action, or to ignore the request.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The command has been used on an APPC
 * conversation that is not using the EXEC CICS
 * interface, or is not a mapped conversation.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the specified CONVID value does not relate to
 * a conversation that is owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE causes an ATCV
 * abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause TERMERR if the task has an
 * outstanding terminal control request when the node
 * abnormal condition program handles the session error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal facility (returned by a previously executed
 *               ASSIGN command).
 *               <p>For compatibility with earlier releases, SESSION is
 *               accepted as a synonym for CONVID. New programs
 *               should use CONVID.
 *               <p>If both CONVID and SESSION are omitted, the principal
 *               facility is assumed.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "ISSUE SIGNAL <APPC>"(
   CONVID(name),
   STATE(cvda),
   );

/**
 * Request change of direction from sending transaction on LUTYPE6.1 conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE SIGNAL_____________________><                                |
 * |                   |_CONVID(name)__|                                    |
 * |                   |_SESSION(name)_|                                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NOTALLOC, TERMERR                                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>ISSUE SIGNAL, in a transaction in receive mode, signals to
 * the sending transaction that a mode change is needed. It
 * raises the SIGNAL condition on the next SEND, RECEIVE,
 * or CONVERSE command executed in the sending
 * transaction, and a previously executed HANDLE CONDITION
 * command for this condition can be used either to take some
 * action, or to ignore the request.
 * <p>If both CONVID and SESSION are omitted, the principal
 * facility for the task is used.
 *
 * @conditions
 * <DL>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * occurs for a session-related error. Any action on that
 * conversation other than a FREE causes an ATCV
 * abend.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause TERMERR if the task has an
 * outstanding terminal control request when the node
 * abnormal condition program handles the session error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </DL>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal facility (returned by a previously executed
 *               ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used.
 */
function "ISSUE SIGNAL <LUTYPE6.1>"(
   CONVID(name),
   SESSION(name),
   );

/**
 * Wait for an operation to be completed.
 * 
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__ISSUE WAIT_______________________________________________________> |
 * |                 |_DESTID(data-value)_____________________________|     |
 * |                 |                     |_DESTIDLENG(data-value)_| |     |
 * |                 |                       _CONSOLE__               |     |
 * |                 |_SUBADDR(data-value)__|__________|______________|     |
 * |                                        |_PRINT____|                    |
 * |                                        |_CARD_____|                    |
 * |                                        |_WPMEDIA1_|                    |
 * |                                        |_WPMEDIA2_|                    |
 * |                                        |_WPMEDIA3_|                    |
 * |                                        |_WPMEDIA4_|                    |
 * |                                                                        |
 * | >______________________________________________________><              |
 * |    |_VOLUME(data-value)_____________________________|                  |
 * |                          |_VOLUMELENG(data-value)_|                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FUNCERR, INVREQ, SELNERR, UNEXPIN                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * 
 * <p><b>Description</b>
 * <p>ISSUE WAIT suspends task activity until the previous batch
 * data interchange command is completed. This command is
 * meaningful only when it follows an ISSUE ADD, ISSUE
 * ERASE, ISSUE REPLACE, or ISSUE SEND command. The
 * options CONSOLE, PRINT, CARD, and WPMEDIA1-4 are
 * alternatives to DESTID and DESTIDLENG.
 * 
 * @conditions 
 * <DL>
 * <DT>FUNCERR<DD>
 * occurs if there is an error during execution of the
 * command. Destination selection is unaffected and other
 * commands for the same destination may be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * 
 * <DT>SELNERR<DD>
 * occurs if there is an error during destination selection.
 * The destination is not selected and other commands for
 * the same destination are unlikely to be successful.
 * <p>Default action: terminate the task abnormally.
 * <DT>UNEXPIN<DD>
 * occurs when some unexpected or unrecognized
 * information is received from the outboard controller.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CARD
 *                specifies that the output medium is a card reader or card
 *                punch device. This option is not valid with DESTID and
 *                DESTIDLENG.
 * @param CONSOLE
 *                specifies that the output medium is that provided for
 *                messages to the operator. This option is not valid with
 *                DESTID and DESTIDLENG.
 *                <p>This refers to a programmable subsystem such as the
 *                IBM 3790 data communication system. It does not refer
 *                to a CICS or system console.
 * @param DESTID(data-value)
 *                specifies the name (1-8 characters) of the data set in
 *                the outboard destination.
 * @param DESTIDLENG(data-value)
 *                specifies the length (halfword binary value) of the name
 *                specified in the DESTID option.
 * @param PRINT
 *                specifies that the output is to the print medium.
 * @param SUBADDR(data-value)
 *                specifies the medium subaddress as a halfword binary
 *                value (in the range 0-through 15) that allows media of
 *                the same type, for example, "printer 1" or "printer 2", to
 *                be defined. Value 15 means a medium of any type. The
 *                default is zero.
 * @param VOLUME(data-value)
 *                specifies the name (1-6 characters) of a diskette in an
 *                outboard destination that contains the data set specified
 *                in the DESTID option.
 * @param VOLUMELENG(data-value)
 *                specifies the length of the name specified in the
 *                VOLUME option as a halfword binary value.
 * @param WPMEDIA1..WPMEDIA4
 *                specifies that, for each specific LUTYPE4 device, a
 *                word-processing medium is defined to relate to a specific
 *                input/output device.
 */
function "ISSUE WAIT"(
   CARD,
   CONSOLE,
   DESTID(data-value),
   DESTIDLENG(data-value),
   PRINT,
   SUBADDR(data-value),
   VOLUME(data-value),
   VOLUMELENG(data-value),
   WPMEDIA1..WPMEDIA4,
   );

/**
 * Create a journal record.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__JOURNAL__JFILEID(data-value)__JTYPEID(data-value)________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)_________________________|                         |
 * |                       |_LENGTH(data-value)_|                           |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_REQID(data-area)_|                                                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PREFIX(data-value)__________________________|  |_STARTIO_|        |
 * |                          |_PFXLENG(data-value)_|                       |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_WAIT_|  |_NOSUSPEND_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IOERR, JIDERR, LENGERR, NOJBUFSP, NOTAUTH, NOTOPEN         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P>This command is now superseded by WAIT JOURNALNUM.
 * <P><B>Note</B>:  This command is supported for compatibility with earlier releases of CICS. It is superseded by the WAIT
 * JOURNALNAME command, which you are recommended to use instead.
 * 
 * @param JFILEID(data-value)
 * @param JTYPEID(data-value)
 * @param FROM(data-area)
 * @param LENGTH(data-area)
 * @param REQID(data-area)
 * @param PREFIX(data-value)
 * @param PREFIX(data-value)
 * @param PFXLENG(data-value)
 * @param STARTIO
 * @param WAIT
 * @param NOSUSPEND
 */
function "JOURNAL"(
   JFILEID(data-value),
   JTYPEID(data-value),
   FROM(data-area),
   LENGTH(data-area),
   REQID(data-area),
   PREFIX(data-value),
   PREFIX(data-value),
   PFXLENG(data-value),
   STARTIO,
   WAIT,
   NOSUSPEND
   );

/**
 * Link to another program expecting return.
 * <P>The external CICS interface (EXCI) provides a LINK command that performs all six commands of the interface in one
 * invocation. See the  CICS External Interfaces Guide for information about the EXCI.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__LINK__PROGRAM(name)______________________________________________> |
 * |                          |_COMMAREA(data-area)__| lengths |_|          |
 * |                                                                        |
 * | >__________________________________________________________________><  |
 * |    |_INPUTMSG(data-area)________________________________________|      |
 * |    |                      |_INPUTMSGLEN(data-value)_|           |      |
 * |    |____________________________________________________________|      |
 * |      |_SYSID(systemname)_|  |_SYNCONRETURN_|  |_TRANSID(name)_|        |
 * |                                                                        |
 * | lengths:                                                               |
 * | |______________________________________________________|               |
 * |    |_LENGTH(data-value)_|  |_DATALENGTH(data-value)_|                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTAUTH, PGMIDERR, ROLLEDBACK, SYSIDERR,  |
 * | TERMERR                                                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>LINK passes control from an application program at one
 * logical level to an application program at the next lower
 * logical level.
 * <p>If the requested program is not defined to CICS, and
 * AUTOINSTALL is active, CICS supplies a definition for the
 * program. If this is a local definition, and the linked-to program
 * is not already in main storage, CICS loads it.
 * <p>In some circumstances, the linked-to program may reside on
 * another CICS region --see "Distributed program link."
 * <p>When the RETURN command is executed in the linked-to
 * program, control is returned to the program initiating the link
 * at the next sequential executable instruction.
 * <p>The linked-to program operates independently of the program
 * that issues the LINK command with regard to handling
 * conditions, attention identifiers, abends, and execution key.
 * For example, the effects of HANDLE CONDITION commands
 * in the linking program are not inherited by the linked-to
 * program, but the original HANDLE CONDITION commands
 * are restored on return to the linking program. See the  CICS
 * Application Programming Guide for more information and an
 * illustration of the concept of logical levels.
 * <p>You can use the HANDLE ABEND command to deal with
 * abnormal terminations in other link levels. See the  CICS
 * Application Programming Guide for further details about the
 * relationship between LINK and HANDLE ABEND.
 * <p>Distributed program link:  In any of the following cases,
 * the link is a  distributed program link (DPL):
 * <UL>
 * <LI>You specify a remote region name on the SYSID option
 * (with or without the associated TRANSID and
 * SYNCONRETURN options).
 * <LI>The REMOTESYSTEM option on the installed
 * PROGRAM definition 2  specifies the name of a remote
 * region.
 * <LI>The installed program definition specifies
 * DYNAMIC(YES) --or there is no installed program
 * definition --and the dynamic routing program routes the
 * link request to a remote region.
 * </UL>
 * <p>In response to a distributed program link, the local CICS
 * region (the  client region) ships the link request to the remote
 * region (the  server region). The server region executes the
 * linked-to program (the  server program) on behalf of the
 * program issuing the link request (the  client program).
 * <p>The SYSID and INPUTMSG options are mutually exclusive.
 * If you specify both options on a LINK command, the
 * translator issues error message DFH7230 (severity E)
 * indicating conflicting options. See the DFH7xxx (DFHExP
 * command translator diagnostic) messages entry in the  CICS
 * Messages and Codes manual for an explanation of severity
 * E for the different supported languages.
 * <p>A server program running in the server region is restricted to
 * a DPL subset of the CICS API. Briefly, the server program
 * cannot issue:
 * <UL>
 * <LI>Terminal control commands that reference the principal
 * facility
 * <LI>Options of ASSIGN that return terminal attributes
 * <LI>BMS commands
 * <LI>Signon and signoff commands
 * <LI>Batch data interchange commands
 * <LI>Commands that address the TCTUA.
 * </UL>
 * <p>For details of the restricted DPL subset of the API, see
 * Appendix G, "API restrictions for distributed program link".
 * <p>Abends in the server program:  If a server program abends,
 * the abend code is returned to the client program. If the client
 * program is not written to handle the abend returned by the
 * server program, the client program abends with the same
 * abend code returned by the server program.
 * <p>You cannot use DPL to link to the CICS master terminal
 * program, DFHEMTA, or to the RDO program, DFHEDAP.
 * The addresses passed as parameters to DFHEMTA and
 * DFHEDAP are valid only in the region that issues the EXEC
 * CICS LINK command, which means you cannot route a
 * DFHEMTA or DFHEDAP request to a remote CICS.
 * <p><b>Important</b>
 * <p>For examples of the use of the LINK command when the
 * linked program is remote, see the  CICS Application
 * Programming Guide. For information about writing a
 * dynamic routing program, see the  CICS Customization
 * Guide.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>8<DD> A LINK command with the INPUTMSG option is
 * issued for a program that is not associated with a
 * terminal, or that is associated with an APPC
 * logical unit, or an IRC session.
 * <DT>14<DD> The SYNCONRETURN option is specified but the
 * program issuing the link request (the client
 * program) is already in conversation with a mirror
 * task (that is, a unit of work (UOW) is in progress)
 * in the remote region specified on the SYSID
 * option. In this case, the client program is in an
 * incorrect state to support the SYNCONRETURN
 * option.
 * <DT>15<DD> The program issuing the link request is already in
 * conversation with a mirror task and the TRANSID
 * specified is different from the transaction identifier
 * of the active mirror.
 * <DT>16<DD> The TRANSID specified is all blanks.
 * <DT>17<DD> The TRANSID supplied by the dynamic routing
 * program is all blanks.
 * <DT>19<DD> A LINK command with the INPUTMSG option is
 * issued for a program that is the subject of a DPL
 * request; that is, SYSID is also specified.
 * <DT>30<DD> The program manager domain has not yet been
 * initialized. This is probably due to a link request
 * having been made in a first stage PLT.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <p><b>Note</b>:  RESP2 values are not returned to the client for
 * conditions occurring in a DPL server program.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>11<DD> The COMMAREA length is less than 0 or greater
 * than 32767.
 * <DT>12<DD> The length specified on the DATALENGTH option
 * is a negative value.
 * <DT>13<DD> The length specified on the DATALENGTH option
 * is greater than the length specified on the
 * LENGTH option.
 * <<DT>DT<DD>>26<DD> The COMMAREA address is zero, but the
 * COMMAREA length is non zero.
 * <DT>27<DD> The INPUTMSG length is less than 0 or greater
 * than 32767.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The length specified on the LENGTH option is
 * greater than the length of the data area specified in
 * the COMMAREA option, and while that data was
 * being copied a destructive overlap occurred
 * because of the incorrect length.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <p><b>Note</b>:  RESP2 values are not returned to the client for
 * conditions occurring in a DPL server program.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> A resource security check has failed on
 * PROGRAM(name).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>PGMIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> A program has no entry in the PPT and either
 * program autoinstall was switched off, or the
 * program autoinstall control program indicated that
 * the program should not be autoinstalled.
 * <DT>2<DD> A program is disabled.
 * <DT>3<DD> A program could not be loaded because
 * <UL>
 * <LI>This was the first load of the program and the
 * program load failed, usually because the load
 * module could not be found.
 * <LI>This was a subsequent load of the program,
 * but the first load failed.
 * </UL>
 * <p>In order to reset the load status the load module
 * must be in the DFHRPL concatenation, and a SET
 * PROGRAM NEWCOPY will be required.
 * <DT>21<DD> The program autoinstall control program failed
 * either because the program autoinstall control
 * program is incorrect, incorrectly defined, or as a
 * result of an abend in the program autoinstall
 * control program. Program autoinstall is disabled
 * and message DFHPG0202 or DFHPG0203 written
 * to the CSPL.
 * <DT>22<DD> The model returned by the program autoinstall
 * control program was not defined in the PPT table,
 * or was not enabled.
 * <DT>23<DD> The program autoinstall control program returned
 * invalid data.
 * <DT>24<DD> Define for the program failed due to autoinstall
 * returning an invalid program name or definition.
 * <DT>25<DD> The dynamic routing program rejected the link
 * request.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ROLLEDBACK<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>29<DD> The SYNCONRETURN is specified and the server
 * program is unable successfully to take a
 * syncpoint. The server program has taken a
 * rollback, and all changes made to recoverable
 * resources in the remote region, within the current
 * unit of work, are backed out.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>18<DD> The SYSID specified cannot be found in the
 * intersystem table.
 * <DT>20<DD> The remote system specified by SYSID is an
 * LUTYPE6.1-connected system. Distributed
 * program link requests are not supported on
 * LUTYPE6.1 connections.
 * <p><b>Notes</b>:
 * <OL>
 * <LI>There is no local queuing in the event of a
 * SYSIDERR.
 * 2. RESP2 values are not returned for conditions
 * occurring on DPL requests.
 * </OL>
 * <DT>28<DD> The remote system specified by SYSID is not in
 * service.
 * <DT>29<DD> The remote system specified by SYSID is in
 * service, but there are no sessions available, and
 * the dynamic routing program has chosen not to
 * queue the link request.
 * <DT>31<DD> The request to allocate a session to the remote
 * system has been rejected.
 * <DT>32<DD> The queue of allocate requests for sessions to the
 * remote system has been purged.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>17<DD> An irrecoverable error occurs during the
 * conversation with the mirror (for example, if the
 * session fails, or if the server region fails).
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <p><b>Note</b>:  RESP2 values are not returned to the client for
 * conditions occurring in a DPL server program.
 * </DL>
 * @example
 * <p>The following example shows how to request a link to an
 * application program called PROGNAME:
 * <pre>
 * EXEC CICS LINK PROGRAM(PROGNAME)
 *   COMMAREA(COMA) LENGTH(LENA)
 *   DATALENGTH(LENI) SYSID('CONX')
 * </pre>
 * @param COMMAREA(data-area)
 *               specifies a communication area that is to be made
 *               available to the invoked program. In this option the data
 *               area is passed, and you must give it the name
 *               DFHCOMMAREA in the receiving program. (See the
 *               section about passing data to other programs in the
 *               CICS Application Programming Guide.)
 * @param DATALENGTH(data-value)
 *               specifies a halfword binary value that is the length of a
 *               contiguous area of storage, from the start of the
 *               COMMAREA, to be passed to the invoked program. df
 *               the amount of data being passed in a COMMAREA is
 *               small, but the COMMAREA itself is large so that the
 *               linked-to program can return the requested data, you
 *               should specify DATALENGTH in the interest of
 *               performance.
 *               <p>DATALENGTH cannot be used at the same time as
 *               INPUTMSG.
 * @param INPUTMSG(data-area)
 *               specifies data to be supplied to the invoked program
 *               when it first issues a RECEIVE command. This data
 *               remains available until the execution of a RECEIVE or
 *               RETURN command. An invoked program can invoke a
 *               further program and so on, creating a chain of linked
 *               programs. If a linked-to chain exists, CICS supplies the
 *               INPUTMSG data to the first RECEIVE command
 *               executed in the chain. If control returns to the program
 *               that issued the LINK with INPUTMSG before the
 *               INPUTMSG data has been accepted by a RECEIVE
 *               command, CICS assumes that a RECEIVE command
 *               has been issued. This means that the original
 *               INPUTMSG data is no longer available.
 *               <p>INPUTMSG cannot be used at the same time as
 *               DATALENGTH.
 *               <p>See also the  CICS Application Programming Guide for
 *               more information about the INPUTMSG option.
 * @param INPUTMSGLEN(data-value)
 *               specifies a halfword binary value to be used with
 *               INPUTMSG.
 * @param LENGTH(data-value)
 *               specifies a halfword binary value that is the length in
 *               bytes of the COMMAREA (communication area). This
 *               value may not exceed 32 500 bytes if the COMMAREA
 *               is to be passed between any two CICS servers (for any
 *               combination of product/version/release).
 * @param PROGRAM(name)
 * specifies the identifier (1-8 characters) of the program to
 * which control is to be passed unconditionally.
 * <p>In any of the following cases, the linked-to program is a
 * server program in a remote region:
 * <UL>
 * <LI>The SYSID option specifies a remote region.
 * <LI>The REMOTESYSTEM option on the installed
 * PROGRAM definition 3  specifies the name of a
 * remote region.
 * <LI>The installed program definition specifies
 * DYNAMIC(YES) --or there is no installed program
 * definition --and the dynamic routing program routes
 * the link request to a remote region.
 * </UL>
 * <p>Note the use of quotes:
 * <pre>
 * EXEC CICS LINK PROGRAM('PROGX')
 * </pre>
 * <p>PROGX is in quotes because it is the program name.
 * <pre>
 * EXEC CICS LINK PROGRAM(DAREA)
 * </pre>
 *
 * <p><b>DAREA</b> is not in quotes because it is the name of a
 * data area that contains the actual program name.
 * @param SYNCONRETURN
 *               specifies that the server region named on the SYSID
 *               option is to take a syncpoint on successful completion of
 *               the server program.
 *               <p>Changes to recoverable resources made by the server
 *               program are committed or rolled-back independently of
 *               changes to recoverable resources made by the client
 *               program issuing the LINK request, or changes made by
 *               the server in any subsequent LINK.
 *               <UL>
 *               <LI>The NORMAL condition is returned if changes to
 *               recoverable resources are committed before return
 *               from the server program.
 *               <LI>The ROLLEDBACK condition is returned if changes
 *               to recoverable resources are rolled back before
 *               return from the server program.
 *               <LI>The TERMERR condition is raised following failure
 *               of the communications link or the system in which
 *               the server program is executing. The client program
 *               is responsible for handling the condition and
 *               ensuring that data consistency is restored.
 *               </UL>
 *               <p>Synconreturn is only applicable to remote LINKs, it is
 *               ignored if the LINK is local.
 * @param SYSID(systemname)
 *               specifies the system name of a CICS server region to
 *               where the program link request is to be routed.
 *               <p>If SYSID specifies a remote system, no reference is
 *               made to PROGRAM resource definitions held locally. If
 *               SYSID specifies the local system, CICS treats the LINK
 *               request as if SYSID was not specified.
 *               <p>A remote system name specified on the SYSID option
 *               takes priority over any remote system name returned by
 *               the dynamic routing program.
 * @param TRANSID(name)
 *               specifies the name of the mirror transaction that the
 *               remote region is to attach, and under which it is to run
 *               the server program. If you omit the TRANSID option, the
 *               server region attaches either CSMI, CPMI, or CVMI by
 *               default.
 *               <p>The transaction name you specify on the LINK command
 *               takes priority over any transaction specified on the
 *               program resource definition. Whilst you can specify your
 *               own name for the mirror transaction initiated by DPL
 *               requests, the transaction  must be defined in the server
 *               region, and the transaction definition must specify the
 *               mirror program, DFHMIRS.
 */
function "LINK"(
   COMMAREA(data-area),
   DATALENGTH(data-value),
   INPUTMSG(data-area),
   INPUTMSGLEN(data-value),
   LENGTH(data-value),
   PROGRAM(name),
   SYNCONRETURN,
   SYSID(systemname),
   TRANSID(name),
   );

/**
 * Load a program from the CICS DFHRPL concatenation library into main storage.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__LOAD__PROGRAM(name)______________________________________________> |
 * |                          |_SET(ptr-ref)_|  |_LENGTH(data-area)__|      |
 * |                                            |_FLENGTH(data-area)_|      |
 * |                                                                        |
 * | >________________________________><                                    |
 * |    |_ENTRY(ptr-ref)_|  |_HOLD_|                                        |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTAUTH, PGMIDERR                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Dynamic transaction routing</B>
 * <P>Using LOAD with HOLD, or using a resource that has been defined with RELOAD=YES, could create inter-transaction
 * affinities that adversely affect the use of dynamic transaction routing. See the  CICS Application Programming Guide for
 * more information about transaction affinities.
 * <P><B>Description</B>
 * <P>Load makes available to the invoking task a copy of an
 * application program, table, or map. If the program is defined
 * with RELOAD=NO, it is only fetched from the library where it
 * resides, if there is not a copy already in main storage. If the
 * program is defined with RELOAD=YES, a new copy is
 * always fetched from the library. (See the  CICS Application
 * Programming Guide for further details about maps.) Using
 * LOAD can reduce system overhead.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL COMPACT>
 * <DT>30<DD> The program manager domain has not yet been
 * initialized. This is probably due to a load request
 * having been made in a first stage PLT.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>19<DD> LENGTH is used and the length of the loaded
 * program is not less than 32KB.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * PROGRAM(name).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>PGMIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A program, table, or map has no entry in the PPT
 * and either program autoinstall was switched off, or
 * the program autoinstall control program indicated
 * that the program should not be autoinstalled.
 * <DT>2<DD> A program is disabled.
 * <DT>3<DD> A program could not be loaded because:
 * <ul>
 * <LI>This was the first load of the program and the
 * program load failed, usually because the load
 * module could not be found.
 * <LI>This was a subsequent load of the program,
 * but the first load failed.
 * </ul>
 * <p>In order to reset the load status the load module
 * must be in the DFHRPL concatenation, and a SET
 * PROGRAM NEWCOPY will be required.
 * <DT>9<DD> The installed program definition is for a remote
 * program.
 * <DT>21<DD> The program autoinstall control program failed
 * either because the program autoinstall control
 * program is incorrect, incorrectly defined, or as a
 * result of an abend in the program autoinstall
 * control program. Program autoinstall is disabled
 * and message DFHPG0202 or DFHPG0203 written
 * to the CSPL.
 * <DT>22<DD> The model returned by the program autoinstall
 * control program was not defined in the PPT table,
 * or was not enabled.
 * <DT>23<DD> The program autoinstall control program returned
 * invalid data.
 * <DT>24<DD> Define for the program failed due to autoinstall
 * returning an invalid program name or definition.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * <p>The following example shows how to load a user-prepared
 * table called TB1:
 * <pre>
 * EXEC CICS LOAD PROGRAM('TB1') SET(PTR)
 * </pre>
 * @param ENTRY(ptr-ref)
 *               specifies the pointer reference that is to be set to the
 *               address of the entry point in the program that has been
 *               loaded.
 *               <P>The top bit of the address is set on if the program is
 *               defined with AMODE=31.
 *               <P>For assembler programs without an explicit ENTRY
 *               defined in the linkedit definitions, the entry point returned
 *               depends on (1) whether there is a CICS stub, and (2)
 *               whether the LOAD command is issued from a PLT
 *               program:
 *               <ul>
 *               <LI>If there is a CICS stub, the entry point address is
 *               incremented for this stub unless the LOAD
 *               command is issued from a PLT program executed
 *               during the first phase of initialization or the final
 *               phase of shutdown.
 *               <LI>If there is not a CICS stub, the entry point address
 *               is the same as the load point address.
 *               </ul>
 * @param FLENGTH(data-area)
 *               specifies a fullword binary area to be set to the length of
 *               the loaded program, table, or map. Use FLENGTH if the
 *               length of the loaded program is greater than 32KB.
 * @param HOLD
 *               specifies that the loaded program, table, or map is not to
 *               be released (if still available) when the task issuing the
 *               LOAD command is terminated; it is to be released only
 *               in response to a RELEASE command from this task or
 *               from another task.
 *               <P>If you omit HOLD, the program, table, or map is
 *               released when the task that issued the load terminates
 *               or issues a RELEASE command.
 *               <P>If, however, the program is defined with RELOAD=YES,
 *               neither of the above apply. RELEASE does not work,
 *               and a FREEMAIN must be issued to get rid of the
 *               program.
 * @param LENGTH(data-area)
 *               specifies a halfword binary value to be set to the length
 *               of the loaded program, table, or map. To avoid raising
 *               the LENGERR condition, use FLENGTH if the length of
 *               the loaded program is likely to be greater than 32KB.
 * @param PROGRAM(name)
 *               specifies the identifier (1-8 characters) of a program,
 *               table, or map to be loaded. The specified name must
 *               have been defined as a program to CICS, though if
 *               AUTOINSTALL is active a definition is autoinstalled.
 * @param SET(ptr-ref)
 *               specifies the pointer reference that is to be set to the
 *               address at which a program, table, or map is loaded.
 */
function "LOAD"(
   ENTRY(ptr-ref),
   FLENGTH(data-area),
   HOLD,
   LENGTH(data-area),
   PROGRAM(name),
   SET(ptr-ref),
   );

/**
 * Code a user event-monitoring point.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__MONITOR__POINT(data-value)_______________________________________> |
 * |                                 |_DATA1(data-area)_|                   |
 * |                                                                        |
 * | >__________________________________________________><                  |
 * |    |_DATA2(data-area)_|  |_ENTRYNAME(data-area)_|                      |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>MONITOR provides information about the performance of
 * your application transactions. It replaces the monitoring
 * aspects of ENTER TRACEID.
 * <p>In addition to the monitoring data collected at predefined
 * event monitoring points (EMPs) within CICS, a user
 * application program can contribute data to user fields within
 * the CICS monitoring records. You can do this by using the
 * MONITOR command to invoke user-defined EMPs. At each
 * of these user EMPs, you can add or change 1-16384 bytes
 * of your own data in each performance monitoring record. In
 * those 16384 bytes, you can have any combination of the
 * following:
 * <UL>
 * <LI>0 through 256 counters
 * <LI>0 through 256 clocks
 * <LI>A single 8192-byte character string
 * </UL>
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> Your POINT value is outside the range 1 through
 * 255.
 * <DT>2<DD> Your POINT value is not defined in the MCT.
 *
 * <DT>3<DD> Your DATA1 value is not valid.
 * <DT>4<DD> Your DATA2 value is not valid.
 * <DT>5<DD> You did not specify DATA1 for an MCT operation
 * that required it.
 * <DT>6<DD> You did not specify DATA2 for an MCT operation
 * that required it.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * <p>For example, you could use these user EMPs to count the
 * number of times a certain event occurs, or to time the
 * interval between two events.
 * <p>Figure 4 gives examples of MONITOR commands (and of
 * the MCT entries you need for them). See the  CICS
 * Customization Guide for more information about monitoring.
 * <p><b>Notes</b>:
 * <OL>
 * <LI> Example 1 shows a user clock being started by an
 * application identified as PROG3. This is the eleventh
 * EMP in this application. To prevent confusion with the
 * eleventh EMP in another application, this EMP is
 * uniquely identified by the tag ENTRY3.11. The clock that
 * is being started is the first clock in a string.
 * <LI> Example 2 shows the same user clock being stopped,
 * by the same application, but from a different EMP. The
 * EMP is uniquely identified by the tag ENTRY3.12.
 * <LI> Example 3 shows some user data being loaded into the
 * 32-byte character string reserved for that purpose. The
 * loading starts at offset 0, and the data is no more than
 * 32 bytes in length.
 * </UL>
 * <P>Figure  4.  Examples of coding user EMPs
 * <PRE>
 * <B>1:</B>
 * EXEC CICS MONITOR
 *   POINT(11)
 *   ENTRYNAME(ENTRY3)
 *   needing:  DFHMCT TYPE=EMP,
 *   CLASS=PERFORM,
 *   ID=(ENTRY3.11),
 *   CLOCK=(1,CLOCKA),
 *   PERFORM=SCLOCK(1)
 * <B>2:</B>
 * EXEC CICS MONITOR
 *   POINT(12)
 *   ENTRYNAME(ENTRY3)
 *   needing:  DFHMCT TYPE=EMP,
 *   CLASS=PERFORM,
 *   ID=(ENTRY3.12),
 *   PERFORM=PCLOCK(1)
 * <B>3:</B>
 * EXEC CICS MONITOR
 *   POINT(13)
 * DATA1(address of data)
 * DATA2(length of data)
 *   ENTRYNAME(ENTRY3)
 *   needing:  DFHMCT TYPE=EMP,
 *   CLASS=PERFORM,
 *   ID=(ENTRY3.13),
 *   PERFORM=MOVE(0,32)
 * </PRE>
 * @param DATA1(data-area)
 *               specifies a 4-byte variable whose contents depend on
 *               the type of user EMP being used:
 *               <UL>
 *               <LI>If the user EMP contains an ADDCNT, SUBCNT,
 *               NACNT, EXCNT, or ORCNT option, the DATA1
 *               variable is an area used as defined by the MCT
 *               user EMP definition.
 *               <LI>If the MCT user EMP definition contains an
 *               MLTCNT option, the DATA1 variable is an area with
 *               the address of a series of adjacent fullwords
 *               containing the values to be added to the user count
 *               fields defined in the MCT user EMP definition.
 *               <LI>If the MCT user EMP definition contains a MOVE
 *               option, the DATA1 variable is an area with the
 *               address of the character string to be moved.
 *               </UL>
 *               <p>See the  CICS Resource Definition Guide for details of
 *               user EMP options.
 * @param DATA2(data-area)
 *               specifies a 4-byte variable whose contents depend on
 *               the type of user EMP being used:
 *               <UL>
 *               <LI>If the user EMP contains an ADDCNT, SUBCNT,
 *               NACNT, EXCNT, or ORCNT option, the DATA2
 *               variable is an area used as defined by the MCT
 *               user EMP definition.
 *               <LI>If the MCT user EMP definition contains an
 *               MLTCNT option, the DATA2 variable is an area with
 *               the number of user count fields to be updated. The
 *               number specified in DATA2 overrides the default
 *               value defined in the MCT for the operation. A value
 *               of zero instructs monitoring to use the default. If
 *               DATA2 is not specified, the MLTCNT operation
 *               raises an INVREQ condition although the operation
 *               was successful.
 *               <LI>If the MCT user EMP definition contains a MOVE
 *               option, the DATA2 variable is an area with the
 *               length of the character string to be moved. The
 *               number specified in DATA2 will override the default
 *               value defined in the MCT for the operation. A value
 *               of zero instructs monitoring to use the default. If
 *               DATA2 is not specified, the MOVE operation raises
 *               an INVREQ although the operation was successful.
 *               </UL>
 *               <p>See the  CICS Resource Definition Guide for details of
 *               user EMP options.
 * @param ENTRYNAME(data-area)
 *               is the monitoring point entry name that qualifies the
 *               POINT value and is defined in the monitoring control
 *               table (MCT). ENTRYNAME defaults to USER if not
 *               specified.
 * @param POINT(data-value)
 *               specifies the monitoring point identifier as defined in the
 *               MCT, and is in the range 0 through 255. Note, however,
 *               that point identifiers in the range 200 through 255 are
 *               reserved for use by IBM program products.
 */
function "MONITOR"(
   DATA1(data-area),
   DATA2(data-area),
   ENTRYNAME(data-area),
   POINT(data-value),
   );

/**
 * Get information about an LUTYPE6.1 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__MONITOR__POINT(data-value)_______________________________________> |
 * |                                 |_DATA1(data-area)_|                   |
 * |                                                                        |
 * | >__________________________________________________><                  |
 * |    |_DATA2(data-area)_|  |_ENTRYNAME(data-area)_|                      |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>POINT gets information about a named facility, such as
 * whether it owns the given facility.
 * This command can be used on an MRO session.
 *
 * @conditions
 * <dl>
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <P>Default action: terminate the task abnormally.
 * </dl>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used. If both this option and CONVID are
 *               omitted, the principal facility for the task is used.
 */
function "POINT"(
   CONVID(name),
   SESSION(name),
   );

/**
 * Restore the stack.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__POP HANDLE__><                                                     |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>POP HANDLE enables you to restore the effect of IGNORE
 * CONDITION, HANDLE ABEND, HANDLE AID, and HANDLE
 * CONDITION commands to the state they were in before a
 * PUSH HANDLE command was executed at the current link
 * level. This can be useful, for example, during a branch to a
 * subroutine embedded in a main program.
 * <P>Normally, when a CICS program calls a subroutine (at the
 * same logical level), the program or routine that receives
 * control inherits the current HANDLE commands. These
 * commands may not be appropriate within the called program.
 * The called program can use PUSH HANDLE to suspend
 * existing HANDLE commands, and before returning control to
 * the caller, can then restore the original commands using the
 * POP HANDLE command.
 * <P><B>Note</B>:  When a CICS program uses EXEC CICS LINK to call
 * another CICS program, the HANDLE effects are NOT
 * inherited by the linked-to program, but CICS will
 * search preceding logical levels for a HANDLE
 * ABEND exit. See  CICS Application Programming
 * Guide for further details about the relationship
 * between LINK and HANDLE ABEND.
 * <P>You can nest PUSH HANDLE... POP HANDLE command
 * sequences within a task. Each POP HANDLE command
 * restores a set of specifications.
 * <P>The C language does not support POP HANDLE.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs if no matching PUSH HANDLE command has
 * been executed at the current link level.
 * <P>Default action: terminate the task abnormally.
 * </dl>
 */
function "POP HANDLE"(
   );

/**
 * Request notification when a specified time has expired.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |            _INTERVAL(0)______________________                          |
 * | >>__POST__|__________________________________|__SET(ptr-ref)_________> |
 * |           |_INTERVAL(hhmmss)_________________|                         |
 * |           |_TIME(hhmmss)_____________________|                         |
 * |           |        <_______________________  |                         |
 * |           |_AFTER_____HOURS(data-value)____|_|                         |
 * |           |         |_MINUTES(data-value)_|  |                         |
 * |           |         |_SECONDS(data-value)_|  |                         |
 * |           |     <_______________________     |                         |
 * |           |_AT_____HOURS(data-value)____|____|                         |
 * |                  |_MINUTES(data-value)_|                               |
 * |                  |_SECONDS(data-value)_|                               |
 * |                                                                        |
 * | >___________________><                                                 |
 * |    |_REQID(name)_|                                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EXPIRED, INVREQ                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using POST if later CANCELed by another task could create inter-transaction affinities that adversely affect the use of
 * dynamic transaction routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>POST requests notification that a specified time has expired.
 * In response to this command, CICS makes a timer-event
 * control area available for testing. This 4-byte control area is
 * initialized to binary zeros, and the pointer reference specified
 * in the SET option is set to its address.
 * <p>When the time you specify has expired, the timer-event
 * control area is posted; that is, its first byte is set to X'40'
 * and its third byte to X'80'. You can test posting in either of
 * the following ways:
 * <UL>
 * <LI>By checking the timer-event control area at intervals.
 * You must give CICS the opportunity to post the area;
 * that is, the task must relinquish control of CICS before
 * you test the area. Normally, this condition is satisfied as
 * a result of other commands being issued; if a task is
 * performing a long internal function, you can force control
 * to be relinquished by issuing a SUSPEND command.
 * <LI>By suspending task activity by a WAIT EVENT or WAIT
 * EXTERNAL command until the timer-event control area
 * is posted. This action is similar to issuing a DELAY
 * command but, with a POST and WAIT EVENT or WAIT
 * EXTERNAL command sequence, you can do some
 * processing after issuing the POST command; a DELAY
 * command suspends task activity at once. No other task
 * should attempt to wait on the event set up by a POST
 * command.
 * <LI>By using WAITCICS.
 * </UL>
 * <p>The timer-event control area can be released for a variety of
 * reasons. If this happens, the result of any other task issuing
 * a WAIT command on the event set up by the POST
 * command is unpredictable.
 * <p>However, other tasks can cancel the event if they have
 * access to the REQID associated with the POST command.
 * (See the CANCEL command and the description of the
 * REQID option.) A timer-event control area provided for a task
 * is not released or altered (except as described above) until
 * one of the following events occurs:
 * <UL>
 * <LI>The task issues a subsequent DELAY, POST, or START
 * command.
 * <LI>The task issues a CANCEL command to cancel the
 * POST command.
 * <LI>The task is terminated, normally or abnormally.
 * <LI>Any other task issues a CANCEL command for the
 * event set up by the POST command.
 * </UL>
 * <p>A task can have only one POST command active at any
 * given time. Any DELAY, POST, or START command
 * supersedes a POST command previously issued by the task.
 * <p>The default is INTERVAL(0), but for C the default is AFTER
 * HOURS(0) MINUTES(0) SECONDS(0).
 *
 * @conditions
 * <DL>
 * <DT>EXPIRED<DD>
 * occurs if the time specified has already expired when the
 * command is issued.
 * <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Hours are out of range.
 * <DT>5<DD> Minutes are out of range.
 * <DT>6<DD> Seconds are out of range.
 * </DL>
 * <p>also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The POST command is not valid for processing by
 * CICS.
 * </UL>
 * <P>Default action: terminate the task abnormally.
 * </UL>
 * </dl>
 * @example
 * <p>The following example shows you how to request a
 * timer-event control area for a task, to be posted after 30
 * seconds:
 * <pre>
 * EXEC CICS POST
 *   INTERVAL(30)
 *   REQID('RBL3D')
 *   SET(PREF)
 * </pre>
 * <p>The following example shows you how to ask to be notified
 * when the specified time of day is reached. Because no
 * request identifier is specified in the command, CICS
 * automatically assigns one and returns it to the application
 * program in the EIBREQID field in the EIB.
 * <pre>
 * EXEC CICS POST
 *   TIME(PACKTIME)
 *   SET(PREF)
 * </pre>
 * @param AFTER
 *               specifies the interval of time to elapse.
 *               <p>There are two ways to enter the time under AFTER and
 *               AT.
 *               <OL>
 *               <LI>A combination of at least two of HOURS(0-99),
 *               MINUTES(0-59), and SECONDS(0-59). HOURS(1)
 *               SECONDS(3) would mean one hour and three
 *               seconds (the minutes default to zero).
 *               <LI>As one of HOURS(0-99), MINUTES(0-5999), or
 *               SECONDS(0-359999). HOURS(1) means one hour.
 *               MINUTES(62) means one hour and two minutes.
 *               SECONDS(3723) means one hour, two minutes,
 *               and three seconds.
 *               </OL>
 *               <p>AT specifies the time of expiring. For the ways to enter the
 *               time, see the AFTER option.
 * @param HOURS(data-value)
 *               specifies a fullword binary value in the range 0-99. This
 *               is a suboption of the AFTER and AT options. For its use
 *               and meaning, see the AFTER option.
 * @param INTERVAL(hhmmss)
 *               specifies an interval of time that is to elapse from the
 *               time at which the POST command is issued. The mm
 *               and ss are in the range 0-59. The time specified is
 *               added to the current clock time by CICS when the
 *               command is executed to calculate the expiration time.
 *               <p>This option is used to specify when the posting of the
 *               timer-event control area should occur.
 *               <p>When using the C language, you are recommended to
 *               use the AFTER/AT HOURS, MINUTES, and SECONDS
 *               options as C does not provide a packed decimal data
 *               type. You may use INTERVAL, but if the value specified
 *               is not an integer constant, the application is responsible
 *               for ensuring that the value passed to CICS is in packed
 *               decimal format.
 * @param MINUTES(data-value)
 *               specifies a fullword binary value in the range 0-59, when
 *               HOURS or SECONDS are also specified, or 0-5999
 *               when MINUTES is the only option specified. This is a
 *               suboption of the AFTER and AT options. For its use and
 *               meaning, see the AFTER option.
 * @param REQID(name)
 *               specifies a name (1-8 characters), which should be
 *               unique, to identify the POST request. Using this option
 *               to specify an application-defined name is one way to
 *               enable another transaction to cancel the POST request.
 *               If you do not specify your own REQID, CICS generates
 *               a unique request identifier for you in the EIBREQID field
 *               of the EXEC interface block. This, like your own REQID,
 *               can be used by another transaction to cancel the POST
 *               request.
 *               <p>To enable other tasks to cancel unexpired POST
 *               requests, you must make the request identifier
 *               dynamically available. For example, storing it in a TS
 *               queue, whose name is known to other applications that
 *               may want to cancel the POST request, is one way you
 *               can pass a request identifier to other transactions.
 * @param SECONDS(data-value)
 *               specifies a fullword binary value in the range 0-59, when
 *               HOURS or MINUTES are also specified, or 0-359 999
 *               when SECONDS is the only option specified. This is a
 *               suboption of the AFTER and AT options. For its use and
 *               meaning, see the AFTER option.
 * @param SET(ptr-ref)
 *               specifies the pointer reference to be set to the address
 *               of the 4-byte timer-event control area generated by
 *               CICS. This area is initialized to binary zeros; on
 *               expiration of the specified time, the first byte is set to
 *               X'40', and the third byte to X'80'.
 *               The timer-event control area always resides below the
 *               16MB line in shared dynamic storage (SDSA).
 * @param TIME(hhmmss)
 *               specifies the time when the posting of the timer-event
 *               control area should occur.
 *               <p>When using the C language, you are recommended to
 *               use the AFTER/AT HOURS, MINUTES, and SECONDS
 *               options as C does not provide a packed decimal data
 *               type. You may use TIME, but if the value specified is
 *               not an integer constant, the application is responsible for
 *               ensuring that the value passed to CICS is in packed
 *               decimal format. See the section about expiration times in
 *               the  CICS Application Programming Guide.
 */
function "POST"(
   AFTER,
   HOURS(data-value),
   INTERVAL(hhmmss),
   MINUTES(data-value),
   REQID(name),
   SECONDS(data-value),
   SET(ptr-ref),
   TIME(hhmmss),
   );


/**
 * Discontinue building a BMS logical message.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__PURGE MESSAGE__><                                                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: Full BMS: INVREQ, TSIOERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>PURGE MESSAGE discontinues the building of a BMS
 * logical message. It deletes the current logical message,
 * including any pages of device-dependent data stream
 * already written to CICS temporary storage. The application
 * program may then build a new logical message.
 * The portions of the logical message already built in main
 * storage or in temporary storage are deleted.
 * <P>See Appendix K, "BMS macro summary" for
 * map definition macros.
 * <P>PURGE MESSAGE is only available on full-function BMS.
 * For further information about BMS, see the  CICS Application
 * Programming Guide.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> The command was called in a distributed program
 * link server program.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 */
function "PURGE MESSAGE"(
   );

/**
 * Suspend the stack.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__PUSH HANDLE__><                                                    |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>PUSH HANDLE enables you to suspend the current effect of
 * IGNORE CONDITION, HANDLE ABEND, HANDLE AID, and
 * HANDLE CONDITION commands. This can be useful, for
 * example, during a branch to a subroutine embedded in a
 * main program.
 * <P>Normally, when a CICS program calls a subroutine at the
 * same logical level, the program or routine that receives
 * control inherits the current HANDLE commands. These
 * commands may not be appropriate within the called program.
 * <P>The called program can use PUSH HANDLE to suspend
 * existing HANDLE commands.
 * <P><B>Note</B>:  When a CICS program uses EXEC CICS LINK to call
 * another CICS program, the HANDLE CONDITION
 * options are NOT inherited by the linked-to program,
 * but CICS will search preceding logical levels for a
 * HANDLE ABEND exit. See  CICS Application
 * Programming Guide for further details about the
 * relationship between LINK and HANDLE ABEND.
 * <P>You can nest PUSH HANDLE... POP HANDLE command
 * sequences within a task. Each PUSH HANDLE command
 * stacks a set of specifications.
 * <P>The C language does not support PUSH HANDLE.
 */
function "PUSH HANDLE"(
   );

/**
 * Query a named counter.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__QUERY COUNTER____________________________________________________> |
 * |                    |_POOL(name)_|  |_VALUE(data-area)_|                |
 * | >____________________________________________________________________> |
 * |    |_MINIMUM(data-area)_|  |_MAXIMUM(data-area)_|                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>These counter commands return the current, maximum, and
 * minimum values for the named counter. COUNTER operates
 * on fullword named counters and DCOUNTER operates on
 * doubleword named counters.
 * <P>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl COMPACT>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * <p>Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * LENGERR occurs for COUNTER commands only and
 * does not apply to DCOUNTER requests. It occurs when
 * a counter that was defined by a DCOUNTER command
 * has become negative when acccessed as a fullword
 * signed binary value (that is, the counter uses more than
 * 31 bits).
 * <p>In each of the three cases of overflow, the named
 * counter server completes the operation, and returns a
 * warning response to CICS, which CICS returns to your
 * application program as the RESP2 value. The data area
 * contains the low-order 32 bits returned from the named
 * counter server, which could be a negative number.
 * RESP2 values:
 * <DL compact>
 * <DT>001<DD> The current value that the server has attempted to
 * return in one of the data areas has overflowed into
 * the high-order (sign) bit (that is, the value returned
 * is negative).
 * <p><b>Note</b>:  LENGERR with RESP2=001 cannot occur
 * for a named counter that is in the
 * counter-at-limit condition. If the
 * counter-at-limit condition has been
 * reached, the value (which could be
 * negative) is returned with a normal
 * response.
 * <DT>002<DD> A value is too large for a fullword data area by
 * only 1 bit. In this case, the overflow value is
 * exactly 1.
 * <DT>003<DD> A value is too large for a fullword data area by a
 * value greater than 1.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * @param COUNTER(name)
 *               specifies the 16-character name of the fullword counter
 *               being queried. Valid characters for names are A through
 *               Z, 0 through 9, $ @ # and _ (underscore). If  name is a
 *               variable that contains a name that is less than 16
 *               characters, the name must be padded with trailing
 *               blanks.
 * @param MAXIMUM(data-area)
 *               specifies the data area in which CICS is to return the
 *               maximum number for the named counter. CICS returns
 *               a fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 * @param MINIMUM(data-area)
 *               specifies the data area in which CICS is to return the
 *               minimum number for the named counter. CICS returns a
 *               fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 * @param POOL(poolname)
 *               specifies the name of the pool in which the named
 *               counter resides.
 *               <P>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <P>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <P>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <P>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 * @param VALUE(data-area)
 *               specifies the data area in which CICS is to return the
 *               current value for the named counter. CICS returns a
 *               fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 */
function "QUERY COUNTER"(
   COUNTER(name),
   MAXIMUM(data-area),
   MINIMUM(data-area),
   POOL(poolname),
   VALUE(data-area),
   );


/**
 * Query a named counter.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__QUERY DCOUNTER___________________________________________________> |
 * |                     |_POOL(name)_|  |_VALUE(data-area)_|               |
 * | >____________________________________________________________________> |
 * |    |_MINIMUM(data-area)_|  |_MAXIMUM(data-area)_|                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>These counter commands return the current, maximum, and
 * minimum values for the named counter. COUNTER operates
 * on fullword named counters and DCOUNTER operates on
 * doubleword named counters.
 * <P>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl COMPACT>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * <p>Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * LENGERR occurs for COUNTER commands only and
 * does not apply to DCOUNTER requests. It occurs when
 * a counter that was defined by a DCOUNTER command
 * has become negative when acccessed as a fullword
 * signed binary value (that is, the counter uses more than
 * 31 bits).
 * <p>In each of the three cases of overflow, the named
 * counter server completes the operation, and returns a
 * warning response to CICS, which CICS returns to your
 * application program as the RESP2 value. The data area
 * contains the low-order 32 bits returned from the named
 * counter server, which could be a negative number.
 * RESP2 values:
 * <DL compact>
 * <DT>001<DD> The current value that the server has attempted to
 * return in one of the data areas has overflowed into
 * the high-order (sign) bit (that is, the value returned
 * is negative).
 * <p><b>Note</b>:  LENGERR with RESP2=001 cannot occur
 * for a named counter that is in the
 * counter-at-limit condition. If the
 * counter-at-limit condition has been
 * reached, the value (which could be
 * negative) is returned with a normal
 * response.
 * <DT>002<DD> A value is too large for a fullword data area by
 * only 1 bit. In this case, the overflow value is
 * exactly 1.
 * <DT>003<DD> A value is too large for a fullword data area by a
 * value greater than 1.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * @param DCOUNTER(name)
 *               specifies the 16-character name of the doubleword
 *               counter being queried. Valid characters for names are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               16 characters, the name must be padded with trailing
 *               blanks.
 * @param MAXIMUM(data-area)
 *               specifies the data area in which CICS is to return the
 *               maximum number for the named counter. CICS returns
 *               a fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 * @param MINIMUM(data-area)
 *               specifies the data area in which CICS is to return the
 *               minimum number for the named counter. CICS returns a
 *               fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 * @param POOL(poolname)
 *               specifies the name of the pool in which the named
 *               counter resides.
 *               <P>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <P>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <P>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <P>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 * @param VALUE(data-area)
 *               specifies the data area in which CICS is to return the
 *               current value for the named counter. CICS returns a
 *               fullword signed binary value for the COUNTER
 *               command and a doubleword unsigned binary value for
 *               the DCOUNTER command
 */
function "QUERY DCOUNTER"(
   DCOUNTER(name),
   MAXIMUM(data-area),
   MINIMUM(data-area),
   POOL(poolname),
   VALUE(data-area),
   );

/**
 * To query the security authorization of the user.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__QUERY SECURITY___________________________________________________> |
 * |                                                                        |
 * | >____RESTYPE(data-value)_____________________________________________> |
 * |    |_RESCLASS(data-value)__RESIDLENGTH(data-value)_|                   |
 * |                                                                        |
 * | >__RESID(data-value)_________________________________________________> |
 * |                       |_LOGMESSAGE(cvda)_|  |_READ(cvda)_|             |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_UPDATE(cvda)_|  |_CONTROL(cvda)_|  |_ALTER(cvda)_|                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTFND, QIDERR                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><b>Description</b>
 * <p>QUERY SECURITY allows the application to determine
 * whether the user has access to resources defined in the
 * external security manager (ESM). These resources can be:
 * <UL>
 * <li>In CICS resource classes
 * <LI>In user-defined resource classes
 * The user in this context is the user invoking the transaction
 * that contains the QUERY SECURITY command.
 * </UL>
 * <p>For more information on the use of the QUERY SECURITY
 * command, see the  CICS RACF Security Guide.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>7<DD> The cvda value is not valid for the
 * LOGMESSAGE.
 * <DT>9<DD> The RESID is invalid or filled with blanks.
 * <DT>10<DD> The external security manager (ESM) is inactive or
 * not present.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>6<DD> The RESIDLENGTH value is not valid, that is, not
 * in the range 1 through 246.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> The RESID is not valid.
 * <DT>2<DD> The RESTYPE is not valid.
 * <DT>3<DD> The RESID value for RESTYPE (SPCOMMAND)
 * not valid.
 * <DT>5<DD> The RESCLASS is not defined to the external
 * security manager (ESM).
 * <DT>8<DD> The resource is not protected. This is only
 * returned when QUERY SECURITY is used with
 * the RESCLASS option (and never occurs with
 * RESTYPE).
 * <p>Possible causes include:
 * <UL>
 * <LI>RESCLASS not active.
 * <LI>No profile found.
 * <LI>ESM not active.
 * </UL>
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> An indirect queue name associated with the given
 * RESID is not found.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ALTER(cvda)
 *                   enables you to query whether the user has ALTER
 *                   authority for the named resource. The cvda values
 *                   returned by CICS are ALTERABLE and
 *                   NOTALTERABLE.
 * @param CONTROL(cvda)
 *                   enables you to query whether the user has CONTROL
 *                   authority for the named resource. The cvda values
 *                   returned by CICS are CTRLABLE and NOTCTRLABLE.
 * @param LOGMESSAGE(cvda)
 *                   enables you to inhibit security violation messages. The
 *                   values passed to CICS are LOG (the default value), or,
 *                   to inhibit messages, NOLOG.
 * @param READ(cvda)
 *                   enables you to query whether the user has READ
 *                   authority command for the named resource. The cvda
 *                   values returned by CICS are READABLE and
 *                   NOTREADABLE. READ access authority usually
 *                   permits nondestructive use of a resource as, for
 *                   example, in the case of READ and INQUIRE commands.
 * @param RESCLASS(data-value)
 *                   specifies an 8-character field identifying the name of a
 *                   valid resource class, that could be non-CICS, in the
 *                   ESM. The class name identified by RESCLASS is
 *                   treated literally with no translation.
 *                   <p>If the ESM is RACF, the class can be CICS-supplied or
 *                   user-defined. RESCLASS enables you to define more
 *                   narrowly the authorization to be queried; for example,
 *                   you can query at the record or field level.
 *                   <p>The responses returned by the command reflect the
 *                   definition of the RESID resource as defined in the
 *                   specified RESCLASS.
 * @param RESID(data-value)
 *                   specifies the name of the CICS or user-defined resource
 *                   that you want to query the users access to. The value is
 *                   a character string (1-12 characters for a CICS resource,
 *                   and 1-246 characters for a user-defined resource, unless
 *                   you are using the COBOL3 or OOCOBOL translator
 *                   option in which case the maximum length is 160
 *                   characters).
 *                   <p><b>Note</b>:  RESID refers to a CICS-defined resource only
 *                   when RESTYPE('SPCOMMAND') is specified,
 *                   otherwise it refers to a user-defined resource.
 *                   For a list of the CICS RESID values that you can
 *                   use when RESTYPE('SPCOMMAND') is
 *                   specified, see the  CICS RACF Security Guide.
 *                   Note that the actual resource checked depends on
 *                   whether RESCLASS or RESTYPE is specified in the
 *                   command and whether prefixing is active
 *                   (SECPRFX=YES specified as a system initialization
 *                   parameter).
 *                   <p>If RESCLASS is specified, the resource checked is
 *                   always the actual RESID data-value, whether or not
 *                   prefixing is on or off. IF RESTYPE is specified and
 *                   SECPRFX=NO, the resource checked is the RESID
 *                   data-value as specified, however if SECPRFX=YES, the
 *                   resource checked is the RESID data-value prefixed with
 *                   the CICS region userid.
 * @param RESIDLENGTH(data-value)
 *                   specifies the length, as a fullword binary, of the resource
 *                   identifier in RESID. You only use this parameter when
 *                   specifying the RESCLASS option.
 * @param RESTYPE(data-value)
 * specifies the type of resource (1-12 characters) you
 * want to query the user's access to.
 * <p>The responses returned by the command reflect the
 * results that would be obtained if an actual attempt was
 * made to access the specified CICS resource. The value
 * you specify for RESTYPE must be one of the following
 * resource types:
 * <pre>
 *    DB2ENTRY
 *    FILE
 *    JOURNALNAME
 *    JOURNALNUM (Supported for compatibility with earlier releases.)
 *    PROGRAM
 *    PSB
 *    SPCOMMAND (See CICS RACF Security Guide.)
 *    TDQUEUE
 *    TRANSACTION
 *    TRANSATTACH
 *    TSQUEUE
 * </pre>
 * <p>With dynamic transaction routing, it is not necessary to
 * install transaction definitions in terminal owning regions.
 * A QUERY SECURITY command with a RESTYPE of
 * TRANSATTACH returns the NOTFND condition if the
 * transaction is not installed. Programmers, however,
 * should be aware that the transaction may be routed
 * dynamically.
 * @param UPDATE(cvda)
 *                   enables you to query whether the user has UPDATE
 *                   authority for the named resource. The cvda values
 *                   returned by CICS are UPDATABLE and
 *                   NOTUPDATABLE. UPDATE access authority usually
 *                   permits destructive use of a resource as, for example, in
 *                   the case of WRITE, DELETE, or UPDATE commands.
 */
function "QUERY SECURITY"(
   ALTER(cvda),
   CONTROL(cvda),
   LOGMESSAGE(cvda),
   READ(cvda),
   RESCLASS(data-value),
   RESID(data-value),
   RESIDLENGTH(data-value),
   RESTYPE(data-value),
   UPDATE(cvda),
   );

/**
 * Read a record from a file.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__READ__FILE(filename)____INTO(data-area)__________________________> |
 * |                           |_SET(ptr-ref)____|                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_UPDATE_______________________|  |_LENGTH(data-area)_|             |
 * |              |_TOKEN(data-area)_|                                      |
 * |                                                                        |
 * | >__RIDFLD(data-area)_________________________________________________> |
 * |                       |_KEYLENGTH(data-value)______________|           |
 * |                                                |_GENERIC_|             |
 * |                                                                        |
 * |                                        _EQUAL_                         |
 * | >_____________________________________|_______|__><                    |
 * |    |_SYSID(systemname)_|  |_RBA____|  |_GTEQ__|                        |
 * |                           |_RRN____|                                   |
 * |                           |_DEBKEY_|                                   |
 * |                           |_DEBREC_|                                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, DUPKEY, FILENOTFOUND, ILLOGIC, INVREQ, IOERR,    |
 * | ISCINVREQ, LENGERR, LOADING, NOTAUTH, NOTFND, NOTOPEN, SYSIDERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>READ reads a record from a file on a local or a remote
 * system.
 * <p>For both UPDATE and non-UPDATE commands, you must
 * identify the record to be retrieved by the record identification
 * field specified in the RIDFLD option. Immediately upon
 * completion of a READ UPDATE command, the RIDFLD data
 * area is available for reuse by the application program.
 * <p><b><i>Data table considerations</i></b>:  When this command reads a
 * CICS-maintained data table, a READ request with UPDATE
 * or RBA is always satisfied by a call to VSAM. A full key read
 * that is neither a generic read nor a READ UPDATE, is
 * satisfied by a reference to the data table if possible. If the
 * record is not found in the table, the source data set is
 * accessed, unless the table is known to be complete, that is,
 * all records in the source are also present in the table (which
 * is the case if loading is finished and none has been rejected
 * by a user exit).
 * <p>When this command reads a user-maintained data table,
 * only the data table is accessed once loading is complete; the
 * VSAM file is not changed in any way.
 * <p>When this command reads a coupling-facility data table, only
 * the data table is accessed, even if the table is initially loaded
 * from a VSAM source data set.
 * <p><b>Note</b>:  If a file that refers to a user-maintained or coupling
 * facility data table is defined with RLSACCESS(YES),
 * the RLS-specific API options CONSISTENT,
 * NOSUSPEND, and REPEATABLE are not supported.
 * Reading files accessed in RLS mode:  When a file is
 * accessed in RLS mode, non-update read requests can
 * specify one of the read integrity options: UNCOMMITTED,
 * CONSISTENT, or REPEATABLE.
 * <p>If none of these keywords is specified, CICS uses the value
 * specified on the READINTEG parameter of the FILE
 * resource definition, for which the default is UNCOMMITTED.
 * If you want to use the level of read integrity specified in the
 * READINTEG keyword of the FILE definition, and then you
 * need to change from using a local file to a remote file, or if
 * you change the location of a remote file, ensure that:
 * <UL>
 * <LI>The remote file-owning region supports the read integrity
 * options.
 * <LI>The FILE definition in the remote system specifies:
 *   <UL>
 *   <LI>RLS mode
 *   <LI>The correct read integrity values for your
 *   application.
 *   </UL>
 * <p>READ requests that specify the UPDATE keyword, or a
 * CONSISTENT or REPEATABLE read integrity option, (either
 * explicitly or implicitly in the FILE definition) return the
 * LOCKED condition if they reference a record that has a
 * retained lock. The key of a locked record is not returned to
 * the application program. Thus, if an application program
 * specifies GTEQ or GENERIC on the READ request it cannot
 * tell which record key is locked.
 * <p>If a request specifying read integrity is function-shipped to a
 * member of the CICS family of products that does not support
 * read integrity, the request fails:
 * <UL>
 * <LI>If an ISC link is used, the request receives an ATNI
 * abend.
 * <LI>If an MRO link is used, the request receives an AXF8
 * abend.
 * </UL>
 * <p>The AXF8 abend code indicates that your program has
 * attempted to function-ship a request specifying file
 * control options to a remote CICS region that does not
 * support these options.
 *
 * @conditions
 * <p><b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <DL>
 * <DT>DISABLED<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>50<DD> A file is disabled because it was initially defined as
 * disabled and has not since been enabled.
 * <p>A file is disabled because it has been disabled by
 * a SET FILE or a CEMT SET FILE command.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>DUPKEY<DD>
 * RESP2 values: (VSAM)
 * <dl compact>
 * <DT>140<DD> A record is retrieved by way of an alternate index
 * with the NONUNIQUEKEY attribute, and another
 * alternate index record with the same key follows
 * <p>In assembler language, if the SET option is being
 * used, the specified register has not been set, but
 * can be loaded from DFHEITP1.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> The file name supplied in the FILE option cannot
 * be found in the FCT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values: (VSAM)
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the description of the EXEC
 * interface block, starting on 387.)
 * <p>For user-maintained data tables, this condition
 * occurs only for a non-UPDATE READ during
 * loading when CICS has attempted to retrieve the
 * record from the source data set.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>20<DD> READ is not allowed according to the file entry
 * specification in the FCT.
 * <p>A READ command with the UPDATE option is
 * issued to a file where update operations are not
 * allowed according to the file entry specification in
 * the FCT.
 * <DT>25<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is greater than or equal to the
 * length of a full key.
 * <DT>26<DD> The KEYLENGTH option is specified (but the
 * GENERIC option is not specified), and the
 * specified length does not equal the length defined
 * for the data set to which this file refers.
 * <DT>28<DD> Following a READ UPDATE command without
 * TOKEN, another READ UPDATE without TOKEN
 * was issued against the same file without an
 * intervening REWRITE, DELETE, UNLOCK or
 * SYNCPOINT command. This condition may in
 * some cases be raised despite the fact that the first
 * READ UPDATE was not successful, for example
 * because it timed out
 * <DT>40<DD> A BDAM key conversion error occurred.
 * <DT>42<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is less than zero.
 * <DT>44<DD> The command does not conform to the format of
 * READ for a user-maintained or coupling facility
 * data table; for example, if RBA is specified.
 * <DT>51<DD> A READ to a KSDS file that is being accessed in
 * RLS mode specifies the RBA keyword. RLS mode
 * does not support relative byte address access to
 * KSDS data sets.
 * <DT>52<DD> CONSISTENT is specified on a READ request to
 * a non-RLS mode file, or to a data table that is
 * specified with RLSACCESS(YES). CONSISTENT
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * <DT>53<DD> REPEATABLE is specified on a READ request to
 * a non-RLS mode file or to a data table that is
 * specified with RLSACCESS(YES). REPEATABLE
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * <DT>55<DD> NOSUSPEND is specified on a READ request to a
 * non-RLS mode file or to a data table that is
 * specified with RLSACCESS(YES). NOSUSPEND
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * <DT>56<DD> An attempt to update a recoverable coupling
 * facility data table has failed because the current
 * unit of work has already updated 1024 recoverable
 * coupling facility data tables. You cannot update
 * more than 1024 recoverable coupling facility data
 * tables within a unit of work
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> There is an I/O error during the READ operation.
 * An I/O error is any unusual event that is not
 * covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>For user-maintained data tables, this condition
 * occurs only for a non-UPDATE READ during
 * loading when CICS has attempted to retrieve the
 * record from the source data set.
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * <p>(Further information is available in the EXEC
 * interface block, defined on 387.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>10<DD> Neither the LENGTH option nor the SET option is
 * specified on a READ command for a file with
 * variable-length records or for a BDAM file with
 * variable-length or undefined-format records.
 * <DT>11<DD> The length of a record read with the INTO option
 * specified exceeds the value specified in the
 * LENGTH option; the record is truncated, and the
 * data area supplied in the LENGTH option is set to
 * the actual length of the record.
 * <DT>13<DD> An incorrect length is specified for a file with
 * fixed-length records.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOADING<DD>
 * RESP2 values:
 * <DT>104<DD> The request cannot be satisfied because it is
 * issued against a data table that is still being
 * loaded. The condition can be raised for one of the
 * following reasons:
 * <ul>
 * <LI>The READ specifies a record that has not yet
 * been loaded into a coupling facility data table.
 * Records can be read or modified while a
 * CFDT is loading only if the requested key is
 * within the range of those records already
 * loaded.
 * <p>The LOADING response can also be returned
 * for a coupling facility data table that has failed
 * during loading. For more information about
 * what happens if the load for a coupling facility
 * data table fails, see the description of the
 * XDTLC global user exit in the  CICS
 * Customization Guide.
 * <LI>The READ specifies the UPDATE option for a
 * user-maintained data table. A user-maintained
 * data table cannot be modified during loading.
 * <LI>The READ specifies the GENERIC or GTEQ
 * options for a user-maintained data table.
 * While a UMT is being loaded, you can use
 * read requests with precise keys only.
 * </ul>
 * <p>If your application programs encounter the
 * LOADING condition persistently or too frequently,
 * check that this is not caused by conflicting file
 * definitions that reference the same data set.
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>106<DD> An attempt is being made to read a record either
 * specifying the UPDATE keyword, or specifying
 * (explicitly or implicitly) CONSISTENT or
 * REPEATABLE, but the record is locked by a
 * retained lock (see "Retained and active locks").
 * <p>The LOCKED condition can also occur for a
 * READ UPDATE request to a recoverable CFDT
 * that uses the locking model, if the record being
 * read is locked by a retained lock. See the  CICS
 * Recovery and Restart Guide for information about
 * investigating retained locks on records in a
 * coupling facility data table.
 * </dl>
 * <p>Default action: abend the task with code AEX8.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>80<DD> An attempt to retrieve a record based on the
 * search argument provided is unsuccessful.
 * <p>For data tables, this condition occurs if an attempt
 * to read a record is unsuccessful because there is
 * no entry with the specified key in the data table.
 * This does not mean that there is no such record in
 * the source data set (if the table was created from
 * one); it may be that such a record is present but
 * was either rejected during initial loading by the
 * user exit XDTRD, or was subsequently deleted
 * from the data table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>60<DD> NOTOPEN (RESP2 60) is returned for one of the
 * following reasons:
 * <ul>
 * <LI>The requested file is CLOSED and
 * UNENABLED. The CLOSED, UNENABLED
 * state is reached after a CLOSE request has
 * been received against an OPEN ENABLED
 * file and the file is no longer in use. You can
 * also make CLOSED, UNENABLED the initial
 * state, by specifying STATUS(UNENABLED)
 * and OPENTIME(FIRSTREF) on the FILE
 * resource definition. (For BDAM files, you use
 * the FILSTAT parameter of the DFHFCT
 * TYPE=FILE macro.)
 * <LI>The requested file is OPEN and in use by
 * other transactions, but a CLOSE request
 * against the file has been received.
 * <LI>A READ command is issued against a data
 * set that is quiesced, or is being quiesced, as
 * a result of a SET DSNAME QUIESCED or
 * IMMQUIESCED command.
 * </UL>
 * </dl>
 * <p>This condition does not occur if the request is made to
 * either a CLOSED, ENABLED file or to a CLOSED,
 * DISABLED file. In the first case, the file is opened as
 * part of executing the request. In the second case, the
 * DISABLED condition occurs.
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>107<DD> The NOSUSPEND keyword is specified and the
 * record is locked by an active lock (see "Retained
 * and active locks").
 * </dl>
 * <p>Default action: abend the task with code AEX9.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The READ is issued for a coupling facility data
 * table that no longer exists, probably because of a
 * coupling facility failure, in which case the coupling
 * facility data table server also fails. See the  CICS
 * System Definition Guide for information about
 * restarting a coupling facility data table server and
 * reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <p><b><i>Retained and active locks</i></b>:  RECORDBUSY refers to active
 * locks and LOCKED refers to retained locks:
 * <p>These locks affect READ requests which acquire locks; that
 * is, update requests and requests with read integrity. These
 * are the kinds of READ requests which are referred to in the
 * following bullets. Other READ requests are unaffected by the
 * presence of retained or active locks.
 * <UL>
 * <LI>READ requests for records that have  retained locks are
 * always rejected with a LOCKED response.
 * <LI>READ requests for records that have  active locks wait
 * for the lock to be released, except when the
 * NOSUSPEND keyword is specified, in which case CICS
 * returns the RECORDBUSY response.
 * </UL>
 * </dl>
 * @example
 * The following example shows you how to read a record from
 * a file named MASTER into a specified data area:
 * <pre>
 * EXEC CICS READ
 *   INTO(RECORD)
 *   FILE('MASTER')
 *   RIDFLD(ACCTNO)
 * </pre>
 * <p>The following example shows you how to read a record for
 * update from a VSAM file using a generic key and specifying
 * a greater-or-equal key search.
 * <pre>
 * EXEC CICS READ
 *   INTO(RECORD)
 *   LENGTH(RECLEN)
 *   FILE('MASTVSAM')
 *   RIDFLD(ACCTNO)
 *   KEYLENGTH(4)
 *   GENERIC
 *   GTEQ
 *   UPDATE
 * </pre>
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data area where the record is to be put. On completion
 *                   of the READ command, the LENGTH parameter
 *                   contains the actual length of the record.
 *                   LENGTH must be specified with the INTO option on
 *                   READ commands involving variable-length records. It
 *                   need not be specified for fixed-length records, but its
 *                   inclusion is recommended because:
 *                   <UL>
 *                   <LI>It causes a check to be made that the record being
 *                   read is not too long for the available data area
 *                   <LI>When reading fixed-length records into an area
 *                   longer than the record being accessed, the
 *                   LENGERR condition is raised if the LENGTH option
 *                   is not specified. If the length specified exceeds the
 *                   file record length, CICS uses the longer length for
 *                   the move. If the target area in the application
 *                   program is not large enough, storage is overlaid
 *                   beyond the target area.
 *                   </UL>
 *                   <p>See "LENGTH options" for more information
 *                   about when LENGTH must be specified.
 *                   When reading into a target data area longer than the
 *                   record being read, the contents of the target data area,
 *                   from the end of the retrieved record to the end of the
 *                   target data area, are unpredictable.
 *                   <p>If you specify the INTO option, the LENGTH argument
 *                   must be a data area that specifies the largest record the
 *                   program accepts. If the retrieved record is longer than
 *                   the value specified in the LENGTH option, the record is
 *                   truncated to the specified value and the LENGERR
 *                   condition occurs. In this case, the LENGTH data area is
 *                   set to the length of the record prior to truncation.
 *                   <p>If you specify the SET option, the LENGTH option need
 *                   not be specified but, if it is, the argument must be a data
 *                   area.
 * @param CONSISTENT
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   request.
 *                   <p>If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READ request
 *                   waits until the update is complete (unless NOSUSPEND
 *                   is also specified) as follows:
 *                   <UL>
 *                   <LI>For a READ request against a non-recoverable file,
 *                   the READ completes as soon as any VSAM request
 *                   performing the update completes.
 *                   <LI>For a READ request against a recoverable file, the
 *                   READ request completes when the updating task
 *                   completes its next syncpoint or rollback.
 *                   </UL>
 * @param DEBKEY
 *                   (blocked BDAM) specifies that deblocking is to occur by
 *                   key. If neither DEBREC nor DEBKEY is specified,
 *                   deblocking does not occur.
 * @param FILE(filename)
 *                   specifies the of the file to be accessed.
 *                   <p>If SYSID is specified, the data set to which this file refers
 *                   is assumed to be on a remote system irrespective of
 *                   whether the name is defined in the FCT. Otherwise, the
 *                   FCT entry is used to find out whether the data set is on
 *                   a local or a remote system.
 * @param GENERIC
 *                   (VSAM KSDS, paths and data tables) specifies that the
 *                   search key is a generic key whose length is specified in
 *                   the KEYLENGTH option. The search for a record is
 *                   satisfied when a record is found that has the same
 *                   starting characters (generic key) as those specified.
 * @param GTEQ
 *                   (VSAM KSDS, paths and data tables) specifies that, if
 *                   the search for a record having the same key (complete
 *                   or generic) as that specified in the RIDFLD option is
 *                   unsuccessful, the first record having a greater key is
 *                   retrieved.
 * @param INTO(data-area)
 *                   specifies the data area into which the record retrieved
 *                   from the data set is to be written.
 *                   <p>When INTO is specified, LENGTH must either be
 *                   specified explicitly or must be capable of being defaulted
 *                   from the INTO option using the length attribute reference
 *                   in assembler language, or STG and CSTG in PL/I.
 *                   LENGTH must be specified explicitly in OS/VS COBOL
 *                   and C.
 * @param KEYLENGTH(data-value)
 *                   specifies the length (halfword binary) of the key that has
 *                   been specified in the RIDFLD option, except when RBA
 *                   or RRN is specified, in which case KEYLENGTH is not
 *                   valid. This option must be specified if GENERIC is
 *                   specified, and it can be specified whenever a key is
 *                   specified. However, if the length specified is different
 *                   from the length defined for the data set and the
 *                   operation is not generic, the INVREQ condition occurs.
 *                   The INVREQ condition also occurs if GENERIC is
 *                   specified and the KEYLENGTH is not less than that
 *                   specified in the VSAM definition.
 *                   <p>If KEYLENGTH(0) is used with the object of reading the
 *                   first record in the data set, the GTEQ option must also
 *                   be specified. If EQUAL is specified either explicitly or by
 *                   default with KEYLENGTH(0), the results of the READ
 *                   are unpredictable.
 * @param RBA
 *                   <p>(VSAM KSDS or ESDS base data sets, or
 *                   CICS-maintained data tables only, but not paths)
 *                   specifies that the record identification field specified in
 *                   the RIDFLD option contains a relative byte address. This
 *                   option should be used only when reading records from
 *                   an ESDS base or when reading from a KSDS base and
 *                   using relative byte addresses instead of keys to identify
 *                   the records.
 *                   <p>You cannot use RBA for:
 *                   <UL>
 *                   <LI>User-maintained data tables
 *                   <LI>Coupling facility data tables
 *                   <LI>KSDS files that hold more than 4GB
 *                   <LI>Any KSDS file opened in RLS access mode
 *                   </UL>
 * @param REPEATABLE
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   unit of work in which the read request is issued.
 *                   <p>If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READ request
 *                   waits until the update is complete (unless NOSUSPEND
 *                   is also specified) as follows:
 *                   <UL>
 *                   <LI>For a recoverable file, the READ request completes
 *                   when the updating transaction completes its next
 *                   syncpoint or rollback.
 *                   <LI>For a non-recoverable file, the READ completes as
 *                   soon as the VSAM request performing the update
 *                   completes.
 *                   </ul>
 *                   <p>After the READ request has completed, the record
 *                   remains locked to the task that issued the READ. Other
 *                   tasks may continue to read the record but no other task
 *                   is allowed to update the record until the task that issued
 *                   the READ performs its next syncpoint or rollback.
 * @param RIDFLD(data-area)
 *                   specifies the record identification field. The contents can
 *                   be a key, a relative byte address, or relative record
 *                   number (for VSAM data sets), or a block reference, a
 *                   physical key, and a deblocking argument (for BDAM
 *                   data sets). For a relative byte address or a relative
 *                   record number, the format of this field must be fullword
 *                   binary. For a relative byte address, the RIDFLD can be
 *                   greater than or equal to zero. For a relative record
 *                   number, the RIDFLD can be greater than or equal to 1.
 *                   Immediately upon completion of the command, the
 *                   RIDFLD data area is available for reuse by the
 *                   application program, even if UPDATE was specified.
 *                   Make sure that the variable specified by RIDFLD is not
 *                   shorter than the KEYLENGTH specified in this command
 *                   or, if KEYLENGTH is not specified, the key length of the
 *                   file you are reading; otherwise, the results are
 *                   unpredictable.
 * @param RRN
 *                   (VSAM RRDS) specifies that the record identification
 *                   field specified in the RIDFLD option contains a relative
 *                   record number. This option should only be used with
 *                   files referencing relative record data sets.
 * @param SET(ptr-ref)
 *                   indicates that CICS is to supply a buffer where the
 *                   record is read, and specifies the pointer reference that is
 *                   to contain the address of the retrieved record.
 *                   If the DUPKEY condition occurs in assembler language
 *                   the specified register has not been set. The specified
 *                   register can be loaded from DFHEITP1.
 *                   The pointer reference is valid until the next READ
 *                   command for the same file or until completion of a
 *                   corresponding REWRITE, DELETE, or UNLOCK
 *                   command, or a SYNCPOINT in the case of READ
 *                   UPDATE SET. If you want to retain the data within the
 *                   field addressed by the pointer, it should be moved to
 *                   your own area.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, the address of the data is below the
 *                   16MB line.
 *                   <p>If TASKDATAKEY (USER) is specified for the executing
 *                   transaction, the data returned is in a user-key; otherwise
 *                   it is in a CICS-key.
 * @param SYSID(systemname)
 *                   specifies the name of the system the request is directed
 *                   to.
 *                   <p>If you specify SYSID, and omit both RBA and RRN, you
 *                   must also specify LENGTH and KEYLENGTH; they
 *                   cannot be found in the FCT.
 * @param TOKEN(data-area)
 *                   specifies, as a fullword binary value, a unique identifier
 *                   for this READ UPDATE request. This is an output value
 *                   returned by file control to the requesting task, for use in
 *                   associating a subsequent REWRITE or DELETE (or
 *                   UNLOCK) request with the record returned on this
 *                   READ UPDATE request.
 *                   <p>TOKEN can be function shipped. However, if a request
 *                   specifying TOKEN is function shipped to a member of
 *                   the CICS family of products that does not recognize this
 *                   keyword, the request fails.
 *                   <p><b>Note</b>:  If you specify TOKEN it implies update.
 * @param UNCOMMITTED
 *                   <p>The record is read without read integrity.
 *                   <p>The current value of the record, as known to VSAM, is
 *                   returned. No attempt is made to serialize this read
 *                   request with any concurrent update activity for the same
 *                   record. The record may be in the process of being
 *                   updated by another task, and the record data may
 *                   change later if that update is subsequently backed out.
 * @param UPDATE
 *                   specifies that the record is to be obtained for updating or
 *                   (for VSAM and data tables) deletion. If this option is
 *                   omitted, a read-only operation is assumed.
 *                   <p>UPDATE guarantees read integrity. The mechanism
 *                   used to ensure data integrity depends on the type of file
 *                   resource:
 *                   <UL>
 *                   <LI>For a VSAM file accessed in RLS mode, the record
 *                   to be updated is locked by the SMSVSAM server.
 *                   <LI>For a VSAM file accessed in non-RLS mode, the
 *                   record to be updated is locked by CICS and, in
 *                   addition, the control interval containing the record is
 *                   held in exclusive control by VSAM.
 *                   <LI>For a BDAM file, the record to be updated is held in
 *                   exclusive control by BDAM.
 *                   <LI>For a user-maintained data table, the record to be
 *                   updated is locked by CICS.
 *                   <LI>For a CICS-maintained data table, the record to be
 *                   updated is locked by CICS and, in addition, the
 *                   control interval containing the record is held in
 *                   exclusive control by VSAM. The VSAM control
 *                   interval lock is required because changes to the
 *                   data table are reflected in the source data set,
 *                   which is accessed in non-RLS mode.
 *                   <LI>For a coupling facility data table using the locking
 *                   model, the record to be updated is locked by the
 *                   coupling facility data table server.
 *                   <LI>For a coupling facility data table using the
 *                   contention model, records are not locked, enabling
 *                   the records to be read for update by more than one
 *                   task. If a record read for update by one task is then
 *                   changed by another, the first task is notified, when it
 *                   issues a REWRITE or DELETE command, by the
 *                   CHANGED exception condition. If a record read for
 *                   update by one task is then deleted by another, the
 *                   first task is notified, when it issues a REWRITE or
 *                   DELETE command, by the NOTFND condition.
 *                   </UL>
 *                   <p>If another task has issued a READ REPEATABLE
 *                   request against the same record, your READ UPDATE
 *                   is made to wait until that task reaches SYNCPOINT
 *                   (unless you issued NOSUSPEND).
 * @param NOSUSPEND
 *                   (RLS only)
 *                   <p>The request does not wait if the record is locked by
 *                   VSAM with an active lock, including records locked as
 *                   the result of a DEADLOCK.
 * @param DEBREC
 *                   (blocked BDAM) specifies that deblocking is to occur by
 *                   relative record (relative to zero). If neither DEBREC nor
 *                   DEBKEY is specified, deblocking does not occur.
 * @param EQUAL
 *                   specifies that the search is satisfied only by a record
 *                   having the same key (complete or generic) as that
 *                   specified in the RIDFLD option.
 */
function "READ"(
   LENGTH(data-area),
   CONSISTENT,
   DEBKEY,
   FILE(filename),
   GENERIC,
   GTEQ,
   INTO(data-area),
   KEYLENGTH(data-value),
   RBA,
   REPEATABLE,
   RIDFLD(data-area),
   RRN,
   SET(ptr-ref),
   SYSID(systemname),
   TOKEN(data-area),
   UNCOMMITTED,
   UPDATE,
   NOSUSPEND,
   DEBREC,
   EQUAL,
   );

/**
 * Read next record during a browse of a file.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__READNEXT__FILE(filename)____INTO(data-area)______________________> |
 * |                               |_SET(ptr-ref)____|                      |
 * |                                                                        |
 * | >_________________________RIDFLD(data-area)__________________________> |
 * |    |_LENGTH(data-area)_|                                               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_KEYLENGTH(data-value)_|  |_REQID(data-value)_|                    |
 * |                                                                        |
 * | >__________________________________><                                  |
 * |    |_SYSID(systemname)_|  |_RBA_|                                      |
 * |                           |_RRN_|                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DUPKEY, ENDFILE, FILENOTFOUND, ILLOGIC, INVREQ, IOERR,     |
 * | ISCINVREQ, LENGERR, NOTAUTH, NOTFND, SYSIDERR                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <p>READNEXT can be used repeatedly to read records in
 * sequential order from a file on a local or a remote system.
 * Such a series of sequential read commands is known as a
 * browse of the file. A browse can also consist of a sequence
 * of READNEXT and READPREV commands in any order. A
 * browse must be initiated with the STARTBR command, to
 * identify the starting point of the browse, and terminated with
 * the ENDBR command.
 * <p>You must provide, in the RIDFLD option, a data area that is
 * sufficiently large to contain a complete identifier (full key,
 * RBA, or RRN) of records in the file. This data area can be
 * used both as an output and as an input parameter.
 * <p>It is used as an output parameter when CICS, on completion
 * of each READNEXT command, places the complete identifier
 * of the record just retrieved into the RIDFLD data area. CICS
 * then holds this identifier to mark the point from which the
 * subsequent READNEXT is to continue.
 * <p>It may, except for BDAM, also be used as an input
 * parameter. Modifying the RIDFLD before issuing the next
 * READNEXT command causes that command to reposition
 * the browse to the new identifier, from which it continues in
 * the usual way. If the browse was started with the GENERIC
 * option, the modified RIDFLD must be generic. If the browse
 * was started with the GTEQ option, the next record returned
 * is the first record in the data set with a key greater than or
 * equal to the modified RIDFLD.
 * <p>A READNEXT command following a READPREV, or a
 * STARTBR or RESETBR that specified a 'last' key value, is
 * treated as though the RIDFLD value has been modified, and
 * results in a reposition (as above).
 * <p>Reading files accessed in RLS mode:  For files accessed
 * in RLS mode, you can include the UPDATE keyword on the
 * READNEXT request to update some records during the
 * browse. If you specify UPDATE you must also specify
 * TOKEN. You can then update the record by issuing a
 * DELETE or REWRITE command specifying the TOKEN
 * returned on the browse function.
 * <p><b>Note</b>:  TOKEN without the UPDATE keyword implies
 * UPDATE.
 * <p>Use of the UPDATE option is subject to the following rules:
 * <ul>
 * <LI>You can specify UPDATE on a READNEXT command
 * only if the file is accessed in RLS mode. If you specify
 * UPDATE for a file accessed in non-RLS mode, CICS
 * returns INVREQ.
 * <LI>You can specify UPDATE on READNEXT, but not on
 * the STARTBR or RESETBR commands.
 * <LI>You can intermix UPDATE and non-update requests
 * within the same browse.
 * <LI>CICS does not preserve the UPDATE option for you
 * from one READNEXT command to the next.
 * CICS supports only one TOKEN in a browse sequence,
 * and the TOKEN value on each READNEXT invalidates
 * the previous value.
 * </ul>
 * <b><i>Locks for UPDATE</i></b>:  Specifying UPDATE on a READNEXT
 * acquires an exclusive lock. The duration of these exclusive
 * locks within a browse depends on the action your application
 * program takes:
 * <ul>
 * <LI>If you decide to DELETE or REWRITE the last record
 * acquired by a READNEXT UPDATE in a browse, using
 * the associated token, the lock remains active as follows:
 * <ul>
 * <li>If the file is recoverable, the lock is released at
 * completion of the next syncpoint or rollback.
 * <LI>If the file is non-recoverable, the lock will be
 * released by the time ENDBR has completed, but
 * might be released earlier.
 * </UL>
 * <LI>If you decide  not to update the last record read, CICS
 * frees the exclusive lock when your program either issues
 * another READNEXT or READPREV command, or ends
 * the browse.
 * </ul>
 * <p><b>UNLOCK note</b>
 * <p>The UNLOCK command does  not free an exclusive lock
 * held by VSAM against a record acquired by READNEXT
 * UPDATE. An UNLOCK in a browse invalidates the
 * TOKEN returned by the last request.
 * <p><i>Locks for read integrity</i>:  Specifying one of the read integrity
 * options acquires a shared lock on each READNEXT. The
 * duration of these shared locks with a browse depends on the
 * type of read integrity you specify:
 * <ul>
 * <LI>If you specify CONSISTENT read integrity, the shared
 * lock is held only for the duration of each read
 * request --that is, until the record is returned to your
 * program.
 * <LI>If you specify REPEATABLE read integrity, the shared
 * lock is held for the duration of the unit of work in which
 * the browse is performed. In this case, your program
 * could acquire a large number of shared locks, which will
 * prevent the granting of exclusive locks for update
 * functions. You should use REPEATABLE read integrity
 * in a browse with caution.
 * <p><i>Function shipping READNEXT with UPDATE or
 * read-integrity</i>:  If a READNEXT command specifying
 * UPDATE or one of the read-integrity options is
 * function-shipped to a member of the CICS family of products
 * that does not support UPDATE or the read integrity options,
 * the request fails:
 * <UL>
 * <LI>If an ISC link is used, the request receives an ATNI
 * abend.
 * <LI>If an MRO link is used, the request receives an AXF8
 * abend.
 * <p>AXF8 is an abend code, received by the sending side of
 * a function-shipped request. It indicates that an attempt
 * has been made to send a request specifying UPDATE
 * on an MRO link to a CICS region that does not support
 * update or read integrity options.
 * </ul>
 * <i>Read integrity</i>:  When a file is accessed in RLS mode,
 * non-update read requests can specify read integrity options:
 * UNCOMMITTED, CONSISTENT, or REPEATABLE.
 * <p>If you don't specify any of these keywords, CICS uses the
 * value specified on the READINTEG parameter of the FILE
 * resource definition, for which the default is UNCOMMITTED.
 * <p>If you want to use the level of read integrity specified in the
 * READINTEG keyword of the FILE definition, and then you
 * need to change from using a local file to a remote file, or if
 * you change the location of a remote file, ensure that:
 * <UL>
 * <LI>The remote file-owning region is at the CICS Transaction
 * Server for OS/390 Release 1 (or later) level.
 * <LI>The FILE definition in the remote system specifies:
 *   <UL>
 *   <LI>RLS mode
 *   <LI>The correct read integrity values for your
 *     application.
 *   </ul>
 * </ul>
 *
 * @conditions
 * <b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>DUPKEY<DD>
 * RESP2 values (VSAM):
 * <dl compact>
 * <DT>140<DD> A record is retrieved by way of an alternate index
 * with the NONUNIQUEKEY attribute, and another
 * alternate index record with the same key follows It
 * does not occur as a result of a READNEXT
 * command that reads the last of the records having
 * the nonunique key.
 * <p>In assembler language, if the SET option is being
 * used, the register specified will not have been set,
 * but can be loaded from DFHEITP1.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ENDFILE<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>90<DD> An end-of-file condition is detected during the
 * browse.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values (VSAM):
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the EXEC interface block;
 * starting on 387.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>20<DD> The FILE definition does not allow updates.
 * <DT>25<DD> The KEYLENGTH option is specified for a generic
 * browse (that is one where GENERIC was
 * specified on the STARTBR or the last RESETBR)
 * and the value of KEYLENGTH was greater than
 * the full key length.
 * <DT>26<DD> The KEYLENGTH option is specified for a
 * nongeneric browse, and the specified length does
 * not equal the length defined for the data set to
 * which this file refers.
 * <DT>34<DD> The REQID, if any, does not match that of any
 * successful STARTBR command.
 * <DT>37<DD> The type of record identification (for example, key
 * or relative byte address) used to access a data set
 * during the browse is changed by the READNEXT
 * command.
 * <DT>42<DD> The KEYLENGTH option is specified for a generic
 * browse (that is one where GENERIC was
 * specified on the STARTBR or the last RESETBR)
 * and the value of KEYLENGTH was less than zero.
 * <DT>52<DD> CONSISTENT is specified on a READ request to
 * a non-RLS mode file, or to a data table that is
 * specified with RLSACCESS(YES). CONSISTENT
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * <DT>53<DD> REPEATABLE is specified on a READ request to
 * a non-RLS mode file, or to a data table that is
 * specified with RLSACCESS(YES). REPEATABLE
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * <DT>54<DD> UPDATE is not allowed because the file is not a
 * VSAM file that is accessed in RLS mode.
 * <DT>55<DD> NOSUSPEND is specified on a READ request to a
 * non-RLS mode file, or to a data table that is
 * specified with RLSACCESS(YES). NOSUSPEND
 * is not allowed if the file refers to a data table, even
 * if the file definition specifies RLSACCESS(YES).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> There is an I/O error during the READNEXT
 * command. An I/O error is any unusual event that
 * is not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * <p>Further information is available in the EXEC
 * interface block, defined on 387.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>10<DD> Neither the LENGTH nor the SET option is
 * specified for a file with variable-length records or a
 * BDAM file with undefined-format records.
 * <DT>11<DD> The length of the record read with the INTO option
 * specified exceeds the value specified in the
 * LENGTH option; the record is truncated, and the
 * data area supplied in the LENGTH option is set to
 * the actual length of the record.
 * <DT>13<DD> An incorrect length is specified for a file with
 * fixed-length records.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOADING<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>104<DD> The read request specifies a record key for a
 * record in a coupling facility data table that is still
 * being loaded, and the key is out of range of the
 * records already loaded. Records can be browsed
 * in a coupling facility data table during loading only
 * if the requested key is within the range of those
 * records already loaded.
 * <p>The LOADING response can also be returned for
 * a coupling facility data table that has failed during
 * loading. For more information about what happens
 * if the load for a coupling facility data table fails,
 * see the description of the XDTLC global user exit
 * in the  CICS Customization Guide.
 * <p>If your application programs encounter the
 * LOADING condition persistently or too frequently,
 * check that this is not caused by conflicting file
 * definitions that reference the same data set.
 * </dl>
 * <DT>LOCKED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>106<DD> The read request specifies the UPDATE keyword,
 * or one of the read integrity keywords
 * CONSISTENT or REPEATABLE, or the file
 * resource definition specifies read integrity, but
 * VSAM holds a retained lock against the record
 * (see "Retained and active locks").
 * <p>The key of the locked record is not returned to
 * your application program. If you handle this
 * condition and control is returned to your program,
 * the browse can continue and retrieve the record
 * following the locked record by issuing another
 * READNEXT request.
 * <p>The LOCKED condition can also occur for a
 * request to a recoverable CFDT that uses the
 * locking model, if the record being read is locked
 * by a retained lock. See the  CICS Recovery and
 * Restart Guide for information about investigating
 * retained locks on records in a coupling facility data
 * table.
 * </dl>
 * <p>Default action: abend the task with code AEX8.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>80<DD> An attempt to retrieve a record based on the
 * search argument provided is unsuccessful. This
 * may occur if the READNEXT command
 * immediately follows a STARTBR command that
 * specified the key of the last record in the data set
 * (a complete key of X'FF's).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>107<DD> NOSUSPEND is specified on the request but
 * VSAM holds an active lock against the record,
 * which would cause the request to wait (see
 * "Retained and active locks").
 * <p>The key of the locked record is not returned to
 * your application program. If you handle this
 * condition and control is returned to your program,
 * the browse can continue and retrieve the record
 * following the locked record by issuing another
 * READNEXT request.
 * </dl>
 * <p>Default action: abend the task with code AEX9.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local CICS region nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the
 * remote system is closed
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The READNEXT is issued against a coupling
 * facility data table that no longer exists, probably
 * because of a coupling facility failure, in which case
 * the coupling facility data table server also fails.
 * See the  CICS System Definition Guide for
 * information about restarting a coupling facility data
 * table server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * Retained and active locks:  RECORDBUSY refers to active
 * locks, and LOCKED refers to retained locks:
 * These locks affect READNEXT requests which acquire locks;
 * that is, update requests and requests with read integrity.
 * These are the kinds of READNEXT requests which are
 * referred to in the following bullets. Other READNEXT
 * requests are unaffected by the presence of retained or active
 * locks.
 * <UL>
 * <LI>READNEXT requests for records that have  retained
 * locks are always rejected with a LOCKED response.
 * <LI>READNEXT requests for records that have  active locks
 * wait for the lock to be released, except when the
 * NOSUSPEND keyword is specified, in which case CICS
 * returns the RECORDBUSY response.
 * </ul>
 * </dl>
 * @param CONSISTENT
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   request.
 *                   <p>If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READNEXT
 *                   request waits until the update is complete (unless
 *                   NOSUSPEND is also specified) as follows:
 *                   <UL>
 *                   <LI>For a READNEXT request against a
 *                   non-recoverable file, the READ completes as soon
 *                   as any VSAM request performing the update
 *                   completes.
 *                   <LI>For a READNEXT request against a recoverable
 *                   file, the READ request completes when the updating
 *                   task completes its next syncpoint or rollback.
 *                   </ul>
 * @param FILE(filename)
 *                   specifies the name of the file to be browsed.
 *                   <p>If SYSID is specified, the data set to which this file refers
 *                   is assumed to be on a remote system irrespective of
 *                   whether the name is defined in the FCT. Otherwise, the
 *                   FCT entry is used to find out whether the data set is on
 *                   a local or a remote system.
 * @param INTO(data-area)
 *                   specifies the data area into which the record retrieved
 *                   from the data set is to be written.
 * @param KEYLENGTH(data-value)
 *                   specifies the length (halfword binary) of the key that has
 *                   been specified in the RIDFLD option, except when RBA
 *                   or RRN is specified, in which case KEYLENGTH is not
 *                   valid.
 *                   <p>If the browse was started without the GENERIC option
 *                   (that is a full key browse) and if the length specified is
 *                   different from the length defined for the data set, the
 *                   INVREQ condition occurs.
 *                   <p>If the browse was started with the GENERIC option (that
 *                   is, a generic key browse), and if the length specified is
 *                   greater than the length specified for the data set, the
 *                   INVREQ condition occurs.
 *                   <p>If GTEQ and GENERIC were specified on the most
 *                   recent STARTBR or RESETBR command, issuing
 *                   READNEXT with KEYLENGTH(0) specified repositions
 *                   the BROWSE at the start of the file. If EQUAL had been
 *                   specified, the effect of READNEXT KEYLENGTH(0)
 *                   would be unpredictable.
 *                   <p>For a generic browse, CICS maintains a current key
 *                   length for the browse. The current key length is
 *                   initialized to be the value specified as KEYLENGTH on
 *                   the STARTBR command.
 *                   <p>The current key length may be modified by specifying
 *                   KEYLENGTH on a READNEXT or RESETBR command.
 *                   <p>If the current key length is changed, this causes the
 *                   browse to be repositioned. The browse is repositioned to
 *                   the key whose initial characters match the value
 *                   specified in the RIDFLD for the current key length.
 *                   The current key length is zero after a request that
 *                   specifies KEYLENGTH(0).
 *                   <p>IF KEYLENGTH is omitted on a READNEXT command,
 *                   the current key length remains the same and the browse
 *                   continues without repositioning.
 *                   <p>If KEYLENGTH is specified on a READNEXT command
 *                   and is equal to the current key length, this is treated as
 *                   being no change and the browse is not repositioned.
 *                   The one exception to this is when KEYLENGTH(0) is
 *                   specified, which always causes the browse to be
 *                   repositioned to the beginning of the file.
 *                   <p>KEYLENGTH can be specified during a generic browse
 *                   with a value equal to the full key length. This does not
 *                   cause the current key length to change and the browse
 *                   is not repositioned. The ability to specify the full key
 *                   length during a generic browse is provided to allow
 *                   requests that specify SYSID to be able to tell the
 *                   function-shipping transformers how long the key is, so
 *                   that the transformers can ship the key to the file-owning
 *                   region.
 *                   <p>A browse can be repositioned by modifying the RIDFLD
 *                   data area. A generic browse is repositioned only if the
 *                   modification to RIDFLD changes the part of RIDFLD
 *                   corresponding to the current key length. A consequence
 *                   of this is that the browse can not be repositioned by
 *                   modifying the RIDFLD data area if the current key length
 *                   is zero.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   record to be retrieved. On completion of a retrieval
 *                   operation, the LENGTH parameter contains the actual
 *                   length of the retrieved record.
 *                   <p>This option must be specified if SYSID is specified. It
 *                   must also be specified with the INTO option on
 *                   commands involving variable-length records. It need not
 *                   be specified for fixed-length records, but its inclusion is
 *                   recommended because:
 *                   <UL>
 *                   <LI>It causes a check to be made that the record being
 *                   read is not too long for the available data area.
 *                   <LI>When browsing fixed-length records into an area
 *                   longer than the record being accessed, the
 *                   LENGERR condition is raised if the LENGTH option
 *                   is not specified. If the length specified exceeds the
 *                   file record length, CICS uses the longer length for
 *                   the move. If the target area in the application
 *                   program is not large enough, storage is overlaid
 *                   beyond the target area.
 *                   <p>See "LENGTH options" for more
 *                   information about when LENGTH must be specified.
 *                   </ul>
 *                   <p>When browsing into a target data area longer than the
 *                   record being read, the contents of the target data area,
 *                   from the end of the retrieved record to the end of the
 *                   target data area, are unpredictable.
 *                   <p>If you specify the INTO option, the LENGTH argument
 *                   must be a data area that specifies the largest record the
 *                   program accepts. If the retrieved record is longer than
 *                   the value specified in the LENGTH option, the record is
 *                   truncated to the specified value and the LENGERR
 *                   condition occurs. In this case, the LENGTH data area is
 *                   set to the length of the record prior to truncation.
 *                   <p>If you specify the SET option, the LENGTH option need
 *                   not be specified but, if it is, the argument must be a data
 *                   area.
 *                   <p>Note that a file control command issued against a
 *                   variable-length record in a file defined on the local CICS
 *                   system fails with a LENGERR condition if a length is not
 *                   specified. However, if the same command is issued
 *                   against a file defined on a remote system, the command
 *                   does not fail. The transformer which passes CICS
 *                   commands from one CICS region to another has to pass
 *                   a default value for the length argument if a value is not
 *                   specified. This is because, if the file is remote, the
 *                   transformer cannot identify the record as fixed or
 *                   variable, and it is valid not to pass a length when issuing
 *                   a request against a fixed-length record.
 * @param NOSUSPEND
 *                   (RLS only)
 *                   The request does not wait if the record is locked by
 *                   VSAM with an active lock, including records locked as
 *                   the result of a DEADLOCK.
 * @param RBA
 *                   (VSAM KSDS or ESDS base data sets, or
 *                   CICS-maintained data tables only, but not paths)
 *                   specifies that the record identification field specified in
 *                   the RIDFLD option contains a relative byte address.
 *                   <p>This option must be specified when the STARTBR or
 *                   RESETBR command specified the RBA option.
 *                   <p>You cannot use RBA for:
 *                   <UL>
 *                   <LI>User-maintained data tables
 *                   <LI>Coupling facility data tables
 *                   <LI>Any KSDS files opened in RLS access mode
 *                   <LI>KSDS files that hold more than 4GB.
 *                   </ul>
 * @param REPEATABLE
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   unit of work in which the read request is issued.
 *                   <p>If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READNEXT
 *                   request waits until the update is complete (unless
 *                   NOSUSPEND is also specified) as follows:
 *                   <UL>
 *                   <LI>For a recoverable file, the READNEXT request
 *                   completes when the updating transaction completes
 *                   its next syncpoint or rollback.
 *                   <LI>For a non-recoverable file, the READNEXT
 *                   completes as soon as the VSAM request performing
 *                   the update completes.
 *                   </ul>
 *                   After the READNEXT request has completed, the record
 *                   remains locked to the task that issued the READNEXT.
 *                   Other tasks may continue to read the record but no
 *                   other task is allowed to update the record until the task
 *                   that issued the READNEXT performs its next syncpoint
 *                   or rollback.
 * @param REQID(data-value)
 *                   specifies as a halfword binary value a unique request
 *                   identifier for a browse, used to control multiple browse
 *                   operations on a file. If this option is not specified, a
 *                   default value of zero is assumed.
 * @param RIDFLD(data-area)
 *                   specifies the record identification field. The contents can
 *                   be a key, a relative byte address, or relative record
 *                   number (for VSAM data sets), or a block reference,
 *                   physical key, and deblocking argument (for BDAM data
 *                   sets). For a relative byte address or a relative record
 *                   number, the format of this field must be fullword binary.
 *                   For a relative byte address, the RIDFLD can be greater
 *                   than or equal to zero. For a relative record number, the
 *                   RIDFLD can be greater than or equal to 1.
 *                   <p>Even if the browse is generic, this field should always be
 *                   large enough to accommodate the complete record
 *                   identifier. This is because, on completion of the
 *                   READNEXT command, the field is updated by CICS with
 *                   the complete identification of the record retrieved.
 * @param RRN
 *                   (VSAM RRDS) specifies that the record identification
 *                   field specified in the RIDFLD option contains a relative
 *                   record number.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the retrieved record.
 *                   <p>In assembler language, if the DUPKEY condition occurs,
 *                   the register specified will not have been set, but can be
 *                   loaded from DFHEITP1.
 *                   <p>The pointer reference is valid until the next READNEXT
 *                   or READPREV command specifying SET for the same
 *                   browse (REQID) for the same file. The pointer is no
 *                   longer valid after an ENDBR or SYNCPOINT command.
 *                   If you want to retain the data within the field addressed
 *                   by the pointer, you must move it to your own area.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, the address returned in the SET
 *                   pointer is below the 16MB line.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, the data returned is in user-key storage; otherwise
 *                   it is in CICS-key storage.
 * @param SYSID(systemname)
 *                   specifies the name of the system to which the request is
 *                   directed.
 *                   <p>If you specify SYSID, and omit both RBA and RRN, you
 *                   must also specify LENGTH and KEYLENGTH; they
 *                   cannot be found in the FCT.
 * @param TOKEN(data-area)
 *                   (RLS only)
 *                   Returns, as a fullword binary value, the request identifier
 *                   for this READNEXT UPDATE request. This is an output
 *                   value returned by file control to the requesting task, for
 *                   use in associating a subsequent REWRITE or DELETE
 *                   (or UNLOCK) request with the record returned on this
 *                   READNEXT command.
 *                   <p>You must specify the returned TOKEN on a subsequent
 *                   REWRITE or DELETE command to identify the record
 *                   being rewritten or deleted. You can also specify the
 *                   value returned by CICS on the TOKEN option on a
 *                   subsequent UNLOCK command, to identify the token
 *                   that is being invalidated.
 *                   <p>You must specify TOKEN if you specify UPDATE (but
 *                   UPDATE is assumed if you specify TOKEN without
 *                   UPDATE).
 *                   <p>CICS supports only one active TOKEN at a time for a
 *                   given REQID. Thus, a TOKEN value remains valid only
 *                   until the following READNEXT, READPREV, or ENDBR
 *                   command for this browse, or until a REWRITE, DELETE,
 *                   or UNLOCK command (whichever is first).
 *                   <p>TOKEN can be function shipped. However, if a request
 *                   specifying TOKEN is function shipped to a member of
 *                   the CICS family of products that does not recognize this
 *                   keyword, the request fails.
 * @param UNCOMMITTED
 *                   The record is read without read integrity. The current
 *                   data, as known to VSAM, is returned. No attempt is
 *                   made to serialize this read request with any concurrent
 *                   update activity for the same record. The record may be
 *                   being updated by another transaction, therefore the
 *                   value of the record may change later if that update is
 *                   subsequently backed out.
 * @param UPDATE
 *                   (RLS only)
 *                   Specifies that the record is to be obtained for updating
 *                   or deletion. If this option and TOKEN are both omitted,
 *                   read only is assumed.
 *                   <p>If you specify UPDATE, you must also specify TOKEN.
 */
function "READNEXT"(
   CONSISTENT,
   FILE(filename),
   INTO(data-area),
   KEYLENGTH(data-value),
   LENGTH(data-area),
   NOSUSPEND,
   RBA,
   REPEATABLE,
   REQID(data-value),
   RIDFLD(data-area),
   RRN,
   SET(ptr-ref),
   SYSID(systemname),
   TOKEN(data-area),
   UNCOMMITTED,
   UPDATE,
   );

/**
 * Read previous record during a file browse; VSAM and data tables only.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__READPREV__FILE(filename)____INTO(data-area)______________________> |
 * |                               |_SET(ptr-ref)____|                      |
 * |                                                                        |
 * | >_________________________RIDFLD(data-area)__________________________> |
 * |    |_LENGTH(data-area)_|                                               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_KEYLENGTH(data-value)_|  |_REQID(data-value)_|                    |
 * |                                                                        |
 * | >__________________________________><                                  |
 * |    |_SYSID(systemname)_|  |_RBA_|                                      |
 * |                           |_RRN_|                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DUPKEY, ENDFILE, FILENOTFOUND, ILLOGIC, INVREQ, IOERR,     |
 * | ISCINVREQ, LENGERR, NOTAUTH, NOTFND, SYSIDERR                          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>READPREV can be used repeatedly to read records in
 * reverse sequential order from a VSAM file on a local or a
 * remote system.
 * <P>Such a series of sequential read commands is known as a
 * browse of the file. A browse may also consist of a sequence
 * of READNEXT and READPREV commands in any order. A
 * browse must be initiated with the STARTBR command, to
 * identify the start of the browse, and terminated with the
 * ENDBR command.
 * <P>You must provide, in the RIDFLD option, a data area that is
 * sufficiently large to contain a complete identifier (full key,
 * RBA, or RRN) of records in the file. This data area is used
 * both as an output and as an input parameter.
 * <P>It is used as an output parameter when CICS, on completion
 * of each READPREV command, places the complete identifier
 * of the record just retrieved into the RIDFLD data area. CICS
 * then holds this identifier to mark the point from which the
 * subsequent READPREV is to continue.
 * <P>It may also be used as an input parameter. Modifying the
 * RIDFLD before issuing the next READPREV command
 * causes that command to reposition the browse to the new
 * identifier, from which it continues in the usual way. The
 * modified record identifier must always be a full key, RBA, or
 * RRN. A generic key may not be specified, nor may a browse
 * that was started with the GENERIC option include a
 * READPREV command.
 * <P>If you include a READPREV command immediately following
 * a STARTBR command, your STARTBR command RIDFLD
 * must specify the key of a record that exists on the data set;
 * otherwise the NOTFND condition will occur.
 * <P>A READPREV command following a READNEXT, or a
 * STARTBR or RESETBR that did not specify a 'last' key
 * value, is treated as though the RIDFLD value had been
 * modified and results in a reposition (as above).
 * Reading files accessed in RLS mode:  For files accessed
 * in RLS mode, you can include the UPDATE keyword on the
 * READPREV request to update some records during the
 * browse. If you specify UPDATE you must also specify
 * TOKEN. You can then update the record by issuing a
 * DELETE or REWRITE command specifying the TOKEN
 * returned on the browse function.
 * <P><B>Note</B>:  TOKEN without the UPDATE keyword implies
 * UPDATE.
 * <P>Use of the UPDATE option is subject to the following rules:
 * <ul>
 * <LI>You can specify UPDATE on a READPREV command
 * only if the file is accessed in RLS mode. If you specify
 * UPDATE for a file accessed in non-RLS mode, CICS
 * returns INVREQ.
 * <LI>You can specify UPDATE on READPREV, but not on
 * the STARTBR or RESETBR commands.
 * <LI>You can intermix UPDATE and non-update requests
 * within the same browse.
 * <LI>CICS does not preserve the UPDATE option for you
 * from one READPREV command to the next.
 * CICS supports only one TOKEN in a browse sequence,
 * and the TOKEN value on each READPREV invalidates
 * the previous value.
 * </UL>
 * <I>Locks for UPDATE</I>:  Specifying UPDATE on a READPREV
 * acquires an exclusive lock. The duration of these exclusive
 * locks within a browse depends on the action your application
 * program takes:
 * <UL>
 * <LI>If you decide to DELETE or REWRITE the last record
 * acquired by a READPREV UPDATE in a browse, using
 * the associated token, the lock remains active as follows:
 * <UL>
 * <LI>If the file is recoverable, the lock is released at
 * completion of the next syncpoint or rollback.
 * <LI>If the file is non-recoverable, the lock will be
 * released by the time ENDBR has completed, but
 * might be released earlier.
 * </ul>
 * <LI>If you decide  not to update the last record read, CICS
 * frees the exclusive lock when your program either issues
 * another READNEXT or READPREV command, or ends
 * the browse.
 * </UL>
 * <p><b>UNLOCK note</b>
 * <p>The UNLOCK command does  not free an exclusive lock
 * held by VSAM against a record acquired by READPREV
 * UPDATE. An UNLOCK in a browse invalidates the
 * TOKEN returned by the last request.
 * <p><i>Locks for read integrity</i>:  Specifying one of the read integrity
 * options acquires a shared lock on each READPREV. The
 * duration of these shared locks with a browse depends on the
 * type of read integrity you specify:
 * <UL>
 * <LI>If you specify CONSISTENT read integrity, the shared
 * lock is held only for the duration of each read
 * request --that is, until the record is returned to your
 * program.
 * <LI>If you specify REPEATABLE read integrity, the shared
 * lock is held for the duration of the unit of work in which
 * the browse is performed. In this case, your program
 * could acquire a large number of shared locks, which will
 * prevent the granting of exclusive locks for update
 * functions. You should use REPEATABLE read integrity
 * in a browse with caution.
 * </ul>
 * <p>Function shipping READPREV with UPDATE or
 * read-integrity:  If a READPREV command specifying
 * UPDATE or one of the read-integrity options is
 * function-shipped to a member of the CICS family of products
 * that does not support UPDATE or the read integrity options,
 * the request fails:
 * <UL>
 * <LI>If an ISC link is used, the request receives an ATNI
 * abend.
 * <LI>If an MRO link is used, the request receives an AXF8
 * abend.
 * <p>AXF8 is an abend code, received by the sending side of
 * a function-shipped request. It indicates that an attempt
 * has been made to send a request specifying UPDATE
 * on an MRO link to a CICS region that does not support
 * update or read integrity options.
 * </ul>
 * <p>Read integrity:  When a file is accessed in RLS mode,
 * non-update read requests can specify read integrity options:
 * UNCOMMITTED, CONSISTENT, or REPEATABLE.
 * <p>If you don't specify any of these keywords, CICS uses the
 * value specified on the READINTEG parameter of the FILE
 * resource definition, for which the default is UNCOMMITTED.
 * <p>If you want to use the level of read integrity specified in the
 * READINTEG keyword of the FILE definition, and then you
 * need to change from using a local file to a remote file, or if
 * you change the location of a remote file, ensure that:
 * <ul>
 * <LI>The remote file-owning region is at the CICS Transaction
 * Server for OS/390 Release 1 (or later) level.
 * <LI>The FILE definition in the remote system specifies:
 *   <ul>
 *   <li>RLS mode
 *   <li>The correct read integrity values for your
 *       application.
 *   </ul>
 *
 * @conditions
 * <p><b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>DUPKEY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>140<DD> A record is retrieved by way of an alternate index
 * with the NONUNIQUEKEY attribute, and another
 * alternate index record with the same key exists.
 * <p>In assembler language, if the SET option is being
 * used, the specified register has not been set, but
 * can be loaded from DFHEITP1.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ENDFILE<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>90<DD> An end-of-file condition is detected during a
 * browse.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values (VSAM):
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the EXEC interface block,
 * starting on 387.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>20<DD> The FILE definition does not allow updates.
 * <DT>24<DD> A READPREV command is issued for a file for
 * which the previous STARTBR or RESETBR
 * command has the GENERIC option.
 * <DT>26<DD> The KEYLENGTH option is specified and the
 * specified length does not equal the length defined
 * for the data set for this file refers to.
 * <DT>37<DD> The type of record identification (for example, key
 * or relative byte address) used to access a data set
 * during the browse is changed.
 * <DT>39<DD> A READPREV is issued for a BDAM file.
 * <DT>41<DD> The REQID, if any, does not match that of any
 * successful STARTBR command.
 * <DT>52<DD> CONSISTENT is not allowed because the file is
 * not a VSAM file that is accessed in RLS mode.
 * <DT>53<DD> REPEATABLE is not allowed because the file is
 * not a VSAM file that is accessed in RLS mode.
 * <DT>54<DD> UPDATE is not allowed because the file is not a
 * VSAM file that is accessed in RLS mode.
 * <DT>55<DD> NOSUSPEND is not allowed because the file is
 * not a VSAM file that is accessed in RLS mode.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> An I/O error occurred during the browse. An I/O
 * error is any unusual event that is not covered by a
 * CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error. (Further information is available in
 * the EXEC interface block, defined on 387.)
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>10<DD> Neither the LENGTH nor the SET option is
 * specified for a file with variable-length records.
 * <DT>11<DD> The length of the record read with the INTO option
 * specified exceeds the value specified in the
 * LENGTH option; the record is truncated, and the
 * data area supplied in the LENGTH option is set to
 * the actual length of the record.
 * <DT>13<DD> An incorrect length is specified for a file with
 * fixed-length records.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>106<DD> The read request specifies the UPDATE keyword,
 * or one of the read integrity keywords
 * CONSISTENT or REPEATABLE, or the file
 * resource definition specifies read integrity, but
 * VSAM holds a retained lock against the record
 * (see "Retained and active locks").
 * The key of the locked record is not returned to
 * your application program. If you handle this
 * condition and control is returned to your program,
 * the browse can continue and retrieve the record
 * following the locked record by issuing another
 * READPREV request.
 * <p>The LOCKED condition can also occur for a
 * request to a recoverable CFDT that uses the
 * locking model, if the record being read is locked
 * by a retained lock. See the  CICS Recovery and
 * Restart Guide for information about investigating
 * retained locks on records in a coupling facility data
 * table.
 * </dl>
 * <p>Default action: abend the task with code AEX8.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>80<DD> An attempt to retrieve a record based on the
 * search argument provided is unsuccessful. One
 * place where this may occur is where the
 * READPREV command immediately follows a
 * STARTBR or RESETBR command that specified
 * GTEQ and the key of a record that does not exist
 * on the data set.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>107<DD> NOSUSPEND is specified on the request but
 * VSAM holds an active lock against the record,
 * which would cause the request to wait (see
 * "Retained and active locks").
 * The key of the locked record is not returned to
 * your application program. If you handle this
 * condition and control is returned to your program,
 * the browse can continue and retrieve the record
 * following the locked record by issuing another
 * READPREV request.
 * </dl>
 * <p>Default action: abend the task with code AEX9.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that has not
 * been defined to CICS as a remote system
 * (defined by defining a CONNECTION). SYSIDERR
 * also occurs when the link to the remote system is
 * closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The READPREV is issued against a coupling
 * facility data table that no longer exists, probably
 * because of a coupling facility failure, in which case
 * the coupling facility data table server also fails.
 * See the  CICS System Definition Guide for
 * information about restarting a coupling facility data
 * table server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <p><i>Retained and active locks</i>:  RECORDBUSY refers to active
 * locks and LOCKED refers to retained locks:
 * These locks affect READPREV requests which acquire locks;
 * that is, update requests and requests with read integrity.
 * These are the kinds of READPREV requests which are
 * referred to in the following bullets. Other READPREV
 * requests are unaffected by the presence of retained or active
 * locks.
 * <UL>
 * <LI>READPREV requests for records that have  retained
 * locks are always rejected with a LOCKED response.
 * <LI>READPREV requests for records that have  active locks
 * wait for the lock to be released, except when the
 * NOSUSPEND keyword is specified, in which case CICS
 * returns the RECORDBUSY response.
 * </ul>
 * @param CONSISTENT
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   request.
 *                   <p>If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READPREV
 *                   request waits until the update is complete (unless
 *                   NOSUSPEND is also specified) as follows:
 *                   <ul>
 *                   <LI>For a READPREV request against a
 *                   non-recoverable file, the READPREV completes as
 *                   soon as any VSAM request performing the update
 *                   completes.
 *                   <LI>For a READPREV request against a recoverable
 *                   file, the READPREV request completes when the
 *                   updating task completes its next syncpoint or
 *                   rollback.
 *                   </ul>
 * @param FILE(filename)
 *                   specifies the of the file being browsed.
 *                   <p>If SYSID is specified, the data set to which this file refers
 *                   is assumed to be on a remote system irrespective of
 *                   whether the name is defined in the file resource
 *                   definition. Otherwise, the file definition is used to find out
 *                   whether the data set is on a local or a remote system.
 * @param INTO(data-area)
 *                   specifies the data area into which the record retrieved
 *                   from the data set is to be written.
 * @param KEYLENGTH(data-value)
 *                   specifies the length (halfword binary) of the key that has
 *                   been specified in the RIDFLD option, except when RBA
 *                   or RRN is specified, in which case KEYLENGTH is not
 *                   valid. If the length specified is different from the length
 *                   defined for the data set, the INVREQ condition occurs.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   record to be retrieved. On completion of a retrieval
 *                   operation, LENGTH contains the actual length of the
 *                   retrieved record.
 *                   <p>This option must be specified if SYSID is specified. It
 *                   must also be specified with the INTO option on
 *                   READPREV commands involving variable-length
 *                   records. It need not be specified for fixed-length records,
 *                   but its inclusion is recommended because:
 *                   <ul>
 *                   <LI>It causes a check to be made that the record being
 *                   read is not too long for the available data area.
 *                   <LI>When browsing fixed-length records into an area
 *                   longer than the record being accessed, the
 *                   LENGERR condition is raised if the LENGTH option
 *                   is not specified. If the length specified exceeds the
 *                   file record length, CICS uses the longer length for
 *                   the move. If the target area in the application
 *                   program is not large enough, storage is overlaid
 *                   beyond the target area.
 *                   <p>See "LENGTH options" for more
 *                   information about when LENGTH must be specified.
 *                   </ul>
 *                   <p>When browsing into a target data area longer than the
 *                   record being read, the contents of the target data area,
 *                   from the end of the retrieved record to the end of the
 *                   target data area, are unpredictable.
 *                   <p>If you specify the INTO option, LENGTH specifies the
 *                   largest record the program accepts. If the retrieved
 *                   record is longer than the value specified in the LENGTH
 *                   option, the record is truncated to the specified value and
 *                   the LENGERR condition occurs. In this case, the
 *                   LENGTH data area is set to the length of the record
 *                   prior to truncation.
 *                   <p>If you specify the SET option, LENGTH need not be
 *                   specified.
 * @param NOSUSPEND
 *                   (RLS only)
 *                   The request does not wait if the record is locked by
 *                   VSAM with an active lock, including records locked as
 *                   the result of a DEADLOCK.
 * @param RBA
 *                   (VSAM KSDS or ESDS base data sets, or
 *                   CICS-maintained data tables only, but not paths)
 *                   specifies that the record identification field specified in
 *                   the RIDFLD option contains a relative byte address. You
 *                   must specify this option after any STARTBR or
 *                   RESETBR command that specified the RBA option.
 *                   <p>You cannot use RBA for:
 *                   <ul>
 *                   <LI>User-maintained data tables
 *                   <LI>Coupling facility data tables
 *                   <LI>Any KSDS files opened in RLS access mode
 *                   <LI>KSDS files that hold more than 4GB
 *                   </ul>
 * @param REPEATABLE
 *                   (RLS only)
 *                   The record is read with a level of read integrity provided
 *                   by a VSAM shared lock that lasts for the duration of the
 *                   unit of work in which the read request is issued.
 *                   If the record is being modified by another task, which
 *                   therefore holds an exclusive lock, the READPREV
 *                   request waits until the update is complete (unless
 *                   NOSUSPEND is also specified) as follows:
 *                   <ul>
 *                   <LI>For a recoverable file, the READPREV request
 *                   completes when the updating transaction completes
 *                   its next syncpoint or rollback.
 *                   <LI>For a non-recoverable file, the READPREV
 *                   completes as soon as the VSAM request performing
 *                   the update completes.
 *                   </ul>
 *                   <p>After the READPREV request has completed, the record
 *                   remains locked to the task that issued the READPREV.
 *                   Other tasks can continue to read the record, but no
 *                   other task is allowed to update the record until the task
 *                   that issued the READPREV performs its next syncpoint
 *                   or rollback.
 * @param REQID(data-value)
 *                   specifies as a halfword binary value a unique request
 *                   identifier for a browse, used to control multiple browse
 *                   operations on a file. If this option is not specified, a
 *                   default value of zero is assumed.
 * @param RIDFLD(data-area)
 *                   specifies the record identification field. The contents can
 *                   be a key, a relative byte address, or relative record
 *                   number. For a relative byte address or a relative record
 *                   number, the format of this field must be fullword binary.
 *                   For a relative byte address, the RIDFLD can be greater
 *                   than or equal to zero. For a relative record number, the
 *                   RIDFLD can be greater than or equal to 1.
 *                   <p>On completion of the READPREV command, this field is
 *                   updated by CICS with the complete identification of the
 *                   record retrieved.
 * @param RRN
 *                   (VSAM RRDS) specifies that the record identification
 *                   field specified in the RIDFLD option contains a relative
 *                   record number.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the retrieved record.
 *                   <p>In assembler language, if the DUPKEY condition occurs,
 *                   the register specified will not have been set, but can be
 *                   loaded from DFHEITP1.
 *                   <p>The pointer reference is valid until the next READPREV
 *                   or READNEXT command specifying SET for the same
 *                   browse (REQID) for the same file. The pointer is no
 *                   longer valid after an ENDBR or SYNCPOINT command.
 *                   If you want to retain the data within the field addressed
 *                   by the pointer, you must move it to your own area.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address returned in the SET
 *                   pointer can be above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, the address returned in the SET
 *                   pointer is below the 16MB line.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, the data returned is in user-key storage; otherwise
 *                   it is in CICS-key storage.
 * @param SYSID(systemname)
 *                   specifies the name of the system to which the request is
 *                   directed.
 *                   <p>If you specify SYSID, and omit both RBA and RRN, you
 *                   must also specify LENGTH and KEYLENGTH.
 * @param TOKEN(data-area)
 *                   (RLS only)
 *                   Returns, as a fullword binary value, a unique identifier
 *                   for this READPREV UPDATE request. This is an output
 *                   value returned by file control to the requesting task, for
 *                   use in associating a subsequent REWRITE or DELETE
 *                   (or UNLOCK) request with the record returned on this
 *                   READPREV command.
 *                   <p>Your application program must specify the returned
 *                   TOKEN on a subsequent REWRITE or DELETE
 *                   command to identify the record being rewritten or
 *                   deleted. Your application program can also specify the
 *                   returned TOKEN on a subsequent UNLOCK command
 *                   to identify the token that is being invalidated.
 *                   You must specify TOKEN if you specify UPDATE (but
 *                   UPDATE is assumed if you specify TOKEN without
 *                   UPDATE).
 *                   <p>CICS supports only one active TOKEN at a time for a
 *                   given REQID. Thus, a TOKEN value remains valid only
 *                   until the following READNEXT, READPREV, or ENDBR
 *                   command for this browse, or until a REWRITE, DELETE,
 *                   or UNLOCK command (whichever is first).
 *                   <p>TOKEN can be function shipped. However, if a request
 *                   specifying TOKEN is function shipped to a member of
 *                   the CICS family of products that does not recognize this
 *                   keyword, the request fails.
 * @param UNCOMMITTED
 *                   The record is read without read integrity. The current
 *                   data, as known to VSAM, is returned. No attempt is
 *                   made to serialize this read request with any concurrent
 *                   update activity for the same record. The record may be
 *                   being updated by another transaction, therefore the
 *                   value of the record may change later if that update is
 *                   subsequently backed out.
 * @param UPDATE
 *                   (RLS only)
 *                   Specifies that the record is to be obtained for updating
 *                   or deletion. If this option and TOKEN are both omitted,
 *                   read only is assumed.
 *                   <p>If you specify UPDATE, you must also specify TOKEN.
 */
function "READPREV"(
   CONSISTENT,
   FILE(filename),
   INTO(data-area),
   KEYLENGTH(data-value),
   LENGTH(data-area),
   NOSUSPEND,
   RBA,
   REPEATABLE,
   REQID(data-value),
   RIDFLD(data-area),
   RRN,
   SET(ptr-ref),
   SYSID(systemname),
   TOKEN(data-area),
   UNCOMMITTED,
   UPDATE,
   );

/**
 * Read data from the transient data queue.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__READQ TD__QUEUE(name)____INTO(data-area)_________________________> |
 * |                            |_SET(ptr-ref)____|                         |
 * |                                                                        |
 * | >_______________________________________________________________><     |
 * |    |_LENGTH(data-area)_|  |_SYSID(systemname)_|  |_NOSUSPEND_|         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, INVREQ, IOERR, ISCINVREQ, LENGERR, NOTAUTH,      |
 * | NOTOPEN, QBUSY, QIDERR, QZERO, SYSIDERR                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>READQ TD reads transient data from a queue (after which
 * the record is no longer available).
 * If you are using automatic transaction initiation (ATI) (see the
 * section on ATI in the  CICS Application Programming Guide
 * for introductory information) your application should test for
 * the QZERO condition to ensure that termination of an
 * automatically initiated task occurs only when the queue is
 * empty.
 * If the READQ TD command attempts to access a record in a
 * logically recoverable intrapartition queue that is being written
 * to, or deleted by, another task, and there are no more
 * committed records, the command waits until the queue is no
 * longer being used for output. If, however, the NOSUSPEND
 * option has been specified, or there is an active HANDLE
 * CONDITION for QBUSY, the QBUSY condition is raised.
 *
 * @conditions
 * <DL>
 * <DT>DISABLED<DD>
 * occurs when the queue has been disabled.
 * <P>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if READQ names an extrapartition queue that has
 * been opened for output. This condition cannot occur for
 * intrapartition queues.
 * <P>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an input/output error occurs and the data
 * record in error is skipped.
 * <P>This condition occurs as long as the queue can be read;
 * a QZERO condition occurs when the queue cannot be
 * read.
 * <P>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <P>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if READQ names an INTO area that cannot hold
 * all the data that is to be returned to the application. The
 * check is made after the XTDIN exit has been invoked.
 * <P>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * occurs when the request cannot be performed because
 * use of the queue has been restricted owing to a unit of
 * work failing in-doubt. This can happen on any request
 * for a logically-recoverable queue defined with
 * WAIT(YES) and WAITACTION(REJECT) in the
 * TDQUEUE resource definition.
 * <P>Specify WAIT(YES) and WAITACTION(QUEUE) in the
 * TDQUEUE resource definition if you want the transaction
 * to wait.
 * <P>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <P>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * occurs if the destination is closed. This condition applies
 * to extrapartition queues only.
 * <P>Default action: terminate the task abnormally.
 * <DT>QBUSY<DD>
 * occurs if a READQ TD command attempts to access a
 * record in a logically recoverable intrapartition queue that
 * is being written to or is being deleted by another task,
 * and there are no more committed records.
 * <P>The NOSUSPEND option must be specified, or a
 * HANDLE for the condition must be active, for this
 * condition to be raised.
 * <P>This condition applies only to intrapartition queues.
 * Default action: ignore the condition.
 * <DT>QIDERR<DD>
 * occurs if the symbolic destination to be used with
 * READQ TD cannot be found.
 * <P>Default action: terminate the task abnormally.
 * <DT>QZERO<DD>
 * occurs when the destination (queue) is empty or the end
 * of the queue has been reached.
 * <P>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs when the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * <P>SYSIDERR also occurs when the link to the remote
 * system is closed.
 * <P>Default action: terminate the task abnormally.
 * </DL>
 * @example
 * The following example shows how to read a record from an
 * intrapartition data set (queue), which in this case is the
 * control system message log (CSML), into a data area
 * specified in the request:
 * <PRE>
 * EXEC CICS READQ TD
 *   QUEUE('CSML')
 *   INTO(DATA)
 *   LENGTH(LDATA)
 * </PRE>
 * <P>The following example shows how to read a record from an
 * extrapartition data set (queue) having fixed-length records
 * into a data area provided by CICS; the pointer reference
 * specified by the SET option is set to the address of the
 * storage area reserved for the data record. It is assumed that
 * the record length is known.
 * <PRE>
 * EXEC CICS READQ TD
 *   QUEUE(EX1)
 *   SET(PREF)
 * </PRE>
 * @param INTO(data-area)
 *                  specifies the user data area into which the data read
 *                  from the transient data queue is to be placed.
 * @param LENGTH(data-area)
 *                  specifies the length, as a halfword binary value, of the
 *                  record to be read.
 *                  <P>If you specify the INTO option, LENGTH specifies the
 *                  maximum length of data that the program accepts. If the
 *                  value specified is less than zero, zero is assumed. If the
 *                  length of the data exceeds the value specified, the data
 *                  is truncated to that value and the LENGERR condition
 *                  occurs. On completion of the retrieval operation, the data
 *                  area is set to the original length of the data record read
 *                  from the queue.
 *                  <P>If you specify the INTO option, LENGTH need not be
 *                  specified if the length can be generated by the compiler
 *                  from the INTO variable. See "LENGTH options"
 *                  for more information about when LENGTH must
 *                  be specified.
 * @param NOSUSPEND
 *                  specifies that if the application program attempts to read
 *                  from a queue that is already being used for output, the
 *                  task is not suspended until the queue becomes
 *                  available. Instead, the QBUSY condition is raised.
 *                  Note, however, that if a HANDLE CONDITION for
 *                  QBUSY is active when the command is executed, this
 *                  also overrides the default action, and control is passed
 *                  to the user label supplied in the HANDLE CONDITION.
 *                  This takes precedence over the NOSUSPEND option but
 *                  is, of course, negated by either NOHANDLE or RESP.
 *                  This option only applies to intrapartition queues.
 * @param QUEUE(name)
 *                  specifies the symbolic name (1-4 alphanumeric
 *                  characters) of the queue to be read from. The name
 *                  must have been defined in the DCT.
 *                  <P>If SYSID is specified, the queue is assumed to be on a
 *                  remote system irrespective of whether or not the name
 *                  is defined as remote in the DCT. Otherwise the entry in
 *                  the DCT is used to find out whether the data set is on a
 *                  local or a remote system.
 * @param SET(ptr-ref)
 *                  specifies a pointer reference that is to be set to the
 *                  address of the data read from the queue. CICS acquires
 *                  an area large enough to hold the record and sets the
 *                  pointer reference to the address of that area. The area is
 *                  retained until another transient data command is
 *                  executed. The pointer reference, unless changed by
 *                  other commands or statements, is valid until the next
 *                  READQ TD command or the end of task.
 *                  <P>If DATALOCATION(ANY) is associated with the
 *                  application program, the address of the data can be
 *                  above or below the 16MB line.
 *                  <P>If DATALOCATION(BELOW) is associated with the
 *                  application program, and the data resides above the
 *                  16MB line, the data is copied below the 16MB line, and
 *                  the address of this copy is returned.
 *                  <P>If TASKDATAKEY(USER) is specified for the running
 *                  task, and storage protection is active, the data returned
 *                  is in a user-key. If TASKDATAKEY(CICS) is specified
 *                  and storage protection is active, the data returned is in a
 *                  CICS-key.
 * @param SYSID(systemname)
 *                  (remote systems only) specifies the name (1-4
 *                  characters) of the system to which the request is
 *                  directed.
 */
function "READQ TD"(
   INTO(data-area),
   LENGTH(data-area),
   NOSUSPEND,
   QUEUE(name),
   SET(ptr-ref),
   SYSID(systemname)
   );

/**
 * Read data from temporary storage queue.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__READQ TS__QUEUE(name)____INTO(data-area)_________________________> |
 * |                            |_SET(ptr-ref)____|                         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LENGTH(data-area)_|  |_NUMITEMS(data-area)_|                      |
 * |                                                                        |
 * |     _NEXT_____________                                                 |
 * | >__|__________________|_________________________><                     |
 * |    |_ITEM(data-value)_|  |_SYSID(systemname)_|                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, ISCINVREQ, ITEMERR, LENGERR, NOTAUTH,       |
 * | QIDERR, SYSIDERR                                                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Note for dynamic transaction routing</B>
 * <P>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <P><B>Description</B>
 * <P>READQ TS retrieves data from a temporary storage queue in
 * main or auxiliary storage.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * occurs in either of the following situations:
 * <UL>
 * <LI>the queue was created by CICS internal code.
 * <LI>the queue name specified consists solely of binary
 * zeroes.
 * </ul>
 * <P>Default action: terminate the task abnormally.
 * IOERR
 * occurs when there is an irrecoverable input/output error.
 * <P>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>ITEMERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The item number specified is invalid (that is, outside
 * the range of item numbers written to the queue).
 * <LI>An attempt is made to read beyond the end of the
 * queue using the NEXT (default) option.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs when the length of the stored data is greater than
 * the value specified by the LENGTH option.
 * <p>This condition only applies to the INTO option and
 * cannot occur with SET.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * occurs when the queue specified cannot be found, either
 * in main or in auxiliary storage.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>When the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * <LI>When the link to the remote system is closed.
 * <LI>When the CICS region in which the temporary
 * storage command is executed fails to connect to the
 * TS server managing the TS pool that supports the
 * referenced temporary storage queue. (For example,
 * this can happen if the CICS region is not authorized
 * to access the temporary storage server).
 * </ul>
 * <p>SYSIDERR can also occur if the temporary storage
 * server has not been started, or because the server
 * has failed (or been stopped) while CICS continues
 * executing.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to read the first (or only)
 * record from a temporary storage queue into a data area
 * specified in the request; the LENGTH data area is given the
 * value of the length of the record.
 * <pre>
 * EXEC CICS READQ TS
 *   ITEM(1)
 *   QUEUE(UNIQNAME)
 *   INTO(DATA)
 *   LENGTH(LDATA)
 * </pre>
 * The following example shows how to read the next record
 * from a temporary storage queue into a data area provided by
 * CICS; the pointer reference specified by the SET option is
 * set to the address of the storage area reserved for the data
 * record, and the LENGTH data area is given the value of the
 * length of the record.
 * <pre>
 * EXEC CICS READQ TS
 *   QUEUE(DESCRQ)
 *   SET(PREF)
 *   LENGTH(LENG)
 *   NEXT
 * </pre>
 * @param INTO(data-area)
 *               specifies the data area into which the data is to be
 *               written. The data area can be any variable, array, or
 *               structure.
 * @param ITEM(data-value)
 *               provides a halfword binary value that specifies the item
 *               number of the logical record to be retrieved from the
 *               queue.
 * @param LENGTH(data-area)
 *               specifies the length, as a halfword binary value, of the
 *               record to be read.
 *               <P>If you specify the INTO option, LENGTH need not be
 *               specified if the length can be generated by the compiler
 *               from the INTO variable.
 *               <P>See "LENGTH options" for more information
 *               about when LENGTH must be specified.
 *               <P>If you specify INTO, LENGTH defines the maximum
 *               length of data that the program accepts. If the value
 *               specified is less than zero, zero is assumed. If the length
 *               of the data exceeds the value specified, the data is
 *               truncated to that value and the LENGERR condition
 *               occurs.
 *               <P>On completion of the retrieval operation, the data area is
 *               set to the original length of the data record read from the
 *               queue.
 *               <P>If you specify the SET option, the LENGTH must be
 *               specified.
 * @param NEXT
 *               specifies retrieval for the next sequential logical record
 *               following the last record retrieved (by any task), or the
 *               first record if no previous record has been retrieved.
 * @param NUMITEMS(data-area)
 *               specifies a halfword binary field into which CICS stores a
 *               number indicating how many items there are in the
 *               queue. This only occurs if the command completes
 *               normally.
 * @param QUEUE(name)
 *               specifies the symbolic name (1-8 characters) of the
 *               queue to be read from.
 * @param QNAME(name)
 *               an alternative to QUEUE, QNAME specifies the symbolic
 *               name (1-16 characters) of the queue to be read from.
 * @param SET(ptr-ref)
 *               specifies the pointer reference that is set to the address
 *               of the retrieved data. The pointer reference, unless
 *               changed by other commands or statements, is valid until
 *               the next READQ TS command or the end of task.
 *               <P>If the application program is defined with
 *               DATALOCATION(ANY), the address of the data can be
 *               above or below the 16MB line. If the application program
 *               is defined with DATALOCATION(BELOW), the address
 *               of the data is below the 16MB line.
 *               <P>If TASKDATAKEY(USER) is specified for the running
 *               task, and storage protection is active, the data returned
 *               is in a user-key. If TASKDATAKEY(CICS) is specified
 *               and storage protection is active, the data returned is in a
 *               CICS-key.
 * @param SYSID(systemname)
 *               (remote and shared queues only) specifies the system
 *               name (1-4 characters) identifying the remote system or
 *               shared queue pool to which the request is directed.
 */
function "READQ TS"(

   INTO(data-area),
   ITEM(data-value),
   LENGTH(data-area),
   NEXT,
   NUMITEMS(data-area),
   QUEUE(name),
   QNAME(name),
   SET(ptr-ref),
   SYSID(systemname),
   );
/**
 * Receive data from standard CICS terminal support (BTAM or TCAM) or from a task that is not attached to a terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>This form of the RECEIVE command is used by all CICS-supported terminals for which the other RECEIVE descriptions are
 * not appropriate.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the RECEIVE command is issued by a
 *    transaction that has been started as a nonterminal task
 *    by the START command, or if the CONVID value or
 *    facility specified in the command does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <VTAM default>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data on an APPC mapped conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE______________________INTO(data-area)_____________________> |
 * |              |_CONVID(name)_|  |_SET(ptr-ref)____|                     |
 * |                                                                        |
 * | >____LENGTH(data-area)_______________________________________________> |
 * |    |_FLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                  |
 * |                            |_MAXFLENGTH(data-value)_|                  |
 * |                                                                        |
 * | >___________________________________><                                 |
 * |    |_NOTRUNCATE_|  |_STATE(cvda)_|                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INVREQ, LENGERR, NOTALLOC, SIGNAL, TERMERR            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>RECEIVE receives data from the conversation partner in an APPC mapped conversation.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the RECEIVE command is issued by a
 *    transaction that has been started as a nonterminal task
 *    by the START command, or if the CONVID value or
 *    facility specified in the command does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CONVID(name)
 *                   identifies the conversation to which the command
 *                   relates. The 4-character name identifies either the token
 *                   returned by a previously executed ALLOCATE command
 *                   in EIBRSRCE in the EIB, or the token representing the
 *                   principal session (returned by a previously executed
 *                   ASSIGN command).
 *                   <p>For compatibility with earlier releases, SESSION is
 *                   accepted as a synonym for CONVID. New programs
 *                   should use CONVID.
 *                   <p>If this option is omitted, the principal facility is assumed.
 *                   FLENGTH( data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param STATE(cvda)
 */
function "RECEIVE <APPC>"(
   CONVID(name),
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   STATE(cvda),
   );

/**
 * Receive data from a 3270-display logical unit (LUTYPE2) or a 3270-printer logical unit (LUTYPE3).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_ASIS_|  |_BUFFER_|                    |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >__________________><                                                  |
 * |    |_NOTRUNCATE_|                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INVREQ, LENGERR, TERMERR                              |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>RECEIVE receives data from the terminal.
 * <P>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) (and BUFFER has not been specified), you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ASIS
 *                   specifies that lowercase characters in the 3270 input
 *                   data stream are not translated to uppercase; this allows
 *                   the current task to receive a message containing both
 *                   uppercase and lowercase data.
 *                   This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL and uses the terminal defaults
 *                   to translate the operation data.
 *                   This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param BUFFER
 *                   specifies that the contents of the 3270 buffer are to be
 *                   read, beginning at buffer location 1 and continuing until
 *                   all contents of the buffer have been read. All character
 *                   and attribute sequences (including nulls) appear in the
 *                   input data stream in the same order as they appear in
 *                   the 3270 buffer.
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <LUTYPE2/LUTYPE3>"(
   ASIS,
   BUFFER,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from an LUTYPE4 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, INVREQ, LENGERR, SIGNAL, TERMERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>RECEIVE receives data from the terminal.
 * <P>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    (interpreter logical unit only)
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <LUTYPE4>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data on an LUTYPE6.1 session.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_______________________INTO(data-area)____________________> |
 * |              |_SESSION(name)_|  |_SET(ptr-ref)____|                    |
 * |                                                                        |
 * | >____LENGTH(data-area)_______________________________________________> |
 * |    |_FLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                  |
 * |                            |_MAXFLENGTH(data-value)_|                  |
 * |                                                                        |
 * | >__________________><                                                  |
 * |    |_NOTRUNCATE_|                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INBFMH, INVREQ, LENGERR, NOTALLOC, SIGNAL, TERMERR    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>RECEIVE receives data from the conversation partner in an LUTYPE6.1 conversation.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the RECEIVE command is issued by a
 *    transaction that has been started as a nonterminal task
 *    by the START command, or if the CONVID value or
 *    facility specified in the command does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If this option is omitted, the principal
 *                   facility for the task is used.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <LUTYPE6.1>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SESSION(name),
   SET(ptr-ref),
   );

/**
 * Receive data from a 3270 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_ASIS_|  |_BUFFER_|                    |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >__________________><                                                  |
 * |    |_NOTRUNCATE_|                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * Description
 * </pre>
 *
 * <p>RECEIVE receives data from a terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) (and BUFFER has not been specified), you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ASIS
 *                   specifies that lowercase characters in the 3270 input
 *                   data stream are not translated to uppercase; this allows
 *                   the current task to receive a message containing both
 *                   uppercase and lowercase data.
 *                   This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL and uses the terminal defaults
 *                   to translate the operation data.
 *                   This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param BUFFER
 *                   specifies that the contents of the 3270 buffer are to be
 *                   read, beginning at buffer location 1 and continuing until
 *                   all contents of the buffer have been read. All character
 *                   and attribute sequences (including nulls) appear in the
 *                   input data stream in the same order as they appear in
 *                   the 3270 buffer.
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3270 logical>"(
   ASIS,
   BUFFER,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive initial input data from a 3600 pipeline logical unit. Subsequent RECEIVEs for further input data are not allowed.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the RECEIVE command is issued by a
 *    transaction that has been started as a nonterminal task
 *    by the START command, or if the CONVID value or
 *    facility specified in the command does not relate to a
 *    conversation owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3600 pipeline>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 3600 (3601) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, INVREQ, LENGERR, SIGNAL, TERMERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal. This form of RECEIVE also applies to the 3630 plant communication system.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    (interpreter logical unit only)
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3600-3601>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 3600 (3614) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal.
 * <p>The data-stream and communication format used between a CICS application program and a 3614 is determined by the 3614.
 * <p>The application program is therefore device dependent when handling 3614 communication.
 * <p>For further information about designing 3614 application programs for CICS, refer to the  IBM 4700/3600/3630 Guide.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3600-3614>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from 3650 logical units.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, INVREQ, LENGERR, TERMERR                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal. This form of RECEIVE also applies to the following 3650 devices:
 * <ul>
 * <LI>Interpreter logical unit
 * <LI>Host conversational (3270) logical unit
 * <LI>Host conversational (3653) logical unit
 * <LI>3650/3680 command processor logical unit
 * </ul>
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    (interpreter logical unit only)
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3650>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 3767 interactive logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INVREQ, LENGERR, SIGNAL, TERMERR                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal. This form of RECEIVE also applies to the 3770 interactive logical unit.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3767>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 3770 batch logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, INVREQ, LENGERR, SIGNAL, TERMERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    (interpreter logical unit only)
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3770>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 3790 full-function or inquiry logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INBFMH, INVREQ, LENGERR, SIGNAL, TERMERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE receives data from the terminal. This form of RECEIVE also applies to the following devices:
 * <ul>
 * <LI>3650/3680 full-function logical unit
 * <LI>3770 full-function logical unit
 * </ul>
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * @conditions
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with end-of-chain-indicator set. Field EIBEOC also
 *    indicates this condition.
 *    <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 *    (interpreter logical unit only)
 *    occurs when an end-of-data-set indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <ul>
 *    <LI>The command is used on an APPC conversation
 *    that is not using the EXEC CICS interface or that is
 *    not a mapped conversation.
 *    </UL>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command is received from a partner transaction. EIBSIG
 *    is always set when an inbound signal is received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related or terminal-related error.
 *    Any action on that conversation other than a FREE
 *    causes an ATCV abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   <p>A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   logical unit or terminal, or the application target data
 *                   area into which data is to be received from the
 *                   application program connected to the other end of the
 *                   current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data received.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies the pointer reference that is to be set to the
 *                   address of the data read from the logical unit or terminal,
 *                   or the partner transaction. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3790 full-function or inquiry>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from standard CICS terminal support (BTAM or TCAM) or from a task that is not attached to a terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * This form of the RECEIVE command is used by all CICS-supported terminals for which the other RECEIVE descriptions are
 * not appropriate.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 *
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <non-VTAM default>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data on an MRO conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_______________________INTO(data-area)____________________> |
 * |              |_SESSION(name)_|  |_SET(ptr-ref)____|                    |
 * |                                                                        |
 * | >____LENGTH(data-area)_______________________________________________> |
 * |    |_FLENGTH(data-area)_|  |_MAXLENGTH(data-value)__|                  |
 * |                            |_MAXFLENGTH(data-value)_|                  |
 * |                                                                        |
 * | >___________________________________><                                 |
 * |    |_NOTRUNCATE_|  |_STATE(cvda)_|                                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, INBFMH, INVREQ, LENGERR, NOTALLOC, TERMERR            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the conversation partner in an MRO conversation.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>EOC<DD>
 *    occurs when a request/response unit (RU) is received
 *    with the end-of-chain indicator set. Field EIBEOC also
 *    contains this indicator.
 *    <p>Default action: ignore the condition.
 * <DT>INBFMH<DD>
 *    occurs if a request/response unit (RU) contains a
 *    function management header (FMH). Field EIBFMH
 *    contains this indicator and it should be used in
 *    preference to INBFMH. The IGNORE CONDITION
 *    command can be used to ignore the condition.
 *    Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal-related error, such as a session
 *    failure. This condition applies to VTAM-connected
 *    terminals only.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If this option is omitted, the principal
 *                   facility for the task is used.
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 * <pre>
 *     ALLOCATED
 *     FREE
 *     PENDFREE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 * </pre>
 */
function "RECEIVE <MRO>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   SESSION(name),
   STATE(cvda),
   );


/**
 * Receive data from a System/3.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal. This form of the RECEIVE command also applies to the following devices:
 * <UL>
 * <LI>2770 data communication system
 * <LI>2780 data transmission terminal
 * <LI>3660 supermarket scanning system
 * <LI>3780 communication terminal
 * </UL>
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p>This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL operation and uses the
 *                   terminal defaults to translate the data.
 *                   <p>This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <System/3>"(
   ASIS,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a System/7.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_PSEUDOBIN_|  |_ASIS_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal. For a description of running with a System/7, see "CONVERSE (System/7)".
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p>This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL operation and uses the
 *                   terminal defaults to translate the data.
 *                   <p>This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param PSEUDOBIN
 *                   specifies that the data being read is to be translated
 *                   from System/7 pseudobinary representation to
 *                   hexadecimal.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <System/7>"(
   ASIS,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   NOTRUNCATE,
   PSEUDOBIN,
   SET(ptr-ref)
   );

/**
 * Receive data from a 2260 or 2265 display station.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >___________________________________________________________><         |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_LEAVEKB_|             |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LEAVEKB
 *                   specifies that the keyboard is to remain locked at the
 *                   completion of the data transfer.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <2260>"(
   FLENGTH(data-area),
   INTO(data-area),
   LEAVEKB,
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   );

/**
 * Receive data from a 2741 communication terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, RDATT                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal. For more information about using a 2741 communication terminal, see "CONVERSE
 * (2741)".
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>RDATT<DD>
 *    (not TCAM)
 *    occurs if a RECEIVE command is terminated by the
 *    attention (ATTN) key rather than the return key.
 *    <p>Default action: ignore the condition.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <2741>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from a 2980 general banking terminal system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________PASSBK__><              |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOPASSBKRD                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p><i>Passbook control</i>:   All input and output requests to the passbook area of a 2980 are dependent on the presence of a
 * passbook. The PASSBK option is used to specify that communication is with a passbook. The conditions NOPASSBKRD
 * (RECEIVE) and NOPASSBKWR (SEND) occur on input and output requests respectively when a passbook is not present.
 * These conditions can be handled by a HANDLE CONDITION command and appropriate handling routines.
 * <p>If the passbook is present on an input request, the application program generally writes back to the passbook area to update
 * the passbook. If the NOPASSBKWR condition occurs, CICS allows immediate output to the terminal. In a routine for the
 * NOPASSBKWR condition, the application program should send an error message to the journal area of the terminal to inform
 * the 2980 operator of this error condition. To allow the operator to insert the required passbook, CICS causes the transaction to
 * wait 23.5 seconds before continuing.
 * <p>On regaining control from CICS after sending the error message, the application program can attempt again to update the
 * passbook when it has ensured that the print element is positioned correctly in the passbook area. This is generally
 * accomplished by issuing two carrier returns followed by the number of tabs required to move the print element to the correct
 * position.
 * <p>If the NOPASSBKWR condition occurs during the second attempt to write to the passbook area, the application program can
 * send another error message or take some alternative action (for example, place the terminal "out of service"). The presence of
 * the Auditor Key on a 2980 Administrative Station Model 2 is controlled by the SEND PASSBK command and may be used in a
 * manner similar to that described above.
 * <p><i>Output control</i>:   The unit of transmission for a 2980 is called a segment. However, for the passbook and journal areas,
 * CICS allows an application program to send messages that exceed the buffer size. For the passbook area, the maximum
 * length of message is limited to one line of a passbook to avoid spacing ("indexing") past the bottom of the passbook. For the
 * journal area, the maximum length of message is specified in the LENGTH option of the SEND command.
 * For example, consider a 2972 buffer size of 48 characters and a 2980 Teller Station Model 4 passbook print area of 100
 * characters per line. The application program can send a message of 100 characters to this area; CICS segments the message
 * to adjust to the buffer size. The application program must insert the passbook indexing character (X'25') as the  last character
 * written in one output request to the passbook area. This is done to control passbook indexing and thereby achieve positive
 * control of passbook presence.
 * <p>If a message contains embedded passbook indexing characters, and segmentation is necessary because of the length of the
 * message, the output is terminated if the passbook spaces beyond the bottom of the passbook; the remaining segments are not
 * printed.
 *
 * <p><i>Output to a common buffer</i>:   The SEND CBUFF command is used to transmit data to a common buffer. The data is
 * translated to the character set of the receiving 2980 model. If more than one 2980 model type is connected to the 2972 control
 * unit, the lengths are truncated if they exceed the buffer size.
 * <p><i>The DFH2980 structure</i>:   The DFH2980 structure contains constants that may only be used when writing COBOL or PL/I
 * application programs for the 2980. The structure is obtained by copying DFH2980 into the application program.
 * <p>For COBOL, DFH2980 is copied into the working-storage section; for PL/I, DFH2980 is included using a %INCLUDE statement.
 * The station identification is given in the field STATIONID, whose value must be determined by the ASSIGN command. To test
 * whether a normal or alternate station is being used, the STATIONID field is compared with values predefined in DFH2980. The
 * values are:
 * <pre>
 * STATION-
 * STATION_
 * </pre>
 * where normal stations. (The break symbol is hyphen (-) for COBOL, and underscore (_) for PL/I.)
 * The teller identification on a 2980 Teller Station Model 4 is given in the 1-byte character field TELLERID. An ASSIGN
 * command must be used to find out the TELLERID value.
 * <p>Tab characters (X'05') must be included in the application program. The number of tabs required to position the print element
 * to the first position of a passbook area is given in the field NUMTAB. An ASSIGN command must be used to find out the
 * NUMTAB value. The value of NUMTAB is specified by the system programmer and may be unique to each terminal.
 * Other tab characters are inserted as needed to control formatting.
 * <p>Any of the DFH2980 values TAB-ZERO through TAB-NINE for COBOL and PL/I, may be compared with NUMTAB to find out
 * the number of tab characters that need to be inserted in an output message to get correct positioning of the print element. The
 * tab character is included in DFH2980 as TABCHAR.
 * <p>Thirty special characters are defined in DFH2980. Twenty-three of these can be referred to by the name SPECCHAR-# or
 * SPECCHAR_# (for American National Standard COBOL or PL/I) where # is an integer (0 through 22). The seven other
 * characters are defined with names that imply their usage, for example, TABCHAR.
 * Several other characters defined in DFH2980, such as HOLDPCF or TCTTEPCR, are intended for use in application programs
 * using CICS macros, and should not be required in application programs using CICS commands.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOPASSBKRD<DD>
 *    occurs if no passbook is present.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param PASSBK
 *                   specifies that communication is with a passbook.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <2980>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   PASSBK,
   SET(ptr-ref)
   );

/**
 * Receive data from a 3270 information display system (BTAM or TCAM).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|  |_ASIS_|                |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >______________><                                                      |
 * |    |_BUFFER_|                                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) (and BUFFER has not been specified), you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p>This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL operation and uses the
 *                   terminal defaults to translate the data.
 *                   <p>This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param BUFFER
 *                   (not TCAM) specifies that the contents of the 3270 buffer
 *                   are to be read, beginning at buffer location one and
 *                   continuing until all contents of the buffer have been read.
 *                   All character and attribute sequences (including nulls)
 *                   appear in the input data stream in the same order that
 *                   they appear in the 3270 buffer.
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3270 display>"(
   ASIS,
   BUFFER,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from a 3600 finance communication system (BTAM) - only valid for remote terminals. This form of the RECEIVE
 * command also applies to the 4700 finance communication system. For more information about using the 3600 or 4700 finance
 * communication system, see "CONVERSE (3600 BTAM)" and "BTAM programmable terminals".
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal. For more information about using the 3600 or 4700 finance communication system,
 * see "CONVERSE (3600 BTAM)".
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3600 BTAM>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from a 3735 Programmable Buffered Terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOF, INVREQ, LENGERR                                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal. The 3735 Programmable Buffered Terminal may be serviced by CICS in response
 * to terminal-initiated input (automatic answering), or as a result of an automatic (automatic calling) or time-initiated transaction.
 * <p>For more information about using the 3735 terminal, see "CONVERSE (3735)".
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>EOF<DD>
 *    (not TCAM)
 *    occurs when an end-of-file indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3735>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from a 3740 data entry system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    |_MAXLENGTH(data-value)__|  |_NOTRUNCATE_|                          |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOF, ENDINPT, INVREQ, LENGERR                              |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal.
 * <p>In batch mode, many files are exchanged between the 3740 and CICS in a single transmission. The transmission of an input
 * batch must be complete before an output transmission can be started.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>EOF<DD>
 *    (not TCAM)
 *    occurs when an end-of-file indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>ENDINPT<DD>
 *    (not TCAM)
 *    occurs when an end-of-input indicator is received.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3740>"(
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );

/**
 * Receive data from a 3790 (3270-display) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE_____________________________LENGTH(data-area)____________> |
 * |              |___INTO(data-area)___|  |_FLENGTH(data-area)_|           |
 * |                |_SET(ptr-ref)____|                                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAXLENGTH(data-value)__|  |_ASIS_|  |_BUFFER_|                    |
 * |    |_MAXFLENGTH(data-value)_|                                          |
 * |                                                                        |
 * | >__________________><                                                  |
 * |    |_NOTRUNCATE_|                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b><p>
 * RECEIVE receives data from the terminal.
 * <p>If data is to be received, you must specify either the INTO or the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID) (and BUFFER has not been specified), you can omit both the INTO and SET options.
 * <p>If you specify the INTO option, but omit the MAXLENGTH
 * option, the argument must be a data area that specifies the
 * maximum length that the program accepts. If the value
 * specified is less than zero, zero is assumed.
 * <p>If the length of the data exceeds the value specified, but the
 * NOTRUNCATE option is not specified, the data is truncated
 * to that value and the LENGERR condition occurs. When the
 * data has been received, the data area is set to the original
 * length of the data.
 * <p>If you specify the SET option, the argument must be a data
 * area. When the data has been received, the data area is set
 * to the length of the data.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 *
 * @conditions
 * The following conditions can occur in combination with
 * others. CICS checks for these conditions in the order:
 *   <OL>
 *   <LI>INBFMH
 *   <LI>EOC
 *   </OL>
 * <p>If more than one occurs, only the first is passed to the
 * application program. EIBRCODE, however, is set to indicate
 * all the conditions that occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <DL compact>
 *    <DT>200<DD> A distributed program link server application
 *    specified the function-shipping session (its
 *    principal facility) on the CONVID option.
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if data is discarded by CICS because its length
 *    exceeds the maximum the program accepts and the
 *    NOTRUNCATE option is not specified.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal-related error, such as a session
 *    failure. This condition applies to VTAM-connected
 *    terminals only.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p>This option has no effect on the first RECEIVE
 *                   command of a transaction, because terminal control
 *                   performs a READ INITIAL operation and uses the
 *                   terminal defaults to translate the data.
 *                   <p>This option has no effect if the screen contains data
 *                   prior to a transaction being initiated. This data is read
 *                   and translated in preparation for the next task and the
 *                   first RECEIVE command in that task retrieves the
 *                   translated data.
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param BUFFER
 *                   (not TCAM) specifies that the contents of the 3270 buffer
 *                   are to be read, beginning at buffer location one and
 *                   continuing until all contents of the buffer have been read.
 *                   All character and attribute sequences (including nulls)
 *                   appear in the input data stream in the same order that
 *                   they appear in the 3270 buffer.
 * @param FLENGTH(data-area)
 *                   A fullword alternative to LENGTH.
 * @param INTO(data-area)
 *                   specifies the receiving field for the data read from the
 *                   terminal or logical unit, or the application target area
 *                   receiving the data from the application program
 *                   connected to the other end of the current conversation.
 * @param LENGTH(data-area)
 *                   specifies the length, as a halfword binary value, of the
 *                   data transmitted.
 *                   <p>If you specify the INTO option, but omit the
 *                   MAXLENGTH option, the argument must be a data area
 *                   that specifies the maximum length that the program
 *                   accepts. If the value specified is less than zero, zero is
 *                   assumed.
 *                   <p>If the length of the data exceeds the value specified, but
 *                   the NOTRUNCATE option is not specified, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. When the data has been received, the data area
 *                   is set to the original length of the data.
 *                   <p>If you specify the SET option, the argument must be a
 *                   data area. When the data has been received, the data
 *                   area is set to the length of the data.
 *                   <p>For a description of a safe upper limit, see "LENGTH
 *                   options".
 * @param MAXFLENGTH(data-value)
 *                   A fullword alternative to MAXLENGTH.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount (halfword binary value)
 *                   of data that CICS is to recover. If INTO is specified,
 *                   MAXLENGTH overrides the use of LENGTH as an input
 *                   to CICS. If SET is specified, MAXLENGTH provides a
 *                   way for the program to limit the amount of data it
 *                   receives at one time.
 *                   <p>If the value specified is less than zero, zero is assumed.
 *                   If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 *                   If this option is omitted, the value indicated in the
 *                   LENGTH option is assumed.
 * @param NOTRUNCATE
 *                   specifies that, when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received from the conversation partner
 *                   in an MRO conversation. The pointer reference is valid
 *                   until the next receive command or the end of task.
 *                   <p>If DATALOCATION(ANY) is associated with the
 *                   application program, the address of the data can be
 *                   above or below the 16MB line.
 *                   <p>If DATALOCATION(BELOW) is associated with the
 *                   application program, and the data resides above the
 *                   16MB line, the data is copied below the 16MB line, and
 *                   the address of this copy is returned.
 *                   <p>If TASKDATAKEY(USER) is specified for the running
 *                   task, and storage protection is active, the data returned
 *                   is in a user-key. If TASKDATAKEY(CICS) is specified
 *                   and storage protection is active, the data returned is in a
 *                   CICS-key.
 */
function "RECEIVE <3790 3270-display>"(
   ASIS,
   BUFFER,
   FLENGTH(data-area),
   INTO(data-area),
   LENGTH(data-area),
   MAXFLENGTH(data-value),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref)
   );


/**
 * Receive screen input into an application data area. For further information about BMS, see the  CICS Application Programming
 * Guide.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE MAP(name)________________________________________________> |
 * |                        |_MAPSET(name)_|  |_INTO(data-area)_|           |
 * |                                          |_SET(ptr-ref)____|           |
 * |                                                                        |
 * |     _TERMINAL________________________________                          |
 * |    |           |_ASIS_|  |_INPARTN(name)_|   |                         |
 * | >__|_________________________________________|__><                     |
 * |    |_FROM(data-area)_________________________|                         |
 * |                       |_LENGTH(data-value)_|                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INVMPSZ, INVPARTN, INVREQ, MAPFAIL, PARTNFAIL,  |
 * | RDATT, UNEXPIN                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Note:  INPARTN is supported by Standard and full BMS                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RECEIVE MAP maps input data from a terminal into a data
 * area in an application program.
 * <p>Data from certain logical units is not mapped, but is left
 * unaltered. Refer to the appropriate CICS subsystem guide to
 * see if this is true for a particular logical unit.
 * Following a RECEIVE MAP command, the inbound cursor
 * position is placed in EIBCPOSN, and the terminal attention
 * identifier (AID) placed in EIBAID.
 * See Appendix K, "BMS macro summary" for
 * map definitions.
 * <p>If data is to be received, you must specify either the INTO or
 * the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID), you can omit both the INTO and the
 * SET options.
 *
 * @conditions
 * Some of the following conditions can occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <p>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>EOC<DD>
 * occurs if the request/response unit (RU) is received with
 * the end-of-chain (EOC) indicator set. It applies only to
 * logical units.
 * <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 * occurs if no data is received (only an FMH). It applies
 * only to 3770 batch LUs and to 3770 and 3790 batch
 * data interchange LUs.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVMPSZ<DD>
 * occurs if the specified map is too wide or too long for the
 * terminal.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if a RECEIVE MAP command is issued in a
 * nonterminal task; these tasks do not have a TIOA or a
 * TCTTE.
 * <p>Default action: terminate the task abnormally.
 * <DT>MAPFAIL<DD>
 * occurs if the data to be mapped has a length of zero or
 * does not contain a set-buffer-address (SBA) sequence. It
 * applies only to 3270 devices. The receiving data area
 * contains the unmapped input data stream. The amount
 * of unmapped data moved to the user's area is limited to
 * the length specified in the LENGTH option. The input
 * map is not set to nulls.
 * <p>This condition also arises if a program issues a
 * RECEIVE MAP command to which the terminal operator
 * responds by pressing a CLEAR or PA key, or by
 * pressing ENTER or a PF key without entering data.
 * <p>Default action: terminate the task abnormally.
 * <DT>PARTNFAIL<DD>
 * occurs if the terminal operator attempts to enter data
 * more than three times in a partition other than that
 * specified by the INPARTN option.
 * <p>Default action: terminate the task abnormally.
 * <DT>RDATT<DD>
 * occurs if a RECEIVE MAP command is terminated by
 * the operator using the ATTN key rather than the
 * RETURN key. It applies only to the 2741
 * <p>Communications Terminal, and only if 2741 read
 * attention support has been generated for CICS.
 * <p>Default action: ignore the condition.
 * <DT>UNEXPIN<DD>
 * occurs when unexpected or unrecognized data is
 * received. This only applies to batch data interchange
 * terminals.
 * <p>Default action: terminate the task abnormally.
 * @param ASIS
 *                  specifies that lowercase characters in the 3270 input
 *                  data stream are not translated to uppercase; this allows
 *                  the current task to receive a message containing both
 *                  uppercase and lowercase data.
 *                  <p>This option has no effect on the first RECEIVE
 *                  command of a transaction, or if the screen contains data
 *                  prior to a transaction being initiated. For example, if a
 *                  transaction is initiated by another transaction, and begins
 *                  by receiving data originally output by that transaction, it
 *                  cannot suppress uppercase translation on the data. This
 *                  data is read and translated in preparation for the next
 *                  task and the first RECEIVE command in that task
 *                  retrieves the translated data.
 *                  <p><b>Note</b>:   If you are using a katakana terminal, you might
 *                  see some messages containing mixed English
 *                  and katakana characters. That is because
 *                  katakana terminals cannot display mixed-case
 *                  output. Uppercase characters in the data stream
 *                  appear as uppercase English characters, but
 *                  lowercase characters appear as katakana
 *                  characters. If this happens, ask your system
 *                  programmer to specify MSGCASE=UPPER in the
 *                  system initialization parameters so that
 *                  messages contain uppercase characters only.
 * @param FROM(data-area)
 *                  specifies the data area containing the data to be
 *                  mapped by a RECEIVE MAP command. This includes
 *                  the 12-byte prefix generated by the TIOAPFX=YES
 *                  option on the DFHMDI and DFHMSD BMS map
 *                  definitions (see pages 441 and 448).
 * @param INPARTN(name)
 *                  specifies the name (1-2 characters) of the partition in
 *                  which the terminal operator is expected to enter data. If
 *                  the terminal operator enters data in some other partition,
 *                  the INPARTN partition is activated, the keyboard is
 *                  unlocked for the partition, and an error message is
 *                  output to any error message partition. This option is
 *                  ignored if the terminal does not support partitions, or if
 *                  there is no application partition set.
 * @param INTO(data-area)
 *                  specifies the data area into which the mapped data is to
 *                  be written. If this field is not specified, the name defaults
 *                  to the name of the map suffixed with an I.
 * @param LENGTH(data-value)
 *                  specifies the length of the data to be formatted as a
 *                  halfword binary value. It must not exceed the length of
 *                  the FROM data area, but this should include the length
 *                  of the 12-byte prefix generated by the TIOAPFX=YES
 *                  option on the DFHMDI and DFHMSD BMS map
 *                  definitions (see pages 441 and 448).
 *                  <p>For a description of a safe upper limit, see "LENGTH
 *                  options".
 * @param MAP(name)
 *                  specifies the name (1-7 characters) of the map to be
 *                  used.
 * @param MAPSET(name)
 *                  specifies the unsuffixed name (1-7 characters) of the
 *                  mapset to be used. The mapset must reside in the CICS
 *                  program library. The mapset can be defined either by
 *                  using RDO or by program autoinstall when the mapset is
 *                  first used. If this option is not specified, the name given
 *                  in the MAP option is assumed to be that of the mapset.
 * @param SET(ptr-ref)
 *                  specifies the pointer that is to be set to the address of
 *                  the 12-byte prefix to the mapped data.
 *                  The pointer reference is valid until the next receive
 *                  command or the end of task.
 *                  <p>If DATALOCATION(ANY) is associated with the
 *                  application program, the address of the data may be
 *                  above or below the 16MB line.
 *                  <p>If DATALOCATION(BELOW) is associated with the
 *                  application program, and the data resides above the
 *                  16MB line, the data is copied below the 16MB line, and
 *                  the address of this copy is returned.
 *                  <p>If TASKDATAKEY(USER) is specified for the running
 *                  task, and storage protection is active, the data returned
 *                  is in a user-key. If TASKDATAKEY(CICS) is specified
 *                  and storage protection is active, the data returned is in a
 *                  CICS-key.
 * @param TERMINAL
 *                  specifies that input data is to be read from the terminal
 *                  that originated the transaction.
 */
function "RECEIVE MAP"(
   MAP(name),
   ASIS,
   FROM(data-area),
   INPARTN(name),
   INTO(data-area),
   LENGTH(data-value),
   MAPSET(name),
   SET(ptr-ref),
   TERMINAL,
   );

/**
 * Receive screen input into an application data area, without reference to the principal facility, if any. Terminal characteristics are
 * obtained from the MAPPINGDEV parameter. For further information about BMS, see the  CICS Application Programming Guide.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE MAP(name)__MAPPINGDEV(data-value)__FROM(data-area)_______> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LENGTH(data-value)_|  |_MAPSET(name)_|                            |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INTO(data-area)_|                                                 |
 * |    |_SET(ptr-ref)____|                                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVMPSZ, INVREQ, MAPFAIL                                   |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</B>
 * <P>RECEIVE MAP MAPPINGDEV allows the mapping of input
 * data from a 3270 terminal that is not necessarily the principal
 * facility of the transaction.
 * <P>MAPPINGDEV specifies the name of a 3270 terminal whose
 * BMS characteristics were used to create the input data
 * stream. This may be a terminal from which the data was
 * originally received using a RECEIVE command.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <DL>
 * <DT>INVMPSZ<DD>
 * occurs if the specified map is too wide or too long for the
 * terminal.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if the terminal specified by MAPPINGDEV does
 * not exist, does not support BMS, or is not a 3270 printer
 * or display.
 * <p>Default action: terminate the task abnormally.
 * <DT>MAPFAIL<DD>
 * occurs if the data to be mapped has a length of zero or
 * does not contain a set-buffer-address (SBA) sequence.
 * <p>Default action: terminate the task abnormally.
 * </DL>
 * @param AID(data-value)
 *                  specifies the one-byte data area containing the value of
 *                  the 3270 attention identifier (AID) to be used when
 *                  performing the mapping operation. Usually this will be
 *                  the value contained in EIBAID following the RECEIVE
 *                  operation that originally received the datastream from
 *                  the terminal.
 *                  <P>The value specified is moved into field EIBAID in the
 *                  EXEC interface block on completion of the operation. No
 *                  check is made that the AID value specified is valid.
 *                  <P>If AID(data-value) is not specified, then the AID value
 *                  defaults to X'7D' (the Enter key).
 *                  <p>If the AID byte (either explicitly, or by default) indicates
 *                  an operation other than CLEAR, PA1, PA2, or PA3, and
 *                  CURSLOC=YES is specified for the map, then the field
 *                  containing the cursor is flagged by setting the X'02' bit in
 *                  its flag byte.
 *                  <p>If the AID (whether specified explicitly, or by default) is
 *                  the subject of a HANDLE AID command, the specified
 *                  branch will be taken in the usual way.
 * @param CURSOR(data-value)
 *                  specifies an unsigned halfword binary field containing
 *                  the cursor position (relative to zero) to be used. Usually
 *                  this will be the value contained in EIBCPOSN following
 *                  the RECEIVE operation that originally received the
 *                  datastream from the terminal.
 *                  <p>The value specified is moved into EIBCPOSN in the
 *                  EXEC interface block on completion of the operation. No
 *                  check is made that the CURSOR value specified is valid.
 *                  <p>If CURSOR(data-value) is not specified, then the cursor
 *                  value defaults to X'0000'.
 * @param FROM(data-area)
 *                  specifies the data area containing the data to be
 *                  mapped. This must be in the format of a TIOA and must
 *                  contain a 12-byte prefix.
 * @param INTO(data-area)
 *                  specifies the data area into which the mapped data is to
 *                  be written. If this field is not specified, the name defaults
 *                  to the name of the map suffixed with an I.
 * @param LENGTH(data-value)
 *                  specifies the length of the data to be formatted as a
 *                  halfword binary value. It must not exceed the length of
 *                  the FROM data area, but this should include the length
 *                  of the 12-byte prefix generated by the TIOAPFX=YES
 *                  option on the DFHMDI and DFHMSD BMS map
 *                  definitions (see pages 441 and 448).
 *                  <p>For a description of a safe upper limit, see "LENGTH
 *                  options".
 * @param MAP(name)
 *                  specifies the name (1-7 characters) of the map to be
 *                  used.
 * @param MAPPINGDEV(data-value)
 *                  specifies the name of a 3270 terminal whose
 *                  characteristics match those of the terminal from which
 *                  the data was originally received using a RECEIVE
 *                  command.
 * @param MAPSET(name)
 *                  specifies the unsuffixed name (1-7 characters) of the
 *                  mapset to be used. The mapset must reside in the CICS
 *                  program library. The mapset can be defined either by
 *                  using RDO or by program autoinstall when the mapset is
 *                  first used. If this option is not specified, the name given
 *                  in the MAP option is assumed to be that of the mapset.
 * @param SET(ptr-ref)
 *                  specifies the pointer that is to be set to the address of
 *                  the 12-byte prefix to the mapped data.
 *                  The pointer reference is valid until the next RECEIVE or
 *                  RECEIVE MAP command, or until the end of the
 *                  transaction, unless FREEMAINed by the application.
 *                  <p>If "TASKDATALOC(ANY)" is specified for the running
 *                  task, the data returned may be above or below the
 *                  16MB line.
 *                  <p>If "TASKDATALOC(BELOW)" is specified for the running
 *                  task,the data returned is below the 16MB line.
 *                  <p>If "TASKDATAKEY(USER)" is specified for the running
 *                  task, and storage protection is active, the data returned
 *                  is in user-key. If "TASKDATAKEY(CICS)" is specified
 *                  and storage protection is active, the data returned is in
 *                  CICS-key.
 */
function "RECEIVE MAP <MAPPINGDEV>"(
   MAP(name),
   MAPPINGDEV(data-value),
   AID(data-value),
   CURSOR(data-value),
   FROM(data-area),
   INTO(data-area),
   LENGTH(data-value),
   MAPSET(name),
   SET(ptr-ref),
   );

/**
 * Receive data from an 8775 terminal partition. This command is only available on standard and full BMS. For further information
 * about BMS, see the  CICS Application Programming Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RECEIVE PARTN(data-area)__><                                       |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Standard and full BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>____INTO(data-area)____LENGTH(data-value)____________><              |
 * |     |_SET(ptr-ref)____|                      |_ASIS_|                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EOC, EODS, INVPARTN, INVREQ, LENGERR                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>RECEIVE PARTN reads data from a partition on an 8775
 * terminal. It indicates which partition the data came from, and
 * puts the data into the INTO or the SET data area. You can
 * then treat the data as though it had originated from a
 * terminal in base (unpartitioned) state.
 * <p>Following a RECEIVE PARTN command, the inbound cursor
 * position is placed in EIBCPOSN, and the terminal attention
 * identifier (AID) placed in EIBAID. EIBAID and EIBCPOSN are
 * also updated at task initiation for non-ATI tasks as well as
 * after each terminal control and BMS input.
 * <p>See Appendix K, "BMS macro summary" for
 * map definitions.
 * <p>If data is to be received, you must specify either the INTO or
 * the SET option. If a RECEIVE is issued purely to detect an
 * attention identifier (AID), you can omit both the INTO and the
 * SET options.
 *
 * @param ASIS
 * specifies that lowercase characters in the 3270 input
 * data stream are not translated to uppercase; this allows
 * the current task to receive a message containing both
 * uppercase and lowercase data.
 * <p>The ASIS option has no effect on the first RECEIVE
 * command of a transaction, or if the screen contains data
 * prior to a transaction being initiated. For example, if a
 * transaction is initiated by another transaction, and begins
 * by receiving data originally output by that transaction, it
 * cannot suppress uppercase translation on the data. This
 * data is read and translated in preparation for the next
 * task and the first RECEIVE command in that task
 * retrieves the translated data.
 * <p><b>Note</b>:   If you are using a katakana terminal, you might
 * see some messages containing mixed English
 * and katakana characters. That is because
 * katakana terminals cannot display mixed-case
 * output. Uppercase characters in the data stream
 * appear as uppercase English characters, but
 * lowercase characters appear as katakana
 * characters. If this happens, ask your system
 * programmer to specify MSGCASE=UPPER in the
 * system initialization parameters so that
 * messages contain uppercase characters only.
 * @param INTO(data-area)
 * specifies the area into which the input data stripped of
 * partition controls is to be written. The length of this area
 * must be specified by the LENGTH option. If the area is
 * not large enough to hold the input data, the input data is
 * truncated, and the LENGERR condition raised. The
 * length option data area is set to the length of data
 * received, prior to any truncation.
 * @param LENGTH(data-value)
 * specifies the length of the data to be formatted as a
 * halfword binary value. It must be set to the length of any
 * INTO area prior to the command. After the command,
 * BMS sets the LENGTH option to the length of data
 * received prior to any truncation if the INTO area is too
 * small.
 * <p>For a description of a safe upper limit, see "LENGTH
 * options".
 * @param PARTN(data-area)
 * is set to the name (1-2 characters) of the input partition.
 * The partition can be defined either by using RDO or by
 * program autoinstall when the partition is first used.
 * @param SET(ptr-ref)
 * specifies the pointer that is to be set to the address of
 * the 12-byte prefix to the mapped data. The pointer
 * reference is valid until the next receive command or the
 * end of task.
 * <p>If DATALOCATION(ANY) is associated with the
 * application program, the address of the data may be
 * above or below the 16MB line.
 * <p>If DATALOCATION(BELOW) is associated with the
 * application program, and the data resides above the
 * 16MB line, the data is copied below the 16MB line, and
 * the address of this copy is returned.
 * <p>If TASKDATAKEY(USER) is specified for the running
 * task, and storage protection is active, the data returned
 * is in a user-key. If TASKDATAKEY(CICS) is specified
 * and storage protection is active, the data returned is in a
 * CICS-key.
 * @conditions
 * Some of the following conditions can occur in combination. If
 * more than one occurs, only the first one is passed to the
 * application program.
 * <DL>
 * <DT>EOC<DD>
 * occurs if the request/response unit (RU) is received with
 * the end-of-chain (EOC) indicator set. It applies only to
 * logical units.
 * <p>Default action: ignore the condition.
 * <DT>EODS<DD>
 * occurs if no data is received (only an FMH). It applies
 * only to 3770 batch LUs and to 3770 and 3790 batch
 * data interchange LUs.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if a RECEIVE PARTN command is issued in a
 * nonterminal task; these tasks do not have a TIOA or a
 * TCTTE.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if the INTO area of a RECEIVE PARTN
 * command is not large enough to hold the input data.
 * <p>Default action: truncate the data to fit within the INTO
 * area.
 * </DL>
 */
function "RECEIVE PARTN"(
   PARTN(data-area),
   ASIS,
   INTO(data-area),
   LENGTH(data-value),
   SET(ptr-ref),
   );

/**
 * Release a loaded program, table, or mapset.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RELEASE__PROGRAM(name)__><                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTAUTH, PGMIDERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using RELEASE of a program LOADed with HOLD could create inter-transaction affinities that adversely affect the use of
 * dynamic transaction routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>RELEASE releases the program, table, or mapset previously
 * loaded by a LOAD command. This means that the issuing
 * task can no longer use the resource unless another LOAD is
 * issued.
 * <p>If the HOLD option is specified in the LOAD command, the
 * loaded resource is not released at the end of the task. It can
 * only be released by a RELEASE command. This RELEASE
 * command may be issued by the task that loaded the
 * resource or by any other task.
 * <p>If the HOLD option is not specified in the LOAD command,
 * the loaded resource is released at the end of the task. It
 * may, however, be released before this by the task that
 * loaded the resource issuing a RELEASE command.
 *
 * @param PROGRAM(name)
 * specifies the identifier (1-8 characters) of a program,
 * table, or mapset to be released.
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>5<DD> An invalid attempt is made by the program to
 * release itself. A RELEASE command for the
 * program that contains this command is allowed
 * only when a corresponding LOAD command for
 * the program has been issued from the same task,
 * or when a LOAD command with the HOLD option
 * has been issued from another task.
 * <DT>6<DD> The command is issued for a program that is not
 * loaded.
 * <DT>7<DD> The command is issued for a program that was
 * loaded, without the HOLD option, by another task.
 * <DT>17<DD> The program is defined with RELOAD=YES. It
 * must be released by a FREEMAIN rather than a
 * RELEASE command.
 * <DT>30<DD> The program manager domain has not yet been
 * initialized. This is probably due to a release
 * request having been made in a first stage PLT.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * PROGRAM(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>PGMIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> A program, table, or mapset has no entry in the
 * PPT.
 * <DT>2<DD> A program, table, or mapset is disabled.
 * <DT>9<DD> The installed program definition is for a remote
 * program.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to release an application
 * program, called PROG4, loaded in response to a LOAD
 * command:
 * <pre>
 * EXEC CICS RELEASE PROGRAM('PROG4')
 * </pre>
 */
function "RELEASE"(
   PROGRAM(name),
   );

/**
 * Reset start of browse.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RESETBR__FILE(filename)__RIDFLD(data-area)_______________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_KEYLENGTH(data-value)______________|  |_REQID(data-value)_|       |
 * |                             |_GENERIC_|                                |
 * |                                                                        |
 * |                            _GTEQ__                                     |
 * | >_________________________|_______|___________><                       |
 * |    |_SYSID(systemname)_|  |_EQUAL_|  |_RBA_|                           |
 * |                                      |_RRN_|                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: FILENOTFOUND, ILLOGIC, INVREQ, IOERR, ISCINVREQ, NOTAUTH,  |
 * | NOTFND, SYSIDERR                                                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RESETBR specifies, during a browse, the record in a file or
 * data table on a local or a remote system, where you want
 * the browse to be repositioned.
 * <p>When browsing a VSAM file or data table, you can use this
 * command not only to reposition the browse (which can be
 * achieved more simply by modifying the RIDFLD data area on
 * a READNEXT or READPREV command), but also to change
 * its characteristics from those specified on STARTBR, without
 * ending the browse. The characteristics that may be changed
 * are those specified by the GENERIC, GTEQ, and RBA
 * options.
 * <p>When browsing a BDAM file, you can include this command
 * at any time prior to issuing any other browse command. It is
 * similar to an ENDBR-STARTBR sequence (but with less
 * function), and gives the BDAM user the sort of skip
 * sequential capability that is available to VSAM users through
 * use of the READNEXT command.
 * <p>If a RESETBR request specifies the precise key at which the
 * browse is to start (that is, it specifies a full key and the
 * EQUAL keyword) the record returned on the following
 * READNEXT (or READPREV) may not be the same as the
 * record specified by the RESETBR for a file opened in VSAM
 * NSR or RLS mode. This can occur because the initial record
 * specified on the RESETBR command can be deleted by
 * another transaction in between the RESETBR completing
 * and a READNEXT or READPREV being issued. In VSAM
 * LSR mode, the initial record cannot be deleted between the
 * RESETBR and the READNEXT.
 *
 * @conditions
 * <b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <DL>
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values VSAM):
 * <DL compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * (See EIBRCODE in the EXEC interface block,
 * starting on 387.)
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>25<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is greater than or equal to the
 * length of a full key.
 * <DT>26<DD> The KEYLENGTH option is specified (but the
 * GENERIC option is not specified), and the
 * specified length does not equal the length defined
 * for the data set to which this file refers.
 * <DT>36<DD> The REQID, if any, does not match that of any
 * successful STARTBR command.
 * <DT>42<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is less than zero.
 * <DT>44<DD> The command does not conform to the format of
 * RESETBR for a user-maintained or coupling
 * facility data table; for example, RBA is specified.
 * <DT>51<DD> A RESETBR command to a KSDS file that is
 * being accessed in RLS mode specifies the RBA
 * keyword. RLS mode does not support RBA access
 * to KSDS data sets.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>(Further information is available in the EXEC
 * interface block, defined on 387.)
 *
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </DL>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>80<DD> An attempt to retrieve a record based on the
 * search argument provided is unsuccessful.
 * NOTFND can also occur if a generic RESETBR
 * with KEYLENGTH(0) specifies the EQUAL option.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local CICS region nor a remote system (as
 * defined by a CONNECTION definition).
 * SYSIDERR also occurs when the link to the
 * remote system is closed
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The RESETBR is issued against a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param EQUAL
 *                specifies that the search is satisfied only by a record
 *                having the same key (complete or generic) as that
 *                specified in the RIDFLD option.
 * @param FILE(filename)
 *                (VSAM and data table) specifies the name of the file to
 *                be accessed.
 *                <p>If SYSID is specified, the data set to which this file refers
 *                is assumed to be on a remote system irrespective of
 *                whether the name is defined in the FCT. Otherwise, the
 *                FCT entry is used to find out whether the data set is on
 *                a local or a remote system.
 * @param GENERIC
 *                (VSAM KSDS, path or data table) specifies that the
 *                search key is a generic key whose length is specified in
 *                the KEYLENGTH option. The search for a record is
 *                satisfied when a record is found that has the same
 *                starting characters (generic key) as those specified.
 * @param GTEQ
 *                (VSAM and data table) specifies that if the search for a
 *                record having the same key (complete or generic) as
 *                that specified in the RIDFLD option is unsuccessful, the
 *                first record having a greater key is retrieved. Use this
 *                option only with keyed or RRN.
 * @param KEYLENGTH(data-value)
 *                specifies the length (halfword binary) of the key that has
 *                been specified in the RIDFLD option, except when RBA
 *                or RRN is specified, in which case KEYLENGTH is not
 *                valid.
 *                <p>This option must be specified if GENERIC is specified,
 *                and it can be specified whenever a key is specified. If
 *                the length specified is different from the length defined
 *                for the data set and the operation is not generic, the
 *                INVREQ condition occurs.
 *                <p>The INVREQ condition also occurs if a RESETBR
 *                command specifies GENERIC, and the KEYLENGTH is
 *                not less than that specified in the VSAM definition.
 *                <p>If KEYLENGTH(0) is used with the object of reading the
 *                first record in the data set, the GTEQ option must also
 *                be specified. If EQUAL is specified either explicitly or by
 *                default with KEYLENGTH(0), the results of the
 *                STARTBR are unpredictable.
 * @param RBA
 *                (VSAM KSDS or ESDS base data sets, or
 *                CICS-maintained data tables only, not paths) specifies
 *                that the record identification field specified in the
 *                RIDFLD option contains a relative byte address. Use this
 *                option only when browsing a KSDS and using relative
 *                byte addresses instead of keys to identify the records.
 *                You cannot use RBA for:
 *                <UL>
 *                <LI>User-maintained data tables
 *                <LI>Coupling facility data tables
 *                <LI>KSDS files that hold more than 4GB
 *                <LI>Any KSDS files opened in RLS access mode
 *                </UL>
 * @param REQID(data-value)
 *                specifies as a halfword binary value a unique request
 *                identifier for a browse, used to control multiple browse
 *                operations on a data set. If this option is not specified, a
 *                default value of zero is assumed.
 * @param RIDFLD(data-area)
 *                specifies the record identification field. The contents can
 *                be a key, a relative byte address, or a relative record
 *                number (for VSAM data sets), or a block reference,
 *                physical key, and a deblocking argument (for BDAM
 *                data sets). For a relative byte address or a relative
 *                record number, the format of this field must be fullword
 *                binary. For a relative byte address, the RIDFLD can be
 *                greater than or equal to zero. For a relative record
 *                number, the RIDFLD can be greater than or equal to 1.
 *                For VSAM, a full record id of X'FF's indicates that the
 *                browse is to be positioned at the end of the data set in
 *                preparation for a backwards browse using READPREV
 *                commands.
 * @param RRN
 *                (VSAM RRDS) specifies that the record identification
 *                field specified in the RIDFLD option contains a relative
 *                record number.
 * @param SYSID(systemname)
 *                specifies the name of the system to which the request is
 *                directed.
 *                <p>If you specify SYSID, and omit both RBA and RRN, you
 *                must also specify KEYLENGTH; it cannot be found in
 *                the FCT.
 */
function "RESETBR"(
   EQUAL,
   FILE(filename),
   GENERIC,
   GTEQ,
   KEYLENGTH(data-value),
   RBA,
   REQID(data-value),
   RIDFLD(data-area),
   RRN,
   SYSID(systemname),
   );

/**
 * Retrieve data stored for a task.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RETRIEVE____INTO(data-area)______________________________________> |
 * |               |_SET(ptr-ref)____|  |_LENGTH(data-area)_|               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RTRANSID(data-area)_|  |_RTERMID(data-area)_|                     |
 * |                                                                        |
 * | >__________________________________><                                  |
 * |    |_QUEUE(data-area)_|  |_WAIT_|                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ENDDATA, ENVDEFERR, INVREQ, IOERR, LENGERR, NOTFND         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * Using RETRIEVE with WAIT could create inter-transaction affinities that adversely affect the use of dynamic transaction
 * routing. See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>The RETRIEVE command retrieves data stored by expired
 * START commands. It is the only method available for
 * accessing such data.
 * <p>A task that is not associated with a terminal can access only
 * the single data record associated with the original START
 * command; it does so by issuing a RETRIEVE command. The
 * storage occupied by the data associated with the task is
 * normally released on execution of the RETRIEVE command,
 * or on termination of the task if no RETRIEVE command is
 * executed prior to termination.
 * <p>If the START command specified ATTACH, the storage is
 * not released. (ASSIGN STARTCODE in such a task returns
 * 'U' rather than 'S' or 'SD').
 * <p>A task that is associated with a terminal can access all data
 * records associated with all expired START commands having
 * the same transaction identifier and terminal identifier as this
 * task, that is the task issuing the RETRIEVE command; it
 * does so by issuing consecutive RETRIEVE commands.
 * Expired data records are presented to the task on request in
 * expiration-time sequence, starting with any data stored by
 * the command that started the task, and including data from
 * any commands that have expired since the task started.
 * Each data record is retrieved from temporary storage using
 * the REQID of the original START command as the
 * identification of the record in temporary storage.
 * <p>When all expired data records have been retrieved, the
 * ENDDATA condition occurs. The storage occupied by the
 * single data record associated with a START command is
 * released after the data has been retrieved by a RETRIEVE
 * command; any storage occupied by data that has not been
 * retrieved is released when the CICS system is terminated.
 * If the retrieved data contains FMHs (Function Management
 * Headers), as specified by the FMH option on the associated
 * START command, field EIBFMH in the EIB is set to X'FF'. If
 * no FMH is present, EIBFMH is set to X'00'.
 *
 * @conditions
 * <DL>
 * <DT>ENDDATA<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>No more data is stored for the task issuing a
 * RETRIEVE command. It can be considered a
 * normal end-of-file response when retrieving data
 * records sequentially.
 * <LI>The RETRIEVE command is issued by a task that is
 * started by a START command that did not specify
 * any of the data options FROM, RTRANSID,
 * RTERMID, or QUEUE.
 * <LI>The RETRIEVE command is issued by a
 * nonterminal task that was not created as a result of
 * a START command.
 * <LI>WAIT was specified and the task was waiting for a
 * data record but none became available before the
 * deadlock time-out interval (see the DTIMOUT option
 * of RDO DEFINE TRANSACTION).
 * <LI>WAIT was specified and the task was waiting when
 * CICS entered shutdown. An attempt to issue
 * RETRIEVE WAIT during shutdown leads to an AICB
 * abend if there is no data record already available to
 * satisfy the request.
 * <LI>A RETRIEVE command with the WAIT option is
 * issued when no data is available; the task was
 * initiated by a START command that specified an
 * APPC connection or terminal in the TERMID option.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * <DT>ENVDEFERR<DD>
 * occurs when a RETRIEVE command specifies an option
 * not specified by the corresponding START command.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if the RETRIEVE command is not valid for
 * processing by CICS.
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs if an input/output error occurs during a
 * RETRIEVE operation. The operation can be retried by
 * reissuing the RETRIEVE command.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if the length specified is less than the actual
 * length of the stored data.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>A RETRIEVE command is issued, but some prior
 * task retrieved the data stored under the request
 * identifier directly through temporary storage
 * requests and then released the data.
 * <LI>The request identifier associated with the START
 * command is not unique, so when a RETRIEVE
 * command is issued, CICS cannot find the data.
 * </UL>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to retrieve data stored by
 * a START command for the task, and store it in the
 * user-supplied data area called DATAFLD.
 * <pre>
 * EXEC CICS RETRIEVE
 *   INTO(DATAFLD)
 *   LENGTH(LENG)
 * </pre>
 * The following example shows how to request retrieval of a
 * data record stored for a task into a data area provided by
 * CICS; the pointer reference (PREF) specified by the SET
 * option is set to the address of the storage area reserved for
 * the data record.
 * <pre>
 * EXEC CICS RETRIEVE
 *   SET(PREF)
 *   LENGTH(LENG)
 * </pre>
 * @param INTO(data-area)
 *               specifies the user data area into which retrieved data is
 *               to be written.
 * @param LENGTH(data-area)
 *               specifies a halfword binary value to define the length of
 *               the data area the retrieved data is written into.
 *               <p>If you specify the INTO option, the argument must be a
 *               data area that specifies the maximum length of data that
 *               the program is prepared to handle. If the value specified
 *               is less than zero, zero is assumed. If the length of the
 *               data exceeds the value specified, the data is truncated
 *               to that value and the LENGERR condition occurs. On
 *               completion of the retrieval operation, the data area is set
 *               to the original length of the data.
 *               <p>If you specify the SET option, the argument must be a
 *               data area. On completion of the retrieval operation, the
 *               data area is set to the length of the data.
 *               <p>For a description of a safe upper limit, see "LENGTH
 *               options"
 * @param QUEUE(data-area)
 *               specifies the 8-character area for the temporary storage
 *               queue name that may be accessed by the transaction
 *               issuing the RETRIEVE command.
 * @param RTERMID(data-area)
 *               specifies a 4-character area that can be used in the
 *               TERMID option of a START command that may be
 *               executed subsequently.
 * @param RTRANSID(data-area)
 *               specifies a 4-character area that can be used in the
 *               TRANSID option of a START command that may be
 *               executed subsequently.
 * @param SET(ptr-ref)
 *               specifies the pointer reference to be set to the address
 *               of the retrieved data.
 *               <p>If DATALOCATION(ANY) is associated with the
 *               application program, the address of the data may be
 *               above or below the 16MB line.
 *               <p>If DATALOCATION(BELOW) is associated with the
 *               application program, and the data resides above the
 *               16MB line, the data is copied below the 16MB line, and
 *               the address of this copy is returned.
 *               <p>If TASKDATAKEY(USER) is specified for the running
 *               task, and storage protection is active, the data returned
 *               is in a user-key. If TASKDATAKEY(CICS) is specified
 *               and storage protection is active, the data returned is in a
 *               CICS-key.
 *               <p>If you use SET you must also include LENGTH.
 * @param WAIT
 *               specifies that, if all expired data records have already
 *               been retrieved, the task is to be put into a wait state until
 *               further expired data records become available. Although
 *               this means that the ENDDATA condition is not raised at
 *               the time the RETRIEVE command is issued, it is raised
 *               later if CICS enters shutdown or if the task is subject to
 *               deadlock time-out and it waits for longer than the
 *               deadlock time-out interval. (See the DTIMOUT option of
 *               RDO DEFINE TRANSACTION.)
 *               <p>An attempt to issue RETRIEVE WAIT during shutdown
 *               leads to an AICB abend if there is no data record
 *               already available to satisfy the request.
 *               If you use WAIT, you must have at least one other
 *               option.
 */
function "RETRIEVE"(
   INTO(data-area),
   LENGTH(data-area),
   QUEUE(data-area),
   RTERMID(data-area),
   RTRANSID(data-area),
   SET(ptr-ref),
   WAIT,
   );

/**
 * Return program control.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__RETURN___________________________________________________________> |
 * |             |_TRANSID(name)__| RET3 |________________|                 |
 * |                                        |_IMMEDIATE_|                   |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_INPUTMSG(data-area)______________________________|                |
 * |                           |_INPUTMSGLEN(data-value)_|                  |
 * |                                                                        |
 * | RET3:                                                                  |
 * | |___________________________________________________|                  |
 * |    |_COMMAREA(data-area)_________________________|                     |
 * |                           |_LENGTH(data-value)_|                       |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>RETURN returns control from an application program either
 * to an application program at the next higher logical level, or
 * to CICS.
 * <p>The LENGTH option specifies the length of the data to be
 * passed. The LENGTH value being passed must not be
 * greater than the length of the data area specified in the
 * COMMAREA option. If it is, the results are unpredictable and
 * may result in a LENGERR condition, as described in the
 * section about passing data to other programs in the  CICS
 * Application Programming Guide.
 * <p>The valid range for the COMMAREA length is 0 through
 * 32 763 bytes. If the length provided is outside this range, the
 * LENGERR condition occurs. The COMMAREA and
 * IMMEDIATE options can be used only when the RETURN
 * command is returning control to CICS; otherwise, the
 * INVREQ condition occurs.
 * <p>No resource security checking occurs on the RETURN
 * TRANSID command. However, transaction security checking
 * is still available when CICS attaches the returned transaction.
 * For information about the use of this command in the CICS
 * BTS environment, see the  CICS Business Transaction
 * Services manual.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <DL compact>
 * <DT>1<DD> A RETURN command with the TRANSID option is
 * issued in a program that is not associated with a
 * terminal.
 * <DT>2<DD> A RETURN command with the COMMAREA or
 * IMMEDIATE option is issued by a program that is
 * not at the highest logical level.
 * <DT>4<DD> A RETURN command with the TRANSID option is
 * issued in a program that is associated with an
 * APPC logical unit.
 * <DT>8<DD> A RETURN command with the INPUTMSG option
 * is issued for a program that is not associated with
 * a terminal, or that is associated with an APPC
 * logical unit, or an IRC session.
 * <DT>30<DD> PG domain not initialized. Parameters are not
 * allowed on the EXEC RETURN statement in first
 * stage PLT programs.
 * <DT>200<DD> A RETURN command is issued with an
 * INPUTMSG option by a program invoked by DPL.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>11<DD> The COMMAREA length is less than 0 or greater
 * than 32763.
 * <DT>26<DD> The COMMAREA ADDRESS passed was zero,
 * but the commarea length was non-zero.
 * <DT>27<DD> The INPUTMSG LENGTH was less than 0 or
 * greater than 32767.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param INPUTMSGLEN(data-value)
 *                  specifies a halfword binary value to be used with
 *                  INPUTMSG.
 * @param LENGTH(data-value)
 *                  specifies a halfword binary value that is the length in
 *                  bytes of the COMMAREA. For a description of a safe
 *                  upper limit, see "LENGTH options".
 * @param TRANSID(name)
 *                  specifies the transaction identifier (1-4 characters) to be
 *                  used with the next input message entered from the
 *                  terminal with which the task that issued the RETURN
 *                  command has been associated. The specified name
 *                  must have been defined as a transaction to CICS.
 *                  <p>If TRANSID is specified for a program running on a
 *                  terminal that is defined with a permanent transaction ID,
 *                  the terminal's permanent transaction is initiated next
 *                  rather than the transaction specified on the RETURN.
 *                  <p>If you specify a TRANSID of binary zeros, the
 *                  transaction identifier for the next program to be
 *                  associated with the terminal may be determined from
 *                  subsequent input from the terminal. Issuing a RETURN
 *                  with a TRANSID of binary zeros and a COMMAREA can
 *                  cause unpredictable results if the next transaction is not
 *                  coded to handle the COMMAREA or if it receives a
 *                  COMMAREA not intended for it.
 *                  <p>If you specify TRANSID on a program that is not at the
 *                  highest level, and there is a subsequent error on
 *                  COMMAREA or INPUTMSG on the final RETURN, the
 *                  TRANSID is cleared.
 *                  <p>The next transaction identifier is also cleared on an
 *                  abnormal termination of the transaction.
 *                  <p>If IMMEDIATE is specified with this option, control is
 *                  passed to the transaction specified in the TRANSID
 *                  option in preference to any transactions enqueued by
 *                  ATI.
 *                  <p>If IMMEDIATE is not specified with this option, an ATI
 *                  initiated transaction of the same name enqueued to the
 *                  terminal nullifies this option.
 *                  <p>This option is not valid if the transaction issuing the
 *                  RETURN command is not associated with a terminal, or
 *                  is associated with an APPC logical unit.
 * @param INPUTMSG(data-area)
 *                  specifies data to be passed either to another transaction,
 *                  identified by the TRANSID option, or to a calling
 *                  program in a multiprogram transaction. You can also use
 *                  INPUTMSG when returning control to CICS from a
 *                  user-written dynamic transaction routing program, when
 *                  you might want to modify the initial input.
 *
 *
 *                  <p>In all cases, the data in the INPUTMSG data area is
 *                  passed to the first program to issue a RECEIVE
 *                  command following the RETURN.
 *                  <p>See the  CICS Application Programming Guide for more
 *                  information and illustrations about the use of
 *                  INPUTMSG.
 * @param IMMEDIATE
 *                  ensures that the transaction specified in the TRANSID
 *                  option is attached as the next transaction regardless of
 *                  any other transactions enqueued by ATI for this terminal.
 *                  The next transaction starts immediately and appears to
 *                  the operator as having been started by terminal data. If
 *                  the terminal is using bracket protocol, the terminal is
 *                  also held in bracket. This option is valid only on a
 *                  RETURN command issued by a program at the highest
 *                  logical level, that is a program returning control to CICS.
 *                  Note that in a multi region environment, using
 *                  IMMEDIATE does not affect the transaction definition as
 *                  this is still found in the terminal-owning region (TOR).
 * @param COMMAREA(data-area)
 *                  specifies a communication area that is to be made
 *                  available to the next program that receives control. In a
 *                  COBOL receiving program, you must give this data area
 *                  the name DFHCOMMAREA. (See the  CICS Application
 *                  Programming Guide for more information about the
 *                  CICS COMMAREA.) Because the data area is freed
 *                  before the next program starts, a copy of the data area
 *                  is created and a pointer to the copy is passed.
 *                  The communication area specified is passed to the next
 *                  program that runs at the terminal. To ensure that the
 *                  communication area is passed to the correct program,
 *                  include the IMMEDIATE option.
 *                  <p>This option is valid only on a RETURN command issued
 *                  by a program at the highest logical level, that is, a
 *                  program returning control to CICS.
 * @param ENDACTIVITY
 *                  This option is for use by programs that implement CICS
 *                  business transaction services (BTS)activities.
 *                  <p>For information about BTS in general and the
 *                  ENDACTIVITY option in particular, see the  CICS
 *                  Business Transaction Services manual.
 *                  <p>This option is ignored outside the CICS BTS
 *                  environment.
 */
function "RETURN"(
   INPUTMSGLEN(data-value),
   LENGTH(data-value),
   TRANSID(name),
   INPUTMSG(data-area),
   IMMEDIATE,
   COMMAREA(data-area),
   ENDACTIVITY,
   );

/**
 * Rewind a named counter that has reached its limit (that is, the maximum number has been assigned).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * | >>__REWIND COUNTER(name)_____________________________________________> |
 * |                           |_POOL(name)_| |_INCREMENT(data-value)_|     |
 * |                                                                        |
 * | Conditions: INVREQ, SUPPRESSED                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>These counter commands reset the current value of the
 * named counter to its defined mimimum number. COUNTER
 * operates on fullword counters and DCOUNTER operates on
 * doubleword counters.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The INCREMENT value is invalid. The value
 * specified cannot be greater than the total range of
 * the counter ((maximum value - minimum value)
 * +  1).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>102<DD> The named counter has not yet reached its limit
 * (that is, the current value is not equal to the
 * maximum value plus 1, giving the counter-at-limit
 * condition). This error condition is returned if the
 * named counter is not at its limit even after
 * applying any specified increment.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param COUNTER(name)
 *               specifies the name of the named counter that is to be
 *               reset to its minimum value. The name can be up to 16
 *               alphanumeric characters. If  name is a variable that
 *               contains a name that is less than 16 characters, the
 *               name must be padded with trailing blanks.
 * @param INCREMENT(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), an increment to
 *               be used in determining whether the named counter is in
 *               a valid state to be reset. If a previous GET command
 *               (which did not specify the REDUCE option) specified an
 *               increment that caused the GET command to fail, specify
 *               the same increment on the REWIND. The named
 *               counter server applies the increment before testing
 *               whether the counter is in a counter-at-limit condition.
 *               See the the INCREMENT option on the GET command
 *               for more details.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "REWIND COUNTER"(
   COUNTER(name),
   INCREMENT(data-value),
   POOL(poolname),
   );


/**
 * Rewind a named counter that has reached its limit (that is, the maximum number has been assigned).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * | >>__REWIND DCOUNTER(name)____________________________________________> |
 * |                            |_POOL(name)_| |_INCREMENT(data-value)_|    |
 * |                                                                        |
 * | Conditions: INVREQ, SUPPRESSED                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>These counter commands reset the current value of the
 * named counter to its defined mimimum number. COUNTER
 * operates on fullword counters and DCOUNTER operates on
 * doubleword counters.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The INCREMENT value is invalid. The value
 * specified cannot be greater than the total range of
 * the counter ((maximum value - minimum value)
 * +  1).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>102<DD> The named counter has not yet reached its limit
 * (that is, the current value is not equal to the
 * maximum value plus 1, giving the counter-at-limit
 * condition). This error condition is returned if the
 * named counter is not at its limit even after
 * applying any specified increment.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param DCOUNTER(name)
 *               specifies the name of the named counter that is to be
 *               reset to its minimum value. The name can be up to 16
 *               alphanumeric characters. If  name is a variable that
 *               contains a name that is less than 16 characters, the
 *               name must be padded with trailing blanks.
 * @param INCREMENT(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), an increment to
 *               be used in determining whether the named counter is in
 *               a valid state to be reset. If a previous GET command
 *               (which did not specify the REDUCE option) specified an
 *               increment that caused the GET command to fail, specify
 *               the same increment on the REWIND. The named
 *               counter server applies the increment before testing
 *               whether the counter is in a counter-at-limit condition.
 *               See the the INCREMENT option on the GET command
 *               for more details.
 * @param POOL(poolname)
 *               specifies an 8-character string to be used as a pool
 *               selection parameter to select the pool in which the
 *               named counter resides. The string can be a logical pool
 *               name, or the actual pool name.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               <p>If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "REWIND DCOUNTER"(
   DCOUNTER(name),
   INCREMENT(data-value),
   POOL(poolname),
   );

/**
 * Update a record in a file.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__REWRITE__FILE(filename)__________________________________________> |
 * |                              |_TOKEN(data-value)_|                     |
 * |                                                                        |
 * | >__FROM(data-area)_________________________________________________><  |
 * |                     |_LENGTH(data-value)_|  |_SYSID(systemname)_|      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DUPREC, FILENOTFOUND, ILLOGIC, INVREQ, IOERR, ISCINVREQ,   |
 * | LENGERR, NOSPACE, NOTAUTH, SYSIDERR                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>REWRITE updates a record in a file on a local or a remote
 * system. You must always precede this command with a read
 * with the UPDATE option.
 * <p>For VSAM data sets, you must not change the key field in
 * the record.
 * <p>When this command is used to update a record in a
 * CICS-maintained data table, the update is made to both the
 * source VSAM KSDS and the in-memory data table. The
 * details of the command for a CICS-maintained table are the
 * same as for a VSAM KSDS.
 * When this command is used to update a record in a
 * user-maintained data table, the update is made to the
 * in-memory data table.
 * When this command is used to update records in a coupling
 * facility data table, the update is made only to the data table
 * in the coupling facility.
 *
 * @conditions
 * <b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>CHANGED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>109<DD> A REWRITE command is issued for a file that is a
 * defined as a coupling facility data table using the
 * contention update model and the record has been
 * changed since the application program read it for
 * for update. To successfully update the record,
 * repeat the read for update to get the latest version
 * of the record, re-apply the change, and try the
 * rewrite again.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>DUPREC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>150<DD> An attempt is made to rewrite a record to a data
 * set whose upgrade set has an alternate index with
 * the UNIQUEKEY attribute, if the corresponding
 * alternate key already exists in the alternate index.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values: (VSAM)
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * (See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" for details.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>30<DD> A REWRITE command is issued without a token
 * and no previous READ for UPDATE (also without
 * a token) can be found.
 * <p>A possible reason for the previous READ for
 * UPDATE not being found is that it failed for some
 * reason, and the failure has not been correctly
 * handled or has been ignored.
 * <DT>46<DD> A REWRITE command has attempted to change
 * the length of a BDAM variable length record or
 * block.
 * <DT>47<DD> A REWRITE instruction includes a token whose
 * value cannot be matched against any token in use
 * for an existing read for UPDATE request.
 * <DT>55<DD> NOSUSPEND is not allowed because the file is
 * not a VSAM file that is accessed in RLS mode.
 * <DT>56<DD> An attempt to update a recoverable coupling
 * facility data table has failed because the current
 * unit of work has already updated 1024 recoverable
 * coupling facility data tables. You cannot update
 * more than 1024 recoverable coupling facility data
 * tables within a unit of work
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> An I/O error occurred during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error. (Further information is available in
 * the EXEC interface block; refer to Appendix A,
 * "EXEC interface block" for details.)
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>10<DD> The LENGTH option is not specified for a file with
 * variable-length records, or for a BDAM file with
 * undefined format records.
 * <DT>12<DD> The length specified exceeds the maximum record
 * size (of the source data set for a data-table); the
 * record is truncated.
 * <DT>14<DD> An incorrect length is specified for a file with
 * fixed-length records.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>80<DD> For user-maintained data tables, this condition
 * occurs when an attempt to REWRITE a record
 * has failed because the REWRITE is associated
 * with a READ UPDATE request for a record that
 * this transaction has deleted (using DELETE with
 * RIDFLD) after it was read for update. This may be
 * caused by a logic error in the application program.
 * This condition can also occur when a REWRITE
 * command is issued to a coupling facility data table
 * using the contention model and the record has
 * been deleted since it was read for update.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * LOCKED
 * RESP2 values:
 * <dl compact>
 * <DT>106<DD> Attempt has been made to update a record, but a
 * retained lock exists against a unique alternate key
 * that is involved in the request.
 * </dl>
 * <p>Default action: abend the task with code AEX8.
 * <DT>NOSPACE<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>100<DD> No space is available on the direct access device
 * for adding the updated record to the data set.
 * <DT>102<DD> The maximum number of records specified for a
 * recoverable coupling facility data table has been
 * exceeded. This can occur on a rewrite operation
 * because an extra record is required in the
 * coupling facility data table for recovery purposes
 * until the update has been committed.
 * <DT>103<DD> For user-maintained data tables, this condition
 * occurs if CICS is unable to get sufficient storage in
 * the CICS address space to store the updated data
 * table entry.
 * <DT>108<DD> For coupling facility data tables, this condition
 * occurs if there is insufficient space in the coupling
 * facility data table pool to store the updated record.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>107<DD> NOSUSPEND is specified but VSAM holds an
 * active lock against a unique alternate index key
 * that is involved in the request, which would cause
 * the request to wait. (See the note about active and
 * retained locks below.)
 * </dl>
 * <p>Default action: abend the task with code AEX9.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The REWRITE is issued against a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <p><b>Note</b>:  RECORDBUSY refers to active locks and LOCKED
 * refers to retained locks:
 * <UL>
 * <LI>REWRITE requests for records that have
 * retained locks are always rejected with a
 * LOCKED response.
 * <LI>REWRITE requests for records that have  active
 * locks wait for the lock to be released, except
 * when the NOSUSPEND keyword is specified, in
 * which case CICS returns the RECORDBUSY
 * response.
 * </ul>
 * </dl>
 * @example
 * For example:
 * <pre>
 * EXEC CICS REWRITE
 *   FROM(RECORD)
 *   FILE('MASTER')
 *   TOKEN(APTOK)
 * </pre>
 * @param FILE(filename)
 *                  specifies the of the file to be accessed.
 *                  <p>If SYSID is specified, the data set to which this file refers
 *                  is assumed to be on a remote system irrespective of
 *                  whether the name is defined in the FCT. Otherwise, the
 *                  FCT entry is used to find out whether the data set is on
 *                  a local or a remote system.
 * @param FROM(data-area)
 *                  specifies the record that is to be written to the data set
 *                  referred to by this file.
 * @param LENGTH(data-value)
 *                  specifies the actual length, as a halfword binary value, of
 *                  the record to be written.
 *                  <p>This option must be specified if SYSID is specified.
 *                  This option must also be specified for a file defined as
 *                  containing variable-length records. It need not be
 *                  specified if the file contains fixed-length records. You are
 *                  recommended to include it, however, because it causes
 *                  a check to be made to ensure that the length of data
 *                  being written is equal to that defined for the data set. If
 *                  the lengths are not equal, the LENGERR condition
 *                  occurs.
 * @param NOSUSPEND
 *                  (RLS only)
 *                  The request does not wait if VSAM is holding an active
 *                  lock against the record, including records locked as the
 *                  result of a DEADLOCK.
 *                  <p>Generally, you should not need this option because, for
 *                  example, when re-writing a record to a base-only data
 *                  set, the active lock was acquired when the task issued
 *                  the READ UPDATE.
 *                  <p>However, lock contention can occur if the update
 *                  involves changes made in RLS mode to records in a
 *                  VSAM data set that has one or more alternate indexes,
 *                  and an alternate index is defined with unique keys.
 * @param SYSID(systemname)
 *                  specifies the name of the system to which the request is
 *                  directed.
 * @param TOKEN(data-area)
 *                  specifies as a fullword binary value a unique request
 *                  identifier for a REWRITE, used to associate it with a
 *                  previous READ, READNEXT, or READPREV command
 *                  that specified UPDATE.
 *                  <p>TOKEN can be function shipped. However, if a request
 *                  specifying TOKEN is function shipped to a member of
 *                  the CICS family of products that does not support the
 *                  TOKEN option, the request fails:
 */
function "REWRITE"(
   FILE(filename),
   FROM(data-area),
   LENGTH(data-value),
   NOSUSPEND,
   SYSID(systemname),
   TOKEN(data-area),
   );

/**
 * Route a BMS message. (This command is only available on full BMS. The  CICS Application Programming Guide has further
 * information about BMS.)
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |             _INTERVAL(0)______________________                         |
 * | >>__ROUTE__|__________________________________|______________________> |
 * |            |_INTERVAL(hhmmss)_________________|                        |
 * |            |_TIME(hhmmss)_____________________|                        |
 * |            |        <_______________________  |                        |
 * |            |_AFTER_____HOURS(data-value)____|_|                        |
 * |            |         |_MINUTES(data-value)_|  |                        |
 * |            |         |_SECONDS(data-value)_|  |                        |
 * |            |     <_______________________     |                        |
 * |            |_AT_____HOURS(data-value)____|____|                        |
 * |                   |_MINUTES(data-value)_|                              |
 * |                   |_SECONDS(data-value)_|                              |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ERRTERM_____________|  |_TITLE(data-area)_|                       |
 * |               |_(name)_|                                               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LIST(data-area)_|  |_OPCLASS(data-area)_|  |_REQID(name)_|        |
 * |                                                                        |
 * | >____________________________><                                        |
 * |    |_LDC(name)_|  |_NLEOM_|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVERRTERM, INVLDC, INVREQ, RTEFAIL, RTESOME               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>ROUTE routes a BMS logical message to one or more
 * terminals or terminal operators.
 * <p>The default is INTERVAL(0), but for C the default is AFTER
 * HOURS(0) MINUTES(0) SECONDS(0).
 *
 * @conditions
 * <dl>
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option is
 * different from that established by a previous REQID
 * option, or by default for this logical message --REQID
 * (**).
 * <DT>INVERRTERM<DD>
 * occurs if the terminal identifier specified in the
 * ERRTERM option is not valid or is assigned to a type of
 * terminal not supported by BMS.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVLDC<DD>
 * occurs if the specified LDC mnemonic is not included in
 * the LDC list for the logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Hours out of range
 * <DT>5<DD> Minutes out of range
 * <DT>6<DD> Seconds out of range
 * <DT>200<DD> BMS commands are not supported for distributed
 * </dl>
 * program link.
 * also occurs (RESP2 not set) in the following situations:
 * <ul>
 * <LI>Bytes 10 through 15 of a route list entry do not
 * contain blanks.
 * Default action: terminate the task abnormally.
 * RTEFAIL
 * occurs in any of the following situations:
 * <LI>A ROUTE command would result in the message
 * being sent only to. the terminal that initiated the
 * transaction.
 * <LI>A ROUTE command is issued against a remote.
 * shippable terminal that is not yet installed in the
 * application-owning region.
 * </ul>
 * <p>Default action: return control to the application program
 * at the point immediately following the ROUTE command.
 * <DT>RTESOME<DD>
 * occurs if any of the terminals specified by the ROUTE
 * command options do not receive the message.
 * <p>Default action: return control to the application program
 * at the point immediately following the ROUTE command.
 * </dl>
 * @param AFTER
 *                  specifies the amount of time to elapse before the route.
 *                  There are two ways to enter the time under AFTER and
 *                  AT.
 *                  <ol>
 *                  <LI>A combination of at least two of HOURS(0-99),
 *                  MINUTES(0-59), and SECONDS(0-59). HOURS(1)
 *                  SECONDS(3) would mean one hour and three
 *                  seconds (the minutes default to zero).
 *                  <LI>As one of HOURS(0-99), MINUTES(0-5999), or
 *                  SECONDS(0-359999). HOURS(1) means one hour.
 *                  MINUTES(62) means one hour and two minutes.
 *                  SECONDS(3723) means one hour, two minutes,
 *                  and three seconds.
 *                  </ol>
 *                  <p>AT specifies the time of the route. For the ways to enter the
 *                  time, see the AFTER option.
 * @param ERRTERM(name)
 *                  specifies the name of the terminal to be notified if the
 *                  message is deleted because it is undeliverable. The
 *                  message number, title identification, and destination are
 *                  indicated. If no name is specified, the originating terminal
 *                  is assumed.
 *                  <p>This option is effective only if PRGDLAY has been
 *                  specified in the system initialization parameters.
 * @param HOURS(data-value)
 *                  specifies a fullword binary value in the range 0-99. This
 *                  is a suboption of the AFTER and AT options. For its use
 *                  and meaning, see the AFTER option.
 * @param INTERVAL(hhmmss)
 *                  specifies the interval of time after which the data is to be
 *                  transmitted to the terminals specified in the ROUTE
 *                  command. The mm and ss are in the range 0-59.
 *                  When using the C language, you are recommended to
 *                  use the AFTER/AT HOURS, MINUTES, and SECONDS
 *                  options as C does not provide a packed decimal data
 *                  type. You may use INTERVAL, but if the value specified
 *                  is not an integer constant, the application is responsible
 *                  for ensuring that the value passed to CICS is in packed
 *                  decimal format.
 * @param LDC(name)
 *                  logical units only -
 *                  specifies a 2-character mnemonic to be used to
 *                  determine the logical device code (LDC) to be
 *                  transmitted in the FMH to the logical unit. The mnemonic
 *                  identifies an LDC entry defined by the DFHTCT
 *                  TYPE=LDC macro.
 *                  <p>When an LDC is specified, BMS uses the device type,
 *                  the page size, and the page status associated with the
 *                  LDC mnemonic to format the message. These values
 *                  are taken from the extended local LDC table for the LU,
 *                  if it has one. If the LU has only a local (unextended)
 *                  LDC table, the values are taken from the system LDC
 *                  table. The numeric value of the LDC is obtained from the
 *                  local LDC table, unless this is an unextended table and
 *                  the value is not specified, in which case it is taken from
 *                  the system table.
 *                  <p>If the LDC option is omitted, the LDC mnemonic
 *                  specified in DFHMSD is used; see "DFHMSD" 
 *                  for further details. If the LDC option has also
 *                  been omitted from DFHMSD, the action depends on the
 *                  type of logical unit, as follows:
 *                  <dl>
 *                  <DT><b>3601 LU</b><DD>
 *                  The first entry in the local or extended local
 *                  LDC table is used, if there is one. If a
 *                  default cannot be obtained in this way, a
 *                  null LDC numeric value (X'00') is used.
 *                  The page size used is the value that is
 *                  specified by the RDO TYPETERM options
 *                  PAGESIZE or ALTPAGE, or (1,40) if such a
 *                  value is not specified.
 *                  <DT><b>LUTYPE4 LU, batch LU, or batch data interchange LU</b><DD>
 *                  The local LDC table is not used to supply a
 *                  default LDC; instead, the message is
 *                  directed to the LU console. (Here, LU
 *                  console means any medium on which the
 *                  LU elects to receive such messages. For a
 *                  batch data interchange LU, this does not
 *                  imply sending an LDC in an FMH). The
 *                  page size is obtained in the manner
 *                  described for the 3601 LU.
 *                  </dl>
 *                  <p>For message routing, the LDC option of the ROUTE
 *                  command takes precedence over all other sources. If
 *                  this option is omitted and a route list is specified (LIST
 *                  option), the LDC mnemonic in the route list is used; if
 *                  the route list contains no LDC mnemonic, or no route list
 *                  is specified, a default LDC is chosen as described
 *                  above.
 * @param LIST(data-area)
 *                  specifies the data area that contains a list of terminals
 *                  and operators to which data is to be directed. If this
 *                  option is omitted, all terminals supported by BMS receive
 *                  the data (unless the OPCLASS option is in effect). See
 *                  the  CICS Application Programming Guide for the format
 *                  of the route list.
 * @param MINUTES(data-value)
 *                  specifies a fullword binary value in the range 0-59, when
 *                  HOURS or SECONDS are also specified, or 0-5999
 *                  when MINUTES is the only option specified. This is a
 *                  suboption of the AFTER and AT options. For its use and
 *                  meaning, see the AFTER option.
 * @param NLEOM
 *                  specifies that data for a 3270 printer or a 3275 display
 *                  with the printer adapter feature should be built with
 *                  blanks and new-line (NL) characters, and that an
 *                  end-of-message (EM) character should be placed at the
 *                  end of the data. As the data is printed, each NL
 *                  character causes printing to continue on the next line,
 *                  and the EM character terminates printing.
 *                  <p>The option is ignored if the device receiving the
 *                  message (direct or routed) is not one of those mentioned
 *                  above.
 *                  <p>If this option is used, buffer updating and attribute
 *                  modification of fields previously written into the buffer are
 *                  not allowed. CICS includes the ERASE option with every
 *                  write to the terminal.
 *                  <p>The NL character occupies a buffer position. A number
 *                  of buffer positions, equivalent to the value of the RDO
 *                  options PAGESIZE or ALTPAGE for that terminal, are
 *                  unavailable for data. This may cause data to wrap
 *                  around in the buffer; if this occurs, the PAGESIZE or
 *                  ALTPAGE value must be reduced.
 * @param OPCLASS(data-area)
 *                  specifies the data area that contains a list of operator
 *                  classes to which the data is to be routed. The classes
 *                  are supplied in a 3-byte field, each bit position
 *                  corresponding to one of the codes in the range 1
 *                  through 24 but in reverse order, that is, the first byte
 *                  corresponds to codes 24 through 17, the second byte to
 *                  codes 16 through 9, and the third byte to codes 8
 *                  through 1.
 * @param REQID(name)
 *                  specifies a prefix (2-character field) to be used as part
 *                  of a temporary storage identifier for CICS message
 *                  recovery. Only one prefix can be specified for each
 *                  logical message. The default prefix is **.
 *                  BMS message recovery is provided for a logical
 *                  message only if the PAGING option is specified in the
 *                  BMS SEND commands, and if the syncpoint has been
 *                  reached.
 * @param SECONDS(data-value)
 *                  specifies a fullword binary value in the range 0-59, when
 *                  HOURS or MINUTES are also specified, or 0-359 999
 *                  when SECONDS is the only option specified. This is a
 *                  suboption of the AFTER and AT options. For its use and
 *                  meaning, see the AFTER option.
 * @param TIME(hhmmss)
 *                  specifies the time of day at which data is to be
 *                  transmitted to the terminals specified in the ROUTE
 *                  command.
 *                  <p>When using the C language, you are recommended to
 *                  use the AFTER/AT HOURS, MINUTES, and SECONDS
 *                  options as C does not provide a packed decimal data
 *                  type. You may use TIME, but if the value specified is
 *                  not an integer constant, the application is responsible for
 *                  ensuring that the value passed to CICS is in packed
 *                  decimal format.
 * @param TITLE(data-area)
 *                  specifies the data area that contains the title to be used
 *                  with a routing logical message. This title appears as part
 *                  of the response to a page query command. See the
 *                  CICS Application Programming Guide for the format of
 *                  the title option.
 */
function "ROUTE"(
   AFTER,
   ERRTERM(name),
   HOURS(data-value),
   INTERVAL(hhmmss),
   LDC(name),
   LIST(data-area),
   MINUTES(data-value),
   NLEOM,
   OPCLASS(data-area),
   REQID(name),
   SECONDS(data-value),
   TIME(hhmmss),
   TITLE(data-area),
   );


/**
 * Write data to a standard CICS supported terminal (BTAM or TCAM).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)_______________><       |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of the send command can be used by all CICS-supported terminals for which the
 * other SEND descriptions are not appropriate.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the CONVID value in the command does not
 *    relate to a conversation that is owned by the application,
 *    or if the facility specified in the command is not owned
 *    by the application.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <VTAM default>"(
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Send data on an APPC mapped conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND_____________________________________________________________> |
 * |           |_CONVID(name)_|                                             |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)____LENGTH(data-value)____|  |_INVITE_|            |
 * |                       |_FLENGTH(data-value)_|    |_LAST___|            |
 * |                                                                        |
 * | >________________________________><                                    |
 * |    |_CONFIRM_|  |_STATE(cvda)_|                                        |
 * |    |_WAIT____|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC, SIGNAL, TERMERR                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND sends data to a conversation partner on an APPC mapped conversation.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the CONVID value in the command does not
 *    relate to a conversation that is owned by the application,
 *    or if the facility specified in the command is not owned
 *    by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CONFIRM
 *                   indicates that an application using a synchronization
 *                   level 1 or 2 conversation requires a response from the
 *                   remote application. A remote CICS application can
 *                   respond positively by executing an ISSUE
 *                   CONFIRMATION command, or negatively, by executing
 *                   an ISSUE ERROR command, in which case the sending
 *                   application has EIBERR and EIBERRCD set. CICS does
 *                   not return control to the sending application until the
 *                   response is received.
 * @param CONVID(name)
 *                   identifies the conversation to which the command
 *                   relates. The 4-character name identifies either the token
 *                   returned by a previously executed ALLOCATE command
 *                   in EIBRSRCE in the EIB, or the token representing the
 *                   principal session (returned by a previously executed
 *                   ASSIGN command).
 *                   <p>For compatibility with earlier releases, SESSION is
 *                   accepted as a synonym for CONVID. New programs
 *                   should use CONVID.
 *                   <p>If this option is omitted, the principal facility is assumed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param STATE(cvda)
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <APPC>"(
   CONFIRM,
   CONVID(name),
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   STATE(cvda),
   WAIT,
   );

/**
 * Write data to a 3270-display logical unit (LUTYPE2) or a 3270-printer logical unit (LUTYPE3).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INVITE_|                                                          |
 * |    |_LAST___|                                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_ERASE________________|  |_CTLCHAR(data-value)_| |               |
 * |    |          |_DEFAULT___|                            |               |
 * |    |          |_ALTERNATE_|                            |               |
 * |    |_STRFIELD__________________________________________|               |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_DEFRESP_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference  ) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command, rather than a SEND command, must be used
 *                   if the data area contains a read partition structured field.
 *                   (Structured fields are described in the  CICS 3270 Data
 *                   Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <LUTYPE2/LUTYPE3>"(
   ALTERNATE,
   CTLCHAR(data-value),
   DEFAULT,
   DEFRESP,
   ERASE,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   STRFIELD,
   WAIT,
   );

/**
 * Write data to a LUTYPE4 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >______________________________________><                              |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_FMH_|                                  |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IGREQCD, LENGERR, SIGNAL, TERMERR                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>IGREQCD<DD>
 *    occurs when an attempt is made to execute a SEND
 *    command after a SIGNAL data-flow control command
 *    with a request change direction (RCD) code has been
 *    received from the logical unit.
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <LUTYPE4>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Send data on an LUTYPE6.1 conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND_____________________________________________________________> |
 * |           |_SESSION(name)_|  |_WAIT_|  |_INVITE_|                      |
 * |                                        |_LAST___|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ATTACHID(name)_|  |_FROM(data-area)_|                             |
 * |                                                                        |
 * | >_________________________________________________><                   |
 * |    |_LENGTH(data-value)__|  |_FMH_|  |_DEFRESP_|                       |
 * |    |_FLENGTH(data-value)_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, INVREQ, LENGERR, NOTALLOC, SIGNAL, TERMERR        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * SEND sends data to a conversation partner on an LUTYPE6.1 conversation.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>CBIDERR<DD>
 *    occurs if the requested attach header control block
 *    named in ATTACHID cannot be found.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the CONVID value in the command does not
 *    relate to a conversation that is owned by the application,
 *    or if the facility specified in the command is not owned
 *    by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ATTACHID(name)
 *                   specifies that an attach header (created by a BUILD
 *                   ATTACH command) is to precede, and be concatenated
 *                   with, the user data supplied in the FROM option.
 *                   "name" (1-8 characters) identifies the attach header
 *                   control block to be used in the local task.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If this option is omitted, the principal
 *                   facility for the task is used.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <LUTYPE6.1>"(
   ATTACHID(name),
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   SESSION(name),
   WAIT,
   );

/**
 * Write data to a 3270 SCS printer logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________________________________________________><                |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_STRFIELD_|  |_FMH_|                    |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a logical unit. The SCS printer logical unit accepts a character string as defined by Systems Network
 * Architecture (SNA).
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command, rather than a SEND command, must be used
 *                   if the data area contains a read partition structured field.
 *                   (Structured fields are described in the  CICS 3270 Data
 *                   Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <SCS>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   STRFIELD,
   WAIT,
   );

/**
 * Write data to a 3270 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_INVITE_|                                                          |
 * |    |_LAST___|                                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_ERASE________________|  |_CTLCHAR(data-value)_| |               |
 * |    |          |_DEFAULT___|                            |               |
 * |    |          |_ALTERNATE_|                            |               |
 * |    |_STRFIELD__________________________________________|               |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_DEFRESP_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference ) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command, rather than a SEND command, must be used
 *                   if the data area contains a read partition structured field.
 *                   (Structured fields are described in the  CICS 3270 Data
 *                   Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3270 logical>"(
   ALTERNATE,
   CTLCHAR(data-value),
   DEFAULT,
   DEFRESP,
   ERASE,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   STRFIELD,
   WAIT,
   );

/**
 * Write data to a 3600 pipeline logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)_______________><       |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3600 pipeline>"(
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3600 (3601) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_LDC(name)_|      |
 * |                                                     |_FMH_______|      |
 * |                                                                        |
 * | >_______________________________________><                             |
 * |    |_WAIT_|  |_INVITE_|  |_CNOTCOMPL_|                                 |
 * |              |_LAST___|  |_DEFRESP___|                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SIGNAL, TERMERR                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of SEND also applies to the 3630 plant communication system.
 * A logical device code (LDC) is a code that can be included in an outbound FMH to specify the disposition of the data (for
 * example, to which subsystem terminal it should be sent). Each code can be represented by a unique LDC mnemonic.
 * <p>The installation can specify up to 256 2-character mnemonics for each TCTTE, and two or more TCTTEs can share a list of
 * these mnemonics. Corresponding to each LDC mnemonic for each TCTTE is a numeric value (0 through 255).
 * A 3600 device and a logical page size are also associated with an LDC. "LDC" or "LDC value" is used in this book in
 * reference to the code specified by the user. "LDC mnemonic" refers to the 2-character symbol that represents the LDC numeric
 * value.
 * <p>When the LDC option is specified, the numeric value associated with the mnemonic for the particular TCTTE, is inserted in the
 * FMH. The numeric value associated with the LDC mnemonic is chosen by the installation, and is interpreted by the 3601
 * application program.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LDC
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3600-3601>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LDC,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3600 (3614) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >_____________________________><                                       |
 * |    |_INVITE_|  |_CNOTCOMPL_|                                           |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. The data stream and communication format used between a CICS application program and a
 * 3614 is determined by the 3614. The application program is therefore device dependent when handling 3614 communication.
 * <p>For further information about designing 3614 application programs for CICS, refer to the  IBM 4700/3600/3630 Guide.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3600-3614>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3650 interpreter logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________________________________><                                |
 * |    |_INVITE_|  |_DEFRESP_|  |_FMH_|                                    |
 * |    |_LAST___|                                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3650 interpreter>"(
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3650 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|  |_WAIT_|  |_ERASE________________|         |
 * |                                                |_DEFAULT___|           |
 * |                                                |_ALTERNATE_|           |
 * |                                                                        |
 * | >______________________________________><                              |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_FMH_|                                  |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3650-3270>"(
   ALTERNATE,
   CNOTCOMPL,
   CTLCHAR(data-value),
   DEFAULT,
   DEFRESP,
   ERASE,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3650 (3653) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >_____________________________><                                       |
 * |    |_INVITE_|  |_CNOTCOMPL_|                                           |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3650-3653>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3650 (3680) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >______________________________________><                              |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_FMH_|                                  |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3650-3680>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3767 interactive logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >_____________________________><                                       |
 * |    |_INVITE_|  |_CNOTCOMPL_|                                           |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SIGNAL, TERMERR                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of SEND also applies to the 3770 interactive logical unit.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3767>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3770 batch logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >______________________________________><                              |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_FMH_|                                  |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SIGNAL, TERMERR                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3770>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3790 full-function or inquiry logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >______________________________________><                              |
 * |    |_INVITE_|  |_CNOTCOMPL_|  |_FMH_|                                  |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, SIGNAL, TERMERR                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of SEND also applies to the following devices:
 * <UL>
 * <LI>3650/3680 full-function logical unit
 * <LI>3770 full-function logical unit
 * </UL>
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 *    occurs when an inbound SIGNAL data-flow control
 *    command has been received from a logical unit or
 *    session. EIBSIG is always set when an inbound signal is
 *    received.
 *    <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3790 full-function or inquiry>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3790 SCS printer logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >_____________________________><                                       |
 * |    |_INVITE_|  |_CNOTCOMPL_|                                           |
 * |    |_LAST___|  |_DEFRESP___|                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3790 SCS>"(
   CNOTCOMPL,
   DEFRESP,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3790 (3270-display) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|  |_WAIT_|  |_ERASE________________|         |
 * |                                                |_DEFAULT___|           |
 * |                                                |_ALTERNATE_|           |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_INVITE_|  |_DEFRESP_|                                             |
 * |    |_LAST___|                                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3790 3270-display>"(
   ALTERNATE,
   CTLCHAR(data-value),
   DEFAULT,
   DEFRESP,
   ERASE,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );


/**
 * Write data to a 3790 (3270-printer) logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|  |_WAIT_|  |_ERASE________________|         |
 * |                                                |_DEFAULT___|           |
 * |                                                |_ALTERNATE_|           |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_INVITE_|  |_DEFRESP_|                                             |
 * |    |_LAST___|                                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, TERMERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <P>EIBRCODE, however, is set to indicate all the conditions that
 * occurred.
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> A distributed program link server application
 *    attempted to send on its function-shipping session
 *    (its principal facility).
 *    <p>For SEND (APPC), a distributed program link
 *    server application specified the function-shipping
 *    session (its principal facility) on the CONVID
 *    option.
 *    </dl>
 *    also occurs (RESP2 not set) in any of the following
 *    situations:
 *    <UL>
 *    <LI>The CONFIRM option has been specified, but the
 *    APPC conversation is not sync level 1 or 2.
 *    <LI>The SEND command has been used on an APPC
 *    conversation that is not a mapped conversation or
 *    that is not using the EXEC CICS interface.
 *    </ul>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a session-related error. Any action on that
 *    conversation other than a FREE causes an ATCV
 *    abend.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program handles the session
 *    error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit, or a
 *                   partner transaction.
 * @param INVITE
 *                   For the SEND (APPC) command, INVITE allows an
 *                   application program to add a change-direction indicator
 *                   to data already sent to a process in a connected APPC
 *                   system. Control data is not transmitted by CICS until the
 *                   subsequent execution of a WAIT or a SYNCPOINT
 *                   command, unless CONFIRM or WAIT is also coded on
 *                   the GDS SEND INVITE command.
 *                   <p>For the other SEND commands, INVITE specifies that
 *                   the next terminal control command executed for this
 *                   facility is a RECEIVE. This allows optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last SEND command for a
 *                   transaction.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3790 3270-printer>"(
   ALTERNATE,
   CTLCHAR(data-value),
   DEFAULT,
   DEFRESP,
   ERASE,
   FLENGTH(data-value),
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   WAIT,
   );


/**
 * Write data to a standard CICS terminal support (BTAM or TCAM).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)_______________><       |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTALLOC                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of the send command can be used by all CICS-supported terminals for which the
 * other SEND descriptions are not appropriate.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <non-VTAM default>"(
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Send data on an MRO conversation.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND_____________________________________________________________> |
 * |           |_SESSION(name)_|  |_WAIT_|  |_INVITE_|                      |
 * |                                        |_LAST___|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ATTACHID(name)_|  |_FROM(data-area)_|                             |
 * |                                                                        |
 * | >__________________________________________________________________><  |
 * |    |_LENGTH(data-value)__|  |_FMH_|  |_DEFRESP_|  |_STATE(cvda)_|      |
 * |    |_FLENGTH(data-value)_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CBIDERR, INVREQ, LENGERR, NOTALLOC, TERMERR                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND sends data to a conversation partner on an MRO conversation.
 *
 * @conditions
 * <DL>
 * <DT>CBIDERR<DD>
 *    occurs if the requested attach header control block
 *    named in ATTACHID cannot be found.
 *    <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 *    occurs if the facility specified in the command is not
 *    owned by the application.
 *    <p>Default action: terminate the task abnormally.
 * <DT>TERMERR<DD>
 *    occurs for a terminal-related error, such as a session
 *    failure. This condition applies to VTAM-connected
 *    terminals only.
 *    <p>A CANCEL TASK request by a user node error program
 *    (NEP) may cause this condition if the task has an
 *    outstanding terminal control request active when the
 *    node abnormal condition program (DFHZNAC) handles
 *    the session error.
 *    <p>Default action: terminate the task abnormally with abend
 *    code ATNI.
 * </DL>
 * @param ATTACHID(name)
 *                   specifies that an attach header (created by a BUILD
 *                   ATTACH command) is to precede, and be concatenated
 *                   with, the user data supplied in the FROM option.
 *                   "name" (1-8 characters) identifies the attach header
 *                   control block to be used in the local task.
 * @param DEFRESP
 *                   indicates that a definite response is required when the
 *                   output operation has been completed.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FMH
 *                   specifies that a function management header has been
 *                   included in the data to be written. If the ATTACHID
 *                   option is specified as well, the concatenated FMH flag is
 *                   set in the attach FMH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param INVITE
 *                   specifies that the next terminal control command to be
 *                   executed for this facility is a RECEIVE. This allows
 *                   optimal flows to occur.
 * @param LAST
 *                   specifies that this is the last output operation for a
 *                   transaction and therefore the end of a bracket.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param SESSION(name)
 *                   specifies the symbolic identifier (1-4 characters) of a
 *                   session TCTTE. This option specifies the alternate
 *                   facility to be used. If this option is omitted, the principal
 *                   facility for the task is used.
 * @param STATE(cvda)
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <MRO>"(
   ATTACHID(name),
   DEFRESP,
   FLENGTH(data-value),
   FMH,
   FROM(data-area),
   INVITE,
   LAST,
   LENGTH(data-value),
   SESSION(name),
   STATE(cvda),
   WAIT,
   );

/**
 * Write data to a System/3.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_ASIS_|  |_CNOTCOMPL_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of the SEND command also applies to the following devices:
 * <UL>
 * <LI>2770 data communication system
 * <LI>2780 data transmission terminal
 * <LI>3660 supermarket scanning system
 * <LI>3780 communication terminal.
 * </UL>
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param CNOTCOMPL
 *                   indicates that the request/response unit (RU) sent as a
 *                   result of this SEND command does not complete the
 *                   chain. If this option is omitted and chain assembly has
 *                   been specified, the RU terminates the chain.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <System/3>"(
   ASIS,
   CNOTCOMPL,
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a System/7.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_PSEUDOBIN_|  |_ASIS_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. For a description of running with a System/7, see "CONVERSE (System/7)".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param PSEUDOBIN
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <System/7>"(
   ASIS,
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   PSEUDOBIN,
   WAIT,
   );

/**
 * Write data to a 2260 or 2265 display station.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CTLCHAR(data-value)_|  |_LINEADDR(data-value)_|  |_WAIT_|         |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_LEAVEKB_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the  IBM 3270 Data Stream Programmer's Reference) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LEAVEKB
 *                   specifies that the keyboard is to remain locked at the
 *                   completion of the data transfer.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param LINEADDR(data-value)
 *                   specifies that the writing is to begin on a specific line of
 *                   a 2260/2265 screen. The data value is a halfword binary
 *                   value in the range 1 through 12 for a 2260, or 1 through
 *                   15 for a 2265.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <2260>"(
   CTLCHAR(data-value),
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LEAVEKB,
   LENGTH(data-value),
   LINEADDR(data-value),
   WAIT,
   );

/**
 * Write data to a 2741 communication terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)_______________><       |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, WRBRK                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. For more information about using a 2741 communication terminal, see "CONVERSE (2741)".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 *    occurs if the command is terminated by the attention
 *    key.
 *    <p>Default action: ignore the condition.
 * </DL>
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <2741>"(
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 2980 general banking terminal system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)_______PASSBK____><     |
 * |                            |_FLENGTH(data-value)_|  |_CBUFF__|         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOPASSBKWR                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. For more information about the 2980 general banking system, see "RECEIVE (2980)".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * <DT>NOPASSBKWR<DD>
 *    occurs if no passbook is present.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param CBUFF
 *                   specifies that data is to be written to a common buffer in
 *                   a 2972 control unit. The WAIT option is implied.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param PASSBK
 *                   specifies that communication is with a passbook. The
 *                   WAIT option is implied.
 */
function "SEND <2980>"(
   CBUFF,
   DEST(name),
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   PASSBK,
   );

/**
 * Write data to a 3270 information display system (BTAM or TCAM).
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >__________________________________________><                          |
 * |    | |_ERASE_|  |_CTLCHAR(data-value)_| |                              |
 * |    |_STRFIELD___________________________|                              |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ALTERNATE
 *                   sets the terminal to use the ALTERNATE screen size.
 * @param CTLCHAR(data-value)
 *                   specifies a 1-byte write control character (WCC - Documented in the IBM 3270 Data Stream Programmer's Reference) that
 *                   controls a SEND command for a 3270. A COBOL user
 *                   must specify a data area containing this character. If the
 *                   option is omitted, all modified data tags are reset to zero
 *                   and the keyboard is restored.
 * @param DEFAULT
 *                   sets the terminal to use the DEFAULT screen size.
 * @param DEST(name)
 *                   specifies the 4-byte symbolic name of the TCAM
 *                   destination to which the message is to be sent. This
 *                   option is meaningful only for terminals defined using
 *                   DFHTCT TYPE=SDSCI with DEVICE=TCAM.
 *                   <p>If you use the DEST option, you must be aware of any
 *                   restrictions placed on device-dependent data streams by
 *                   the message control facility in use. See the programming
 *                   information about the CICS-TCAM interface in the  CICS
 *                   Customization Guide
 * @param ERASE
 *                   specifies that the screen printer buffer or partition is to
 *                   be erased and the cursor returned to the upper left
 *                   corner of the screen. (This option applies only to the
 *                   3270, or 8775, and to the 3604 Keyboard Display.)
 *                   The first output operation in any transaction, or in a
 *                   series of pseudoconversational transactions, should
 *                   always specify ERASE. For transactions attached to
 *                   3270 screens or printers, unless explicitly overridden by
 *                   the DEFAULT or ALTERNATE option, this also ensures
 *                   that the correct screen size is selected, as defined for
 *                   the transaction by the SCRNSIZE option in the RDO
 *                   PROFILE resource definition.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param STRFIELD
 *                   specifies that the data area specified in the FROM
 *                   option contains structured fields. If this option is
 *                   specified, the contents of all structured fields must be
 *                   handled by the application program. The CONVERSE
 *                   command, rather than a SEND command, must be used
 *                   if the data area contains a read partition structured field.
 *                   (Structured fields are described in the  CICS 3270 Data
 *                   Stream Device Guide.)
 *                   <p>CTLCHAR and ERASE are mutually exclusive with
 *                   STRFIELD, and their use with STRFIELD generates an
 *                   error message.
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3270 display>"(
   ALTERNATE,
   CTLCHAR(data-value),
   DEFAULT,
   DEST(name),
   ERASE,
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   STRFIELD,
   WAIT,
   );

/**
 * Write data to a 3600 or 4700 finance communication system (BTAM) - only valid for remote terminals. See "BTAM
 * programmable terminals".
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________><                                                        |
 * |    |_ASIS_|                                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. This form of the SEND command also applies to the 4700 finance communication system. For
 * more information about using the 3600 or 4700 finance communication system, see "CONVERSE (3600 BTAM)".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3600 BTAM>"(
   ASIS,
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3735 Programmable Buffered Terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________><                                                        |
 * |    |_ASIS_|                                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. The 3735 Programmable Buffered Terminal may be serviced by CICS in response to
 * terminal-initiated input (automatic answering), or as a result of an automatic (automatic calling) or time-initiated transaction.
 * <p>For more information about the 3735, see "CONVERSE (3735)".
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3735>"(
   ASIS,
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Write data to a 3740 data entry system.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND__FROM(data-area)____LENGTH(data-value)______________________> |
 * |                            |_FLENGTH(data-value)_|  |_WAIT_|           |
 * |                                                                        |
 * | >____________><                                                        |
 * |    |_ASIS_|                                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND writes data to a terminal. In batch mode, many files are exchanged between the 3740 and CICS in a single
 * transmission. The transmission of an input batch must be complete before an output transmission can be started.
 *
 * @conditions
 * <DL>
 * <DT>INVREQ<DD>
 *    RESP2 values:
 *    <dl compact>
 *    <DT>200<DD> occurs if a distributed program link server
 *    application attempted to send on its
 *    function-shipping session (its principal facility)
 *    </dl>
 *    <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 *    occurs if an out-of-range value is supplied in the
 *    LENGTH or FLENGTH option.
 *    <p>Default action: terminate the task abnormally.
 * </DL>
 * @param ASIS
 *                   indicates that output is to be sent in transparent mode
 *                   (with no recognition of control characters and accepting
 *                   any of the 256 possible combinations of eight bits as
 *                   valid transmittable data).
 *                   <p><b>Note</b>:  If you are using a katakana terminal, you might
 *                   see some messages containing mixed English
 *                   and katakana characters. That is because
 *                   katakana terminals cannot display mixed-case
 *                   output. Uppercase characters in the data stream
 *                   appear as uppercase English characters, but
 *                   lowercase characters appear as katakana
 *                   characters. If this happens, ask your system
 *                   programmer to specify MSGCASE=UPPER in the
 *                   system initialization parameters so that
 *                   messages contain uppercase characters only.
 * @param FLENGTH(data-value)
 *                   A fullword alternative to LENGTH.
 * @param FROM(data-area)
 *                   specifies the data to be written to the logical unit or
 *                   terminal.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   data to be written. For a description of a safe upper limit,
 *                   see "LENGTH options".
 * @param WAIT
 *                   specifies that processing of the command must be
 *                   completed before any subsequent processing is
 *                   attempted.
 *                   <p>If the WAIT option is not specified, control is returned to
 *                   the application program when processing of the
 *                   command has started. A subsequent input or output
 *                   request (terminal control, BMS, or batch data
 *                   interchange) to the terminal associated with the task
 *                   causes the application program to wait until the previous
 *                   request has been completed.
 */
function "SEND <3740>"(
   ASIS,
   FLENGTH(data-value),
   FROM(data-area),
   LENGTH(data-value),
   WAIT,
   );

/**
 * Send device controls to a terminal without map or text data. The keywords are separated into those supported by minimum,
 * standard, and full BMS. For further information about BMS, see the  CICS Application Programming Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND CONTROL__><                                                   |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Minimum BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |     |_CURSOR___________________|  |_FORMFEED_|                         |
 * |               |_(data-value)_|                                         |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ERASE________________|  |_PRINT_|  |_FREEKB_|  |_ALARM_|          |
 * |    |        |_DEFAULT___| |                                            |
 * |    |        |_ALTERNATE_| |                                            |
 * |    |_ERASEAUP_____________|                                            |
 * |                                                                        |
 * | >_____________><                                                       |
 * |    |_FRSET_|                                                           |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Standard BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |     |_MSR(data-value)_|                                                |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    | |_OUTPARTN(name)_|  |_ACTPARTN(name)_| |                          |
 * |    |_LDC(name)______________________________|                          |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Full BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                 _TERMINAL_____________________                         |
 * |                |           |_WAIT_|  |_LAST_| |                        |
 * | >>_____________|______________________________|______________________> |
 * |     |_ACCUM_|  |_SET(ptr-ref)_________________|  |_REQID(name)_|       |
 * |                |_PAGING_______________________|                        |
 * |                                                                        |
 * |     _HONEOM_                                                           |
 * | >__|________|__><                                                      |
 * |    |_L40____|                                                          |
 * |    |_L64____|                                                          |
 * |    |_L80____|                                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, IGREQID, INVLDC, INVPARTN, INVREQ, RETPAGE,       |
 * | TSIOERR, WRBRK                                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SEND CONTROL sends device controls to a terminal.
 * When using the SEND CONTROL command with any of the
 * ALARM, FREEKB, FRSET, HONEOM, L40, L64, L80, or
 * PRINT options, see CTRL for a description of
 * the option priority.
 *
 * @conditions
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * CONTROL command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option is
 * different from that established by a previous REQID
 * option, or by default for this logical message --REQID
 * (**).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVLDC<DD>
 * occurs if the specified LDC mnemonic is not included in
 * the LDC list for the logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> A distributed program link server application
 * attempted to send on its function-shipping session
 * (its principal facility).
 * </dl>
 * also occurs (RESP2 not set) in the following situation:
 * <UL>
 * <LI>Control information is output to the same partition or
 * LDC as mapped data while a BMS logical message
 * is active. If neither partitions nor LDCs are in use,
 * control information is output to the same device as
 * mapped data.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>RETPAGE<DD>
 * occurs if the SET option is specified and a completed
 * page is ready for return to the application program.
 * <p>Default action: return control to the application program
 * at the point immediately following the BMS SEND
 * command.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if the command is interrupted by the terminal
 * operator pressing the ATTN key. It applies only to the
 * 2741 Communication Terminal, and only if write break is
 * supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param ACCUM
 *                  specifies that this command is one of a number of
 *                  commands that are used to build a logical message. The
 *                  logical message is completed by a SEND PAGE
 *                  command, or deleted by a PURGE MESSAGE
 *                  command.
 * @param ACTPARTN(name)
 *                  specifies the name (1-2 characters) of the partition to be
 *                  activated. Activating a partition moves the cursor into the
 *                  specified partition, and unlocks the keyboard for the
 *                  specified partition.
 *                  <p>This option is ignored if the target terminal does not
 *                  support partitions, or if there is no application partition
 *                  set.
 * @param ALARM
 *                  specifies that the 3270 audible alarm feature is to be
 *                  activated. For logical units supporting FMHs (except
 *                  interactive and batch logical units), ALARM instructs
 *                  BMS to set the alarm flag in the FMH.
 * @param ALTERNATE
 *                  sets the terminal to use the ALTERNATE screen size.
 * @param CURSOR(data-value)
 *                  specifies the location the 3270 or 3604 cursor is
 *                  returned to on completion of a SEND CONTROL
 *                  command.
 *                  <p>The data value must be a halfword binary value that
 *                  specifies the cursor position relative to zero; the range of
 *                  values that can be specified depends on the size of the
 *                  screen being used.
 *                  <p>If ACCUM is being used, the most recent value of
 *                  CURSOR specified is used to position the cursor.
 *                  The value specified in the CURSOR option must be
 *                  positive. A negative value leads to unpredictable results.
 *                  If this option is omitted, the cursor is positioned at
 *                  position zero of the screen.
 * @param DEFAULT
 *                  sets the terminal to use the DEFAULT screen size.
 * @param ERASE
 *                  specifies that the screen printer buffer or partition is to
 *                  be erased and the cursor returned to the upper left
 *                  corner of the screen. (This option applies only to the
 *                  3270, or 8775, and to the 3604 Keyboard Display.)
 *                  The first output operation in any transaction, or in a
 *                  series of pseudoconversational transactions, should
 *                  always specify ERASE. For transactions attached to
 *                  3270 screens or printers, unless explicitly overridden by
 *                  the DEFAULT or ALTERNATE option, this also ensures
 *                  that the correct screen size is selected, as defined for
 *                  the transaction by the SCRNSIZE option in the RDO
 *                  PROFILE definition.
 * @param ERASEAUP
 *                  specifies that all unprotected character locations in the
 *                  partition or the entire screen are to be erased. (This
 *                  option applies only to the 3270 and 8775.)
 * @param FORMFEED
 *                  specifies that a new page is required. For 3270 printers
 *                  and displays, the FORMFEED character is positioned at
 *                  the start of the buffer. The application program must
 *                  thus ensure that this buffer position is not overwritten by
 *                  map or text data. It is ignored if the target terminal does
 *                  not support FORMFEED (that is, the RDO TYPETERM
 *                  option FORMFEED was not used).
 * @param FREEKB
 *                  specifies that the 3270 keyboard is to be unlocked. If
 *                  FREEKB is omitted, the keyboard remains locked.
 *                  Note that the keyboard lock status is maintained
 *                  separately for each partition on a terminal that supports
 *                  partitions.
 * @param FRSET
 *                  specifies that the modified data tags (MDTs) of all fields
 *                  currently in the 3270 (or partition) buffer are to be reset
 *                  to the unmodified condition (that is, field reset).
 *                  This allows the ATTRB operand of DFHMDF for the next
 *                  requested map to control the final status of fields written
 *                  or rewritten in response to a BMS command, if no other
 *                  attribute information has been written in the symbolic
 *                  map.
 * @param HONEOM
 *                  specifies that the default printer line length is to be used.
 *                  This length should be the same as that specified using
 *                  the RDO TYPETERM options PAGESIZE or ALTPAGE.
 * @param LAST
 *                  specifies that this is the last output operation for a
 *                  transaction and, therefore, the end of a bracket. This
 *                  option applies to logical units only.
 * @param LDC(name)
 *                  specifies a 2-character mnemonic to be used to
 *                  determine the logical device code (LDC) to be
 *                  transmitted in the FMH to the logical unit. The mnemonic
 *                  identifies an LDC entry defined by a DFHTCT
 *                  TYPE=LDC macro. When an LDC is specified, BMS
 *                  uses the device type, the page size, and the page status
 *                  associated with the LDC mnemonic to format the
 *                  message. These values are taken from the extended
 *                  local LDC table for the LU, if it has one. If the LU has
 *                  only a local (unextended) LDC table, the values are
 *                  taken from the system LDC table. The numeric value of
 *                  the LDC is obtained from the local LDC table, unless this
 *                  is an unextended table and the value is not specified, in
 *                  which case it is taken from the system table.
 *                  L40
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  L64
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  L80
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 * @param ALTPAGE.
 *                  When using the options, refer to CTRL for
 *                  a description of the option priority.
 * @param MSR(data-value)
 *                  specifies the 4-byte data value that controls the 10/63
 *                  magnetic stripe reader attached to an 8775 or 3643
 *                  terminal. A set of constants is provided in DFHMSRCA
 *                  to assist in setting this 4-byte area. See "Magnetic slot
 *                  reader (MSR) control value constants, DFHMSRCA"
 *                  for a complete list. This option is ignored if the
 *                  RDO TYPETERM option MSRCONTROL was not used.
 * @param OUTPARTN(name)
 *                  specifies the name (1-2 characters) of the partition to
 *                  which data is to be sent. This option is ignored if the
 *                  terminal does not support partitions, or if there is no
 *                  application partition set associated with the terminal. If
 *                  there is an application partition set, and the OUTPARTN
 *                  option is omitted, data is sent to the partition named by
 *                  the PARTN operand of the DFHMSD (see "DFHMSD")
 *                  or the DFHMDI (see "DFHMDI")
 *                  map definition macros. If maps are not used, or if there
 *                  is no PARTN operand, the output is sent to the first
 *                  partition in the partition set.
 * @param PAGING
 *                  specifies that the output data is not to be sent
 *                  immediately to the terminal, but is to be placed in
 *                  temporary storage and displayed in response to paging
 *                  commands entered by the terminal operator.
 *                  <p>If PAGING is specified with a REQID that is defined as
 *                  recoverable in the temporary storage table (TST), CICS
 *                  provides message recovery for logical messages if the
 *                  task has reached a syncpoint.
 * @param PRINT
 *                  specifies that a print operation is to be started at a 3270
 *                  printer or at a 3275 with the printer adapter feature, or
 *                  that data on an LUTYPE2 (3274/76 or 3790) is to be
 *                  printed on a printer allocated by the controller. If this
 *                  option is omitted, the data is sent to the printer buffer but
 *                  is not printed.
 * @param REQID(name)
 *                  specifies a 2-character prefix to be used as part of a
 *                  temporary storage identifier for CICS message recovery.
 *                  Only one prefix can be specified for each logical
 *                  message. The default prefix is **.
 *                  <p>BMS message recovery is provided for a logical
 *                  message only if the PAGING option is specified in the
 *                  BMS SEND commands, and if the syncpoint has been
 *                  reached.
 * @param SET(ptr-ref)
 *                  specifies the pointer to be set to the address of the
 *                  output data.
 *                  <p>The SET option specifies that completed pages are to
 *                  be returned to the application program. The pointer is
 *                  set to the address of a list of completed pages. See the
 *                  description of the SET option in the section about
 *                  full-function BMS in the  CICS Application Programming
 *                  Guide for more guidance on using the SET option.
 *                  <p>If TIOAPFX=YES is specified in the map definition, the
 *                  pointer returned contains the address of the TIOA prefix.
 *                  The user data starts at offset X'0C' from the start of the
 *                  TIOA prefix.
 * @param TERMINAL
 *                  specifies that the output data is to be sent to the
 *                  terminal that originated the transaction.
 * @param WAIT
 *                  specifies that control should not be returned to the
 *                  application program until the output operation has been
 *                  completed.
 *                  <p>If WAIT is not specified, control returns to the application
 *                  program when the output operation has started. A
 *                  subsequent input or output command (terminal control,
 *                  BMS, or batch data interchange) causes the application
 *                  program to wait until the previous command has been
 *                  completed.
 */
function "SEND CONTROL"(
   ACCUM,
   ACTPARTN(name),
   ALARM,
   ALTERNATE,
   CURSOR(data-value),
   DEFAULT,
   ERASE,
   ERASEAUP,
   FORMFEED,
   FREEKB,
   FRSET,
   HONEOM,
   LAST,
   LDC(name),
   ALTPAGE.,
   MSR(data-value),
   OUTPARTN(name),
   PAGING,
   PRINT,
   REQID(name),
   SET(ptr-ref),
   TERMINAL,
   WAIT,
   );

/**
 * Send mapped output data to a terminal. The keywords are separated into those supported by minimum, standard, and full
 * BMS. For further information about BMS, see the  CICS Application Programming Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND MAP(name)__><                                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Minimum BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |     |_MAPSET(name)_|                                                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_FROM(data-area)_|  |_DATAONLY_|  |_LENGTH(data-value)_| |       |
 * |    |_MAPONLY___________________________________________________|       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CURSOR___________________|  |_FORMFEED_|                          |
 * |              |_(data-value)_|                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ERASE________________|  |_PRINT_|  |_FREEKB_|  |_ALARM_|          |
 * |    |        |_DEFAULT___| |                                            |
 * |    |        |_ALTERNATE_| |                                            |
 * |    |_ERASEAUP_____________|                                            |
 * |                                                                        |
 * | >_____________><                                                       |
 * |    |_FRSET_|                                                           |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Standard BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |     |_NLEOM_|  |_MSR(data-value)_|  |_FMHPARM(name)_|                  |
 * |                                                                        |
 * | >______________________________________________><                      |
 * |    | |_OUTPARTN(name)_|  |_ACTPARTN(name)_| |                          |
 * |    |_LDC(name)______________________________|                          |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Full BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                 _TERMINAL_____________________                         |
 * |                |           |_WAIT_|  |_LAST_| |                        |
 * | >>_____________|______________________________|______________________> |
 * |     |_ACCUM_|  |_SET(ptr-ref)_________________|  |_REQID(name)_|       |
 * |                |_PAGING_______________________|                        |
 * |                                                                        |
 * |                  _HONEOM_                                              |
 * | >_______________|________|__><                                         |
 * |    |_NOFLUSH_|  |_L40____|                                             |
 * |                 |_L64____|                                             |
 * |                 |_L80____|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, IGREQID, INVLDC, INVMPSZ, INVPARTN, INVREQ,       |
 * | OVERFLOW, RETPAGE, TSIOERR, WRBRK                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SEND MAP sends output data to a terminal.
 * When using the SEND MAP command with any of the
 * ALARM, FREEKB, FRSET, HONEOM, L40, L64, L80, or
 * PRINT options, see CTRL for a description of
 * the option priority.
 * <p>See Appendix K, "BMS macro summary" for
 * map definition.
 *
 *
 * @param ACCUM
 * specifies that this command is one of a number of
 * commands that are used to build a logical message. The
 * logical message is completed by a SEND PAGE
 * command, or deleted by a PURGE MESSAGE
 * command.
 * @param ACTPARTN(name)
 * specifies the name (1-2 characters) of the partition to be
 * activated. Activating a partition moves the cursor into the
 * specified partition, and unlocks the keyboard for the
 * specified partition.
 * <p>This option is ignored if the target terminal does not
 * support partitions, or if there is no application partition
 * set.
 * @param ALARM
 * specifies that the 3270 audible alarm feature is to be
 * activated. For logical units supporting FMHs (except
 * interactive and batch logical units), ALARM instructs
 * BMS to set the alarm flag in the FMH.
 * <p>When using the ALARM option, refer to CTRL for a description of the option priority.
 * @param ALTERNATE
 * sets the terminal to use the ALTERNATE screen size.
 * @param CURSOR(data-value)
 * specifies the location to which the 3270 or 3604 cursor
 * is to be returned upon completion of a SEND MAP
 * command.
 * <p>The data value must be a halfword binary value that
 * specifies the cursor position relative to zero; the range of
 * values that can be specified depends on the size of the
 * screen being used. If no data value is specified,
 * symbolic cursor positioning is assumed. See the section
 * about minimum BMS in the  CICS Application
 * Programming Guide for more information about symbolic
 * cursor positioning.
 * <p>This option overrides any IC option of the ATTRB
 * operand of DFHMDF. If ACCUM is being used, the most
 * recent value of CURSOR specified is used to position
 * the cursor.
 * <p>The value specified in the CURSOR option must be
 * positive. A negative value leads to unpredictable results.
 * @param DATAONLY
 * specifies that only application program data is to be
 * written. The attribute characters (3270 only) must be
 * specified for each field in the supplied data. If the
 * attribute byte in the user-supplied data is set to X'00',
 * the attribute byte on the screen is unchanged. Any
 * default data or attributes from the map are ignored.
 * @param DEFAULT
 * sets the terminal to use the DEFAULT screen size.
 * @param ERASE
 * specifies that the screen printer buffer or partition is to
 * be erased and the cursor returned to the upper left
 * corner of the screen. (This option applies only to the
 * 3270, or 8775, and to the 3604 Keyboard Display.)
 * <p>The first output operation in any transaction, or in a
 * series of pseudoconversational transactions, should
 * always specify ERASE. For transactions attached to
 * 3270 screens or printers, unless explicitly overridden by
 * the DEFAULT or ALTERNATE option, this also ensures
 * that the correct screen size is selected, as defined for
 * the transaction by the SCRNSIZE option in the RDO
 * PROFILE definition.
 * @param ERASEAUP
 * specifies that before this page of output is displayed, all
 * unprotected character locations in the partition or the
 * entire screen are to be erased. (This option applies only
 * to the 3270 and 8775.)
 * @param FMHPARM(name)
 * specifies the name (1-8 characters) of the outboard map
 * to be used. (This option applies only to 3650 logical
 * units with outboard formatting.)
 * @param FORMFEED
 * specifies that a new page is required. For 3270 printers
 * and displays, the FORMFEED character is positioned at
 * the start of the buffer. The application program must
 * thus ensure that this buffer position is not overwritten by
 * map or text data. It is ignored if the target terminal does
 * not support FORMFEED (that is, the RDO TYPETERM
 * option FORMFEED was not used).
 * @param FREEKB
 * specifies that the 3270 keyboard should be unlocked
 * after the data is written. If FREEKB is omitted, the
 * keyboard remains locked.
 * <p>Note that the keyboard lock status is maintained
 * separately for each partition on a terminal that supports
 * partitions.
 * <p>When using the FREEKB option, refer to CTRL for a description of the option priority.
 * @param FROM(data-area)
 * specifies the data area containing the data to be
 * processed. If this field is not specified, the name defaults
 * to the name of the map suffixed with an O. This
 * includes the 12-byte prefix generated by the
 * TIOAPFX=YES option on the DFHMDI and DFHMSD
 * BMS map definitions (see pages 441 and 448).
 * @param FRSET
 * specifies that the modified data tags (MDTs) of all fields
 * currently in the 3270 (or partition) buffer are to be reset
 * to the unmodified condition (that is, field reset) before
 * any map data is written to the buffer.
 * <p>This allows the ATTRB operand of DFHMDF for the
 * requested map to control the final status of fields written
 * or rewritten in response to a BMS command, if no other
 * attribute information has been written in the symbolic
 * map.
 * <p>When using the FRSET option refer to CTRL for a description of the option priority.
 * @param HONEOM
 * specifies that the default printer line length is to be used.
 * <p>This length should be the same as that specified using
 * the RDO TYPETERM options PAGESIZE or ALTPAGE,
 * and the same as the printer platen width; otherwise the
 * data may not format correctly.
 * <p>When using the HONEOM option, refer to CTRL for a description of the option priority.
 * @param LAST
 * specifies that this is the last output operation for a
 * transaction and, therefore, the end of a bracket. This
 * option applies to logical units only.
 * @param LDC(name)
 * specifies a 2-character mnemonic to be used to
 * determine the logical device code (LDC) to be
 * transmitted in the FMH to the logical unit. The mnemonic
 * identifies an LDC entry defined by a DFHTCT
 * TYPE=LDC macro.
 * <p>When an LDC is specified, BMS uses the device type,
 * the page size, and the page status associated with the
 * LDC mnemonic to format the message. These values
 * are taken from the extended local LDC table for the
 * logical unit, if it has one. If the logical unit has only a
 * local (unextended) LDC table, the values are taken from
 * the system LDC table. The numeric value of the LDC is
 * obtained from the local LDC table, unless this is an
 * unextended table and the value is not specified, in which
 * case it is taken from the system table.
 * <p>If the LDC option is omitted, the LDC mnemonic
 * specified in the DFHMSD macro is used; see "DFHMSD". If the LDC option has also been omitted
 * from the DFHMSD macro, the action depends on the
 * type of logical unit, as follows:
 * 3601 logical unit
 * <p>The first entry in the local or extended local
 * LDC table is used, if there is one. If a
 * default cannot be obtained in this way, a
 * null LDC numeric value (X'00') is used.
 * <p>The page size used is the value that is
 * specified in the RDO TYPETERM options
 * PAGESIZE or ALTPAGE, or (1,40) if such a
 * value is not specified.
 * <p>LUTYPE4 logical unit, batch logical unit, or batch
 * data interchange logical unit
 * <p>The local LDC table is not used to supply a
 * default LDC; instead, the message is
 * directed to the logical unit console (that is,
 * to any medium that the logical unit elects to
 * receive such messages). For a batch data
 * interchange logical unit, this does not imply
 * sending an LDC in an FMH. The page size
 * is obtained in the manner described for the
 * 3601 logical unit.
 * @param LENGTH(data-value)
 * specifies the length of the data to be formatted as a
 * halfword binary value.
 * <p>If the data area sending the map is longer than the data
 * to be mapped, LENGTH should be specified. This
 * should include the length of the 12-byte prefix generated
 * by the TIOAPFX=YES option on the DFHMDI and
 * DFHMSD BMS map definitions (see pages 441 and
 * 448). For a description of a safe upper limit, see
 * "LENGTH options".
 * L40
 * specifies the line length for a 3270 printer; a carrier
 * return and line feed are forced after 40, 64, or 80
 * characters have been printed on a line. Unacceptable
 * results are likely if this differs from the page width
 * specified by the RDO TYPETERM options PAGESIZE or
 * <p>When using the options, refer to CTRL for
 * a description of the option priority.
 * L64
 * specifies the line length for a 3270 printer; a carrier
 * return and line feed are forced after 40, 64, or 80
 * characters have been printed on a line. Unacceptable
 * results are likely if this differs from the page width
 * specified by the RDO TYPETERM options PAGESIZE or
 * <p>When using the options, refer to CTRL for
 * a description of the option priority.
 * L80
 * specifies the line length for a 3270 printer; a carrier
 * return and line feed are forced after 40, 64, or 80
 * characters have been printed on a line. Unacceptable
 * results are likely if this differs from the page width
 * specified by the RDO TYPETERM options PAGESIZE or
 * ALTPAGE.
 * <p>When using the options, refer to CTRL for
 * a description of the option priority.
 * @param MAP(name)
 * specifies the name (1-7 characters) of the map to be
 * used.
 * @param MAPONLY
 * specifies that only default data from the map is to be
 * written.
 * @param MAPSET(name)
 * specifies the unsuffixed name (1-7 characters) of the
 * mapset to be used. The mapset must reside in the CICS
 * program library. The mapset can be defined either by
 * using RDO or by program autoinstall when the mapset is
 * first used. If this option is not specified, the name given
 * in the MAP option is assumed to be that of the mapset.
 * The number of maps per mapset is limited to a
 * maximum of 9 998.
 * @param MSR(data-value)
 * specifies the 4-byte data value that controls the 10/63
 * magnetic stripe reader attached to an 8775 or 3643
 * terminal. A set of constants is provided in DFHMSRCA
 * to assist in setting this 4-byte area. See "Magnetic slot
 * reader (MSR) control value constants, DFHMSRCA" for a complete list. This option is ignored if the
 * RDO TYPETERM option MSRCONTROL was not used.
 * @param NLEOM
 * specifies that data for a 3270 printer or a 3275 display
 * with the printer adapter feature should be built with
 * blanks and new-line (NL) characters, and that an
 * end-of-message (EM) character should be placed at the
 * end of the data. As the data is printed, each NL
 * character causes printing to continue on the next line,
 * and the EM character terminates printing.
 * <p>This option must be specified in the first SEND MAP
 * command used to build a logical message. The option is
 * ignored if the device receiving the message (direct or
 * routed) is not one of those mentioned above.
 * <p>If this option is used, buffer updating and attribute
 * modification of fields previously written into the buffer are
 * not allowed. CICS includes the ERASE option with every
 * write to the terminal.
 * <p>The NL character occupies a buffer position. A number
 * of buffer positions, equivalent to the value of the RDO
 * TYPETERM options PAGESIZE or ALTPAGE, for that
 * terminal, is unavailable for data. This may cause data to
 * wrap around in the buffer; if this occurs, the PAGESIZE
 * or ALTPAGE value must be reduced.
 * <p>The NLEOM option overrides the ALARM option if the
 * latter is present.
 * @param NOFLUSH
 * specifies that CICS does not clear pages on completion
 * but returns control to the program (having set the
 * OVERFLOW condition in EIBRESP).
 * @param OUTPARTN(name)
 * specifies the name (1-2 characters) of the partition to
 * which data is to be sent. This option is ignored if the
 * terminal does not support partitions, or if there is no
 * application partition set associated with the terminal. If
 * there is an application partition set, and the OUTPARTN
 * option is omitted, data is sent to the partition named by
 * the PARTN operand of the DFHMSD or DFHMDI map
 * definitions. If maps are not used, or if there is no PARTN
 * operand, the output is sent to the first partition in the
 * partition set.
 * @param PAGING
 * specifies that the output data is not to be sent
 * immediately to the terminal, but is to be placed in
 * temporary storage and displayed in response to paging
 * commands entered by the terminal operator.
 * <p>If PAGING is specified with a REQID that is defined as
 * recoverable in the temporary storage table (TST), CICS
 * provides message recovery for logical messages if the
 * task has reached a syncpoint.
 * @param PRINT
 * specifies that a print operation is to be started at a 3270
 * printer or at a 3275 with the printer adapter feature, or
 * that data on an LUTYPE2 (3274/76 or 3790) is to be
 * printed on a printer allocated by the controller. If this
 * option is omitted, the data is sent to the printer buffer but
 * is not printed.
 * <p>When using the PRINT option, refer to CTRL for a description of the option priority.
 * @param REQID(name)
 * specifies a 2-character prefix to be used as part of a
 * temporary storage identifier for CICS message recovery.
 * Only one prefix can be specified for each logical
 * message. The default prefix is **.
 * <p>BMS message recovery is provided for a logical
 * message only if the PAGING option is specified in the
 * BMS SEND commands and if the syncpoint has been
 * reached.
 * @param SET(ptr-ref)
 * specifies the pointer to be set to the address of the input
 * or output data.
 * <p>The SET option specifies that completed pages are to
 * be returned to the application program. The pointer is
 * set to the address of a list of completed pages. See the
 * description of the SET option in the section on full BMS
 * in the  CICS Application Programming Guide for more
 * guidance about using the SET option.
 * <p>The application program regains control either
 * immediately following the SEND MAP command (if the
 * current page is not yet completed), or at the label
 * specified in a HANDLE CONDITION RETPAGE
 * command, if the page has been completed.
 * <p>If TIOAPFX=YES is specified in the map definition, the
 * pointer returned contains the address of the TIOA prefix.
 * The user data starts at offset X'0C' from the start of the
 * TIOA prefix.
 * @param TERMINAL
 * specifies that the output data is to be sent to the
 * terminal that originated the transaction.
 * @param WAIT
 * specifies that control should not be returned to the
 * application program until the output operation has been
 * completed.
 * <p>If WAIT is not specified, control returns to the application
 * program when the output operation has started. A
 * subsequent input or output command (terminal control,
 * BMS, or batch data interchange) causes the application
 * program to wait until the previous command has been
 * completed.
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * MAP command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option is
 * different from that established by a previous REQID
 * option, or by default for this logical message --REQID
 * (**).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVLDC<DD>
 * occurs if the specified LDC mnemonic is not included in
 * the LDC list for the logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVMPSZ<DD>
 * occurs if the specified map is too wide for the terminal,
 * or if a HANDLE CONDITION OVERFLOW command is
 * active and the specified map is too long for the terminal.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <LI>Text data is output to the same partition or LDC as
 * mapped data while a BMS logical message is
 * active. If neither partitions nor LDCs are in use, text
 * data is output to the same logical message as
 * mapped data.
 * <LI>A separate SEND MAP command with the ACCUM
 * option is issued to the terminal that originated the
 * transaction while a routed logical message is being
 * built.
 * <LI>A SEND MAP command is issued for a map without
 * field specifications by specifying the FROM option
 * without the DATAONLY option.
 * <LI>During overflow processing, data is sent to a
 * different LDC from the LDC that caused page
 * overflow.
 * <LI>Partitions are in use, the OUTPARTN option has not
 * been coded on the SEND MAP command, but the
 * PARTN operand has been coded in the mapset
 * definition. If the condition arises, it suggests that
 * different versions of the mapset have different
 * PARTN values, and that the suffix deduced for the
 * partition is not the same as the suffix of the loaded
 * mapset.
 * <LI>A SEND MAP command with the DATAONLY option
 * is issued with a data area, supplied by the user, that
 * resides above the 16MB line. But the length of this
 * data area is not longer than the TIOA prefix.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>OVERFLOW<DD>
 * occurs if the mapped data does not fit on the current
 * page. This condition is only raised if a HANDLE
 * CONDITION OVERFLOW command is active.
 * <p>Default action: ignore the condition.
 * <DT>RETPAGE<DD>
 * occurs if the SET option is specified and a completed
 * page is ready for return to the application program.
 * <p>Default action: return control to the application program
 * at the point immediately following the BMS SEND MAP
 * command.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if a SEND MAP command is interrupted by the
 * terminal operator pressing the ATTN key. It applies only
 * to the 2741 Communication Terminal, and only if write
 * break is supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 */
function "SEND MAP"(
   MAP(name),
   ACCUM,
   ACTPARTN(name),
   ALARM,
   ALTERNATE,
   CURSOR(data-value),
   DATAONLY,
   DEFAULT,
   ERASE,
   ERASEAUP,
   FMHPARM(name),
   FORMFEED,
   FREEKB,
   FROM(data-area),
   FRSET,
   HONEOM,
   LAST,
   LDC(name),
   LENGTH(data-value),
   MAPONLY,
   MAPSET(name),
   MSR(data-value),
   NLEOM,
   NOFLUSH,
   OUTPARTN(name),
   PAGING,
   PRINT,
   REQID(name),
   SET(ptr-ref),
   TERMINAL,
   WAIT,
   );

/**
 * Create mapped output data to be sent to a terminal described by MAPPINGDEV at some later time. For further information
 * about BMS, see the  CICS Application Programming Guide.
 *
 * <pre>
 * Minimum BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND MAP(name)__MAPPINGDEV(data-value)__SET(ptr-ref)_____________> |
 * |                                                                        |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |     |_MAPSET(name)_|                                                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_FROM(data-area)_|  |_DATAONLY_|  |_LENGTH(data-value)_| |       |
 * |    |_MAPONLY___________________________________________________|       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CURSOR___________________|  |_FORMFEED_|                          |
 * |              |_(data-value)_|                                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ERASE________________|  |_PRINT_|  |_FREEKB_|  |_ALARM_|          |
 * |    |_ERASEAUP_____________|                                            |
 * |                                                                        |
 * | >_____________><                                                       |
 * |    |_FRSET_|                                                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVMPSZ, INVREQ                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>SEND MAP MAPPINGDEV creates mapped output data to
 * be sent to a terminal that is not the principal facility of the
 * transaction. The terminal characteristics to be used are
 * defined by MAPPINGDEV.
 * <p>The mapped data is not transmitted but is returned to the
 * application in a buffer defined by the SET option.
 *
 * @conditions
 * Some of the following conditions may occur in combination. If
 * more than one occurs, only the first is passed to the
 * application program.
 * <dl>
 * <DT>INVMPSZ<DD>
 * occurs if the specified map is too wide for the terminal
 * specified by MAPPINGDEV or if a HANDLE CONDITION
 * OVERFLOW command is active and the specified map
 * is too long for the terminal specified by MAPPINGDEV.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if the terminal specified by MAPPINGDEV does
 * not exist, does not support BMS, or is not a 3270 printer
 * or display.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param ALARM
 *                  specifies that the 3270 audible alarm feature is to be
 *                  activated. For logical units supporting FMHs (except
 *                  interactive and batch logical units), ALARM instructs
 *                  BMS to set the alarm flag in the FMH.
 *                  When using the ALARM option, refer to CTRL for a description of the option priority.
 * @param CURSOR(data-value)
 *                  specifies the location to which the 3270 cursor is to be
 *                  returned upon completion of a SEND MAP
 *                  MAPPINGDEV command.
 *                  <p>The data value must be a halfword binary value that
 *                  specifies the cursor position relative to zero; the range of
 *                  values that can be specified depends on the size of the
 *                  screen being used. If no data value is specified,
 *                  symbolic cursor positioning is assumed. See the section
 *                  about minimum BMS in the  CICS Application
 *                  Programming Guide for more information about symbolic
 *                  cursor positioning.
 *                  <p>This option overrides any IC option of the ATTRB
 *                  operand of DFHMDF.
 *                  <p>The value specified in the CURSOR option must be
 *                  positive. A negative value leads to unpredictable results.
 * @param DATAONLY
 *                  specifies that only application program data is to be
 *                  written. The attribute characters (3270 only) must be
 *                  specified for each field in the supplied data. If the
 *                  attribute byte in the user-supplied data is set to X'00',
 *                  the attribute byte on the screen is unchanged. Any
 *                  default data or attributes from the map are ignored.
 * @param ERASE
 *                  specifies that the screen printer buffer is to be erased
 *                  and the cursor returned to the upper left corner of the
 *                  screen. (This option applies only to the 3270, or 8775)
 *                  The first output operation in any transaction, or in a
 *                  series of pseudoconversational transactions, should
 *                  always specify ERASE. For transactions attached to
 *                  3270 screens or printers, this also ensures that the
 *                  correct screen size is selected, as defined for the
 *                  transaction by the SCRNSIZE option in the RDO
 *                  PROFILE definition.
 * @param ERASEAUP
 *                  specifies that before this page of output is displayed, all
 *                  unprotected character locations in the entire screen are
 *                  to be erased. (This option applies only to the 3270 and
 *                  8775.)
 * @param FORMFEED
 *                  specifies that a new page is required. For 3270 printers
 *                  and displays, the FORMFEED character is positioned at
 *                  the start of the buffer. The application program must
 *                  thus ensure that this buffer position is not overwritten by
 *                  map or text data. It is ignored if the target terminal does
 *                  not support FORMFEED (that is, the RDO TYPETERM
 *                  option FORMFEED was not used, or the terminal control
 *                  table TYPE=TERMINAL does not specify FF=YES).
 * @param FREEKB
 *                  specifies that the 3270 keyboard should be unlocked
 *                  after the data is written. If FREEKB is omitted, the
 *                  keyboard remains locked.
 *                  <p>When using the FREEKB option, refer to CTRL for a description of the option priority.
 * @param FROM(data-area)
 *                  specifies the data area containing the data to be
 *                  processed. If this field is not specified, the name defaults
 *                  to the name of the map suffixed with an O. This
 *                  includes the 12-byte prefix generated by the
 *                  TIOAPFX=YES option on the DFHMDI and DFHMSD
 *                  BMS map definitions (see pages 441 and 448).
 * @param FRSET
 *                  specifies that the modified data tags (MDTs) of all fields
 *                  currently in the 3270 buffer are to be reset to the
 *                  unmodified condition (that is, field reset) before any map
 *                  data is written to the buffer.
 *                  <p>This allows the ATTRB operand of DFHMDF for the
 *                  requested map to control the final status of fields written
 *                  or rewritten in response to a BMS command, if no other
 *                  attribute information has been written in the symbolic
 *                  map.
 *                  <p>When using the FRSET option refer to CTRL for a description of the option priority.
 * @param LENGTH(data-value)
 *                  specifies the length of the data to be formatted as a
 *                  halfword binary value.
 *                  <p>If the data area sending the map is longer than the data
 *                  to be mapped, LENGTH should be specified. This
 *                  should include the length of the 12-byte prefix generated
 *                  by the TIOAPFX=YES option on the DFHMDI and
 *                  DFHMSD BMS map definitions (see pages 441 and
 *                  448). For a description of a safe upper limit, see
 *                  "LENGTH options".
 * @param MAP(name)
 *                  specifies the name (1-7 characters) of the map to be
 *                  used.
 * @param MAPPINGDEV(data-value)
 *                  specifies the name of a 3270 terminal whose BMS
 *                  characteristics match those of the terminal to which the
 *                  data will eventually be sent using a SEND TEXT
 *                  MAPPED command or a terminal control SEND or
 *                  CONVERSE.
 * @param MAPONLY
 *                  specifies that only default data from the map is to be
 *                  written.
 * @param MAPSET(name)
 *                  specifies the unsuffixed name (1-7 characters) of the
 *                  mapset to be used. The mapset must reside in the CICS
 *                  program library. The mapset can be defined either by
 *                  using RDO or by program autoinstall when the mapset is
 *                  first used. If this option is not specified, the name given
 *                  in the MAP option is assumed to be that of the mapset.
 *                  The number of maps per mapset is limited to a
 *                  maximum of 9 998.
 * @param PRINT
 *                  specifies that a print operation is to be started at a 3270
 *                  printer or at a 3275 with the printer adapter feature, or
 *                  that data on an LUTYPE2 (3274/76 or 3790) is to be
 *                  printed on a printer allocated by the controller. If this
 *                  option is omitted, the data is sent to the printer buffer but
 *                  is not printed.
 *                  <p>When using the PRINT option, refer to CTRL for a description of the option priority.
 * @param SET(ptr-ref)
 *                  specifies the pointer to be set to the address of the
 *                  mapped data.
 *                  <p>The storage area containing the mapped data has the
 *                  same format as the page buffer returned when using the
 *                  SET option in the full BMS SEND command. See the
 *                  description of the MAPPINGDEV facility in the  CICS
 *                  Application Programming Guide for more guidance about
 *                  using the SET option.
 */
function "SEND MAP <MAPPINGDEV>"(
   MAP(name),
   MAPPINGDEV(data-value),
   ALARM,
   CURSOR(data-value),
   DATAONLY,
   ERASE,
   ERASEAUP,
   FORMFEED,
   FREEKB,
   FROM(data-area),
   FRSET,
   LENGTH(data-value),
   MAPONLY,
   MAPSET(name),
   PRINT,
   SET(ptr-ref),
   );


/**
 * Send last page of data. Only supplied by full BMS. For further information about BMS, see the  CICS Application Programming
 * Guide.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND PAGE____RELEASE_____________________________________________> |
 * |                |          |_TRANSID(name)_| |                          |
 * |                |_RETAIN_____________________|                          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TRAILER(data-area)_|  |_SET(ptr-ref)_|                            |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_AUTOPAGE______________|  |_OPERPURGE_|  |_FMHPARM(name)_|         |
 * |    |           |_CURRENT_| |                                           |
 * |    |           |_ALL_____| |                                           |
 * |    |_NOAUTOPAGE____________|                                           |
 * |                                                                        |
 * | >____________><                                                        |
 * |    |_LAST_|                                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, INVREQ, RETPAGE, TSIOERR, WRBRK                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <P>SEND PAGE completes a BMS logical message. It causes
 * BMS to generate a device-dependent data stream for the last
 * (perhaps the only) page of data. Typically, this last page is
 * only partially full.
 * <P>Options can be included to specify how much control the
 * terminal operator should have over the disposition of the
 * logical message (AUTOPAGE, NOAUTOPAGE, and
 * OPERPURGE), to determine whether control should return to
 * the application program after transmission of the logical
 * message (RELEASE or RETAIN), to add trailer data to a text
 * logical message (TRAILER), and to return the
 * device-dependent data stream for the last page of a logical
 * message to the application program (SET). If this is a paging
 * message, the last page of the logical message is transmitted
 * to temporary storage and the terminal operator paging
 * transaction is initiated. If it is a terminal logical message, the
 * last page is transmitted to the terminal.
 * This is supported by full BMS only.
 *
 * @conditions
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * PAGE command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * 200 Command not allowed for a distributed program
 * link server program.
 * </dl>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <UL>
 * <LI>The disposition (TERMINAL, PAGING, or SET) of a
 * BMS logical message is changed prior to its
 * completion by the SEND PAGE command.
 * <LI>Text data is output to the same partition or LDC as
 * mapped data while a BMS logical message is
 * active. If neither partitions nor LDCs are in use, text
 * data is output to the same logical message as
 * mapped data.
 * <LI>The TRAILER option is specified when terminating a
 * logical message built with SEND MAP commands
 * only.
 * <LI>During overflow processing data is sent to a
 * different LDC from the LDC that caused page
 * overflow.
 * <LI>The length of the trailer is negative.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>RETPAGE<DD>
 * occurs if the SET option is specified and the last or only
 * completed page is ready for return to the application
 * program.
 * <p>Default action: return control to the application program
 * at the point immediately following the BMS SEND PAGE
 * command.
 * <DT>TSIOERR<DD>
 * occurs if there is an unrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if the SEND PAGE command is interrupted by
 * the terminal operator pressing the ATTN key. It applies
 * only to the 2741 Communication Terminal, and only if
 * write break is supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param ALL
 *                   specifies that if the ATTN key on a 2741 is pressed
 *                   while a BMS logical message is being sent to the
 *                   terminal, and the WRBRK condition is not active,
 *                   transmission of the current page is to cease and no
 *                   additional pages are to be transmitted. The logical
 *                   message is deleted.
 * @param AUTOPAGE
 *                   specifies that each page of a BMS logical message is to
 *                   be sent to the terminal as soon as it is available. If
 *                   paging on request is specified for the terminal by the
 *                   RDO TYPETERM option AUTOPAGE(NO), AUTOPAGE
 *                   overrides it for this logical message.
 *                   <P>AUTOPAGE is assumed for 3270 printers; it does not
 *                   apply to 3270 display terminals. If neither AUTOPAGE
 *                   nor NOAUTOPAGE is specified, the terminal has the
 *                   paging status specified for it using the RDO TYPETERM
 *                   option AUTOPAGE.
 * @param CURRENT
 *                   specifies that if the ATTN key on a 2741 is pressed
 *                   while a BMS logical message is being sent to the
 *                   terminal, and the WRBRK condition is not active,
 *                   transmission of the current page is to cease and
 *                   transmission of the next page (if any) is to begin.
 * @param FMHPARM(name)
 *                   specifies the name (1-8 characters) of the outboard map
 *                   to be used. This option applies only to 3650 logical
 *                   units with outboard formatting.
 * @param LAST
 *                   specifies that this is the last output operation for a
 *                   transaction and, therefore, the end of a bracket. If
 *                   RELEASE is specified, LAST is assumed unless the
 *                   SEND PAGE command is terminating a routing
 *                   operation. This option applies to logical units only.
 * @param NOAUTOPAGE
 *                   specifies that pages of a BMS logical message are to be
 *                   sent one at a time to the terminal. BMS sends the first
 *                   page to the terminal when the terminal becomes
 *                   available or on request of the terminal operator.
 *                   Subsequent pages are sent to the terminal in response
 *                   to requests from the terminal operator. (Refer to the
 *                   CICS Supplied Transactions manual for more
 *                   information about terminal operator paging commands.)
 *                   If automatic paging is specified for the terminal by the
 *                   RDO TYPETERM option AUTOPAGE(YES),
 *                   NOAUTOPAGE overrides it for this logical message. For
 *                   logical units, NOAUTOPAGE applies to all pages for all
 *                   LDCs in the logical message.
 *                   NOAUTOPAGE does not apply to 3270 printers.
 * @param OPERPURGE
 *                   specifies that CICS is to delete the BMS logical
 *                   message only when the terminal operator requests
 *                   deletion. If the option is omitted, CICS deletes the
 *                   message if the operator enters data that is not a paging
 *                   command.
 * @param RELEASE
 *                   specifies that, after the SEND PAGE command, control
 *                   is to be returned to CICS.
 * @param RETAIN
 *                   specifies that after the SEND PAGE command, control is
 *                   returned to the application program when the operator
 *                   has finished displaying the pages.
 * @param SET(ptr-ref)
 *                   specifies the pointer to be set to the address of the
 *                   output data.
 *                   <P>The SET option specifies that the last or only page is
 *                   returned to the application program. The pointer is set to
 *                   the address of the current page. A list of addresses is
 *                   created and, if the ROUTE command is in operation,
 *                   there is an address entry for each device. If the ROUTE
 *                   command is not in operation, the list contains only the
 *                   one entry. See the description of the SET option in the
 *                   section about full BMS in the  CICS Application
 *                   Programming Guide for more guidance on using the
 *                   SET option.
 *                   <p>The application program regains control either
 *                   immediately following the SEND PAGE command (if the
 *                   current page is not yet completed), or at the label
 *                   specified in a HANDLE CONDITION RETPAGE
 *                   command if the page has been completed.
 *                   <p>If TIOAPFX=YES is specified in the map definition, the
 *                   pointer returned contains the address of the TIOA prefix.
 *                   The user data starts at offset X'0C' from the start of the
 *                   TIOA prefix.
 * @param TRAILER(data-area)
 *                   specifies the text data area that contains trailer data to
 *                   be placed at the bottom of the last page only. The
 *                   format of the trailer is:
 *                   <dl compact>
 *                   <DT><b>2 bytes</b><DD> Binary length of the data (n)
 *                   <dt><b>2 bytes</b><dd> Binary zero
 *                   <dt><b>n bytes</b><dd> Data.
 *                   </dl>
 *                   See the  CICS Application Programming Guide for more
 *                   information.
 * @param TRANSID(name)
 *                   specifies the transaction identifier (1-4 alphanumeric
 *                   characters) to be used with the next input message from
 *                   the terminal the task is attached to. The identifier must
 *                   have been defined to CICS via a RDO TRANSACTION
 *                   resource definition. TRANSID is valid only if SEND
 *                   PAGE RELEASE is specified.
 *                   <p>If this option is specified in a program that is not at the
 *                   highest logical level, the specified transaction identifier is
 *                   used only if a new transaction identifier is not provided in
 *                   another SEND PAGE command (or in a RETURN
 *                   program control command) issued in a program at a
 *                   higher logical level.
 */
function "SEND PAGE"(
   ALL,
   AUTOPAGE,
   CURRENT,
   FMHPARM(name),
   LAST,
   NOAUTOPAGE,
   OPERPURGE,
   RELEASE,
   RETAIN,
   SET(ptr-ref),
   TRAILER(data-area),
   TRANSID(name),
   );

/**
 * This command is available on standard and full BMS only. For further information about BMS, see the  CICS Application
 * Programming Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND PARTNSET______________><                                      |
 * |                    |_(name)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVPARTNSET, INVREQ                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SEND PARTNSET associates the partition set specified by
 * the PARTNSET option with the application program. If the
 * partition set name is omitted, the terminal is reset to the base
 * (unpartitioned) state.
 * <p><b>Note</b>:  A SEND PARTNSET command must not be followed
 * immediately by a RECEIVE command. The two
 * commands must be separated by a SEND MAP,
 * SEND TEXT, or SEND CONTROL command, so that
 * the partition set is sent to the terminal.
 * @conditions
 * The following conditions may occur together. If both occur,
 * only the first one is passed to the application program.
 * <dl>
 * <DT>INVPARTNSET<DD>
 * occurs if the partition set named in the SEND
 * PARTNSET command is not a valid partition set (for
 * example, it may be a mapset).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * also occurs (RESP2 not set) in the following situation:
 * <UL>
 * <li>A SEND PARTNSET command is issued while a
 * logical message is active.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "SEND PARTNSET"(
   PARTNSET[(name)]
   );

/**
 * Send data without mapping. The keywords are separated into those supported by standard and full BMS. For further
 * information about BMS, see the  CICS Application Programming Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND TEXT__><                                                      |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Standard BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__FROM(data-area)__________________________________________________> |
 * |                      |_LENGTH(data-value)_|                            |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CURSOR(data-value)_|  |_FORMFEED_|  |_ERASE________________|      |
 * |                                                   |_DEFAULT___|        |
 * |                                                   |_ALTERNATE_|        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PRINT_|  |_FREEKB_|  |_ALARM_|  |_NLEOM_|  |_FMHPARM(name)_|      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    | |_OUTPARTN(name)_|  |_ACTPARTN(name)_| |                          |
 * |    |_LDC(name)______________________________|                          |
 * |                                                                        |
 * | >_______________________><                                             |
 * |    |_MSR(data-value)_|                                                 |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * Full BMS:
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |      _TERMINAL_____________________                                    |
 * |     |           |_WAIT_|  |_LAST_| |                                   |
 * | >>__|______________________________|_________________________________> |
 * |     |_SET(ptr-ref)_________________|  |_REQID(name)_|                  |
 * |     |_PAGING_______________________|                                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_HEADER(data-area)_|  |_TRAILER(data-area)_|                       |
 * |                                                                        |
 * |                                         _HONEOM_                       |
 * | >______________________________________|________|__><                  |
 * |    |_JUSTIFY(data-value)_|  |_ACCUM_|  |_L40____|                      |
 * |    |_JUSFIRST____________|             |_L64____|                      |
 * |    |_JUSLAST_____________|             |_L80____|                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, IGREQID, INVLDC, INVPARTN, INVREQ, LENGERR,       |
 * | RETPAGE, TSIOERR, WRBRK                                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <P><B>Description</b>
 * <p>SEND TEXT sends text data without mapping. The text is
 * split into lines of the same width as the terminal, such that
 * words are not broken across line boundaries. If the text
 * exceeds a page, it is split into pages that fit on the terminal
 * with application-defined headers and trailers.
 * <p>When using the SEND TEXT command with any of the
 * ALARM, FREEKB, FRSET, HONEOM, L40, L64, L80, or
 * PRINT options, see CTRL for a description of
 * the option priority.
 *
 * @conditions
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * TEXT command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option on a
 * BMS SEND command is different from that established
 * by a previous REQID option, or by default for this logical
 * message --REQID (**).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVLDC<DD>
 * occurs if the specified LDC mnemonic is not included in
 * the LDC list for the logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>Text data is output to the same partition or LDC as
 * mapped data while a BMS logical message is
 * active. If neither partitions nor LDCs are in use, text
 * data is output to the same logical message as
 * mapped data.
 * <LI>During overflow processing, data is sent to a
 * different LDC from the LDC that caused page
 * overflow.
 * <LI>The length of a header on a SEND TEXT command
 * is negative.
 * <LI>The length of a trailer on a SEND TEXT command
 * is negative.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if an out-of-range value is supplied in the
 * LENGTH option.
 * <p>Default action: terminate the task abnormally.
 * <DT>RETPAGE<DD>
 * occurs if the SET option is specified and a completed
 * page is ready for return to the application program.
 * <p>Default action: return control to the application program
 * at the point immediately following the BMS SEND TEXT
 * command.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if a SEND command is interrupted by the
 * terminal operator pressing the ATTN key. It applies only
 * to the 2741 Communication Terminal, and only if write
 * break is supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param ACCUM
 *                  specifies that this command is one of a number of
 *                  commands that are used to build a logical message. The
 *                  logical message is completed by a SEND PAGE
 *                  command, or deleted by a PURGE MESSAGE
 *                  command.
 *                  <p>HEADER, JUSFIRST, JUSLAST, JUSTIFY and
 *                  TRAILER all imply ACCUM.
 * @param ACTPARTN(name)
 *                  specifies the name (1-2 characters) of the partition to be
 *                  activated. Activating a partition moves the cursor into the
 *                  specified partition, and unlocks the keyboard for the
 *                  specified partition.
 *                  <p>This option is ignored if the target terminal does not
 *                  support partitions, or if there is no application partition
 *                  set.
 * @param ALARM
 *                  specifies that the 3270 audible alarm feature is to be
 *                  activated. For logical units supporting FMHs (except
 *                  interactive and batch logical units), ALARM instructs
 *                  BMS to set the alarm flag in the FMH.
 * @param ALTERNATE
 *                  sets the terminal to use the ALTERNATE screen size.
 * @param CURSOR(data-value)
 *                  specifies the location to which the 3270 or 3604 cursor
 *                  is to be returned on completion of a SEND TEXT
 *                  command.
 *                  <p>The data value must be a halfword binary value that
 *                  specifies the cursor position relative to zero; the range of
 *                  values that can be specified depends on the size of the
 *                  screen being used.
 *                  <p>This option overrides any IC option of the ATTRB
 *                  operand of DFHMDF. If ACCUM is being used, the most
 *                  recent value of CURSOR specified is used to position
 *                  the cursor.
 *                  <p>The value specified in the CURSOR option must be
 *                  positive. A negative value leads to unpredictable results.
 * @param DEFAULT
 *                  sets the terminal to use the DEFAULT screen size.
 * @param ERASE
 *                  specifies that the screen printer buffer or partition is to
 *                  be erased and the cursor returned to the upper left
 *                  corner of the screen. (This option applies only to the
 *                  3270, or 8775, and to the 3604 Keyboard Display.)
 *                  The first output operation in any transaction, or in a
 *                  series of pseudoconversational transactions, should
 *                  always specify ERASE. For transactions attached to
 *                  3270 screens or printers, unless explicitly overridden by
 *                  the DEFAULT or ALTERNATE option, this also ensures
 *                  that the correct screen size is selected, as defined for
 *                  the transaction by the SCRNSIZE option in the RDO
 *                  PROFILE definition.
 * @param FMHPARM(name)
 *                  specifies the name (1-8 characters) of the outboard map
 *                  to be used. (This option applies only to 3650 logical
 *                  units with outboard formatting.)
 * @param FORMFEED
 *                  specifies that a new page is required. For 3270 printers
 *                  and displays, the FORMFEED character is positioned at
 *                  the start of the buffer. The application program must
 *                  thus ensure that this buffer position is not overwritten by
 *                  map or text data. It is ignored if the target terminal does
 *                  not support FORMFEED (that is, the RDO TYPETERM
 *                  option FORMFEED was not used).
 *                  <p>The FORMFEED option can appear on any SEND TEXT
 *                  ACCUM command. You need only specify it once within
 *                  a physical page because it always forces a FORMFEED
 *                  at the start of the physical page. To force a FORMFEED
 *                  at the start of a particular SEND TEXT ACCUM
 *                  command, use the JUSFIRST option instead.
 * @param FREEKB
 *                  specifies that the 3270 keyboard should be unlocked
 *                  after the data is written. If FREEKB is omitted, the
 *                  keyboard remains locked.
 *                  <p>When using the FREEKB option, refer to CTRL for a description of the option priority.
 *                  <p>Note that the keyboard lock status is maintained
 *                  separately for each partition on a terminal that supports
 *                  partitions.
 * @param FROM(data-area)
 *                  specifies the data area containing the data to be sent.
 * @param HEADER(data-area)
 *                  specifies the header data to be placed at the beginning
 *                  of each page of text data. The format of the header is:
 *                  <dl compact>
 *                  <DT><b>2 bytes</b><DD> Binary length of the data (n).
 *                  <dt><b>1 byte</b><dd> Page numbering required or not (blank).
 *                  <dt><b>1 byte</b><dd> Reserved field.
 *                  <dt><b>n bytes</b><dd> Data.
 *                  </dl>
 *                  <p>See the  CICS Application Programming Guide for more
 *                  information.
 * @param HONEOM
 *                  specifies that the default printer line length is to be used.
 *                  <p>This length should be the same as that specified using
 *                  the RDO TYPETERM options PAGESIZE or ALTPAGE,
 *                  and the same as the printer platen width; otherwise the
 *                  data may not format correctly.
 *                  <p>When using the HONEOM option, refer to CTRL for a description of the option priority.
 * @param JUSFIRST
 *                  specifies that the text data is to be placed at the top of
 *                  the page. Any partially formatted page from previous
 *                  requests is considered to be complete. If the HEADER
 *                  option is specified, the header precedes the data. See
 *                  also the description of the JUSTIFY option.
 * @param JUSLAST
 *                  specifies that the text data is to be positioned at the
 *                  bottom of the page. The page is considered to be
 *                  complete after the request has been processed. If the
 *                  TRAILER option is specified, the trailer follows the data.
 *                  See also the description of the JUSTIFY option.
 * @param JUSTIFY(data-value)
 *                  specifies the line of the page at which the text data is to
 *                  be positioned. The data value must be a halfword
 *                  binary value in the range 1 through 240. Although they
 *                  may not be specified as constants, the special values -1
 *                  and -2 can be supplied dynamically to signify JUSFIRST
 *                  or JUSLAST, respectively.
 * @param LAST
 *                  specifies that this is the last output operation for a
 *                  transaction and, therefore, the end of a bracket. This
 *                  option applies to logical units only.
 * @param LDC(name)
 *                  specifies a 2-character mnemonic to be used to
 *                  determine the logical device code (LDC) to be
 *                  transmitted in the FMH to the logical unit. The mnemonic
 *                  identifies an LDC entry defined by a DFHTCT
 *                  TYPE=LDC macro.
 *                  <p>When an LDC is specified, BMS uses the device type,
 *                  the page size, and the page status associated with the
 *                  LDC mnemonic to format the message. These values
 *                  are taken from the extended local LDC table for the
 *                  logical unit, if it has one. If the logical unit has only a
 *                  local (unextended) LDC table, the values are taken from
 *                  the system LDC table. The numeric value of the LDC is
 *                  obtained from the local LDC table, unless this is an
 *                  unextended table and the value is not specified, in which
 *                  case it is taken from the system table.
 * @param LENGTH(data-value)
 *                  specifies the length of the data to be sent as a halfword
 *                  binary value. For a description of a safe upper limit, see
 *                  "LENGTH options".
 *                  L40
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 *                  L64
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 *                  L80
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 * @param MSR(data-value)
 *                  specifies the 4-byte data value that controls the 10/63
 *                  magnetic stripe reader attached to an 8775 or 3643
 *                  terminal. A set of constants is provided in DFHMSRCA
 *                  to assist in setting this 4-byte area. See "Magnetic slot
 *                  reader (MSR) control value constants, DFHMSRCA" 
 *                  for a complete list. This option is ignored if the
 *                  RDO TYPETERM option MSRCONTROL was not used.
 * @param NLEOM
 *                  specifies that data for a 3270 printer or a 3275 display
 *                  with the printer adapter feature should be built with
 *                  blanks and new-line (NL) characters, and that an
 *                  end-of-message (EM) character should be placed at the
 *                  end of the data. As the data is printed, each NL
 *                  character causes printing to continue on the next line,
 *                  and the EM character terminates printing.
 *                  <p>This option must be specified in the first SEND TEXT
 *                  command used to build a logical message. The option is
 *                  ignored if the device receiving the message (direct or
 *                  routed) is not one of those mentioned above.
 *                  <p>If this option is used, buffer updating and attribute
 *                  modification of fields previously written into the buffer are
 *                  not allowed. CICS includes the ERASE option with every
 *                  write to the terminal.
 *                  <p>The NL character occupies a buffer position. A number
 *                  of buffer positions, equivalent to the value of the RDO
 *                  TYPETERM options PAGESIZE or ALTPAGE for that
 *                  terminal, is unavailable for data. This may cause data to
 *                  wrap around in the buffer; if this occurs, the PGESIZE
 *                  value must be reduced.
 *                  <p>The NLEOM option overrides the ALARM option if the
 *                  latter is present.
 * @param OUTPARTN(name)
 *                  specifies the name (1-2 characters) of the partition to
 *                  which data is to be sent. This option is ignored if the
 *                  terminal does not support partitions, or if there is no
 *                  application partition set associated with the terminal. If
 *                  there is an application partition set, and the OUTPARTN
 *                  option is omitted, data is sent to the partition named by
 *                  the PARTN operand of the DFHMSD or DFHMDI map
 *                  definition. If maps are not used, or if there is no PARTN
 *                  operand, the output is sent to the first partition in the
 *                  partition set.
 * @param PAGING
 *                  specifies that the output data is not to be sent
 *                  immediately to the terminal, but is to be placed in
 *                  temporary storage and displayed in response to paging
 *                  commands entered by the terminal operator.
 *                  <p>If PAGING is specified with a REQID that is defined as
 *                  recoverable in the temporary storage table (TST), CICS
 *                  provides message recovery for logical messages if the
 *                  task has reached a syncpoint.
 * @param PRINT
 *                  specifies that a print operation is to be started at a 3270
 *                  printer or at a 3275 with the printer adapter feature, or
 *                  that data on an LUTYPE2 (3274/76 or 3790) is to be
 *                  printed on a printer allocated by the controller. If this
 *                  option is omitted, the data is sent to the printer buffer but
 *                  is not printed.
 *                  <p>When using the PRINT option, refer to CTRL for a description of the option priority.
 * @param REQID(name)
 *                  specifies a 2-character prefix to be used as part of a
 *                  temporary storage identifier for CICS message recovery.
 *                  Only one prefix can be specified for each logical
 *                  message. The default prefix is **.
 *                  <p>BMS message recovery is provided for a logical
 *                  message only if the PAGING option is specified in the
 *                  BMS SEND commands and if the syncpoint has been
 *                  reached.
 * @param SET(ptr-ref)
 *                  specifies the pointer to be set to the address of the data.
 *                  It specifies that completed pages are to be returned to
 *                  the application program. The pointer is set to the
 *                  address of a list of completed pages. See the description
 *                  of the SET option in the section full-function BMS in the
 *                  CICS Application Programming Guide for more guidance
 *                  about using the SET option.
 *                  <p>The application program regains control either
 *                  immediately following the BMS SEND command (if the
 *                  current page is not yet completed), or at the label
 *                  specified in a HANDLE CONDITION RETPAGE
 *                  command if the page has been completed.
 *                  <p>If TIOAPFX=YES is specified in the map definition, the
 *                  pointer returned contains the address of the TIOA prefix.
 *                  The user data starts at offset X'0C' from the start of the
 *                  TIOA prefix.
 * @param TERMINAL
 *                  specifies that data is to be sent to the terminal that
 *                  originated the transaction.
 * @param TRAILER(data-area)
 *                  specifies the text data area that contains trailer data to
 *                  be placed at the bottom of each output page. The format
 *                  of the trailer is:
 *                  <dl compact>
 *                  <dt><b>2 bytes</b></dt> Binary length of the data (n)
 *                  <dt><b>1 byte</b></dt> Page numbering required or not (blank)
 *                  <dt><b>1 byte</b></dt> Reserved field
 *                  <dt><b>n bytes</b></dt> Data
 *                  </dl>
 *                  See the  CICS Application Programming Guide for more
 *                  information.
 * @param WAIT
 *                  specifies that control should not be returned to the
 *                  application program until the output operation has been
 *                  completed.
 *                  <p>If WAIT is not specified, control returns to the application
 *                  program when the output operation has started. A
 *                  subsequent input or output command (terminal control,
 *                  BMS, or batch data interchange) causes the application
 *                  program to wait until the previous command has been
 *                  completed.
 */
function "SEND TEXT"(
   ACCUM,
   ACTPARTN(name),
   ALARM,
   ALTERNATE,
   CURSOR(data-value),
   DEFAULT,
   ERASE,
   FMHPARM(name),
   FORMFEED,
   FREEKB,
   FROM(data-area),
   HEADER(data-area),
   HONEOM,
   JUSFIRST,
   JUSLAST,
   JUSTIFY(data-value),
   LAST,
   LDC(name),
   LENGTH(data-value),
   MSR(data-value),
   NLEOM,
   OUTPARTN(name),
   PAGING,
   PRINT,
   REQID(name),
   SET(ptr-ref),
   TERMINAL,
   TRAILER(data-area),
   WAIT,
   );

/**
 * Send data with mapping. Only supplied by full BMS. For further information about BMS, see the  CICS Application Programming
 * Guide.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND TEXT MAPPED__FROM(data-area)________________________________> |
 * |                                        |_LENGTH(data-value)_|          |
 * |                                                                        |
 * |     _TERMINAL_____________________                                     |
 * |    |           |_WAIT_|  |_LAST_| |                                    |
 * | >__|______________________________|___________________><               |
 * |    |_PAGING_______________________|  |_REQID(name)_|                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, IGREQID, INVREQ, TSIOERR, WRBRK                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>SEND TEXT MAPPED sends a page of a device-dependent
 * data stream previously built by BMS, and returned to the
 * application program with the SET option.
 * <p>It must only be used to send data previously generated by a
 * BMS SEND command specifying the SET option. It
 * references a 4-byte page control area (PGA) that BMS
 * placed at the end of the device-dependent data stream.
 * <p>The length of the device-dependent data stream set in the
 * TIOATDL field of the page buffer returned by the SET option
 * does not include the PGA. The LENGTH option of the SEND
 * TEXT MAPPED command should be set from this TIOATDL,
 * and hence does not include the PGA. However, if the
 * application program copies the page buffer returned by the
 * SET option, it should include the PGA in the copied data.
 * This command is only supported by full BMS.
 *
 * @conditions
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * TEXT command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option on a
 * BMS SEND command is different from that established
 * by a previous REQID option, or by default for this logical
 * message --REQID (**).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if a SEND command is interrupted by the
 * terminal operator pressing the ATTN key. It applies only
 * to the 2741 Communication Terminal, and only if write
 * break is supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param FROM(data-area)
 *                 specifies the data area containing the data to be sent.
 * @param LAST
 *                 specifies that this is the last output operation for a
 *                 transaction and, therefore, the end of a bracket. This
 *                 option applies to logical units only.
 * @param LENGTH(data-value)
 *                 specifies the length of the data to be formatted as a
 *                 halfword binary value. For a description of a safe upper
 *                 limit, see "LENGTH options".
 * @param PAGING
 *                 specifies that the output data is not to be sent
 *                 immediately to the terminal, but is to be placed in
 *                 temporary storage and displayed in response to paging
 *                 commands entered by the terminal operator.
 *                 <P>If PAGING is specified with a REQID that is defined as
 *                 recoverable in the temporary storage table (TST), CICS
 *                 provides message recovery for logical messages if the
 *                 task has reached a syncpoint.
 * @param REQID(name)
 *                 specifies a 2-character prefix to be used as part of a
 *                 temporary storage identifier for CICS message recovery.
 *                 Only one prefix can be specified for each logical
 *                 message. The default prefix is **.
 *                 <p>BMS message recovery is provided for a logical
 *                 message only if the PAGING option is specified in the
 *                 BMS SEND commands and if the syncpoint has been
 *                 reached.
 * @param TERMINAL
 *                 specifies that input data is to be sent to the terminal that
 *                 originated the transaction.
 * @param WAIT
 *                 specifies that control should not be returned to the
 *                 application program until the output operation has been
 *                 completed.
 *                 <p>If WAIT is not specified, control returns to the application
 *                 program when the output operation has started. A
 *                 subsequent input or output command (terminal control,
 *                 BMS, or batch data interchange) causes the application
 *                 program to wait intil the previous command has been
 *                 completed.
 */
function "SEND TEXT MAPPED"(
   FROM(data-area),
   LAST,
   LENGTH(data-value),
   PAGING,
   REQID(name),
   TERMINAL,
   WAIT,
   );

/**
 * Send a page. Only supplied by full BMS. For further information about BMS, see the  CICS Application Programming Guide.
 *
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SEND TEXT NOEDIT__FROM(data-area)________________________________> |
 * |                                        |_LENGTH(data-value)_|          |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ERASE________________|  |_PRINT_|  |_FREEKB_|  |_ALARM_|          |
 * |             |_DEFAULT___|                                              |
 * |             |_ALTERNATE_|                                              |
 * |                                                                        |
 * |                         _TERMINAL_____________________                 |
 * |                        |           |_WAIT_|  |_LAST_| |                |
 * | >______________________|______________________________|______________> |
 * |    |_OUTPARTN(name)_|  |_PAGING_______________________|                |
 * |                                                                        |
 * |                      _HONEOM_                                          |
 * | >___________________|________|__><                                     |
 * |    |_REQID(name)_|  |_L40____|                                         |
 * |                     |_L64____|                                         |
 * |                     |_L80____|                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IGREQCD, IGREQID, INVREQ, INVPARTN, TSIOERR, WRBRK         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SEND TEXT NOEDIT sends a page of a device-dependent
 * data stream built by the application program. The data
 * stream cannot contain structured fields. This command
 * differs from a terminal control SEND, because the data
 * stream may be written to temporary storage and interfaced to
 * the terminal operator paging transaction (using the PAGING
 * option). Also the device-dependent data stream can be sent
 * to a partition (using the OUTPARTN option).
 * <p>If the OUTPARTN option is specified, the data stream is sent
 * to the specified partition. This command is used to output a
 * user-generated data stream. It differs from a terminal control
 * SEND in that data may be output to temporary storage
 * (using the PAGING option), or routed like any other BMS
 * data.
 * <p>When using the SEND TEXT NOEDIT command with any of
 * the ALARM, FREEKB, FRSET, HONEOM, L40, L64, L80, or
 * PRINT options, see CTRL for a description of
 * the option priority.
 * <p>This command is supported on full BMS only.
 *
 * @conditions
 * <dl>
 * <DT>IGREQCD<DD>
 * occurs when an attempt is made to execute a SEND
 * TEXT command after a SIGNAL data-flow control
 * command with a request change direction (RCD) code
 * has been received from an LUTYPE4 logical unit.
 * <p>Default action: terminate the task abnormally.
 * <DT>IGREQID<DD>
 * occurs if the prefix specified in the REQID option on a
 * BMS SEND command is different from that established
 * by a previous REQID option, or by default for this logical
 * message --REQID (**).
 * <p>Default action: terminate the task abnormally.
 * <DT>INVPARTN<DD>
 * occurs if the specified partition is not defined in the
 * partition set associated with the application program.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>Text data is output to the same partition or LDC as
 * mapped data while a BMS logical message is
 * active. If neither partitions nor LDCs are in use, text
 * data is output to the same logical message as
 * mapped data.
 * <LI>During overflow processing, data is sent to a
 * different LDC from the LDC that caused page
 * overflow.
 * <LI>The length of a header on a SEND TEXT command
 * is negative.
 * <LI>The length of a trailer on a SEND TEXT command
 * is negative.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>TSIOERR<DD>
 * occurs if there is an irrecoverable temporary storage
 * input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRBRK<DD>
 * occurs if a SEND command is interrupted by the
 * terminal operator pressing the ATTN key. It applies only
 * to the 2741 Communication Terminal, and only if write
 * break is supported for CICS.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param ALARM
 *                  specifies that the 3270 audible alarm feature is to be
 *                  activated. For logical units supporting FMHs (except
 *                  interactive and batch logical units), ALARM instructs
 *                  BMS to set the alarm flag in the FMH.
 * @param ALTERNATE
 *                  sets the terminal to use the ALTERNATE screen size.
 * @param DEFAULT
 *                  sets the terminal to use the DEFAULT screen size.
 * @param ERASE
 *                  specifies that the screen printer buffer or partition is to
 *                  be erased and the cursor returned to the upper left
 *                  corner of the screen. (This option applies only to the
 *                  3270, or 8775, and to the 3604 Keyboard Display.)
 *                  <p>The first output operation in any transaction, or in a
 *                  series of pseudoconversational transactions, should
 *                  always specify ERASE. For transactions attached to
 *                  3270 screens or printers, unless explicitly overridden by
 *                  the DEFAULT or ALTERNATE option, this also ensures
 *                  that the correct screen size is selected, as defined for
 *                  the transaction by the SCRNSIZE option in the RDO
 *                  PROFILE definition.
 * @param FREEKB
 *                  specifies that the 3270 keyboard should be unlocked
 *                  after the data is written. If FREEKB is omitted, the
 *                  keyboard remains locked.
 *                  <p>Note that the keyboard lock status is maintained
 *                  separately for each partition on a terminal that supports
 *                  partitions.
 *                  <p>When using the FREEKB option, refer to CTRL for a description of the option priority.
 * @param FROM(data-area)
 *                  specifies the data area containing the data to be sent.
 * @param HONEOM
 *                  specifies that the default printer line length is to be used.
 *                  This length should be the same as that specified using
 *                  the RDO TYPETERM options PAGESIZE or ALTPAGE,
 *                  and the same as the printer platen width; otherwise the
 *                  data may not format correctly.
 *                  <p>When using the HONEOM option, refer to CTRL for a description of the option priority.
 * @param LAST
 *                  specifies that this is the last output operation for a
 *                  transaction and, therefore, the end of a bracket. This
 *                  option applies to logical units only.
 * @param LENGTH(data-value)
 *                  specifies the length of the data to be sent as a halfword
 *                  binary value. For a description of a safe upper limit, see
 *                  "LENGTH options".
 * @param L40
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 * @param L64
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 * @param L80
 *                  specifies the line length for a 3270 printer; a carrier
 *                  return and line feed are forced after 40, 64, or 80
 *                  characters have been printed on a line. Unacceptable
 *                  results are likely if this differs from the page width
 *                  specified by the RDO TYPETERM options PAGESIZE or
 *                  ALTPAGE.
 *                  <p>When using the options, refer to CTRL for
 *                  a description of the option priority.
 * @param OUTPARTN(name)
 *                  specifies the name (1-2 characters) of the partition to
 *                  which data is to be sent. This option is ignored if the
 *                  terminal does not support partitions, or if there is no
 *                  application partition set associated with the terminal. If
 *                  there is an application partition set, and the OUTPARTN
 *                  option is omitted, data is sent to the partition named by
 *                  the PARTN operand of the DFHMSD or DFHMDI map
 *                  definition. If maps are not used, or if there is no PARTN
 *                  operand, the output is sent to the first partition in the
 *                  partition set.
 * @param PAGING
 *                  specifies that the output data is not to be sent
 *                  immediately to the terminal, but is to be placed in
 *                  temporary storage and displayed in response to paging
 *                  commands entered by the terminal operator.
 *                  <p>If PAGING is specified with a REQID that is defined as
 *                  recoverable in the temporary storage table (TST), CICS
 *                  provides message recovery for logical messages if the
 *                  task has reached a syncpoint.
 * @param PRINT
 *                  specifies that a print operation is to be started at a 3270
 *                  printer or at a 3275 with the printer adapter feature, or
 *                  that data on an LUTYPE2 (3274/76 or 3790) is to be
 *                  printed on a printer allocated by the controller. If this
 *                  option is omitted, the data is sent to the printer buffer but
 *                  is not printed.
 *                  <p>When using the PRINT option, refer to CTRL for a description of the option priority.
 * @param REQID(name)
 *                  specifies a 2-character prefix to be used as part of a
 *                  temporary storage identifier for CICS message recovery.
 *                  Only one prefix can be specified for each logical
 *                  message. The default prefix is **.
 * @param TERMINAL
 *                  specifies that the data is to be sent to the terminal that
 *                  originated the transaction.
 * @param WAIT
 *                  specifies that control should not be returned to the
 *                  application program until the output operation has been
 *                  completed.
 *                  <p>If WAIT is not specified, control returns to the application
 *                  program when the output operation has started. A
 *                  subsequent input or output command (terminal control,
 *                  BMS, or batch data interchange) causes the application
 *                  program to wait until the previous command has been
 *                  completed.
 */
function "SEND TEXT NOEDIT"(
   ALARM,
   ALTERNATE,
   DEFAULT,
   ERASE,
   FREEKB,
   FROM(data-area),
   HONEOM,
   LAST,
   LENGTH(data-value),
   L40,
   L64,
   L80,
   OUTPARTN(name),
   PAGING,
   PRINT,
   REQID(name),
   TERMINAL,
   WAIT,
   );
/**
 * Sign off from a terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SIGNOFF__><                                                        |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SIGNOFF enables you to sign off from the terminal or
 * principal facility that you previously signed on to. When
 * sign-off is complete, the terminal reverts to the security
 * capabilities and operator characteristics associated with the
 * default user for this CICS region. The national language
 * reverts to the national language of the default user, if
 * defined, or the national language associated with the
 * definition of the terminal.
 * <p><b>Other resource managers</b>
 * <p>When this command is executed, CICS immediately
 * recognizes the sign-off and establishes the default
 * attributes for the terminal. The transaction (and any
 * associated task-related user exits, function shipping, or
 * distributed transaction processing) may have invoked
 * other resource managers (RMs), for example, IMS,
 * DB2(R), or VSAM. It is unpredictable whether these
 * other RMs recognize the sign-off before the
 * transaction terminates.
 * <p>The default attributes apply for all RMs invoked by
 * subsequent transactions at the terminal.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl>
 * <DT>1<DD> No user is currently signed on. This could be
 * because the CICS ESM is not initialized.
 * <DT>2<DD> There is no terminal with this task.
 * <DT>3<DD> This task's terminal has preset security.
 * <DT>4<DD> Sign-off is attempted using transaction routing
 * without using the CRTE transaction.
 * <DT>18<DD> The CICS ESM interface is not initialized.
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "SIGNOFF"(
   );

/**
 * Sign on to a terminal.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SIGNON__USERID(data-value)_______________________________________> |
 * |                                 |_ESMREASON(data-area)_|               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ESMRESP(data-area)_|  |_GROUPID(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LANGUAGECODE(data-value)_|  |_LANGINUSE(data-area)_|              |
 * |    |_NATLANG(data-value)______|                                        |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_NATLANGINUSE(data-area)_|  |_PASSWORD(data-value)_|               |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_NEWPASSWORD(data-value)_|  |_OIDCARD(data-value)_|                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTAUTH, USERIDERR                                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SIGNON associates the security capabilities and operator
 * characteristics of the specified user with the terminal. It
 * allows all types of terminal, with the exception of APPC, to
 * be signed on to. SIGNON signs on to the terminal or
 * principal facility associated with the issuing transaction.
 * <p>There is no implied sign-off with the SIGNON command. If
 * you want to sign on a user at a terminal to which a user is
 * already signed on, you must first issue a SIGNOFF
 * command. Note that there is no default value for the USERID
 * option.
 * <p>PASSWORD is used as a parameter which means that if
 * there is a dump it may become visible. You should therefore
 * clear the field as soon as possible after using PASSWORD.
 * <p><b>Other resource managers</b>
 * <p>When this command is executed, CICS immediately
 * recognizes the sign-on and establishes the specified
 * user's security and operating attributes for the terminal.
 * The transaction (and any associated task-related user
 * exits, function shipping, or distributed transaction
 * processing) may have invoked other resource managers
 * (RMs), for example, IMS, DB2, or VSAM. <b>It is
 * unpredictable whether these other RMs recognize the
 * sign-on before the transaction terminates.</b>
 * <p>The new user attributes apply for all RMs invoked by
 * subsequent transactions at the terminal.
 *
 * <p>If an optional input field contains all blanks, it is ignored.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>9<DD> The terminal is already signed on.
 * <DT>10<DD> No terminal is associated with this task.
 * <DT>11<DD> This task's terminal has preset security.
 * <DT>12<DD> The response from CICS security modules is
 * unrecognized.
 * <DT>13<DD> There is an unknown return code in ESMRESP
 * from the external security manager; or the external
 * security manager (ESM) is not active, or has failed
 * in an unexpected way.
 * <DT>14<DD> The required national language is not available.
 * <DT>15<DD> Signon was attempted using transaction routing
 * without using the CRTE transaction.
 * <DT>18<DD> The CICS ESM interface is not initialized
 * (SEC=NO specified as a System initialization
 * parameter).
 * <DT>25<DD> The terminal is of an invalid type.
 * <DT>26<DD> An error occurred during SNSCOPE checking. The
 * limit of MVS ENQ requests was reached.
 * <DT>27<DD> The external security manager (ESM) is not active.
 * <DT>28<DD> The required national language is invalid.
 * <DT>29<DD> The user is already signed on. This relates to the
 * sign-on scope checking.
 * <DT>200<DD> Command not allowed for a distributed program
 * link server program.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A password is required.
 * <DT>2<DD> The supplied password is wrong.
 * <DT>3<DD> A new password is required.
 * <DT>4<DD> The new password is not acceptable.
 * <DT>5<DD> An OIDCARD is required.
 * <DT>6<DD> The supplied OIDCARD is wrong.
 * <DT>16<DD> The USERID is not authorized to use this terminal.
 * <DT>17<DD> The USERID is not authorized to use the
 * application.
 * <DT>19<DD> The USERID is revoked.
 * <DT>20<DD> The USERID's access to the specified group has
 * been revoked.
 * <DT>21<DD> The sign-on failed during SECLABEL checking.
 * <DT>22<DD> The sign-on failed because the ESM is not
 * currently accepting sign-on.
 * <DT>23<DD> The GROUPID is not known to the ESM.
 * <DT>24<DD> The USERID is not contained in the GROUPID.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>USERIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> The USERID is not known to the external security
 * manager.
 * <DT>30<DD> The USERID is all blanks or nulls.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param ESMREASON(data-area)
 *               returns the reason code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               <p>If the ESM is RACF, this field is the RACF reason code.
 * @param ESMRESP(data-area)
 *               returns the response code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               <p>If the ESM is RACF, this field is the RACF return code.
 * @param GROUPID(data-value)
 *               assigns, to a RACF user group, the user that is being
 *               signed on. This overrides, for this session only, the
 *               default group name specified for the user in the RACF
 *               database.
 *               <p>If specified, this value, and the USERID, may be
 *               propagated to remote systems. See the  CICS RACF
 *               Security Guide for information on implementing LU6.2
 *               security for remote users.
 * @param LANGUAGECODE(data-value)
 *               specifies the national language that the user being
 *               signed on wants CICS to use. You specify the language
 *               as a standard 3-character IBM code. This is an
 *               alternative to the 1-character code that you specify on
 *               the NATLANG option.
 *               <p>See Appendix I, "National language codes"
 *               for possible values of the code.
 * @param LANGINUSE(data-area)
 *               the LANGINUSE option allows an application program to
 *               receive the national language chosen by the sign-on
 *               process. The language is identified as a standard
 *               three-character IBM code, instead of the one-character
 *               code used by NATLANGINUSE. It is an alternative to
 *               the existing NATLANGINUSE option.
 *               <p>See Appendix I, "National language codes"
 *               for possible values of the code.
 * @param NATLANG(data-value)
 *               specifies a 1-character field identifying the national
 *               language the user wants to use during the signed-on
 *               session.
 *               <p>See Appendix I, "National language codes"
 *               for possible values of the code.
 * @param NATLANGINUSE(data-area)
 *               specifies a one character the national language used
 *               during the signed-on session. The current
 *               implementation always returns the character "E" (U.S.
 *               English), which corresponds to the language supplied in
 *               the NATLANG option. NATLANGINUSE corresponds to
 *               the following (in order of decreasing priority):
 *               <ul>
 *               <LI>The language supplied in the NATLANG option of
 *               the SIGNON command.
 *               <li>The language associated with the user. This is
 *               specified in the ESM language segment.
 *               <LI>The language associated with the definition of the
 *               terminal.
 *               <LI>The language associated with the default USERID
 *               for the CICS region.
 *               <LI>The default language specified in the system
 *               initialization parameters.
 *               </UL>
 *               See Appendix I, "National language codes"
 *               for possible values of the code.
 * @param NEWPASSWORD(data-value)
 *               specifies an optional 8-byte field defining a new
 *               password. This option is only valid if PASSWORD is
 *               also specified.
 * @param OIDCARD(data-value)
 *               specifies an optional 65-byte field containing further
 *               security data from a magnetic strip reader (MSR) on
 *               32xx devices.
 * @param PASSWORD(data-value)
 *               specifies an 8-byte password required by the external
 *               security manager (ESM).
 * @param USERID(data-value)
 *               specifies the 8-byte sign-on USERID.
 */
function "SIGNON"(
   ESMREASON(data-area),
   ESMRESP(data-area),
   GROUPID(data-value),
   LANGUAGECODE(data-value),
   LANGINUSE(data-area),
   NATLANG(data-value),
   NATLANGINUSE(data-area),
   NEWPASSWORD(data-value),
   OIDCARD(data-value),
   PASSWORD(data-value),
   USERID(data-value),
   );

/**
 * Close a spool report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLCLOSE__TOKEN(data-area)______________><                       |
 * |                                   |_KEEP___|                           |
 * |                                   |_DELETE_|                           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, NOSPOOL                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>The SPOOLCLOSE command closes a CICS spool report
 * and, optionally, changes its retention characteristics. If more
 * than one transaction is trying to read reports from JES,
 * SPOOLCLOSE should not be immediately followed by
 * SPOOLOPEN. It should be followed by a WAIT, so that other
 * transactions can use the interface.
 * <p>A default disposition is taken if both KEEP and DELETE are
 * omitted from the SPOOLCLOSE command, or if the report is
 * closed implicitly by a SYNCPOINT or RETURN command:
 * <UL>
 * <LI>When an INPUT report is explicitly closed by a
 * SPOOLCLOSE command, the default disposition is
 * DELETE.
 * <LI>In all other cases, the default disposition is KEEP.
 * </ul>
 *
 * @conditions
 * <b>Note</b>:  There are no default actions.
 * <dl>
 * <DT>ALLOCERR<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>Dynamic allocation has rejected a request to
 * allocate an input data set.
 * <p>RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>  Unsupported language.
 * <DT>8<DD>  Unsupported function.
 * <DT>40<DD> Subsystem interface already enabled.
 * <p><b>Note</b>:  Errors 1024 and over are internal, and
 * should not occur. If one of these error
 * codes is returned, contact your IBM
 * support center.
 * </dl>
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No subsystem present.
 * <DT>8<DD> Interface being disabled; CICS is quiescing.
 * <DT>12<DD> Interface has been stopped.
 * </dl>
 * <DT>NOSTG<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A GETMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the GETMAIN register 15 return code.
 * </ul>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1024<DD> Input or output function has been corrupted, and
 * SPOOLCLOSE could not complete.
 * </dl>
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> Data set has not been opened.
 * </dl>
 * <DT>STRELERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A FREEMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the FREEMAIN register 15 return
 * code.
 * </ul>
 * </dl>
 * @param DELETE
 *               For an INPUT report, DELETE specifies that the next
 *               report is to be read on the subsequent OPEN INPUT.
 *               <p>For an OUTPUT report, DELETE specifies that the
 *               report is to be purged.
 *               <p><b>Note</b>:  When a JCL job is submitted using the internal
 *               reader (INTRDR) with the DELETE option
 *               specified, the job is sometimes run before the
 *               output is deleted.
 * @param KEEP
 *               For an INPUT report, KEEP specifies that the report is to
 *               be read again when SPOOLOPEN INPUT is next
 *               issued.
 *               <p>For an OUTPUT report, KEEP specifies that the report is
 *               to be sent to its destination node.
 * @param TOKEN(data-area)
 *               specifies the 8-character CICS-allocated token used to
 *               identify a report.
 */
function "SPOOLCLOSE"(
   DELETE,
   KEEP,
   TOKEN(data-area),
   );

/**
 *
 * Close a report.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLCLOSE REPORT(name)__TOKEN(data-value)_______________________> |
 * |                                                 |_LOG_|                |
 * |                                                                        |
 * | >________________________><                                            |
 * |    |_RELEASE__________|                                                |
 * |    |_HOLD_____________|                                                |
 * |    |_RESUME___________|                                                |
 * |    |_DELETE___________|                                                |
 * |    |_KEEP_____________|                                                |
 * |    |_DISP(data-value)_|                                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ILLOGIC, INVREQ, IOERR, NAMEERROR, NOSPACE, NOSPOOL,       |
 * | NOTAUTH                                                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <P>SPOOLCLOSE REPORT is a function of the report controller facility. For more
 * information about the report controller, see the CICS Report Controller User's
 * Guide and the CICS Report Controller Planning Guide.
 *
 * @param DELETE
 * specifies that the report can be deleted without printing; it is no longer required.
 * @param DISP(data-value)
 * specifies the POWER disposition status of the report after it has been closed (D, H, K, or L).
 * <p>If you do not specify a disposition for the report, it is closed with a disposition of D.
 * @param DISP('D')
 * (POWER DISP=D). Specifies that, after completion of the SPOOLCLOSE REPORT command, this report should be printed. The report is set to READY status.
 * <p>This option is synonymous with the RELEASE option, which is retained for compatibility with earlier releases of CICS.
 *
 * @param DISP('H')
 * (POWER DISP=H). The report is created in HOLD status. After printing, it is automatically deleted.
 * @param DISP('K')
 * (POWER DISP=K). The report is created for immediate printing. After printing, it is retained on the POWER queue (for example, for security purposes).
 * <p>This option is synonymous with the KEEP option, which is retained for compatibility with earlier releases of CICS.
 * @param DISP('L')
 * (POWER DISP=L). The report is created and is held on the queue until manually released. No attempt is made to print the report until the status of the report is changed by the CEMS or CEOS transactions, or by a VSE/POWER command. Once printed, the report is released and returned to the held status.
 * <p>This option is synonymous with the HOLD option, which is retained for compatibility with earlier releases of CICS.
 * @param HOLD
 * (POWER DISP=L). Specifies that the report is to be put in HOLD status after being closed. No attempt is made to print the report until the status of the report has been changed by the CEMS or CEOS transactions, or by a POWER command.
 * <p>This option is retained for compatibility with earlier releases of CICS. It is equivalent to the new option, DISP('L').
 * @param KEEP
 * (POWER DISP=K). Specifies that the report is created for immediate printing. After printing, it is retained on the POWER queue (for example, for security purposes).
 * <p>This option is retained for compatibility with earlier releases of CICS. It is equivalent to the new option, DISP('K').
 * @param LOG
 * specifies that a log report is to be closed. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 * <p>A log report can be in any format.
 * @param RELEASE
 * (POWER DISP=D). Specifies that, after completion of the SPOOLCLOSE REPORT command this report should be printed. The spooler sets the report to READY status.
 * <p>The report may be printed when the specified destination becomes available.
 * <p>This option is retained for compatibility with earlier releases of CICS. It is equivalent to the new option, DISP('D').
 * @param REPORT(name)
 * specifies the name (2-8 characters) of the report. This option is required for every command. The name must match the name specified in the SPOOLOPEN that used the same token.
 * <p>The valid characters that can be used in the report name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>- . / @ $ #
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 * <ul>
 * <li>ALL
 * <li>DEV
 * <li>FREE
 * <li>HOLD
 * <li>LOCAL
 * <li>PNET
 * <li>RJE
 * <li>STATUS.
 * </ul>
 * @param RESUME
 * (POWER DISP=A). Specifies that the report being closed is to be set in appendable status. It can be opened again later to add more report records.
 * <p>You should issue a SPOOLCLOSE RESUME command before you issue a SYNCPOINT, and a SPOOLOPEN RESUME after the SYNCPOINT. Otherwise, the SYNCPOINT results in the report being closed in READY status. However, there could be a transaction failure after the report has been closed, and before the SYNCPOINT. This could result in, for instance, file updates being backed out, while the report of file updates is not backed out.
 * @param TOKEN(data-value)
 * used by CICS to identify the report during creation. You must specify an 8-character area that contains the value returned after SPOOLOPEN REPORT (except for LOG reports, when a token area must be supplied but the returned value is not required.) The token is returned to the user to identify the report when it is reopened using a SPOOLCLOSE RESUME command.
 * @conditions
 * <dl>
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>3<DD>
 * Incorrect report name
 * <DT>16<DD>
 * Incorrect token
 * <DT>17<DD>
 * Invalid DISP value
 * <DT>18<DD>
 * Incorrect userdata field
 * <DT>21<DD>
 * Unable to get storage for LOAD (GETVIS).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>
 * A SPOOLCLOSE REPORT has been attempted without a preceding valid SPOOLOPEN REPORT
 * <DT>5<DD>
 * Token specified on SPOOLCLOSE REPORT does not match the token received on SPOOLOPEN REPORT for a given report name
 * <DT>17<DD>
 * A SPOOLCLOSE RESUME has been attempted for a report previously opened as a JCL type
 * <DT>18<DD>
 * A SPOOLCLOSE RESUME has been attempted for a report that is on the XMT queue (NODE specified on SPOOLOPEN REPORT)
 * <DT>22<DD>
 * Unsupported language (RPGII).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC.
 *
 * <DT><b>ff</b><DD>
 * IJBXREAS.
 *
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 *
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 *
 * </dl>
 *
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 *
 *
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 *
 *
 * <p>Default action: terminate the task abnormally.
 *
 *
 * <DT>NAMEERROR<DD>
 * occurs when an attempt is made to close a report that does not exist.
 *
 *
 * <p>Default action: terminate the task abnormally.
 *
 *
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 *
 *
 * <p>Default action: terminate the task abnormally.
 *
 *
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 *
 *
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed. The reasons for the failure are the same as for abend code AEY7, as listed in the CICS Messages and Codes manual.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "SPOOLCLOSE REPORT"(
   REPORT(name),
   DELETE,
   DISP(data-value),
   DISP('D'),
   DISP('H'),
   DISP('K'),
   DISP('L'),
   HOLD,
   KEEP,
   LOG,
   RELEASE,
   RESUME,
   TOKEN(data-value),
   );

/**
 * Open ESC format report.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLOPEN ESCAPE(name)__REPORT(name)__TOKEN(data-value)__________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TITLE(data-area)_|  |_CLASS(data-value)_|  |_LOG_|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_USERDATA(data-area)_|  |_PRIORITY(data-value)_|                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DESTINATION(name)_|  |_NODE(name)_|  |_RSL(data-value)_|          |
 * |    |_USERID(name)______|                                               |
 * |                                                                        |
 * |     _LOGICAL__                                                         |
 * | >__|__________|______________________________________________________> |
 * |    |_PHYSICAL_|  |_COPIES(data-value)_|  |_FORMS(name)_|               |
 * |                                                                        |
 * |     _SEP___                                                            |
 * | >__|_______|___________________________________________><              |
 * |    |_NOSEP_|  |_PRINTFAIL_|  |_PWRSYSID(data-value)_|                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * SPOOLOPEN ESCAPE is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * Incorrect class
 * <DT>3<DD>
 * Incorrect report name
 * <DT>4<DD>
 * Incorrect number of copies
 * <DT>6<DD>
 * Incorrect priority
 * <DT>7<DD>
 * Incorrect forms
 * <DT>8<DD>
 * Incorrect destination
 * <DT>9<DD>
 * Incorrect node
 * <DT>10<DD>
 * Incorrect RSL value
 * <DT>15<DD>
 * Incorrect USERID
 * <DT>16<DD>
 * Incorrect TOKEN
 * <DT>18<DD>
 * Incorrect userdata field
 * <DT>23<DD>
 * Incorrect PWRSYSID
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC.
 * <DT><b>ff</b><DD>
 * IJBXREAS.
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param CLASS(data-value)
 *                   specifies the POWER output class (1-character A-Z, or numeral 0-9) for reports in all formats except JCL. The default class is specified by the SPOOL system initialization parameter.
 * @param COPIES(data-value)
 *                   specifies the number of copies (1-255) requested for this report. If not specified, 1 is assumed.
 * @param DESTINATION(name)
 *                   specifies the destination name (1-8 characters) at which the report is to be printed.
 *                   <p>The valid characters that can be used in the destination name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $
 *                   <li>**SYSPRT
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: To avoid conflict with some POWER commands, DESTINATION should not be specified as LOCAL or SYSTEM.
 * @param ESCAPE(name)
 *                   specifies the name (1-8 characters) of a user-written escape program that is invoked at printing time to format the output.
 *                   <p>The valid characters that can be used in the escape name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <LI>@ $
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: If the escape routine uses CICS commands, EIBRCODE must be set to zero at exit from the escape routine.
 *                   <p>If you use the master terminal transaction (CEMT) to disable or newcopy escape programs after a printer has been started, the effects of that CEMT command may not be felt until after the printer has been stopped.
 * @param FORMS(name)
 *                   specifies the name (1-4 characters) of the stationery to be used to print the report. At print time, a match is made between the forms specified for the report and the forms type for the printer. (The forms type for a printer can be specified/altered using the CEMS and CEOS transactions.) If they match, the report is printed; otherwise, the report remains "in use" until the correct forms type is selected.
 *                   <p>Note: It must be stressed that no physical check is made regarding the size of the paper in the printer; if the forms type is right, the report is printed, regardless of what paper is actually loaded.
 *                   <p>The valid characters that can be used in the forms name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <LI>0 through 9
 *                   <li>- . / @ $
 *                   </ul>
 * @param LOG
 *                   specifies that a log report is to be opened. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *                   <p>A log report can be in any format.
 * @param LOGICAL
 *                   specifies that the report has logical recovery.
 *                   <p>Reports are not committed until a POWER checkpoint is issued. With LOGICAL recovery, a POWER checkpoint is issued only when the report is closed, either by a SPOOLCLOSE REPORT command, or when a syncpoint is issued.
 *                   <p>If an abnormal termination occurs while a task is active, the report is backed out to the last POWER checkpoint.
 *                   <p>Logical recovery is not supported for LOG reports.
 * @param NODE(name)
 *                   specifies the (1-8 characters) name of the target node, to which the file is to be routed by the system spooler (POWER). If you specify NODE and USERID, the file may be routed to a CICS printer. If you specify NODE alone, the file may be routed only to a system printer.
 *                   <p>The valid characters that can be used in the node name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $
 *                   </ul>
 *                   <p>The first character must not be numeric.
 * @param NOSEP
 *                   specifies that no separator pages are to appear with the printed report.
 * @param PHYSICAL
 *                   specifies that this report is to have physical recovery. When creating a report with physical recovery each SPOOLWRITE command, when completed, results in a physical write to disk of all data supplied in the command (with a POWER checkpoint). Physical recovery makes heavy use of input/output and should be carefully considered before being selected.
 * @param PRINTFAIL
 *                   specifies that if CEPW abends (due to a CICS abend) before a report that is being printed has been closed, when CEPW recovers, it does not attempt to reprint this report. The report status is set to ERRPRT. Operator intervention is required before printing of the report can continue.
 * @param PRIORITY(data-value)
 *                   specifies the priority (signed binary halfword) of the report. Reports destined for the same destination that are READY are printed in order of priority. When specified, the value must be in the range from 1 through 9 (where 9 is highest priority). If not specified, a value of 3 is assumed.
 * @param PWRSYSID(data-value)
 *                   specifies the 1-character VSE/POWER SYSID to be associated with this report. When specified, the value must be in the range 1 through 9. If not specified, the report is not assigned a VSE/POWER SYSID value.
 * @param REPORT(name)
 *                   specifies the name (2-8 characters) of the report. This option is required for every command.
 *                   <p>An attempt to open a log report with the same name as one already open is rejected.
 *                   <p>The valid characters that can be used in the report name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>- . / @ $
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *                   <ul>
 *                   <li>ALL
 *                   <li>DEV
 *                   <li>FREE
 *
 *                   <li>HOLD
 *
 *                   <li>LOCAL
 *
 *                   <li>PNET
 *
 *                   <li>RJE
 *
 *                   <li>STATUS.
 *                   </ul>
 * @param RSL(data-value)
 *                   specifies the security key (1-6 characters) that is associated with the report. The value must be in the range 1-24 or "PUBLIC" (127). If the RSL option is not specified, PUBLIC is assumed.
 *                   <p>When the report is created, only terminal operators with the same resource level specification are able to alter its characteristics. The report can only be printed on printers with the same RSL value specified in OPERRSL.
 *                   <p>The security key is checked at SPOOLCLOSE of a continuous report and at SPOOLOPEN RESUME. If the terminal operator cannot match the security key, the NOTAUTH condition occurs.
 *                   <p>After JCL reports are closed, RSL is set to 1.
 * @param SEP
 *                   specifies that two separator pages should be printed preceding the report, and two following.
 * @param TITLE(data-area)
 *                   specifies the title to be displayed on the CEMS or CEOS report characteristics panel. The title is a 32-character field that is not subject to any restrictions or validation. The default title is the REPORT name. USERDATA defaults to the first 16 characters of TITLE.
 *                   <p>Note that DBCS characters can be used in TITLE, but if you do not code USERDATA, and let it default to the first 16 characters of TITLE, DBCS characters are translated when they appear on the screen.
 *                   TOKEN(data-value)
 *                   a token is used by CICS to identify the report during creation. The option is required on all commands.
 *                   <p>You must specify an 8-character area (that must be word-aligned) and store the value returned by CICS after a successful SPOOLOPEN.
 * @param USERDATA(data-area)
 *                   specifies a 16-character report description or other reference information to be displayed on the CEMS or CEOS report list panel. If this option is omitted, the first 16 printable characters of the title are used. If TITLE is also omitted, the report name is used.
 *                   <p>Note that DBCS characters should not be used in USERDATA, because they are translated when they appear on the screen.
 * @param USERID(name)
 *                   specifies the userid name (1-8 characters) where the report is to be sent to.
 *                   <p>The valid characters that can be used in the userid name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $
 *                   <li>**SYSPRT
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: To avoid conflict with some POWER commands, USERID should not be specified as LOCAL or SYSTEM.
 */
function "SPOOLOPEN ESCAPE"(
   ESCAPE(name),
   CLASS(data-value),
   COPIES(data-value),
   DESTINATION(name),
   FORMS(name),
   LOG,
   LOGICAL,
   NODE(name),
   NOSEP,
   PHYSICAL,
   PRINTFAIL,
   PRIORITY(data-value),
   PWRSYSID(data-value),
   REPORT(name),
   RSL(data-value),
   SEP,
   TITLE(data-area),
   USERDATA(data-area),
   USERID(name),
   );

/**
 * Open a spool report.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                                              _PUNCH_                   |
 * | >>__SPOOLOPEN INPUT_________________________|_______|________________> |
 * |                      |_CLASS(data-value)_|  |_PRINT_|                  |
 * |                                                                        |
 * | >__TOKEN(data-area)__USERID(data-value)__><                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL, NOTAUTH, NOTFND  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <p>The SPOOLOPEN INPUT command opens a spool report for
 * input from the system spooler to CICS.
 * <p>It prepares to get (read) an existing spool data set directly
 * using external writer name (USERID) and specified class.
 * Another task could have allocated a spool file for input. In
 * this case, you should retry after a suitable time interval.
 * When this command has been successfully executed, you
 * should read the report and proceed to CLOSE as soon as
 * possible, in order to permit other users to use the JES single
 * thread. If SPOOLCLOSE is not issued before transaction end
 * or SYNCPOINT, CICS performs an implicit SPOOLCLOSE
 * KEEP, and writes a message to CSMT to alert the system
 * programmer to the possible unnecessary retention of
 * resources. You should not SPOOLOPEN a data set using
 * this command until you are prepared to process it
 * completely.
 * <p>This command, if successful, returns a token, which is used
 * later to identify the report in SPOOLREAD and
 * SPOOLCLOSE commands.
 *
 * @conditions
 * <p><b>Note</b>:  There are no default actions.
 * <dl>
 * <DT>ALLOCERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>Dynamic allocation has rejected a request to
 * allocate an input data set.
 * <p>RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>3<DD> Invalid CLASS value specified.
 * </dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>  Unsupported language.
 * <DT>8<DD>  Unsupported function.
 * <DT>16<DD>  USERID missing.
 * <DT>36<DD>  INPUT|OUTPUT missing.
 * <DT>40<DD> Subsystem interface already enabled.
 * <p><b>Note</b>:  Errors 1024 and over are internal, and
 * should not occur. If one of these error
 * codes is returned, contact your IBM
 * Support Center.
 * </dl>
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No subsystem present.
 * <DT>8<DD> Interface being disabled; CICS is quiescing.
 * <DT>12<DD> Interface has been stopped.
 * </dl>
 *
 * <DT>NOSTG<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A GETMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * RESP2 gives the GETMAIN register 15 return code.
 * </ul>
 * <DT>NOTAUTH<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>An application has issued a SPOOLOPEN INPUT
 * command with an unauthorized USERID. For the
 * USERID to be authorized, its first four characters
 * must match the first four characters of the current
 * CICS applid id.
 * </ul>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No data sets could be located for retrieval for the
 * specified external writer name.
 * <DT>1024<DD> Input or output function has been corrupted, and
 * SPOOLCLOSE could not complete.
 * </dl>
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> Data set has not been opened or a task which has
 * not issued the SPOOLOPEN for a spool data set
 * has attempted to access it.
 * <DT>1024<DD> Subtask OPEN macro failure.
 * </dl>
 * <DT>OPENERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> A VSAM SHOWCB macro failed to return the
 * lengths of the VSAM control blocks used to
 * access the JES spool file.
 * </dl>
 * <p>Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>An internal error occurred during SPOOLOPEN
 * processing that has forced the request to fail.
 * SPOLBUSY
 * </ul>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Interface already in use by another task.
 * <DT>8<DD> Interface already in use by current task.
 * </dl>
 * Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>The JES/input single thread within the JES interface
 * was not available.
 * </ul>
 * <DT>SPOLERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The subsystem interface macro (IEFSSREQ) has
 * failed. No input data set name was selected.
 * RESP2 gives the 'IEFSSREQ' response code.
 * </ul>
 * <DT>STRELERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A FREEMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * RESP2 gives the FREEMAIN register 15 return
 * code.
 * </UL>
 * </dl>
 * @param CLASS(data-value)
 *               specifies a 1-character class designation. The CLASS
 *               operand can be used as a selection parameter for input
 *               reports. If it is omitted, the first report for the specified
 *               USERID is obtained, regardless of its class.
 * @param TOKEN(data-area)
 *               specifies the 8-character CICS-allocated token used to
 *               identify a report.
 * @param USERID(data-value)
 *               specifies the 8-character user identifier. It must begin
 *               with the same 4 characters as the CICS generic applid,
 *               so that CICS can check that users are not attempting to
 *               access data sets not intended for their CICS system.
 */
function "SPOOLOPEN INPUT"(
   CLASS(data-value),
   TOKEN(data-area),
   USERID(data-value),
   );

/**
 * Open MAP format report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLOPEN MAPNAME______________REPORT(name)__TOKEN(data-value)___> |
 * |                        |_(name)_|                                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TITLE(data-area)_|  |_CLASS(data-value)_|  |_LOG_|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_MAPSET(name)_|  |_USERDATA(data-area)_|                           |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PRIORITY(data-value)_|  |_DESTINATION(name)_|                     |
 * |                              |_USERID(name)______|                     |
 * |                                                                        |
 * |                                          _LOGICAL__                    |
 * | >_______________________________________|__________|_________________> |
 * |    |_NODE(name)_|  |_RSL(data-value)_|  |_PHYSICAL_|                   |
 * |                                                                        |
 * |                                              _SEP___                   |
 * | >___________________________________________|_______|________________> |
 * |    |_COPIES(data-value)_|  |_FORMS(name)_|  |_NOSEP_|                  |
 * |                                                                        |
 * | >___________________________________________><                         |
 * |    |_PRINTFAIL_|  |_PWRSYSID(data-value)_|                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <p>SPOOLOPEN MAPNAME is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 * @param CLASS(data-value)
 * specifies the POWER output class (1 character A-Z, or numeral 0-9) for reports in all formats except JCL. The default class is specified by the SPOOL system initialization parameter.
 * @param COPIES(data-value)
 * specifies the number of copies (signed binary halfword 1-255) requested for this report. If not specified, 1 is assumed.
 * @param DESTINATION(name)
 * specifies the destination name (1-8 characters) at which the report is to be printed.
 * <p>The valid characters that can be used in the destination name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * <li>**SYSPRT
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Note: To avoid conflict with some POWER commands, DESTINATION should not be specified as LOCAL or SYSTEM.
 * @param FORMS(name)
 * specifies the name (1-4 characters) of the stationery to be used to print the report. At print time, a match is made between the forms specified for the report and the forms type for the printer. (The forms type for a printer can be specified or altered using the CEMS and CEOS transactions). If they match, the report is printed; otherwise, the report remains "in use" until the correct forms type is selected.
 * <p>Note: It must be stressed that no physical check is made regarding the size of the paper in the printer; if the forms type is right, the report is printed, regardless of what paper is actually loaded.
 * <p>The valid characters that can be used in the forms name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>- . / @ $
 * </ul>
 * @param LOG
 * specifies that a log report is to be opened. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 * <p>A log report can be in any format.
 * @param LOGICAL
 * specifies that the report has logical recovery.
 * <p>Reports are not committed until a POWER checkpoint is issued. With LOGICAL recovery, a POWER checkpoint is issued only when the report is closed, either by a SPOOLCLOSE command, or when a syncpoint is issued.
 * <p>If an abnormal termination occurs while a task is active, the report is backed out to the last POWER checkpoint.
 * <p>Logical recovery is not supported for LOG reports.
 * @param MAPNAME(name)
 * specifies the name (1-7 characters) of the default BMS map to be used for a MAP format report.
 * <p>The valid characters that can be used in the destination map name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Note: Suffixes are not supported by the report controller.
 * @param MAPSET(name)
 * specifies the name (1-7 characters) of the default BMS mapset that contains the MAPNAME to be used for a MAP format report.
 * <p>The valid characters that can be used in the destination mapset name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Note: Suffixes are not supported by the report controller.
 * @param NODE(name)
 * specifies the (1-8 characters) name of the target node, to which the file is to be routed by the system spooler (POWER). If you specify NODE and USERID, the file may be routed to a CICS printer. If you specify NODE alone, the file may be routed only to a system printer.
 * <p>The valid characters that can be used in the node name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * </ul>
 * <p>The first character must not be numeric.
 * @param NOSEP
 * specifies that no separator pages are to appear with the printed report.
 * @param PHYSICAL
 * specifies that this report is to have physical recovery. When creating a report with physical recovery each SPOOLWRITE command, when completed, results in a physical write to disk of all data supplied in the command (with a POWER checkpoint). Physical recovery makes heavy use of input/output and should be carefully considered before being selected.
 * @param PRINTFAIL
 * specifies that if CEPW abends (due to a CICS abend) before a report that is being printed has been closed, when CEPW recovers, it does not attempt to reprint this report. The report status is set to ERRPRT. Operator intervention is required before printing of the report can continue.
 * @param PRIORITY(data-value)
 * specifies the priority (signed binary halfword) of the report. Reports destined for the same destination that are READY are printed in order of priority. When specified, the value must be in the range from 1 through 9 (where 9 is highest priority). If not specified, a value of 3 is assumed.
 * @param PWRSYSID(data-value)
 * specifies the 1-character VSE/POWER SYSID to be associated with this report. When specified, the value must be in the range 1 through 9. If not specified, the report is not assigned a VSE/POWER SYSID value.
 * @param REPORT(name)
 * specifies the name (2-8 characters) of the report. This option is required for every command.
 * <p>An attempt to open a log report with the same name as one already open is rejected.
 * <p>The valid characters that can be used in the report name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>- . / @ $
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 * <ul>
 * <li>ALL
 * <li>DEV
 *
 * <li>FREE
 *
 * <li>HOLD
 *
 * <li>LOCAL
 *
 * <li>PNET
 *
 * <li>RJE
 *
 * <li>STATUS.
 * </ul>
 * @param RSL(data-value)
 * specifies the security key (1-6 characters) that is associated with the report. The value must be in the range 1-24 or "PUBLIC" (127). If the RSL option is not specified, PUBLIC is assumed.
 * <p>When the report is created, only terminal operators with the same resource level specification are able to alter its characteristics. The report can only be printed on printers with the same RSL value specified in OPERRSL.
 * <p>The security key is checked at SPOOLCLOSE of a continuous report and at SPOOLOPEN RESUME. If the terminal operator cannot match the security key, the NOTAUTH condition occurs.
 * <p>After JCL reports are closed, RSL is set to 1.
 *
 *
 * @param SEP
 * specifies that two separator pages should be printed preceding the report, and two following.
 * @param TITLE(data-area)
 * specifies the title to be displayed on the CEMS or CEOS report characteristics panel. The title is a 32-character field that is not subject to any restrictions or validation. The default title is the REPORT name. USERDATA defaults to the first 16 characters of TITLE.
 * <p>Note that DBCS characters can be used in TITLE, but if you do not code USERDATA, and let it default to the first 16 characters of TITLE, DBCS characters are translated when they appear on the screen.
 * @param TOKEN(data-value)
 * a token is used by CICS to identify the report during creation. The option is required on all commands.
 * <p>You must specify an 8-character area (that must be word-aligned) and store the value returned by CICS after a successful SPOOLOPEN.
 * @param USERDATA(data-area)
 * specifies a 16-character report description or other reference information to be displayed on the CEMS or CEOS report list panel. If this option is omitted, the first 16 printable characters of the title are used. If TITLE is also omitted, the report name is used.
 * <p>Note that DBCS characters should not be used in USERDATA, because they are translated when they appear on the screen.
 *
 * @param USERID(name)
 * specifies the userid name (1-8 characters) where the report is to be sent to.
 * <p>The valid characters that can be used in the userid name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * <li>**SYSPRT
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Note: To avoid conflict with some POWER commands, USERID should not be specified as LOCAL or SYSTEM.
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * Incorrect class
 * <DT>3<DD>
 * Incorrect report name
 * <DT>4<DD>
 * Incorrect number of copies
 * <DT>6<DD>
 * Incorrect priority
 * <DT>7<DD>
 * Incorrect forms
 * <DT>8<DD>
 * Incorrect destination
 * <DT>9<DD>
 * Incorrect node
 * <DT>10<DD>
 * Incorrect RSL value
 * <DT>13<DD>
 * Incorrect mapset name
 * <DT>14<DD>
 * Incorrect map name
 * <DT>15<DD>
 * Incorrect USERID
 * <DT>16<DD>
 * Incorrect TOKEN
 * <DT>18<DD>
 * Incorrect userdata field
 * <DT>23<DD>
 * Incorrect PWRSYSID
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC
 *
 * <DT><b>ff</b><DD>
 * IJBXREAS
 *
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD)
 *
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 *
 *
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 *
 *
 * <p>Default action: terminate the task abnormally.
 *
 *
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * Default action: terminate the task abnormally.
 */
function "SPOOLOPEN MAPNAME"(
   MAPNAME[(name)],
   CLASS(data-value),
   COPIES(data-value),
   DESTINATION(name),
   FORMS(name),
   LOG,
   LOGICAL,
   MAPSET(name),
   NODE(name),
   NOSEP,
   PHYSICAL,
   PRINTFAIL,
   PRIORITY(data-value),
   PWRSYSID(data-value),
   REPORT(name),
   RSL(data-value),
   SEP,
   TITLE(data-area),
   TOKEN(data-value),
   USERDATA(data-area),
   USERID(name),
   );
/**
 * Open a spool report for output.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                                               _NOCC_                   |
 * | >>__SPOOLOPEN OUTPUT_________________________|______|________________> |
 * |                       |_CLASS(data-value)_|  |_ASA__|                  |
 * |                                              |_MCC__|                  |
 * |                                                                        |
 * |                                              _PRINT_                   |
 * | >__NODE(data-value)_________________________|_______|________________> |
 * |                      |_OUTDESCR(ptr-ref)_|  |_PUNCH_|                  |
 * |                                                                        |
 * | >__TOKEN(data-area)__USERID(data-value)__><                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL, OUTDESCRERR      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</B>
 * <p>The SPOOLOPEN OUTPUT command opens a spool report
 * for output from CICS to the system spooler and defines its
 * characteristics.
 * <p>It results in a dynamic allocation of the output file using the
 * nodeid to specify the remote destination and the userid to
 * specify the remote user. As this is a multithread output
 * request, requesters of this service could interleave. This
 * SPOOLOPEN OUTPUT command enables users to acquire
 * the token for a report that it expects to create (write). This
 * token is used to identify the report in later SPOOLWRITE
 * and SPOOLCLOSE commands.
 * <p>When printing on a local device, use the NOCC|ASA|MCC
 * options to control output formatting. If you do not specify a
 * format, the default value of NOCC is used. NODE and
 * USERID can be used to write the data set directly to the
 * local spool file only if specified with a value of '*'.
 * If you do not issue SPOOLCLOSE before the end of the
 * transaction, CICS performs an implicit SPOOLCLOSE
 * DELETE and writes a message to CSMT to alert you to the
 * possible unnecessary retention of resources.
 * <p><b>Note</b>:  If you retrieve a formatted data set, the system
 * spooler could have changed the data set format. For
 * example, the system spooler could have converted
 * an MCC format data set to ASA format during data
 * set creation. This does not affect the final printed
 * output.
 *
 * @conditions
 * <p><b>Note</b>:  There are no default actions.
 * <dl>
 * <DT>ALLOCERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>Dynamic allocation has rejected a request to
 * allocate an input data set.
 * <p>RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>ILLOGIC<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>Invalid CLASS value specified.
 * </ul>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>  Unsupported language.
 * <DT>8<DD>  Unsupported function.
 * <DT>16<DD>  USERID missing.
 * <DT>20<DD>  NODE missing.
 * <DT>36<DD>  INPUT|OUTPUT missing.
 * <DT>40<DD> Subsystem interface already enabled.
 * <p><b>Note</b>:  Errors 1024 and over are internal, and
 * should not occur. If one of these error
 * codes is returned, contact your IBM
 * support center.
 * <DT>44<DD> Error in the OUTDESCR string.
 * <DT>48<DD> OUTDESCR specified but function not available
 * (wrong level of CICS or JES).
 * <DT>52<DD> OUTDESCR specified but bad pointer found on
 * keyword or in OUTDESCR condition.
 * </dl>
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>RECORDLENGTH not in the range 0 through
 * 32760. RESP2 shows the incorrect value.
 * </ul>
 * <DT>NODEIDERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>JES cannot identify the NODE/USERID combination
 * specified on SPOOLOPEN OUTPUT.
 * RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No subsystem present.
 * <DT>8<DD> Interface being disabled; CICS is quiescing.
 * <DT>12<DD> Interface has been stopped.
 * </dl>
 * <DT>NOSTG<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A GETMAIN has failed within the JES interface
 * subtask(DFHPSPSS).
 * RESP2 gives the GETMAIN register 15 return code.
 * </ul>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No data sets could be located for retrieval for the
 * specified external writer name.
 * </dl>
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> Data set has not been opened.
 * <DT>1024<DD> Subtask OPEN macro failure.
 * </dl>
 * <DT>OPENERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> A VSAM SHOWCB macro failed to return the
 * lengths of the VSAM control blocks used to
 * access the JES spool file.
 * </dl>
 * Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>An internal error occurred during SPOOLOPEN
 * processing that has forced the request to fail.
 * </ul>
 * <DT>OUTDESCRERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The macro OUTADD or OUTDEL (invoked as a
 * result of the OUTDESCR specification) failed.
 * RESP2 gives the reason code from the OUTADD or
 * OUTDEL macro. See the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645, for descriptions of
 * codes.
 * </ul>
 * <DT>SPOLBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Interface already in use by another task.
 * <DT>8<DD> Interface already in use by current task.
 * </dl>
 * Also occurs in any of the following situations:
 * <ul>
 * <LI>The JES/input single thread within the JES interface
 * was not available.
 * </ul>
 * <DT>STRELERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A FREEMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the FREEMAIN register 15 return
 * code.
 * </ul>
 * </dl>
 * @param ASA
 *               specifies that the report has each record prefixed with an
 *               ASA carriage-control character, and this character must
 *               be used by the operating system to control formatting
 *               when the report is printed.
 * @param CLASS(data-value)
 *               specifies a 1-character class designation. If it is omitted,
 *               class A is assumed.
 * @param MCC
 *               specifies that the report has each record prefixed with an
 *               IBM machine command code carriage-control character,
 *               and this character must be used by the operating system
 *               to control formatting when the report is printed.
 * @param NOCC
 *               specifies that the report has no internal formatting
 *               controls. When the report is printed, the operating
 *               system prefixes each record with a carriage-control
 *               character that causes page skipping according to the
 *               default operating system lines-per-page value.
 * @param NODE(data-value)
 *               specifies the 8-character identifier of a destination node
 *               that the system spooler uses to route the file. It is a
 *               sender field.
 * @param OUTDESCR(ptr-ref)
 * (MVS/SP --JES2 Version 3, or JES3 Version 4.2.1 only,
 * or a later upward-compatible release) specifies a pointer
 * variable to be set to the address of a field that contains
 * the address of a string of parameters to the OUTPUT
 * statement of JCL. This is called double indirect
 * addressing. The user must set up the pointer, the
 * address field, and the string. This means that the
 * OUTDESCR option cannot be used from within CECI.
 * <p>The format of the string is:
 * <pre>
 * Offset Length Contents
 * 0 4 Length (n) of following text string
 * 4 n OUTPUT statement parameters
 * </pre>
 * The parameters use the same keywords and values as
 * the OUTPUT statement but the syntax varies slightly.
 * The following is the format of the OUTDESCR parameter
 * string:
 * <pre>
 * keyword1(value1) [keyword2(value2)]
 * [keyword3(value3,value4)] ...
 * </pre>
 * This corresponds to the following OUTPUT statement
 * parameter string:
 * <pre>
 * keyword1=value1 [keyword2=value2]
 * [keyword3=(value3,value4)] ...
 * </pre>
 * For details of valid keywords and values, see the  TSO/E
 * Command Reference manual (SC28-1991-0).
 * <p>The OUTDESCR operand:
 * <UL>
 * <LI>Can override the NODE and USERID operands only
 * if they are specified with a value of '*'.
 * <LI>Cannot override the CLASS operand, even if it is
 * omitted and defaults to class A.
 * </UL>
 * Use this operand to set additional attributes for the spool
 * data set.
 * @param PRINT
 *               allows large records (maximum 32760 bytes) to be
 *               written to the spool. This is the default setting. This is
 *               included for compatibility with the spool support provided
 *               with CICS/DOS/VS and CICS Transaction Server for
 *               OS/390.
 * @param PUNCH
 *               must be specified if the CLASS parameter for the output
 *               data set implies punch, and the data set is destined for a
 *               VM/RSCS node. This ensures that the record length
 *               indicator is set to 80, which is a requirement of
 *               VM/RSCS for punch files.
 * @param RECORDLENGTH(data-value)
 *               specifies, as a halfword binary variable, the maximum
 *               length of record to write to a print data set. The default
 *               value is 32 760.
 * @param TOKEN(data-area)
 *               specifies the 8-character CICS-allocated token used to
 *               identify a report.
 * @param USERID(data-value)
 * specifies the 8-character identifier of the destination
 * userid that processes the report. The report carries this
 * identifier, which is used to select the report at its
 * destination. It is a sender field and must be declared
 * with a length of 8 characters.
 * <p>Validity checking is performed for USERID. Checks are
 * made for blanks (X'40'), and nulls (X'00').
 * <p>Sending the internal reader buffer directly to JES:
 * Instead of waiting for the buffer in your address space to
 * fill up, send the contents of the internal reader buffer
 * directly to JES by coding as your last record:
 * <PRE>
 *   /*EOF
 * </PRE>
 * This control statement delimits the job in the data set,
 * and makes it eligible for immediate processing.
 * For more information about using the internal reader,
 * and about other /* control statements, see the  MVS/ESA
 * JCL User's Guide.
 */
function "SPOOLOPEN OUTPUT"(
   ASA,
   CLASS(data-value),
   MCC,
   NOCC,
   NODE(data-value),
   OUTDESCR(ptr-ref),
   PRINT,
   PUNCH,
   RECORDLENGTH(data-value),
   TOKEN(data-area),
   USERID(data-value),
   );

/**
 * Open ASA, MCC, or NOCC report.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                                                 _NOCC_                 |
 * | >>__SPOOLOPEN REPORT(name)__TOKEN(data-value)__|______|______________> |
 * |                                                |_ASA__|                |
 * |                                                |_MCC__|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TITLE(data-area)_|  |_CLASS(data-value)_|  |_LOG_|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_USERDATA(data-area)_|  |_PRIORITY(data-value)_|                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DESTINATION(name)_|  |_NODE(name)_|  |_RSL(data-value)_|          |
 * |    |_USERID(name)______|                                               |
 * |                                                                        |
 * |     _LOGICAL__                                                         |
 * | >__|__________|______________________________________________________> |
 * |    |_PHYSICAL_|  |_COPIES(data-value)_|  |_FORMS(name)_|               |
 * |                                                                        |
 * |                               _SEP___                                  |
 * | >____________________________|_______|_______________________________> |
 * |    |_FCB(name)_|  |_SOSI1_|  |_NOSEP_|  |_PRINTFAIL_|                  |
 * |                   |_SOSI2_|                                            |
 * |                                                                        |
 * |                                                        _NONUM___       |
 * | >_____________________________________________________|_________|____> |
 * |    |_LINES(data-value)_|  |_LINELENGTH(data-value)_|  |_HEADNUM_|      |
 * |                                                       |_FOOTNUM_|      |
 * |                                                       |_BOTHNUM_|      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_HEAD(data-area)_|  |_FOOT(data-area)_|  |_DATETIME_|              |
 * |                                                                        |
 * | >___________________________________________________><                 |
 * |    |_OUTDESCR(ptr-ref)_|  |_PWRSYSID(data-value)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, ILLOGIC, INVREQ, IOERR, NAMEERROR, NOSPACE,       |
 * | NOSPOOL                                                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SPOOLOPEN REPORT is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an invalid control character is specified.
 *
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * Incorrect class
 * <DT>3<DD>
 * Incorrect report name
 * <DT>4<DD>
 * Incorrect number of copies
 * <DT>6<DD>
 * Incorrect priority
 * <DT>7<DD>
 * Incorrect forms
 * <DT>8<DD>
 * Incorrect destination
 * <DT>9<DD>
 * Incorrect node
 * <DT>10<DD>
 * Incorrect RSL value
 * <DT>11<DD>
 * Incorrect lines per page
 * <DT>12<DD>
 * Incorrect line length
 * <DT>15<DD>
 * Incorrect USERID
 * <DT>16<DD>
 * Incorrect TOKEN
 * <DT>18<DD>
 * Incorrect userdata field
 * <DT>19<DD>
 * Incorrect LINELENGTH for DATETIME, HEADER, FOOTNUM, or BOTHNUM
 * <DT>23<DD>
 * Incorrect PWRSYSID
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * <DT>24<DD>
 * Invalid OUTDESCR address or invalid address in area.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format rrffvvvv where:
 * <dl>
 * <DT>rr<DD>
 * IJBXRETC.
 * <DT>ff<DD>
 * IJBXREAS.
 * <DT>vv<DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 * <DT>vv<DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>NAMEERROR<DD>
 * occurs when an application tries to open a LOG report that already exists.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>OUTDESCRERR<DD>
 * Indicates an error in the input string that is detected by VSE/POWER. RESP2 contains the VSE/POWER return codes that are documented in the PWRSPL copy book.
 * RESP2 values:
 * <dl>
 * <dt>X'083F'(ptr-ref)<dd>
 * no keyword passed.
 * <dt>X'0840'(ptr-ref)<dd>
 * the keyword passed has no corresponding DEFINE keyword.
 * <dt>X'0841'(ptr-ref)<dd>
 * the value passed for a keyword does not match the DEFINE specification.
 * </dl>
 * <p>Default action: terminate the task abnormally
 * </dl>
 * @param ASA
 *                   specifies that the report is created using an ASA control character at the beginning of each line of data, as follows:
 *                   <dl>
 *                   <DT>blank<DD>
 *                   Space 1 line before writing the data.
 *                   <DT>0<DD>
 *                   Space 2 lines before writing the data.
 *                   -
 *                   <DT>Space<DD> 3 lines before writing the data.
 *                   +
 *                   <DT>Suppress<DD> space (that is, print on the same line as the previous line).
 *                   <DT>1<DD>
 *                   Skip to line 1 of new page before writing the data.
 *                   </dl>
 *                   <p>You should ensure that valid carriage control characters are used. If not, the CCERROR condition occurs.
 *                   <p>If you specify LINES(0), you can skip to channels 2 through 12. LINES(0) means that no automatic page breaks are inserted. If you want automatic page breaks, you cannot skip to channels 2 through 12.
 *                   <p>ASA data is always converted to MCC format. You can improve performance by writing several ASA lines in one SPOOLWRITE REPORT command. The resulting increase in speed may, however, be offset by the increased storage needed for buffers.
 * @param BOTHNUM
 *                   specifies that page numbers are to appear on both headings and footings in the printed report. The page number appears as the last 6 characters of each of these lines with leading zeros suppressed. If you do not specify HEAD or FOOT, the rest of the heading or footing is blank.
 * @param CLASS(data-value)
 *                   specifies the POWER output class (1 character A-Z, or numeral 0-9) for reports in all formats except JCL. The default class is specified by the SPOOL system initialization parameter.
 * @param COPIES(data-value)
 *                   specifies the number of copies (signed halfword binary 1-255) requested for this report. If not specified, 1 is assumed.
 * @param DATETIME
 * specifies that the date and time the report was created, appear in the heading of each page.
 * <p>The length of the DATETIME field is always 14 characters. The format of the date is determined by the system programmer at CICS generation time. The format of the time is always HH:MM.
 * <p>The possibilities are:
 * <pre>
 *     ________________________________________________________________________
 *    |                                                                        |
 *    |                                                                        |
 *    |   DD/MM/YY HH:MM                                                       |
 *    |   MM/DD/YY HH:MM                                                       |
 *    |   YY/MM/DD HH:MM                                                       |
 *    |                                                                        |
 *    |                                                                        |
 *    |________________________________________________________________________|
 *
 * </pre>
 * @param DESTINATION(name)
 *                   specifies the destination name (1-8 characters) at which the report is to be printed.
 *                   <p>The valid characters that can be used in the destination name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $ #
 *                   <li>**SYSdddPRT
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: To avoid conflict with some POWER commands, DESTINATION should not be specified as LOCAL or SYSTEM.
 * @param FCB(name)
 *                   specifies the name of the forms control buffer (FCB) to be used for the report.
 * @param FOOT(data-area)
 *                   specifies the field (1-205 characters) that contains the footing to be used in the report. CICS does not check this length so care must be taken that it is the same as that specified by the LINELENGTH option (or its default), otherwise, the results are not predictable.
 *                   <p>If the report format is ASA or MCC, the first character of the field is used for the carriage control character.
 *                   <p>See Table 17 for the right-hand characters of when using FOOTNUM.
 * @param FOOTNUM
 *                   specifies that a page number is to appear as the last 6 characters of the footing of the report, the first of which is a separator space. If no footing is supplied in SPOOLOPEN REPORT, a blank footing line is inserted in the report.
 * @param FORMS(name)
 *                   specifies the name of the stationery (1-4 characters) to be used to print the report. At print time, a match is made between the forms specified for the report and the forms type for the printer. (The forms type for a printer can be specified or altered using the CEMS and CEOS transactions.) If they match, the report is printed; otherwise, the report remains "in use" until the correct forms type is selected.
 *                   <p>Note: It must be stressed that no physical check is made regarding the size of the paper in the printer; if the forms type is right, the report is printed, regardless of what paper is actually loaded.
 *                   <p>The valid characters that can be used in the forms name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>- . / @ $ #
 *                   </ul>
 * @param HEAD(data-area)
 *                   specifies the field (1-205 characters) that contains the heading to be used in the report. CICS does not check this length so care must be taken that it is the same as that specified by the LINELENGTH option (or its default), otherwise, the results are not predictable.
 *                   <p>See Table 17 for the right-hand characters of HEAD when using DATETIME and HEADNUM.
 *                   <p>If the report format is ASA or MCC, the first character of the field is used for the carriage control character.
 * @param HEADNUM
 *                   specifies that a page number is to appear as the last 6 characters of the heading of the report. If no heading is supplied at SPOOLOPEN REPORT, a blank heading line is inserted in the report.
 * @param LINELENGTH(data-value)
 *                   specifies the length (signed halfword binary) of each line of the report. This value is specified in SPOOLOPEN REPORT and remains fixed for the entire life of the report. The valid range is 1-205 characters.
 *                   <p>If HEADNUM, FOOTNUM, or BOTHNUM is specified, LINELENGTH must be at least 6 for NOCC type reports and 7 for ASA or MCC type reports.
 *                   <p>If DATETIME is specified as well, LINELENGTH must be at least 20 for NOCC type reports and 21 for ASA or MCC type reports.
 *                   <p>You are recommended to set LINELENGTH to no more than the width of the printer carriage minus 1. If LINELENGTH exceeds the width of the printer carriage, the format of the printed report may be unpredictable.
 *                   <p>For ASA and MCC reports, LINELENGTH should include the carriage control character.
 *                   <p>If this option is omitted, the following apply:
 *                   <p>A JCL report is always forced to 80 characters regardless of the LINELENGTH option.
 *                   <p>The LINELENGTH option is not meaningful for reports in ESC, MAP, SCS (with NOCONV), or T3270 (with NOCONV) formats.
 *                   <p>For ASA or MCC format report, 133 is the default.
 *                   <p>For NOCC, SCS, or T3270 formats, 132 is the default.
 * @param LINES(data-value)
 *                   specifies the number of lines (signed halfword binary) accepted in each page of the report.
 *                   <p>When writing to the report, if this number is exceeded without a "skip to new page" being encountered, a "default page break" takes place.
 *                   <p>The valid range is 0 through 99.
 *                   <p>When the LINES option is not specified the system default is used.
 *                   <p>If LINES(0) is explicitly specified, no page formatting is attempted and headings or footings are not allowed.
 * @param LOG
 *                   specifies that a log report is to be opened. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *                   <p>A log report can be in any format.
 * @param LOGICAL
 *                   specifies that the report has logical recovery.
 *                   <p>Reports are not committed until a POWER checkpoint is issued. With LOGICAL recovery, a POWER checkpoint is issued only when the report is closed, either by a SPOOLCLOSE REPORT command, or when a syncpoint is issued.
 *                   <p>If an abnormal termination occurs while a task is active, the report is backed out to the last POWER checkpoint.
 *                   <p>Logical recovery is not supported for LOG reports.
 * @param MCC
 *                   specifies that the report is created using machine carriage control characters, as follows:
 *                   <p><b>Hex Result</b>
 *                   <dl compact>
 *                   <DT>0B<DD>
 *                   Space 1 line immediately.
 *                   <DT>13<DD>
 *                   Space 2 lines immediately.
 *                   <DT>1B<DD>
 *                   Space 3 lines immediately.
 *                   <DT>09<DD>
 *                   Space 1 line after write.
 *                   <DT>11<DD>
 *                   Space 2 lines after write.
 *                   <DT>19<DD>
 *                   Space 3 lines after write.
 *                   <DT>89<DD>
 *                   Skip to channel 1 after write.
 *                   <DT>8B<DD>
 *                   Skip to channel 1 immediately.
 *                   <DT>01<DD>
 *                   Write without spacing.
 *                   <DT>03<DD>
 *                   No operation.
 *                   </dl>
 *                   <p>It is the responsibility of the application to ensure that the first character of each line to print is a valid carriage control character. If an incorrect carriage control character is encountered, the CCERROR condition occurs.
 * @param NOCC
 *                   specifies that no carriage control is used when creating this report. You control page breaks using the LINES option. A new page occurs whenever the LINES option value is exceeded.
 * @param NODE(name)
 *                   specifies the (1-8 characters) name of the target node, to which the file is to be routed by the system spooler (POWER). If you specify NODE and USERID, the file may be routed to a CICS printer. If you specify NODE alone, the file may be routed only to a system printer.
 *                   <p>The valid characters that can be used in the node name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $ #
 *                   </ul>
 *                   <p>The first character must not be numeric.
 * @param NONUM
 *                   specifies that no automated page numbering is to take place.
 * @param NOSEP
 *                   specifies that no separator pages are to appear with the printed report.
 * @param OUTDESCR(ptr-ref)
 *                   OUTDESCR gives CICS applications the VSE/POWER facility to allow user defined output operands to be specified for batch created reports on the VSE/POWER LST statement. This enables CICS applications to create reports which contain the additional information required by advanced function printing products such as PSF.
 *                   <p>Double indirect addressing is used in this command. The ptr-ref argument must contain the address of a field that contains the address of a string consisting of a length field and one or more keyword(value) pairs of parameters which are valid user defined output operands specified to VSE/POWER via the DEFINE autostart statement. The VSE/POWER Administration and Operation manual gives information on how to use the DEFINE statement.
 * @param PHYSICAL
 *                   specifies that this report is to have physical recovery. When creating a report with physical recovery each SPOOLWRITE REPORT command, when completed, results in a physical write to disk of all data supplied in the command (with a POWER checkpoint). Physical recovery makes heavy use of input/output and should be carefully considered before being selected.
 * @param PRINTFAIL
 *                   specifies that if CEPW abends (due to a CICS abend) before a report that is being printed has been closed, when CEPW recovers, it does not attempt to reprint this report. The report status is set to ERRPRT. Operator intervention is required before printing of the report can continue.
 * @param PRIORITY(data-value)
 *                   specifies the priority (signed halfword binary) of the report. Reports destined for the same destination that are READY are printed in order of priority. When specified, the value must be in the range from 1 through 9 (where 9 is highest priority). If not specified, a value of 3 is assumed.
 * @param PWRSYSID(data-value)
 *                   specifies the 1-character VSE/POWER SYSID to be associated with this report. When specified, the value must be in the range 1 through 9. If not specified, the report is not assigned a VSE/POWER SYSID value.
 * @param REPORT(name)
 *                   specifies the name (2-8 characters) of the report. This option is required for every command.
 *                   <p>An attempt to open a log report with the same name as one already open is rejected.
 *                   <p>The valid characters that can be used in the report name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>- . / @ $ #
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *                   <ul>
 *                   <li>ALL
 *                   <li>DEV
 *                   <li>FREE
 *                   <li>HOLD
 *                   <li>LOCAL
 *                   <li>PNET
 *                   <li>RJE
 *                   <li>STATUS.
 *                   </ul>
 * @param RSL(data-value)
 *                   specifies the security key (1-6 characters) that is associated with the report. The value must be in the range 1-24 or "PUBLIC" (127). If the RSL option is not specified, PUBLIC is assumed.
 *                   <p>When the report is created, only terminal operators with the same resource level specification are able to alter its characteristics. The report can only be printed on printers with the same RSL value specified in OPERRSL.
 *                   <p>The security key is checked at SPOOLCLOSE REPORT of a continuous report and at SPOOLOPEN RESUME. If the terminal operator cannot match the security key, the NOTAUTH condition occurs.
 *                   <p>After JCL reports are closed, RSL is set to 1.
 * @param SEP
 *                   specifies that two separator pages should be printed preceding the report, and two following.
 * @param SOSI1
 *                   specifies that shift-out/shift-in control sequences take a print position for a report containing double-byte character set (DBCS) fields. Each control sequence prints as a blank. SOSI1 and SOSI2 are mutually exclusive. There is no default specification; if you do not specify either SOSI1 or SOSI2, no indication of a SOSI attribute is made at the time the report is created.
 * @param SOSI2
 *                   specifies that shift-out/shift-in control sequences do not take a print position for a report containing double-byte character set (DBCS) fields. SOSI1 and SOSI2 are mutually exclusive. There is no default specification; if you do not specify either SOSI1 or SOSI2, no indication of a SOSI attribute is made at the time the report is created.
 * @param TITLE(data-area)
 *                   specifies the title to be displayed on the CEMS or CEOS report characteristics panel. The title is a 32-character field which is not subject to any restrictions or validation. The default title is the REPORT name. USERDATA defaults to the first 16 characters of TITLE.
 *                   <p>Note that DBCS characters can be used in TITLE, but if you do not code USERDATA, and let it default to the first 16 characters of TITLE, DBCS characters are translated when they appear on the screen.
 * @param TOKEN(data-value)
 *                   a token is used by CICS to identify the report during creation. The option is required on all commands.
 *                   <p>You must specify an 8-character area (that must be word-aligned) and store the value returned by CICS after a successful SPOOLOPEN REPORT.
 * @param USERDATA(data-area)
 *                   specifies a report description (1-16 characters) or other reference information to be displayed on the CEMS or CEOS report list panel. If this option is omitted, the first 16 printable characters of the title are used. If TITLE is also omitted, the report name is used.
 *                   <p>Note that DBCS characters should not be used in USERDATA, because they are translated when they appear on the screen.
 * @param USERID(name)
 * specifies the userid name (1-8 characters) where the report is to be sent to.
 * <p>The valid characters that can be used in the userid name are as follows:
 * <ul>
 * <li>A through Z
 * <li>0 through 9
 * <li>@ $
 * <li>**SYSPRT
 * </ul>
 * <p>The first character must not be numeric.
 * <p>Note: To avoid conflict with some POWER commands, USERID should not be specified as LOCAL or SYSTEM.
 * <pre>
 *     ________________________________________________________________________
 *    | Table 17. Layout of a page NOCC                                        |
 *    |________________________________________________________________________|
 *    | HEAD (2 lines)        |        DATETIME        |        HEADNUM        |
 *    |                       |       (14 chars)       |       (6 chars)       |
 *    |_______________________|________________________|_______________________|
 *    |                              LINELENGTH()                              |
 *    |________________________________________________________________________|
 *    | FOOT (2 lines)                                 |        FOOTNUM        |
 *    |                                                |       (6 chars)       |
 *    |________________________________________________|_______________________|
 *
 *     ________________________________________________________________________
 *    | Table 18. Layout of a page ASA or MCC                                  |
 *    |________________________________________________________________________|
 *    | HEAD (2 lines)        |        DATETIME        |        HEADNUM        |
 *    |                       |       (14 chars)       |       (7 chars)       |
 *    |_______________________|________________________|_______________________|
 *    |                              LINELENGTH()                              |
 *    |________________________________________________________________________|
 *    | FOOT (2 lines)                                 |        FOOTNUM        |
 *    |                                                |       (7 chars)       |
 *    |________________________________________________|_______________________|
 * </pre>
 */
function "SPOOLOPEN REPORT <ASA, MCC OR NOCC>"(
   REPORT(name),
   ASA,
   BOTHNUM,
   CLASS(data-value),
   COPIES(data-value),
   DATETIME,
   DESTINATION(name),
   FCB(name),
   FOOT(data-area),
   FOOTNUM,
   FORMS(name),
   HEAD(data-area),
   HEADNUM,
   LINELENGTH(data-value),
   LINES(data-value),
   LOG,
   LOGICAL,
   MCC,
   NOCC,
   NODE(name),
   NONUM,
   NOSEP,
   OUTDESCR(ptr-ref),
   PHYSICAL,
   PRINTFAIL,
   PRIORITY(data-value),
   PWRSYSID(data-value),
   RSL(data-value),
   SEP,
   SOSI1,
   SOSI2,
   TITLE(data-area),
   TOKEN(data-value),
   USERDATA(data-area),
   USERID(name),
   );


/**
 * Open JCL format report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLOPEN REPORT(name)__JCL__TOKEN(data-value)___________><        |
 * |                                                     |_LOG_|            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SPOOLOPEN REPORT (JCL) is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>3<DD>
 * Incorrect report name
 * <DT>16<DD>
 * Incorrect TOKEN
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC.
 * <DT><b>ff</b><DD>
 * IJBXREAS.
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param JCL
 *               specifies that the report is to be in JCL format, and that it is to be written to the POWER RDR queue as input to a batch program. It is the responsibility of the application to ensure correct JCL syntax of the report. A JCL report has a forced LINELENGTH of 80 characters.
 *               <p>If a report submitted to POWER does not contain POWER JECL, the required JECL is inserted by POWER, and the characteristics of the JCL report default to those allocated by POWER.
 *               The only other options you can specify with JCL are LOGICAL or LOG, but you cannot specify both for the same JCL report.
 * @param LOG
 *               specifies that a log report is to be opened. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *               <p>A log report can be in any format.
 * @param REPORT(name)
 *               specifies the name (2-8 characters) of the report. This option is required for every command.
 *               <p>An attempt to open a log report with the same name as one already open is rejected.
 *               <p>The valid characters that can be used in the report name are as follows:
 *               <ul>
 *               <li>A through Z
 *               <li>0 through 9
 *               <li>- . / @ $ #
 *               </ul>
 *               <p>The first character must not be numeric.
 *               <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *               <ul>
 *               <li>ALL
 *               <li>DEV
 *               <li>FREE
 *               <li>HOLD
 *               <li>LOCAL
 *               <li>PNET
 *               <li>RJE
 *               <li>STATUS
 *               </ul>
 * @param TOKEN(data-value)
 *               used by CICS to identify the report during creation. The option is required on all commands.
 *               <p>You must specify an 8-character area (that must be word aligned) and store the value returned by CICS after a successful SPOOLOPEN REPORT.
 */
function "SPOOLOPEN REPORT <JCL>"(
   REPORT(name),
   JCL,
   LOG,
   TOKEN(data-value),
   );

/**
 * Open SCS or T3270 report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLOPEN REPORT(name)____SCS______TOKEN(data-value)_____________> |
 * |                             |_T3270_|                                  |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TITLE(data-area)_|  |_CLASS(data-value)_|  |_LOG_|                |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_USERDATA(data-area)_|  |_PRIORITY(data-value)_|                   |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_DESTINATION(name)_|  |_NODE(name)_|  |_RSL(data-value)_|          |
 * |    |_USERID(name)______|                                               |
 * |                                                                        |
 * |     _LOGICAL__                                                         |
 * | >__|__________|______________________________________________________> |
 * |    |_PHYSICAL_|  |_COPIES(data-value)_|  |_FORMS(name)_|               |
 * |                                                                        |
 * |     _SEP___                                                            |
 * | >__|_______|_________________________________________________________> |
 * |    |_NOSEP_|  |_PRINTFAIL_|  |_LINES(data-value)_|                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LINELENGTH(data-value)_|  |_NOCONV_|  |_SOSI1_|                   |
 * |                                            |_SOSI2_|                   |
 * |                                                                        |
 * | >____________________________><                                        |
 * |    |_PWRSYSID(data-value)_|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, ILLOGIC, INVREQ, IOERR, NOSPACE, NOSPOOL          |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SPOOLOPEN REPORT (SCS/T3270) is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * Incorrect class
 * <DT>3<DD>
 * Incorrect report name
 * <DT>4<DD>
 * Incorrect number of copies
 * <DT>6<DD>
 * Incorrect priority
 * <DT>7<DD>
 * Incorrect forms
 * <DT>8<DD>
 * Incorrect destination
 * <DT>9<DD>
 * Incorrect node
 * <DT>10<DD>
 * Incorrect RSL value
 * <DT>11<DD>
 * Incorrect lines per page
 * <DT>12<DD>
 * Incorrect line length
 * <DT>15<DD>
 * Incorrect USERID
 * <DT>16<DD>
 * Incorrect TOKEN
 * <DT>18<DD>
 * Incorrect userdata field
 * <DT>23<DD>
 * Incorrect PWRSYSID
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * </dl>
 * Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC
 * <DT><b>ff</b><DD>
 * IJBXREAS
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD)
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param CLASS(data-value)
 *                   specifies the POWER output class (1 character A-Z, or numeral 0-9) for reports in all formats except JCL. The default class is specified by the SPOOL system initialization parameter.
 * @param COPIES(data-value)
 *                   specifies the number of copies (signed binary halfword 1-255) requested for this report. If not specified, 1 is assumed.
 * @param DESTINATION(name)
 *                   specifies the destination name (1-8 characters) at which the report is to be printed.
 *                   <p>The valid characters that can be used in the destination name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $ #
 *                   <li>**SYSPRT
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: To avoid conflict with some POWER commands, DESTINATION should not be specified as LOCAL or SYSTEM.
 * @param FORMS(name)
 *                   specifies the name of the stationery (1-8 characters) to be used to print the report. At print time, a match is made between the forms specified for the report and the forms type for the printer. (The forms type for a printer can be specified or altered using the CEMS and CEOS transactions). If they match, the report is printed, otherwise the report remains "in use" until the correct forms type is selected.
 *                   <p>Note: It must be stressed that no physical check is made regarding the size of the paper in the printer; if the forms type is right, the report is printed, regardless of what paper is actually loaded.
 *                   <p>The valid characters that can be used in the forms name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>- . / @ $ #
 *                   </ul>
 * @param LINELENGTH(data-value)
 *                   (cannot be specified for SCS, with NOCONV, and T3270, with NOCONV). Specifies the length of each line (signed binary halfword) of the report. This value is specified at SPOOLOPEN REPORT and remains fixed for the entire life of the report. The valid range is 1-205 characters.
 *                   <p>If DATETIME is specified as well, LINELENGTH must be greater than or equal to 20.
 *                   <p>If HEADNUM, FOOTNUM, or BOTHNUM is specified as well, LINELENGTH must be greater than or equal to 6.
 *                   <p>When deciding the LINELENGTH for a report, you should consider the type of printer on which the report is printed. You are recommended to set the LINELENGTH to no more than the width of the printer carriage minus 1. If the LINELENGTH exceeds the width of the printer carriage, the format of the printed report may be unpredictable.
 *                   <p>For ASA and MCC reports, LINELENGTH should include the carriage control character.
 *                   <p>If this option is omitted, the following applies:
 *                   <p>A JCL report is always forced to 80 characters regardless of the LINELENGTH option.
 *                   <p>The LINELENGTH option is not meaningful for reports in ESC, MAP, SCS (with NOCONV), or T3270 (with NOCONV) formats.
 *                   <p>For ASA or MCC format report, 133 is the default.
 *                   <p>For NOCC, SCS, or T3270 formats, 132 is the default.
 * @param LINES(data-value)
 *                   specifies, as a signed binary halfword, for SCS (without NOCONV) and T3270 (without NOCONV) format reports, the number of lines accepted in each page of the report. (Cannot be specified for SCS, with NOCONV, and T3270, with NOCONV.)
 *                   <p>When writing to the report, if this number is exceeded without a "skip to new page" being encountered, a "default page break" takes place.
 *                   <p>The valid range is 0 through 99.
 *                   <p>When the LINES option is not specified the system default is used.
 *                   <p>If LINES(0) is explicitly specified, no page formatting is attempted and headings or footings are not allowed.
 * @param LOG
 *                   specifies that a log report is to be opened. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *                   <p>A log report can be in any format.
 * @param LOGICAL
 *                   specifies that the report has logical recovery.
 *                   <p>Reports are not committed until a POWER checkpoint is issued. With LOGICAL recovery, a POWER checkpoint is issued only when the report is closed, either by a SPOOLCLOSE REPORT command, or when a syncpoint is issued.
 *                   <p>If an abnormal termination occurs while a task is active, the report is backed out to the last POWER checkpoint.
 *                   <p>Logical recovery is not supported for LOG reports.
 * @param NOCONV
 *                   specifies that no conversion to MCC format is required. If specified, the report can only be printed on an appropriate CICS printer. This option is applicable only to SCS and T3270 formats, and allows the user complete control over the data sent to the printer. However, if incorrect data is sent, the writer task may abend.
 *                   <p>When printing reports with this option, all the data specified with each SPOOLWRITE REPORT is sent to the printer. The printer buffer is then printed before the data associated with the next SPOOLWRITE REPORT is processed.
 * @param NODE(name)
 *                   specifies the (1-8 characters) name of the target node, to which the file is to be routed by the system spooler (POWER). If you specify NODE and USERID, the file may be routed to a CICS printer. If you specify NODE alone, the file may be routed only to a system printer.
 *                   <p>The valid characters that can be used in the node name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $ #
 *                   </ul>
 *                   <p>The first character must not be numeric.
 * @param NOSEP
 *                   specifies that no separator pages are to appear with the printed report.
 * @param PHYSICAL
 *                   specifies that this report is to have physical recovery. When creating a report with physical recovery each SPOOLWRITE REPORT command, when completed, results in a physical write to disk of all data supplied in the command (with a POWER checkpoint). Physical recovery makes heavy use of input/output, and should be carefully considered before being selected.
 * @param PRINTFAIL
 *                   specifies that should CEPW abend (due to a CICS abend, and so on) before a report that is being printed has been closed, then when CEPW has recovered, it does not attempt to reprint this report. The report status is set to ERRPRT. Operator intervention is required before printing of the report can continue.
 * @param PRIORITY(data-value)
 *                   specifies the priority (signed binary halfword) of the report. Reports destined for the same destination that are READY are printed in order of priority. When specified, the value must be in the range from 1 through 9 (where 9 is highest priority). If not specified, a value of 3 is assumed.
 * @param PWRSYSID(data-value)
 *                   specifies the 1-character VSE/POWER SYSID to be associated with this report. When specified, the value must be in the range 1 through 9. If not specified, the report is not assigned a VSE/POWER SYSID value.
 * @param REPORT(name)
 *                   specifies the name (2-8 characters) of the report. This option is required for every command.
 *                   <p>An attempt to open a log report with the same name as one already open is rejected.
 *                   <p>The valid characters that can be used in the report name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>- . / @ $ #
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *                   <ul>
 *                   <li>ALL
 *                   <li>DEV
 *                   <li>FREE
 *                   <li>HOLD
 *                   <li>LOCAL
 *                   <li>PNET
 *                   <li>RJE
 *                   <li>STATUS.
 *                   </ul>
 * @param RSL(data-value)
 *                   specifies the security key (1-6 characters) that is associated with the report. The value must be in the range of 1 through 24 or "PUBLIC" (127). If the RSL option is not specified, public is assumed.
 *                   <p>Once the report is created, only terminal operators with the same resource level specification (specified in the sign-on table) are able to alter its characteristics. The report can only be printed on printers with the same RSL value specified in OPERRSL.
 *                   <p>The security key is checked at SPOOLCLOSE REPORT of a continuous report and at SPOOLOPEN RESUME. If the terminal operator cannot match the security key, the NOTAUTH condition occurs.
 *                   <p>After JCL reports are closed, RSL is set to 1.
 * @param SCS
 *                   specifies that the report being opened uses the SNA character string. It is the responsibility of the application programmer to ensure correct carriage control characters.
 *                   <p>For SCS, a SPOOLWRITE REPORT is formatted into a whole number of MCC lines. When an SCS (with NOCONV) report is printed, the destination is checked for SCS support. If no SCS support is specified for the destination, message DFHRC5459 is sent to CSPW.
 * @param SEP
 *                   specifies that two separator pages should be printed preceding the report, and two following.
 * @param SOSI1
 *                   specifies that shift-out/shift-in control sequences takes a print position for a report containing double-byte character set (DBCS) fields. Each control sequence prints as a blank. SOSI1 and SOSI2 are mutually exclusive. There is no default specification; if you do not specify either SOSI1 or SOSI2, no indication of a SOSI attribute is made at the time the report is created.
 * @param SOSI2
 *                   specifies that shift-out/shift-in control sequences does not take a print position for a report containing double-byte character set (DBCS) fields. SOSI1 and SOSI2 are mutually exclusive. There is no default specification; if you do not specify either SOSI1 or SOSI2, no indication of a SOSI attribute is made at the time the report is created.
 * @param TITLE(data-area)
 *                   specifies the title to be displayed on the CEMS/CEOS report characteristics panel. The title is a 32-character field that is not subject to any restrictions or validation. The default title is the REPORT name. USERDATA defaults to the first 16 characters of TITLE.
 *                   <p>Note that DBCS characters can be used in TITLE, but if you do not code USERDATA, and let it default to the first 16 characters of TITLE, DBCS characters are translated when they appear on the screen.
 * @param TOKEN(data-value)
 *                   used by CICS to identify the report during creation. The option is required on all commands.
 *                   <p>You must specify an 8-character area (that must be word-aligned) and store the value returned by CICS after a successful SPOOLOPEN REPORT.
 * @param T3270
 *                   specifies that the report to be created is in terminal 3270 format. A report written in T3270 format can contain any control characters normally supported by the 3270-type printers. It is the responsibility of the application to ensure that the control characters being used are valid because the report controller attempts no validation.
 *                   <p>For T3270, SPOOLWRITE REPORT is formatted into a whole number of MCC lines. When a T3270 (with NOCONV) report is printed, the destination is checked for 3270 support. If no 3270 support is available, message DFHRC5459 is sent to CSPW.
 * @param USERDATA(data-area)
 *                   specifies a report description (1-16 characters) or other reference information to be displayed on the CEMS/CEOS report list panel. If this option is omitted, the first 16 printable characters of the title are used. If TITLE is also omitted, the report name is used.
 *                   <p>Note that DBCS characters should not be used in USERDATA, because they are translated when they appear on the screen.
 * @param USERID(name)
 *                   specifies the userid name (1-8 characters) where the report is to be sent to.
 *                   <p>The valid characters that can be used in the userid name are as follows:
 *                   <ul>
 *                   <li>A through Z
 *                   <li>0 through 9
 *                   <li>@ $
 *                   <li>**SYSPRT
 *                   </ul>
 *                   <p>The first character must not be numeric.
 *                   <p>Note: To avoid conflict with some POWER commands, USERID should not be specified as LOCAL or SYSTEM.
 */
function "SPOOLOPEN REPORT <SSC/T3270>"(
   REPORT(name),
   CLASS(data-value),
   COPIES(data-value),
   DESTINATION(name),
   FORMS(name),
   LINELENGTH(data-value),
   LINES(data-value),
   LOG,
   LOGICAL,
   NOCONV,
   NODE(name),
   NOSEP,
   PHYSICAL,
   PRINTFAIL,
   PRIORITY(data-value),
   PWRSYSID(data-value),
   RSL(data-value),
   SCS,
   SEP,
   SOSI1,
   SOSI2,
   TITLE(data-area),
   TOKEN(data-value),
   T3270,
   USERDATA(data-area),
   USERID(name),
   );
/**
 * Reopen a report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLOPEN RESUME REPORT(name)__TOKEN(data-value)__><               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ILLOGIC, IOERR, INVREQ, NAMEERROR, NOSPACE, NOSPOOL,       |
 * | NOTAUTH, WRONGSTAT                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * SPOOLOPEN RESUME is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>3<DD>
 * Incorrect report name
 * <DT>16<DD>
 * Incorrect TOKEN
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>22<DD>
 * Unsupported language (RPGII)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC
 * <DT><b>ff</b><DD>
 * IJBXREAS
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD)
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>NAMEERROR<DD>
 * occurs when an application has specified the wrong report name. when issuing a command
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed. The reasons for the failure are the same as for abend code AEY7, as listed in the CICS Messages and Codes manual.
 * <p>Default action: terminate the task abnormally.
 * <DT>WRONGSTAT<DD>
 * occurs when a SPOOLOPEN RESUME command is issued but the report has not previously been closed as resumable.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param REPORT(name)
 *               specifies the name (2-8 characters) of the report. This option is required for every command.
 *               An attempt to open a log report with the same name as one already open is rejected.
 *               The valid characters that can be used in the report name are as follows:
 *               <ul>
 *               <li>A through Z
 *               <li>0 through 9
 *               <li>- . / @ $ #
 *               </ul>
 *               <p>The first character must not be numeric.
 *               <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *               <ul>
 *               <li>ALL
 *               <li>DEV
 *               <li>FREE
 *               <li>HOLD
 *               <li>LOCAL
 *               <li>PNET
 *               <li>RJE
 *               <li>STATUS.
 *               </ul>
 * @param RESUME
 *               when used in a SPOOLOPEN REPORT command, the report controller requires the report being opened to have previously been closed with the RESUME option, that is, the status of the report must be RESUME. This option cannot be used for JCL reports or for reports that have NODE specified on the associated SPOOLOPEN REPORT command.
 *               You should issue a SPOOLCLOSE RESUME command before you issue a SYNCPOINT, and a SPOOLOPEN RESUME after the SYNCPOINT. Otherwise, the SYNCPOINT results in the report being closed in READY status. However, there could be a transaction failure after the report has been closed, and before the SYNCPOINT. This could result in, for instance, file updates being backed out, while the report of file updates is not backed out.
 * @param TOKEN(data-value)
 *               used by CICS to identify the report during creation. The option is required on all commands.
 *               You must specify an 8-character area (that must be word aligned) and store the value returned by CICS after a successful SPOOLOPEN.
 */
function "SPOOLOPEN RESUME"(
   REPORT(name),
   RESUME,
   TOKEN(data-value),
   );
/**
 * The SPOOLREAD command obtains the next record from the system spooler.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLREAD__INTO(data-area)_______________________________________> |
 * |                                 |_MAXFLENGTH(data-value)_|             |
 * |                                                                        |
 * | >____________________________TOKEN(data-area)__><                      |
 * |    |_TOFLENGTH(data-area)_|                                            |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: ENDFILE, INVREQ, IOERR, LENGERR, NOSPOOL                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * @conditions
 * <p><b>Note</b>:  There are no default actions.
 * <dl>
 * <DT>ALLOCERR<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>Dynamic allocation has rejected a request to
 * allocate an input data set.
 * <p>RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>ENDFILE<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>All data for the current spool file being read has
 * been retrieved. You should proceed to issue a
 * SPOOLCLOSE command as soon as possible, to
 * release the lock on the JES single thread, and to
 * terminate current SYSOUT data set processing.
 * </ul>
 * <DT>ILLOGIC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>3<DD> Invalid CLASS value specified.
 * </dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>  Unsupported language.
 * <DT>8<DD>  Unsupported function.
 * <DT>12<DD> Read attempt after end of file.
 * <DT>24<DD>  INTO missing.
 * <DT>40<DD> Subsystem interface already enabled.
 * <p><b>Note</b>:  Errors 1024 and over are internal, and
 * should not occur. If one of these error
 * codes is returned, contact your IBM
 * support center.
 * </dl>
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>You provided insufficient buffer space to read your
 * record, or you requested more than the maximum
 * allowable buffer size of 32 760 bytes (the size of a
 * CICS buffer used to read a record). If the buffer
 * space is too small, it receives as much data as
 * possible. The amount of data truncated is then
 * placed in the RESP2 field. If the TOFLENGTH
 * operand is specified, the actual length of the record
 * is placed here.
 * <p><b>Note</b>:  In the event of a length error due to
 * insufficient buffer space, the next record is
 * not read until the error has been corrected
 * and the current record reread.
 * <p>RESP2 indicates the amount of data truncated, or
 * shows zero if the MAXFLENGTH field is greater
 * than the maximum allowable buffer size 32 760
 * bytes.
 * </ul>
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No subsystem present.
 * <DT>8<DD> Interface being disabled; CICS is quiescing.
 * <DT>12<DD> Interface has been stopped.
 * </dl>
 * <DT>NOSTG<DD>
 * occurs in any of the following situations:
 * <UL>
 * <LI>A GETMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the GETMAIN register 15 return code.
 * </ul>
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No data sets could be located for retrieval for the
 * specified external writer name.
 * </dl>
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> Data set has not been opened.
 * <DT>12<DD> Attempt to read an output file.
 * <DT>1024<DD> Subtask OPEN macro failure.
 * </dl>
 * <DT>SPOLBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Interface already in use by another task.
 * <DT>8<DD> Interface already in use by current task.
 * </dl>
 * Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>The JES/input single thread within the JES interface
 * was not available.
 * </ul>
 * <DT>SPOLERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The subsystem interface macro (IEFSSREQ) has
 * failed. No input data set name was selected.
 * <p>RESP2 gives the 'IEFSSREQ' response code.
 * </ul>
 * <DT>STRELERR<DD>
 * occurs in any of the following situations:
 * <Ul>
 * <LI>A FREEMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the FREEMAIN register 15 return
 * code.
 * </ul>
 * </dl>
 * @param INTO(data-area)
 *               specifies the data area for the variable-length data. It is
 *               a receiver field.
 * @param MAXFLENGTH(data-value)
 *               specifies, as a fullword binary variable, the maximum
 *               length of data transferred. This is set by the user on
 *               input. The limit of length is 32 760 bytes. This is the
 *               maximum size of the CICS buffer used to read a record.
 * @param TOFLENGTH(data-area)
 *               specifies, as a fullword binary variable, the length of the
 *               data that is transferred. This is set by CICS on input. It
 *               is optional and, if it is omitted, you are not notified of the
 *               actual length of the data received.
 * @param TOKEN(data-area)
 *               specifies the 8-character CICS-allocated token used to
 *               identify a report.
 */
function "SPOOLREAD"(
   INTO(data-area),
   MAXFLENGTH(data-value),
   TOFLENGTH(data-area),
   TOKEN(data-area),
   );


/**
 * The SPOOLWRITE command writes data to a spool report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                                                            _LINE_      |
 * | >>__SPOOLWRITE___________________________FROM(data-area)__|______|___> |
 * |                 |_FLENGTH(data-value)_|                   |_PAGE_|     |
 * |                                                                        |
 * | >__TOKEN(data-area)__><                                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, LENGERR, NOSPACE, NOSPOOL                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * @conditions
 * <p><b>Note</b>:  There are no default actions.
 * <dl>
 * <DT>ALLOCERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <li>Dynamic allocation has rejected a request to
 * allocate an input data set.
 *
 * <p>RESP2 gives the dynamic allocation response code
 * that denotes this error. The first two characters are
 * the information reason code (S99INFO), and the
 * second two are the error reason code (S99ERROR),
 * as defined in the  MVS/ESA Application
 * Development Guide: Authorized Assembler
 * Language Programs, GC28-1645.
 * </ul>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD>  Unsupported language.
 * <DT>8<DD>  Unsupported function.
 * <DT>28<DD>  FROM missing.
 * <DT>40<DD> Subsystem interface already enabled.
 * <p><b>Note</b>:  Errors 1024 and over are internal, and
 * should not occur. If one of these error
 * codes is returned, contact your IBM
 * support center.
 * </dl>
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <li>The value specified in the FLENGTH parameter on
 * a SPOOLWRITE command is not in the valid range
 * 1 to RECORDLENGTH value specified or defaulted
 * at the SPOOLOPEN data set. If the buffer space is
 * too small, it receives as much data as possible.
 * RESP2 contains the difference between FLENGTH
 * and RECORDLENGTH, or zero if FLENGTH is
 * negative or greater than 32760.
 * </ul>
 * <DT>NOSPOOL<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> No subsystem present.
 * <DT>8<DD> Interface being disabled; CICS is quiescing.
 * <DT>12<DD> Interface has been stopped.
 * </dl>
 * <DT>NOSTG<DD>
 * occurs in any of the following situations:
 * <LI>A GETMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the GETMAIN register 15 return code.
 * </ul>
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> Spool report has not been opened.
 * <DT>16<DD> Attempt to write an input file.
 * <DT>1024<DD> Subtask OPEN macro failure.
 * </dl>
 * <DT>SPOLBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> Interface already in use by another task.
 * <DT>8<DD> Interface already in use by current task.
 * </dl>
 * Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>The JES/input single thread within the JES interface
 * was not available.
 * </ul>
 * <DT>SPOLERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The subsystem interface macro (IEFSSREQ) has
 * failed. No input data set name was selected.
 * <p>RESP2 gives the 'IEFSSREQ' response code.
 * </ul>
 * <DT>STRELERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <li>A FREEMAIN has failed within the JES interface
 * subtask (DFHPSPSS).
 * <p>RESP2 gives the FREEMAIN register 15 return
 * code.
 * </ul>
 * </dl>
 * @param FLENGTH(data-value)
 *               specifies the fullword binary variable that is to be set to
 *               the length of the data that is transferred. This is set by
 *               the user on output. It is optional and, if it is omitted,
 *               CICS uses the length of the data area.
 *               <p>For OS/VS COBOL users, FLENGTH is mandatory.
 * @param FROM(data-area)
 *               specifies the data area from which to take the variable
 *               length data. The data itself is not altered in any way by
 *               CICS. FROM is a sender field.
 *               LINE
 *               specifies the format of the data to be sent. This is the default
 *               option if the PAGE option is not specified.
 *               PAGE
 *               specifies the format of the data to be sent. The default
 *               action is LINE.
 *               <p>The PAGE option must be used to correctly format
 *               information for the advanced function printer (AFP(TM))
 *               page printing devices. If a customer is creating MIXED
 *               mode type data, that is LINE records and X'5A'
 *               (AFPDS or MODCA) pagemode records, the LINE or
 *               PAGE operand must match the type record being written
 *               to spool.
 * @param TOKEN(data-area)
 *               specifies the 8-character CICS-allocated token used to
 *               identify a report. It is a receiver on SPOOLOPEN and a
 *               sender on all other commands.
 */
function "SPOOLWRITE"(
   FLENGTH(data-value),
   FROM(data-area),
   TOKEN(data-area),
   );

/**
 * Write to a MAP report.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLWRITE MAPNAME______________ REPORT(name)____________________> |
 * |                         |_(name)_|                                     |
 * |                                                                        |
 * | >__TOKEN(data-value)_________________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)__________________________|  |_MAPSET(name)_|      |
 * |    |                  |_FLENGTH(data-value)_| |                        |
 * |    |_MAPONLY__________________________________|                        |
 * |                                                                        |
 * | >___________><                                                         |
 * |    |_LOG_|                                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, IOERR, LENGERR, MAPERROR, NOSPACE, NOSPOOL,       |
 * | NOTAUTH                                                                |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>SPOOLWRITE MAPNAME is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * <dl>
 * <DT>CCERROR<DD>
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC.
 * <DT><b>ff</b><DD>
 * IJBXREAS.
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>2<DD>
 * Length of SPOOLWRITE for ESC, BMS, SCS(NOCONV), or 3270(NOCONV) type report is greater than the maximum allowable 32 767 bytes
 * <DT>4<DD>
 * Incorrect length for SPOOLWRITE. Length must be greater than 0.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>MAPERROR<DD>
 * occurs when there is an error during execution of a SPOOLWRITE MAPNAME command.
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD>
 * No mapset name specified for a report opened without a mapset name
 * <DT>2<DD>
 * No map name specified for a report opened without a map name
 * <DT>3<DD>
 * Mapset cannot be found.
 * <DT>4<DD>
 * Map name specified not found in specified mapset
 * <DT>5<DD>
 * No data fields in the specified map
 * <DT>6<DD>
 * GETMAIN for the specified map set failed.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * @param FLENGTH(data-value)
 *                mandatory only for a COBOL program writing a non-MAP report. Specifies the length (signed binary fullword) of the data supplied with a SPOOLWRITE REPORT command.
 *                <p>If the report is in ASA, MCC, NOCC, or JCL format, the number of lines to write to the report is calculated by dividing the LINELENGTH or its default into the length of the data specified by the FLENGTH option. Any remainder from the division is considered a line and is padded with blanks to full length before being written to the report.
 *                <p>For ASA and MCC reports, the application programmer must ensure correct carriage control characters for all lines supplied in the command.
 *                <p>If the report is in ESC, MAP, SCS (with NOCONV), or T3270 (with NOCONV) format, the full length of the data is considered one unit and is written as one record. The maximum record size is 32 767.
 *                <p>If the FLENGTH option is omitted, the following apply:
 *                <p>If the report is in ASA, MCC, NOCC, JCL, T3270, SCS, or ESC format, the FLENGTH option is implicitly calculated as the length of the data field specified in the FROM option. This length is resolved at program compilation time and cannot be dynamically changed during program execution.
 *                <p>If the report is in MAP format, the length of the map is calculated by scanning the physical map. If the mapset cannot be loaded from the library or the map cannot be located within the mapset, the MAPERROR condition occurs.
 * @param FROM(data-area)
 *                specifies the field containing the data to be written. For ASA, MCC, NOCC, and JCL format reports, the data area can contain any number of lines. The report controller calculates the number of lines by dividing LINELENGTH or its default into FLENGTH option. Any lines that are not filled are padded with blanks before being written.
 *                <p>If FLENGTH is omitted, CICS calculates the length of the data area. It is the responsibility of the application programmer to ensure correct carriage control characters in all lines supplied. If an incorrect carriage control character is encountered, the CCERROR condition occurs.
 *                <p>The characters used are 1-32 767 for ESC, MAP, SCS (with NOCONV), and T3270 (with NOCONV). For ASA, MCC, NOCC, and JCL there is no upper limit.
 * @param LOG
 *                specifies that a log report is to be written to. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *                <p>A log report can be in any format.
 * @param MAPNAME(name)
 *                specifies the name (1-7 characters) of the BMS map to be used.
 *                <p>If MAPNAME is specified on a SPOOLWRITE command, the value specified at SPOOLOPEN is used.
 *                <p>If MAPNAME is specified on a SPOOLWRITE command, and no value is specified at SPOOLOPEN, the MAPERROR condition occurs.
 *                <p>The valid characters that can be used in the destination map name are as follows:
 *                <ul>
 *                <li>A through Z
 *                <li>0 through 9
 *                <li>@ $ #
 *                </ul>
 *                <p>The first character must not be numeric.
 *                <p>Note: Suffixes are not supported by the report controller.
 * @param MAPONLY
 *                specifies that only the map text is to be output. If you specify this option, you cannot specify FROM.
 * @param MAPSET(name)
 *                specifies the name (1-7 characters) of the BMS mapset that contains the MAPNAME to be used for a MAP format report.
 *                <p>If the MAPSET option is not specified, the mapset name is assumed to be the same as the MAPNAME.
 *                <p>The valid characters that can be used in the destination mapset name are as follows:
 *                <ul>
 *                <li>A through Z
 *                <li>0 through 9
 *                <li>@ $ #
 *                </ul>
 *                <p>The first character must not be numeric.
 *                <p>Note: Suffixes are not supported by the report controller.
 * @param REPORT(name)
 *                specifies the name (2-8 characters) of the report. This option is required for every command. The name must match the name specified in the SPOOLOPEN that used the same token. Otherwise, the NAMEERROR condition occurs.
 *                <p>The valid characters that can be used in the report name are as follows:
 *                <ul>
 *                <li>A through Z
 *                <li>0 through 9
 *                <li>- . / @ $ #
 *                </ul>
 *                <p>The first character must not be numeric.
 *                <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *                <ul>
 *                <li>ALL
 *                <li>DEV
 *                <li>FREE
 *                <li>HOLD
 *                <li>LOCAL
 *                <li>PNET
 *                <li>RJE
 *                <li>STATUS.
 *                </ul>
 * @param TOKEN(data-value)
 *                used by CICS to identify the report during creation. The option is required on all commands. You must specify an 8-character area that contains the value returned after SPOOLOPEN (except for LOG reports, when a token area must be supplied but the returned value is not required).
 * @param NOSPACE
 *                occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 *                <p>Default action: terminate the task abnormally.
 * @param NOSPOOL
 *                occurs when part, or all, of the POWER interface is unavailable.
 *                RESP2 values:
 *                <dl compact>
 *                <DT>1<DD>
 *                No subsystem present
 *                <DT>2<DD>
 *                No report controller interface present
 *                <DT>6<DD>
 *                Interface being terminated
 *                <DT>7<DD>
 *                Interface not active
 *                <DT>8<DD>
 *                Interface being disabled
 *                <DT>12<DD>
 *                Interface has been stopped
 *                </dl>
 *                <p>Default action: terminate the task abnormally.
 * @param NOTAUTH
 *                occurs when a resource security check has failed. The reasons for the failure are the same as for abend code AEY7, as listed in the CICS Messages and Codes manual.
 *                <p>Default action: terminate the task abnormally.
 *                </dl>
 */
function "SPOOLWRITE MAPNAME"(
   MAPNAME[(name)],
   FLENGTH(data-value),
   FROM(data-area),
   LOG,
   MAPONLY,
   MAPSET(name),
   REPORT(name),
   TOKEN(data-value),
   NOSPACE,
   NOSPOOL,
   NOTAUTH,
   );
/**
 * Write to a report (not MAP).
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SPOOLWRITE REPORT(name)__TOKEN(data-value)__FROM(data-area)______> |
 * |                                                                        |
 * | >____________________________________><                                |
 * |    |_FLENGTH(data-value)_|  |_LOG_|                                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: CCERROR, INVREQ, IOERR, LENGERR, NAMEERROR, NOSPACE,       |
 * | NOSPOOL, NOTAUTH                                                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><b>Description</b>
 * <p>SPOOLWRITE REPORT is a function of the report controller facility. For more information about the report controller, see the CICS Report Controller User's Guide and the CICS Report Controller Planning Guide.
 *
 * @conditions
 * CCERROR
 * occurs when an incorrect control character has been specified.
 * <p>Default action: terminate the task abnormally.
 * <dl>
 * <DT>INVREQ<DD>
 * occurs when an invalid token is specified.
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an error response is returned from POWER. RESP2 contains the POWER return and feedback codes in the format <b>rrffvvvv</b> where:
 * <dl compact>
 * <DT><b>rr</b><DD>
 * IJBXRETC.
 * <DT><b>ff</b><DD>
 * IJBXREAS.
 * <DT><b>vv</b><DD>
 * offset 4 from IJBXRUSR (PXPRETCD).
 * <DT><b>vv</b><DD>
 * offset 5 from IJBXRUSR (PXPFBKCD).
 * </dl>
 * <p>IJBXRETC and IJBXREAS are detailed in the DSECT generated by MAPXPCCB.
 * <p>PXPRETCD and PXPFBKCD are detailed in the DSECT PXPUSER generated as part of PWRSPL TYPE=MAP.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>2<DD>
 * Length of SPOOLWRITE for ESC, BMS, SCS(NOCONV), or 3270(NOCONV) type report is greater than the maximum allowable 32 767 bytes
 * <DT>4<DD>
 * Incorrect length for SPOOLWRITE. Length must be greater than 0.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NAMEERROR<DD>
 * occurs when an application specifies the wrong report name when issuing the SPOOLWRITE REPORT command.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the spool files are 90% full. If you continue creating reports without providing more space, IOERR occurs, and you will be unable to close your report.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPOOL<DD>
 * occurs when part, or all, of the POWER interface is unavailable.
 * <dl compact>
 * RESP2 values:
 * <DT>1<DD>
 * No subsystem present
 * <DT>2<DD>
 * No report controller interface present
 * <DT>6<DD>
 * Interface being terminated
 * <DT>7<DD>
 * Interface not active
 * <DT>8<DD>
 * Interface being disabled
 * <DT>12<DD>
 * Interface has been stopped
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed. The reasons for the failure are the same as for abend code AEY7, as listed in the CICS Messages and Codes manual.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param FLENGTH(data-value)
 *               mandatory only for a COBOL program writing a non-MAP report. Specifies the length (signed binary fullword) of the data supplied with a SPOOLWRITE REPORT command.
 *               <p>If the report is in ASA, MCC, NOCC, or JCL format, the number of lines to write to the report is calculated by dividing the LINELENGTH or its default into the length of the data specified by the FLENGTH option. Any remainder from the division is considered a line and is padded with blanks to full length before being written to the report.
 *               <p>For ASA and MCC reports, the application programmer must ensure correct carriage control characters for all lines supplied in the command.
 *               <p>If the report is in ESC, MAP, SCS (with NOCONV), or T3270 (with NOCONV) format, the full length of the data is considered one unit and is written as one record. The maximum record size is 32 767.
 *               <p>If the FLENGTH option is omitted, the following applies:
 *               <p>If the report is in ASA, MCC, NOCC, JCL, T3270, SCS, or ESC format, the FLENGTH option is implicitly calculated as the length of the data field specified in the FROM option. This length is resolved at program compilation time and cannot be dynamically changed during program execution.
 *               <p>If the report is in MAP format, the length of the map is calculated by scanning the physical map. If the mapset cannot be loaded from the library or the map cannot be located within the mapset, the MAPERROR condition occurs.
 * @param FROM(data-area)
 *               specifies the field containing the data to be written. For ASA, MCC, NOCC, and JCL format reports, the data area can contain any number of lines. The report controller calculates the number of lines by dividing LINELENGTH or its default into FLENGTH option. Any lines that are not filled are padded with blanks before being written.
 *               <p>If FLENGTH is omitted, CICS calculates the length of the data area. It is the responsibility of the application programmer to ensure correct carriage control characters in all lines supplied. If an incorrect carriage control character is encountered, the CCERROR condition occurs.
 *               <p>The characters used are 1-32 767 characters for ESC, MAP, SCS (with NOCONV), and T3270 (with NOCONV). For ASA, MCC, NOCC, and JCL there is no upper limit.
 * @param LOG
 *               specifies that a log report is to be written to. A log report is defined as a report that can be written to by a number of applications concurrently. A log report stays open until it is closed explicitly, or it is closed implicitly at CICS termination.
 *               <p>A log report can be in any format.
 * @param REPORT(name)
 *               specifies the name (2-8 characters) of the report. This option is required for every command. The name must match the name specified in the SPOOLOPEN that used the same token. Otherwise, the NAMEERROR condition occurs.
 *               <p>The valid characters that can be used in the report name are as follows:
 *               <ul>
 *               <li>A through Z
 *               <li>0 through 9
 *               <li>- . / @ $ #
 *               </ul>
 *               <p>The first character must not be numeric.
 *               <p>Do not use any of the following names, because you will not be able to manipulate them using CEMS or CEOS, or using POWER operator commands:
 *               <ul>
 *               <li>ALL
 *               <li>DEV
 *               <li>FREE
 *               <li>HOLD
 *               <li>LOCAL
 *               <li>PNET
 *               <li>RJE
 *               <li>STATUS
 *               </ul>
 * @param TOKEN(data-value)
 *               used by CICS to identify the report during creation. The option is required on all commands. You must specify an 8-character area that contains the value returned after SPOOLOPEN (except for LOG reports, when a token area must be supplied but the returned value is not required).
 */
function "SPOOLWRITE REPORT"(
   REPORT(name),
   FLENGTH(data-value),
   FROM(data-area),
   LOG,
   TOKEN(data-value),
   );

/**
 * Start task at a specified time.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * |                            _INTERVAL(0)______________________          |
 * | >>__START__TRANSID(name)__|__________________________________|_______> |
 * |                           |_INTERVAL(hhmmss)_________________|         |
 * |                           |_TIME(hhmmss)_____________________|         |
 * |                           |        <_______________________  |         |
 * |                           |_AFTER_____HOURS(data-value)____|_|         |
 * |                           |         |_MINUTES(data-value)_|  |         |
 * |                           |         |_SECONDS(data-value)_|  |         |
 * |                           |     <_______________________     |         |
 * |                           |_AT_____HOURS(data-value)____|____|         |
 * |                                  |_MINUTES(data-value)_|               |
 * |                                  |_SECONDS(data-value)_|               |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_REQID(name)_|                                                     |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_FROM(data-area)__LENGTH(data-value)__________|                    |
 * |                                           |_FMH_|                      |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_TERMID(name)_______|  |_SYSID(systemname)_|                       |
 * |    |_USERID(data-value)_|                                              |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_RTRANSID(name)_|  |_RTERMID(name)_|  |_QUEUE(name)_|              |
 * |                                                                        |
 * | >________________________________________><                            |
 * |    |_NOCHECK_|  |_PROTECT_|  |_ATTACH_|                                |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, ISCINVREQ, LENGERR, NOTAUTH, SYSIDERR,      |
 * | TERMIDERR, TRANSIDERR, USERIDERR                                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Note for dynamic transaction routing</b>
 * <p>Using START if later CANCELed by another task, or if the started transaction uses RETRIEVE WAIT, could create
 * inter-transaction affinities that adversely affect the use of dynamic transaction routing. See the  CICS Application
 * Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>START starts a task, on a local or remote system, at a
 * specified time. The time is specified by INTERVAL, AFTER,
 * AT or TIME. See the section about expiration times in the
 * CICS Application Programming Guide.
 * The starting task may pass data to the started task. The
 * starting task may also specify a terminal to be used by the
 * started task as its principal facility.
 * <p>The default is INTERVAL(0), but for C the default is AFTER
 * HOURS(0) MINUTES(0) SECONDS(0).
 * <p>Note that CEDF is an exception to the START command and
 * is not valid as a TRANSID name. You should therefore not
 * attempt to start CEDF in this way.
 * <p>You can use the RTRANSID, RTERMID, and QUEUE
 * options to pass further data to the started task. These
 * options can contain arbitrary data values whose meanings
 * depend on what you have specified in the started and
 * starting tasks. One possible way of using them is in the
 * following situation. One task can start a second task, passing
 * it a transaction name and a terminal name to be used when
 * the second task starts a third task. The first task may also
 * pass the name of a queue to be accessed by the second
 * task.
 * <p>One or more constraints have to be satisfied before the
 * transaction to be executed can be started, as follows:
 * <ul>
 * <LI>The specified interval must have elapsed or the specified
 * expiration time must have been reached. (For more
 * information, see the  CICS Application Programming
 * Guide.) The INTERVAL or AFTER options should be
 * specified when a transaction is to be executed on a
 * remote system; this avoids complications arising when
 * the local and remote systems are in different time zones.
 * <LI>If the TERMID option is specified, the named terminal
 * must exist and be available. If the named terminal does
 * not exist when the time interval expires, the START is
 * discarded.
 * <LI>If the PROTECT option is specified, the starting task
 * must have taken a successful syncpoint. This option,
 * coupled to extensions to system tables, reduces the
 * exposure to lost or duplicated data caused by failure of a
 * starting task.
 * <LI>If the transaction to be executed is on a remote system,
 * the format of the data must be declared to be the same
 * as that at the local system. This is done using the RDO
 * options DATASTREAM and RECORDFORMAT. For
 * CICS-CICS, these are always the default values. For
 * CICS-IMS/VS, care should be taken to specify the
 * correct values.
 * </ul>
 * <p>Execution of a START command naming a transaction in the
 * local system cancels any outstanding POST commands
 * executed by the starting task.
 * <p>START commands can be queued by specifying the
 * LOCALQ option on the RDO TRANSACTION resource
 * definition, as described in the  CICS Resource Definition
 * Guide.
 * <p><b><i>Passing data by interval control</i></b>:  If data is to be passed
 * by interval control (using the FROM option), it is queued on a
 * temporary storage queue. The REQID option allows you to
 * specify the name of the temporary storage queue to be used.
 * This identifier may be recoverable (in temporary storage
 * terms) or nonrecoverable. The  CICS Resource Definition
 * Guide describes how to define recoverable temporary
 * storage queues.
 * <p>If you also specify the PROTECT option, the temporary
 * storage queue identified by the REQID option should be
 * defined as recoverable. If you do not specify the PROTECT
 * option, the temporary storage queue should not be defined
 * as recoverable. Unpredictable results can occur if these rules
 * are not followed (see the  CICS Recovery and Restart Guide).
 * An IOERR will occur if a START operation uses a
 * REQID(name) that corresponds with a TSQID in a
 * PUTQ-TSQUEUE. No IOERR occurs if the REQID is the
 * same as a TSQID of a PUT-TSQUEUE.
 * <p>If you specify the FROM and not the REQID option, a default
 * 'DF' prefix temporary storage queue is used. The same rules
 * apply as above; only specify the PROTECT option if you
 * define the 'DF' prefix temporary storage queues as
 * recoverable.
 * <p><b><i>Error checking and performance considerations</i></b>:  The
 * NOCHECK option specifies that no response (to execution of
 * the START command) is expected by the starting
 * transaction. For START commands naming tasks to be
 * started on a local system, error conditions are returned; error
 * conditions are not returned for tasks to be started on a
 * remote system. The NOCHECK option allows CICS to
 * improve performance when the START command has to be
 * shipped to a remote system; it is also a prerequisite if the
 * shipping of the START command is queued pending the
 * establishing of links to the remote system.
 * <p><b><i>Starting tasks without terminals</i></b>:  If the task to be started
 * is not associated with a terminal, each START command
 * results in a separate task being started. This happens
 * regardless of whether or not data is passed to the started
 * task. The following examples show how to start a specified
 * task, not associated with a terminal, in one hour:
 * <pre>
 * EXEC CICS START
 *   TRANSID('TRNL')
 *   INTERVAL(10000)
 *   REQID('NONGL') . . .
 * EXEC CICS START
 *   TRANSID('TRNL')
 *   AFTER HOURS(1)
 *   REQID('NONGL') . . .
 * </pre>
 * Starting tasks with terminals but without data:  Only one
 * task is started if several START commands, each specifying
 * the same transaction and terminal, expire at the same time
 * or before the terminal is available.
 * <p>The following examples show how to request initiation of a
 * task associated with a terminal. Because no request identifier
 * is specified in these examples, CICS assigns one and
 * returns it to the application program in the EIBREQID field of
 * the EXEC interface block.
 * <pre>
 * EXEC CICS START
 *   TRANSID('TRN1')
 *   TIME(185000)
 *   TERMID('STA5') . . .
 * EXEC CICS START
 *   TRANSID('TRN1')
 * AT HOURS(18) MINUTES(50)
 *   TERMID('STA5') . . .
 * </pre>
 * Starting tasks with terminals and data:  Data is passed to
 * a started task if one or more of the FROM, RTRANSID,
 * RTERMID, and QUEUE options is specified. Such data is
 * accessed by the started task by using a RETRIEVE
 * command.
 * <p>It is possible to pass many data records to a new task by
 * issuing several START commands, each specifying the same
 * transaction and terminal.
 * <p>Execution of the first START command ultimately causes the
 * new task to be started and allows it to retrieve the data
 * specified on the command. The new task is also able to
 * retrieve data specified on subsequently executed START
 * commands that expire before the new task is terminated. If
 * the transaction has been defined as restartable (by defining
 * the transaction using the RDO option RESTART(YES)) and
 * such data has not been retrieved before the new task is
 * terminated, another new task is started and is able to retrieve
 * the outstanding data. If the subsequent new task fails to
 * retrieve the outstanding data, a third task will be started and
 * so on, up to a maximum of five times, after which the data is
 * discarded. If the transaction has not been defined as
 * restartable, no new task is initiated and the data is discarded.
 * The following examples show how to start a task associated
 * with a terminal and pass data to it:
 * <pre>
 * EXEC CICS START
 *   TRANSID('TRN2')
 *   TIME(173000)
 *   TERMID('STA3')
 *   REQID(DATAREC)
 *   FROM(DATAFLD)
 *   LENGTH(100) . . .
 * EXEC CICS START
 *   TRANSID('TRN2')
 * AT HOURS(17) MINUTES(30)
 *   TERMID('STA3')
 *   REQID(DATAREC)
 *   FROM(DATAFLD)
 *   LENGTH(100) . . .
 * </pre>
 * <p>When using the C language, you are recommended to use
 * the AFTER/AT HOURS, MINUTES, and SECONDS options
 * as C does not provide a packed decimal data type. You may
 * use INTERVAL or TIME, but if the value specified is not an
 * integer constant, the application is responsible for ensuring
 * that the value passed to CICS is in packed decimal format.
 * <p><b><i>Dynamically routed transactions started by START
 * commands</b></i>:  Some transactions started by a subset of
 * START commands can be dynamically routed to a remote
 * region. For general information about dynamic transaction
 * routing, and specific information about which transactions
 * started by START commands are eligible for dynamic
 * routing, see the  CICS Intercommunication Guide.
 * <p><b><i>START failures without exception conditions</i></b>:  There are
 * some circumstances in which a START command is
 * executed without error, but the started task never takes
 * place:
 * <ul>
 * <LI>When the transaction or its initial program is disabled at
 * the time CICS attempts to create the task.
 * <LI>When the START specifies a terminal and an expiration
 * time, and the terminal is not defined (and cannot be
 * located by the XICTENF or XALTENF exits) at expiration
 * time.
 * <LI>When the START specifies a terminal that is not defined
 * (and cannot be located by the XICTENF or XALTENF
 * exits) at the time CICS attempts to create the task.
 * </ul>
 * These exposures result from the delay between the
 * execution of the START and the time of task creation. Even
 * when the START is immediate, CICS may delay creating the
 * task, either because the required terminal is not free or
 * because of other system constraints.
 * You can use INQUIRE commands to ensure that the
 * transaction and program are enabled at the time of the
 * START command, but either may become disabled before
 * task creation.
 * <p>You get a TERMIDERR condition if the requested terminal
 * does not exist at the time of the START, but if it is deleted
 * subsequently, as occurs if the user logs off, your START
 * request is discarded with the terminal definition.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>4<DD> The value specified in HOURS, for AFTER or AT
 * options, is out of range.
 * <DT>5<DD> The value specified in MINUTES, for AFTER or
 * AT options, is out of range.
 * <DT>6<DD> The value specified in SECONDS, for AFTER or
 * AT options, is out of range.
 * <DT>18<DD> A USERID is specified and the CICS external
 * security manager interface is not initialized.
 * </dl>
 * Also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>The START command is not valid for processing by
 * CICS.
 * <li>Values specified in the INTERVAL option are out of
 * range.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>An input/output error occurred during a START
 * operation.
 * <LI>A START operation attempts to write to a temporary
 * storage queue when the DFHTEMP dataset is full.
 * is full.
 * <LI>A START operation uses a REQID name that
 * already exists. This condition only occurs when the
 * FROM option is also used.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if LENGTH is not greater than zero.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>7<DD> A resource security check fails on TRANSID
 * (name).
 * <DT>9<DD> A surrogate user security check fails on USERID
 * (name).
 * <p>The security access capabilities of the transaction
 * that issued the command do not allow the
 * command to be performed with the value specified
 * in the USERID option. The security access
 * capabilities of the transaction have been
 * established by the external security manager
 * according to user security, and whether link
 * security or the execution diagnostic facility (EDF)
 * have been in use.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs when the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * <p>SYSIDERR also occurs when the link to the remote
 * system is known but unavailable. This condition may not
 * be raised if the user exit XISLCLQ is enabled (see the
 * CICS Customization Guide for programming
 * information).
 * <p>Default action: terminate the task abnormally.
 * <DT>TERMIDERR<DD>
 * occurs if the terminal identifier in a START command
 * cannot be found in the terminal control table.
 * <p>Default action: terminate the task abnormally.
 * <DT>TRANSIDERR<DD>
 * occurs if the transaction identifier specified in a START
 * command cannot be found in the program control table.
 * <p>Default action: terminate the task abnormally.
 * <DT>USERIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> The specified USERID is not known to the
 * external security manager.
 * <DT>10<DD> The external security manager is in a state such
 * that CICS cannot determine whether a specified
 * USERID is valid.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param AFTER
 *                specifies the interval of time that is to elapse before the
 *                new task is started.
 *                There are two ways to enter the time under AFTER and
 *                AT.
 *                <ol>
 *                <li>A combination of at least two of HOURS(0-99),
 *                MINUTES(0-59), and SECONDS(0-59). HOURS(1)
 *                SECONDS(3) would mean one hour and three
 *                seconds (the minutes default to zero).
 *                <li>As one of HOURS(0-99), MINUTES(0-5999), or
 *                SECONDS(0-359999). HOURS(1) means one hour.
 *                MINUTES(62) means one hour and two minutes.
 *                SECONDS(3723) means one hour, two minutes,
 *                and three seconds.
 *                </ol>
 * @param AT
 *                specifies the time at which the new task is to be started.
 *                <p>For the ways to enter the time, see the AFTER option.
 * @param FMH
 *                specifies that the user data to be passed to the started
 *                task contains function management headers. This is not
 *                valid for LUTYPE2 or LUTYPE3 terminals.
 * @param FROM(data-area)
 *                specifies the data to be stored for a task that is to be
 *                started at some future time.
 * @param HOURS(data-value)
 *                specifies a fullword binary value in the range 0-99. This
 *                is a suboption of the AFTER and AT options. For its use
 *                and meaning, see the AFTER option.
 * @param INTERVAL(hhmmss)
 *                specifies the expiration time as an interval of time that is
 *                to elapse from the time at which the START command is
 *                issued. The mm and ss are each in the range 0-59.
 *                The time specified is added to the current clock time by
 *                CICS when the command is executed, to calculate the
 *                expiration time.
 * @param LENGTH(data-value)
 *                specifies a halfword binary data value that is the length
 *                of the data to be stored for the new task.
 * @param MINUTES(data-value)
 *                specifies as a fullword binary value the number of
 *                minutes for use in conjunction with AFTER or AT. The
 *                value must be in the range 0 through 59 if HOURS or
 *                SECONDS is also specified, or in the range 0 through
 *                5999 otherwise. This is a suboption of the AFTER and
 *                AT options. For its use and meaning, see the AFTER
 *                option.
 * @param NOCHECK
 *                specifies that, for a remote system, CICS should
 *                improve performance of the START command by
 *                providing less error checking and slightly less function.
 *                For more information, see the section about improving
 *                the performance of intersystem START requests in the
 *                CICS Intercommunication Guide.
 * @param PROTECT
 *                specifies that the new task is not started until the starting
 *                task has taken a syncpoint. If the starting task abends
 *                before the syncpoint is taken, the request to start the
 *                new task is canceled. If the REQID option is also
 *                specified, the request identifier should be a name
 *                defined as recoverable to temporary storage. If the
 *                started transaction is remote, PROTECT specifies that it
 *                must not be scheduled until the local transaction has
 *                successfully completed a syncpoint. For more
 *                information about the PROTECT option with remote
 *                transactions, see the  CICS Intercommunication Guide.
 * @param QUEUE(name)
 *                specifies the name (1-8 characters) of a temporary
 *                storage queue that may be used by the started
 *                transaction.
 *                <p>If you are also specifying REQID, make sure that the
 *                name of the REQID and the name of the QUEUE are
 *                not the same.
 * @param REQID(name)
 *                specifies a name (1-8 characters), which must be
 *                unique, to identify a command. This option can be used
 *                when another task is to be provided with the capability of
 *                canceling an unexpired command.
 *                <p>If this option is omitted, CICS generates a unique
 *                request identifier in the EIBREQID field of the EXEC
 *                interface block, unless the NOCHECK option is
 *                specified, in which case field EIBREQID is set to nulls
 *                and cannot be used subsequently to cancel the START
 *                command.
 *                <p>If you include any of the data options (FROM,
 *                RTERMID, RTRANSID or QUEUE), the data is stored in
 *                a TS queue using the REQID name specified (or CICS
 *                generated) as the identifier. The queue record thus
 *                identified must be local to the CICS system where the
 *                START command is processed. The START command
 *                is processed on the system identified by the SYSID
 *                option or, if the SYSID option is omitted, on the system
 *                associated with the TRANSID option.
 *                <p>You cannot specify a REQID value that already exists
 *                for another start request that has not yet expired.
 * @param RTERMID(name)
 *                specifies a value (1-4 characters), for example a
 *                terminal name, that may be retrieved when the
 *                transaction, specified in the TRANSID option in the
 *                START command, is started.
 *                <p>When retrieved, the value may be used in the TERMID
 *                option of a subsequent START command.
 * @param RTRANSID(name)
 *                specifies a value (1-4 characters), for example a
 *                transaction name, that may be retrieved when the
 *                transaction, specified in the TRANSID option in the
 *                START command, is started.
 *                <p>When retrieved, the value may be used in the TRANSID
 *                option of a subsequent START command.
 * @param SECONDS(data-value)
 *                specifies a fullword binary value in the range 0-59, when
 *                HOURS or MINUTES are also specified, or 0-359 999
 *                when SECONDS is the only option specified. This is a
 *                suboption of the AFTER and AT options. For its use and
 *                meaning, see the AFTER option.
 * @param SYSID(systemname)
 *                specifies the name of the system to which the request is
 *                directed.
 * @param TERMID(name)
 *                specifies the symbolic identifier (1-4 alphanumeric
 *                characters) of the principal facility associated with a
 *                transaction to be started as a result of a START
 *                command. This principal facility can be either a terminal
 *                (the usual case) or an APPC session. Where an APPC
 *                session is specified, the connection (or modeset) name
 *                is used instead of a terminal identifier. This option is
 *                required when the transaction to be started must
 *                communicate with a terminal; it should be omitted
 *                otherwise.
 *                <p>The terminal identifier must be defined as either a local
 *                or a remote terminal on the system in which the START
 *                command is executed,   when the start of the
 *                transaction takes effect.
 * @param TIME(hhmmss)
 *                specifies the time when a new task should be started.
 *                When using the C language, you are recommended to
 *                use the AFTER/AT HOURS, MINUTES, and SECONDS
 *                options as C does not provide a packed decimal data
 *                type. You may use TIME, but if the value specified is
 *                not an integer constant, the application is responsible for
 *                ensuring that the value passed to CICS is in packed
 *                decimal format.
 * @param TRANSID(name)
 *                specifies the symbolic identifier (1-4 characters) of the
 *                transaction to be executed by a task started as the result
 *                of a START command.
 *                <p>If SYSID is specified, and names a remote system, the
 *                transaction is assumed to be on that system irrespective
 *                of whether or not the transaction definition is defined as
 *                remote in the PCT. Otherwise the transaction definition
 *                is used to find out whether the transaction is on a local
 *                or a remote system.
 * @param USERID(data-value)
 *                Specifies the userid under whose authority the started
 *                transaction is to run, if the started transaction is not
 *                associated with a terminal (that is, when TERMID is not
 *                specified). This is referred to as  userid1.
 *                <p>If you omit both TERMID and USERID, CICS uses
 *                instead the userid under which the transaction that
 *                issues the START command is running. This is referred
 *                to as  userid2.
 *                <p>By using either  userid1 or  userid2 CICS ensures that a
 *                started transaction always runs under a valid userid,
 *                which must be authorized to all the resources referenced
 *                by the started transaction.
 *                <p>CICS performs a surrogate security check against
 *                userid2 to verify that this user is authorized to  userid1. If
 *                userid2 is not authorized, CICS returns a NOTAUTH
 *                condition. The surrogate check is not done here if
 *                USERID is omitted.
 */
function "START"(
   AFTER,
   AT,
   FMH,
   FROM(data-area),
   HOURS(data-value),
   INTERVAL(hhmmss),
   LENGTH(data-value),
   MINUTES(data-value),
   NOCHECK,
   PROTECT,
   QUEUE(name),
   REQID(name),
   RTERMID(name),
   RTRANSID(name),
   SECONDS(data-value),
   SYSID(systemname),
   TERMID(name),
   TIME(hhmmss),
   TRANSID(name),
   USERID(data-value),
   );

/**
 * Start a task immediately.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__START ATTACH__TRANSID(name)______________________________________> |
 * |                                                                        |
 * | >___________________________________________><                         |
 * |    |_FROM(data-area)__LENGTH(data-value)_|                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTAUTH, TRANSIDERR                       |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>START ATTACH starts a non-terminal task immediately in
 * the local CICS region.
 * The attached task has a STARTCODE of U and cannot be
 * cancelled, so EIBREQID is set to nulls.
 * <p>ATTACH allows a START issued in a PLTPI program to take
 * effect before initialization has completed.
 * The starting task may pass data to the started task using the
 * FROM option.
 * <p>Starting tasks with data:  If data is to be passed it is not
 * written to a temporary storage queue; only its address is
 * passed.
 * <p>The attached task retrieves data in the normal way. The task
 * issuing the START must ensure that the data is valid when it
 * is retrieved, either by synchronizing its execution with the
 * attached task, or by placing the data in shared storage.
 * Each START ATTACH command results in a separate task
 * being started, whether or not data is passed to the started
 * task. The following example shows how to start a specified
 * task, and pass data to it:
 * <pre>
 * EXEC CICS START ATTACH
 *   TRANSID('TRNL')
 *   FROM(DATAFLD)
 *   LENGTH(100) | . | . | .
 * </pre>
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>11<DD> An attempt was made to route a START ATTACH
 * request.
 * <DT>12<DD> A START ATTACH request has failed.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if LENGTH is not greater than zero.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>7<DD> A resource security check fails on TRANSID
 * (name).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>TRANSIDERR<DD>
 * occurs if the transaction identifier specified in a START
 * command has not been defined to CICS.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param FROM(data-area)
 *               specifies the data to be passed to a started task.
 * @param LENGTH(data-value)
 *               specifies a halfword binary data value that is the length
 *               of the data to be passed to a started task.
 * @param TRANSID(name)
 *               specifies the symbolic identifier (1-4 characters) of the
 *               transaction to be executed by a task started as the result
 *               of a START ATTACH command.
 */
function "START ATTACH"(
   FROM(data-area),
   LENGTH(data-value),
   TRANSID(name),
   );

/**
 * Start task in the 3270 bridge environment and associate it with the named bridge exit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__START__BREXIT__________TRANSID(name)_____________________________> |
 * |          |_BREXIT(name)_|                                              |
 * | >____________________________________________________________________> |
 * |    |_BRDATA(data-area)__BRDATALENGTH(data-value)_|                     |
 * |                                                                        |
 * |                                                                        |
 * | >________________________________________________><                    |
 * |    |_USERID(data-value)_|                                              |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTAUTH, PGMIDERR, TRANSIDERR, USERIDERR  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>START BREXIT starts a task immediately in the local CICS
 * region, and initializes the specified transaction (TRANSID)
 * and bridge exit (BREXIT).
 * <p>In the 3270 bridge environment, all 3270 terminal requests
 * issued by the transaction specified by TRANSID, are
 * intercepted and passed to the user-replaceable program (the
 * bridge exit) specified by BREXIT.
 * <p>The bridge exit (BREXIT) emulates the 3270 interface by
 * passing the terminal requests to a client application that may
 * be executing inside or outside of CICS.
 * See  CICS External Interfaces Guide for more information
 * about the 3270 bridge and its interfaces.
 * The attached task cannot be CANCELled; its STARTCODE
 * is defined by the bridge exit.
 * <p>Passing data to the bridge exit:  Data can be passed to
 * the bridge exit using the BRDATA and BRDATALENGTH
 * options.
 * <p>The following example shows how to start a specified task, in
 * the 3270 bridge environment and pass data to its bridge exit:
 * <pre>
 * EXEC CICS START BREXIT('DFH0CBRE')
 *   TRANSID('TRNL')
 *   BRDATA(BRSD)
 *   BRDATALENGTH(72) | . | . | .
 * </pre>
 *
 * @param BREXIT(name)
 * specifies the name (1-8 characters) of the bridge exit to
 * be associated with the started task. If no name is
 * specified, the value of BREXIT on the TRANSACTION
 * resource definition for TRANSID is used.
 * @param BRDATA(data-area)
 * specifies the data to be passed to the bridge exit
 * specified by BREXIT when the task is started.
 * @param BRDATALENGTH(data-value)
 * specifies a fullword binary data value that is the length of
 * the BRDATA to be passed to the bridge exit specified by
 * BREXIT when the task is started.
 * @param TRANSID(name)
 * specifies the symbolic identifier (1-4 characters) of the
 * transaction to be executed by a task started as the result
 * of a START BREXIT command. The transaction will be
 * started in the 3270 bridge environment, and will execute
 * in association with the bridge exit specified in BREXIT.
 * @param USERID(data-value)
 * Specifies the userid under whose authority the started
 * transaction is to run.
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>11<DD> An attempt was made to route a START BREXIT
 * request.
 * <DT>12<DD> A START BREXIT request has failed..
 * <DT>18<DD> A USERID is specified and the CICS external
 * security manager interface is not initialized.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if BRDATALENGTH is not greater than zero.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>7<DD> A resource security check fails on TRANSID
 * (name).
 * <DT>9<DD> A surrogate user security check fails on USERID
 * (name).
 * <p>The security access capabilities of the transaction
 * that issued the command do not allow the
 * command to be performed with the value specified
 * in the USERID option.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>PGMIDERR<DD>
 * occurs if no name is supplied by the BREXIT option and
 * the transaction definition for TRANSID does not provide
 * a default BREXIT name.
 * <p>Default action: terminate the task abnormally.
 * <DT>TRANSIDERR<DD>
 * occurs if the transaction identifier specified in a START
 * BREXIT command has not been defined to CICS.
 * <p>Default action: terminate the task abnormally.
 * <DT>USERIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> The specified USERID is not known to the
 * external security manager.
 * <DT>10<DD> The external security manager is in a state such
 * that CICS cannot determine whether a specified
 * USERID is valid.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "START BREXIT"(
   BREXIT[(name)],
   BRDATA(data-area),
   BRDATALENGTH(data-value),
   TRANSID(name),
   USERID(data-value),
   );

/**
 * Start browse of a file.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__STARTBR__FILE(filename)__RIDFLD(data-area)_______________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_KEYLENGTH(data-value)______________|  |_REQID(data-value)_|       |
 * |                             |_GENERIC_|                                |
 * |                                                                        |
 * | >________________________________________________><                    |
 * |    |_SYSID(systemname)_|  |_RBA____|  |_GTEQ__|                        |
 * |                           |_RRN____|  |_EQUAL_|                        |
 * |                           |_DEBKEY_|                                   |
 * |                           |_DEBREC_|                                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, FILENOTFOUND, ILLOGIC, INVREQ, IOERR, ISCINVREQ, |
 * | LOADING, NOTAUTH, NOTFND, NOTOPEN, SYSIDERR                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</B>
 * <P>STARTBR specifies the record in a file, or in a data table, on
 * a local or a remote system, where you want the browse to
 * start. No records are read until a READNEXT command (or,
 * for VSAM and tables, a READPREV command) is executed.
 * <P>A browse operation, where direct means browse of the base
 * data set (using the primary key), may be:
 * <ul>
 * <LI>A direct browse of a key sequenced data set (KSDS or
 * data-table) by record key.
 * <LI>A direct browse of an entry sequenced data set (ESDS)
 * by relative byte address (RBA).
 * <LI>A direct browse of a relative record data set (RRDS) by
 * relative record number (RRN).
 * <LI>A browse of a key sequenced data set (KSDS) using an
 * alternate index path.
 * <LI>A browse of an entry sequenced data set (ESDS) using
 * an alternate index path. In this case, an ESDS is
 * browsed by key in the same way as a KSDS. Some of
 * the options that are not valid for a direct ESDS browse
 * are valid for an alternate index browse.
 * <LI>A browse of a KSDS by RBA.
 * </ul>
 * <p>The options specified on the STARTBR command define the
 * characteristics that apply throughout the subsequent browse
 * operation. Specifically, if GENERIC or GTEQ are specified,
 * they are used not only when determining the starting point of
 * the browse, but also whenever the value of RIDFLD is
 * changed before issuing a READNEXT command.
 * <p>If you specify the RBA option, it applies to every READNEXT
 * or READPREV command in the browse, and causes CICS to
 * return the relative byte address of each retrieved record.
 * None of these options can be changed during a browse,
 * except by means of the RESETBR command.
 * <p>If a STARTBR request specifies the precise key at which the
 * browse is to start (that is, it specifies a full key and the
 * EQUAL keyword) the record returned on the following
 * READNEXT (or READPREV) may not be the same as the
 * record specified by the STARTBR for a file opened in VSAM
 * NSR or RLS mode. This can occur because the initial record
 * specified on the STARTBR command can be deleted by
 * another transaction in between the STARTBR completing
 * and a READNEXT or READPREV being issued. In VSAM
 * LSR mode, the initial record cannot be deleted between the
 * STARTBR and the READNEXT.
 *
 * @conditions
 * <p><b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>DISABLED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>50<DD> A file is disabled. A file may be disabled because:
 * <ul>
 * <LI>It was initially defined as disabled and has not
 * since been enabled.
 * <LI>It has been disabled by a SET FILE or a
 * CEMT SET FILE command.
 * </ul>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT and SYSID has not been
 * specified.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values: (VSAM)
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * (See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" for details.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>20<DD> Browse operations are not allowed according to
 * the file entry specification in the FCT.
 * <DT>25<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length defined for the data set
 * to which this file specified in the KEYLENGTH
 * option is greater than or equal to the length of a
 * full key.
 * <DT>26<DD> The KEYLENGTH option is specified (but the
 * GENERIC option is not specified), and the
 * specified length does not equal the length defined
 * for the data set to which this file refers.
 * <DT>33<DD> An attempt is made to start a browse with a
 * REQID already in use for another browse.
 * <DT>42<DD> The KEYLENGTH and GENERIC options are
 * specified, and the length specified in the
 * KEYLENGTH option is less than zero.
 * <DT>44<DD> The specified file is a user-maintained or coupling
 * facility data table and the command does not
 * conform to the format of STARTBR for such a
 * data table (for example, RBA is specified).
 * <DT>51<DD> A STARTBR command to a KSDS file that is
 * being accessed in RLS mode specifies the RBA
 * keyword. RLS mode does not support RBA access
 * to KSDS files.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error. Further information is available in
 * the EXEC.interface block; refer to Appendix A,
 * "EXEC interface block" for details.
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOADING<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>104<DD> The request cannot be satisfied because it is
 * issued against a data table that is still being
 * loaded. The condition can be raised for one of the
 * following reasons:
 * <ul>
 * <LI>The STARTBR specifies a record that has not
 * yet been loaded into a coupling facility data
 * table. Records can be read while a CFDT is
 * loading only if the requested key is within the
 * range of those records already loaded.
 * <p>The LOADING response can also be returned
 * for a coupling facility data table that has failed
 * during loading. For more information about
 * what happens if the load for a coupling facility
 * data table fails, see the description of the
 * XDTLC global user exit in the  CICS
 * Customization Guide.
 * <LI>The READ specifies the GENERIC or GTEQ
 * options for a user-maintained data table.
 * While a UMT is being loaded, you can issue
 * start browse requests with precise keys only.
 * </ul>
 * </dl>
 * <p>If your application programs encounter the
 * LOADING condition persistently or too frequently,
 * check that this is not caused by conflicting file
 * definitions that reference the same data set.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTFND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>80<DD> An attempt to position on a record based on the
 * search argument provided is unsuccessful.
 * NOTFND can also occur if a generic STARTBR with
 * KEYLENGTH(0) specifies the EQUAL option.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>60<DD> NOTOPEN (RESP2 60) is returned for one of the
 * following reasons:
 * <ul>
 * <LI>The requested file is CLOSED and
 * UNENABLED. The CLOSED, UNENABLED
 * state is reached after a CLOSE request has
 * been received against an OPEN ENABLED
 * file and the file is no longer in use. You can
 * also make CLOSED, UNENABLED the initial
 * state, by specifying STATUS(UNENABLED)
 * and OPENTIME(FIRSTREF) on the FILE
 * resource definition. (For BDAM files, you use
 * the FILSTAT parameter of the DFHFCT
 * TYPE=FILE macro.)
 * <LI>The requested file is OPEN and in use by
 * other transactions, but a CLOSE request
 * against the file has been received.
 * <LI>A STARTBR command is issued against a
 * data set that is quiesced, or is being
 * quiesced, as a result of a SET DSNAME
 * QUIESCED or IMMQUIESCED command.
 * </ul>
 * </dl>
 * <p>This condition does not occur if the request is made
 * either to a CLOSED, ENABLED file or to a CLOSED,
 * DISABLED file. In the first case, the file is opened as
 * part of executing the request. In the second case, the
 * DISABLED condition occurs.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local CICS region nor a remote system defined
 * by a CONNECTION definition. SYSIDERR also
 * occurs when the link to the remote system is
 * closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The start browse is operating on a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param DEBKEY
 *                (blocked BDAM) specifies that deblocking is to occur by
 *                key. If neither DEBREC nor DEBKEY is specified,
 *                deblocking does not occur.
 * @param DEBREC
 *                (blocked BDAM) specifies that deblocking is to occur by
 *                relative record (relative to zero). If neither DEBREC nor
 *                DEBKEY is specified, deblocking does not occur.
 * @param EQUAL
 *                (VSAM and data table) specifies that the search is
 *                satisfied only by a record having the same key
 *                (complete or generic) as that specified in the RIDFLD
 *                option.
 *                <p>This option is the default field for a direct ESDS browse.
 * @param FILE(filename)
 *                specifies the name of the file to be accessed.
 *                <p>If SYSID is specified, the data set to which this file refers
 *                is assumed to be on a remote system irrespective of
 *                whether the name is defined in the FCT. Otherwise, the
 *                FCT entry is used to find out whether the data set is on
 *                a local or a remote system.
 * @param GENERIC
 *                (VSAM KSDS, path or data table) specifies that the
 *                search key is a generic key whose length is specified in
 *                the KEYLENGTH option. The search for a record is
 *                satisfied when a record is found that has the same
 *                starting characters (generic key) as those specified.
 * @param GTEQ
 *                (VSAM or data table) specifies that, if the search for a
 *                record having the same key (complete or generic) as
 *                that specified in the RIDFLD option is unsuccessful, the
 *                first record having a greater key satisfies the search.
 *                This option is the default for directly browsing through a
 *                KSDS or an RRDS. It is not valid for directly browsing
 *                an ESDS, although it is valid for browsing through an
 *                ESDS using a path.
 * @param KEYLENGTH(data-value)
 *                specifies the length (halfword binary) of the key that has
 *                been specified in the RIDFLD option, except when RBA
 *                or RRN is specified, in which case KEYLENGTH is not
 *                valid.
 *                <p>This option must be specified if GENERIC is specified,
 *                and it can be specified whenever a key is specified. If
 *                the length specified is different from the length defined
 *                for the data set and the operation is not generic, the
 *                INVREQ condition occurs.
 *                <p>The INVREQ condition also occurs if a STARTBR
 *                command specifies GENERIC, and the KEYLENGTH is
 *                not less than that specified in the VSAM definition.
 *                If KEYLENGTH(0) is used with the object of positioning
 *                on the first record in the data set, the GTEQ option must
 *                also be specified. If EQUAL is specified either explicitly
 *                or by default with KEYLENGTH(0), the results of the
 *                STARTBR is unpredictable.
 * @param RBA
 *                (VSAM KSDS or ESDS base data sets, or
 *                CICS-maintained data tables only, not paths) specifies
 *                that the record identification field specified in the
 *                RIDFLD option contains a relative byte address. Use this
 *                option only when browsing an ESDS base, or a KSDS
 *                base when using relative byte addresses instead of keys
 *                to identify the records.
 *                You cannot use RBA for:
 *                <Ul>
 *                <LI>User-maintained data tables
 *                <li>Coupling facility data tables
 *                <LI>Any KSDS files opened in RLS access mode
 *                <LI>KSDS files that hold more than 4GB
 *                </ul>
 * @param REQID(data-value)
 *                specifies as a halfword binary value a unique request
 *                identifier for a browse, used to control multiple browse
 *                operations on the same or different data sets. If this
 *                option is not specified, a default value of zero is
 *                assumed.
 * @param RIDFLD(data-area)
 *                specifies the record identification field. The contents can
 *                be a key, a relative byte address, or relative record
 *                number (for VSAM data sets), or a block reference,
 *                physical key, and deblocking argument (for BDAM data
 *                sets). For a relative byte address or a relative record
 *                number, the format of this field must be fullword binary.
 *                For a relative byte address, the RIDFLD can be greater
 *                than or equal to zero. For a relative record number, the
 *                RIDFLD can be greater than or equal to 1.
 *                <p>For VSAM, a full record id of X'FF's indicates that the
 *                browse is to be positioned at the end of the data set in
 *                preparation for a backwards browse using READPREV
 *                commands.
 * @param RRN
 *                (VSAM RRDS) specifies that the record identification
 *                field specified in the RIDFLD option contains a relative
 *                record number. This option should only be used with
 *                files referencing relative record data sets.
 * @param SYSID(systemname)
 *                specifies the name of the system to which the request is
 *                directed.
 *                <p>If you specify SYSID, and omit both RBA and RRN, you
 *                must also specify KEYLENGTH.
 */
function "STARTBR"(
   DEBKEY,
   DEBREC,
   EQUAL,
   FILE(filename),
   GENERIC,
   GTEQ,
   KEYLENGTH(data-value),
   RBA,
   REQID(data-value),
   RIDFLD(data-area),
   RRN,
   SYSID(systemname),
   );

/**
 * Suspend a task.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SUSPEND__><                                                        |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>SUSPEND relinquishes control to a task of higher or equal dispatching priority. Control is returned to the task issuing the
 * command as soon as no other task of a higher or equal priority is ready to be processed.
 */
function "SUSPEND"(
   );

/**
 * Establish a syncpoint.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SYNCPOINT__><                                                      |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, ROLLEDBACK                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>SYNCPOINT divides a task (usually a long-running one) into
 * smaller units of work. It specifies that all changes to
 * recoverable resources made by the task since its last
 * syncpoint are to be committed.
 * <p><b>Note</b>:  A failure occurring during the commit phase (phase 2)
 * of syncpoint processing does not return an error
 * condition and the transaction is not abnormally
 * terminated. Subsequent units of work in the
 * transaction are allowed to continue normally. See the
 * CICS Recovery and Restart Guide for further
 * information.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> SYNCPOINT was in a program that is linked to
 * from a remote system that has not specified the
 * SYNCONRETURN option, or if it has been linked
 * to locally and is defined with
 * <pre>
 * EXECUTIONSET=DPLSUBSET.
 * </pre>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ROLLEDBACK<DD>
 * occurs when a SYNCPOINT command is driven into
 * rollback by a remote system that is unable to commit the
 * syncpoint. All changes made to recoverable resources in
 * the current unit of work are backed out.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 */
function "SYNCPOINT"(
   );

/**
 * Back out to last syncpoint.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__SYNCPOINT__ROLLBACK__><                                            |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> SYNCPOINT ROLLBACK was in a program that is
 * linked to from a remote system that has not
 * specified the SYNCONRETURN option, or if it has
 * been linked to locally and is defined with
 * <pre>
 * EXECUTIONSET=DPLSUBSET
 * </pre>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * @param ROLLBACK
 *                 specifies that all changes to recoverable resources made
 *                 by the task since its last syncpoint are to be backed out.
 *                 This option can be used, for example, to tidy up in a
 *                 HANDLE ABEND routine, or to revoke database
 *                 changes after the application program finds irrecoverable
 *                 errors in its input data.
 *                 <p>If the unit of work updates remote recoverable resources
 *                 using an MRO or APPC session, the ROLLBACK option
 *                 is propagated to the back-end transaction.
 *                 <p>When a distributed transaction processing conversation
 *                 is in use, the remote application program has the EIB
 *                 fields EIBSYNRB, EIBERR, and EIBERRCD set. For the
 *                 conversation to continue, the remote application program
 *                 should execute a SYNCPOINT ROLLBACK command.
 *                 <p>When the mirror transaction is involved in the unit of
 *                 work using an MRO or APPC session, the mirror honors
 *                 the rollback request, revokes changes, and then
 *                 terminates normally.
 *                 <p>This option is not supported across LUTYPE6.1 VTAM
 *                 sessions to the mirror or back-end transactions. In these
 *                 cases, the front-end transactions could be abended to
 *                 cause the back-end transactions to back out.
 *                 <p><b>Note</b>:  A failure occurring during the backout phase
 *                 (phase 2) of syncpoint processing does not
 *                 return an error condition and the transaction is
 *                 not abnormally terminated. Subsequent units of
 *                 work in the transaction are allowed to continue
 *                 normally. See  CICS Recovery and Restart Guide
 *                 for further information.
 */
function "SYNCPOINT ROLLBACK"(
   ROLLBACK,
   );

/**
 * Control the CICS trace facility.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__TRACE____ON______________________________><                        |
 * |            |_OFF_|  |_ALL_________________|                            |
 * |                     |_SINGLE______________|                            |
 * |                     |_SYSTEM______________|                            |
 * |                     |         |_options_| |                            |
 * |                     |_USER________________|                            |
 * |                                                                        |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * This command is now superseded by the SET TRACEDEST and SET TRACEFLAG commands, but is still supported for compatibility with previous releases.
 * <P>See the CICS System Programming Reference manual for further information.
 *
 * @param ON
 * @param OFF
 * @param ALL
 * @param SINGLE
 * @param SYSTEM
 * @param USER
 * @param IE
 */
function "TRACE"(
   ON,
   OFF,
   ALL,
   SINGLE,
   SYSTEM,
   USER,
   IE
   );


/**
 * Release exclusive control.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__UNLOCK__FILE(filename)___________________________________________> |
 * |                             |_TOKEN(data-area)_|                       |
 * |                                                                        |
 * | >_________________________><                                           |
 * |    |_SYSID(systemname)_|                                               |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, FILENOTFOUND, ILLOGIC, INVREQ, IOERR, ISCINVREQ, |
 * | NOTAUTH, NOTOPEN, SYSIDERR                                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>UNLOCK releases the exclusive control established in
 * response to a read command with the UPDATE option. You
 * use it if you retrieve a record for update, and then decide
 * that you do not want to update the record after all. However,
 * for a recoverable file (other than one that refers to a coupling
 * facility data table), the resource remains locked until either a
 * syncpoint command is executed or the task is terminated.
 * The record can be in a data set, or in a CICS or
 * user-maintained data table, on a local or a remote system.
 * <p>If the UNLOCK command refers to a record in a recoverable
 * coupling facility data table the record lock is released
 * immediately provided that the task has not made any
 * previous change to the same record (or added it as a new
 * record) within the current unit of work. If changes have been
 * made to the record, or it is a new record added to the table,
 * it remains locked until either a syncpoint command is
 * executed or the task is terminated.
 * <p>If an UNLOCK command does not have a token, an attempt
 * is made to match it to either a read with the UPDATE option
 * that also does not have a token, or to a WRITE
 * MASSINSERT. If neither of these is found, no action is taken
 * and a NORMAL response is returned.
 * <p>Use this command to terminate a VSAM WRITE
 * MASSINSERT operation against a VSAM file.
 * Releasing locks when updating in browse:  The UNLOCK
 * command does not release locks held against records locked
 * in response to READNEXT or READPREV commands that
 * specify the update option. It only invalidates the TOKEN
 * value so that it cannot be used to complete an update.
 *
 * @conditions
 * <b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>DISABLED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>50<DD> A file is disabled because it was initially defined as
 * disabled and has not since been enabled.
 * <p>A file is disabled by an EXEC CICS SET FILE or a
 * CEMT SET FILE command.
 * <p>This condition cannot occur when the UNLOCK
 * follows a successful read for update or a VSAM
 * WRITE MASSINSERT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT and SYSID has not been
 * specified.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values: (VSAM and CICS-maintained data
 * tables)
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * (See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" for details.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>47<DD> An unlock includes a token whose value cannot be
 * matched against any token in use for an existing
 * READ with the UPDATE option.
 * <DT>48<DD> An attempt is made to function-ship a request
 * which includes a TOKEN keyword.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition.
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error. Further information is available in
 * the EXEC interface block; refer to Appendix A,
 * "EXEC interface block" for details.)
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>60<DD> NOTOPEN (RESP2 60) is returned for one of the
 * following reasons:
 * <ul>
 * <LI>The requested file is CLOSED and
 * UNENABLED. The CLOSED, UNENABLED
 * state is reached after a CLOSE request has
 * been received against an OPEN ENABLED
 * file and the file is no longer in use. You can
 * also make CLOSED, UNENABLED the initial
 * state, by specifying STATUS(UNENABLED)
 * and OPENTIME(FIRSTREF) on the FILE
 * resource definition. (For BDAM files, you use
 * the FILSTAT parameter of the DFHFCT
 * TYPE=FILE macro.)
 * <LI>The requested file is OPEN and in use by
 * other transactions, but a CLOSE request
 * against the file has been received.
 * <LI>An UNLOCK command is issued against a
 * data set that is quiesced, or is being
 * quiesced, as a result of a SET DSNAME
 * QUIESCED or IMMQUIESCED command.
 * </ul>
 * </dl>
 * <p>This condition does not occur if the request is made to
 * either a CLOSED, ENABLED file or a CLOSED,
 * DISABLED file. In the first case, the file is opened as
 * part of executing the request. In the second case, the
 * DISABLED condition occurs.
 * <p>It also cannot occur when the UNLOCK follows a
 * successful READ for update or a WRITE MASSINSERT
 * operation.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local CICS region nor a remote system defined
 * to CICS by a CONNECTION definition.
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The UNLOCK is issued against a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param FILE(filename)
 *               specifies the name of the file to be released.
 *               <p>If SYSID is specified, the data set to which this file refers
 *               is assumed to be on a remote system irrespective of
 *               whether the name is defined in the FCT. Otherwise, the
 *               FCT entry is used to find out whether the data set is on
 *               a local or a remote system.
 * @param SYSID(systemname)
 *               specifies the name of the system to which the request is
 *               directed.
 * @param TOKEN(data-area)
 *               specifies as a fullword binary value a unique request
 *               identifier for an UNLOCK, used to associate it with a
 *               previous READ, READNEXT, or READPREV command
 *               that specified the UPDATE option.
 *               <p>If you specify UNLOCK with the TOKEN returned on a
 *               READNEXT UPDATE or READPREV UPDATE
 *               command for a file accessed in RLS mode, the unlock
 *               command simply invalidates the TOKEN value so that it
 *               cannot be used to complete an update. It does not
 *               release the record lock.
 *               <p>TOKEN can be function shipped. However, if a request
 *               specifying TOKEN is function shipped to CICS region
 *               that does not support this keyword, the request fails.
 */
function "UNLOCK"(
   FILE(filename),
   SYSID(systemname),
   TOKEN(data-area),
   );

/**
 * Update the current value.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__UPDATE COUNTER(name)__________________VALUE(data-value)__________> |
 * |                           |_POOL(name)_|                               |
 * | >____________________________________________________________________> |
 * |    |_COMPAREMIN(data-value)_| |_COMPAREMAX(data-value)_|               |
 * |                                                                        |
 * | Conditions: INVREQ, SUPPRESSED                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>These counter commands set a new current value for the
 * named counter. COUNTER operates on fullword signed
 * counters and DCOUNTER on doubleword unsigned counters.
 * <p>You can use the COMPAREMAX and COMPAREMIN
 * options to set a new current value only if it falls within a
 * specified range, or is above or below a specified value.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The VALUE parameter is invalid. You cannot set
 * the current value to less than the minimum value,
 * or greater than the maximum value plus 1.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>103<DD> The current value of the named counter is:
 * <ul>
 * <LI>not within the range specified by the
 * COMPAREMAX and COMPAREMIN
 * parameters, when both are specified
 * <LI>greater than the COMPAREMAX parameter or
 * less than the COMPAREMIN parameter,
 * when only one option is specified.
 * </ul>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param COUNTER(name)
 *               specifies the name of the named counter for which the
 *               current number is to be reset to the value specified on
 *               the value parameter. The name can be up to 16
 *               alphanumeric characters. If  name is a variable that
 *               contains a name that is less than 16 characters, the
 *               name must be padded with trailing blanks.
 * @param COMPAREMAX(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the UPDATE command conditional
 *               on the comparison:
 *               <ul>
 *               <LI>If the current value to be assigned is less than, or
 *               equal to, the value specified on the COMPAREMAX
 *               parameter, the current value is reset, with response
 *               normal
 *               <LI>If the current value is greater than the specified
 *               value, CICS returns an exception condition.
 *               </ul>
 *               <p>The value you specify on the COMPAREMAX parameter
 *               can be less than the value on the COMPAREMIN
 *               parameter, in which case the current value is considered
 *               to be in range if it satsifies the COMPAREMIN  or the
 *               COMPAREMAX comparison. In the normal case where
 *               the COMPAREMIN value is less than the
 *               COMPAREMAX value, the current value must satisfy
 *               both comparisons (that is, it must lie between the two
 *               values).
 * @param COMPAREMIN(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the UPDATE command conditional
 *               on the comparison:
 *               <ul>
 *               <LI>If the current value to be assigned is equal to, or
 *               greater than, the value specified on the
 *               COMPAREMIN parameter, the CICS resets the
 *               current value, with response normal
 *               <LI>If the current value is less than the specified value,
 *               CICS returns an exception condition.
 *               </ul>
 *               <p><b>Note</b>:  The value you specify on the COMPAREMIN
 *               parameter can be greater than the value on the
 *               COMPAREMAX parameter. See the
 *               COMPAREMAX parameter for the effect of this.
 * @param VALUE(data-value)
 *               specifies the new number to be set as the current value
 *               for the named counter, using a fullword signed binary
 *               value for COUNTER and a doubleword unsigned value
 *               for DCOUNTER.
 * @param POOL(poolname)
 *               specifies the name of the pool in which the named
 *               counter resides.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "UPDATE COUNTER"(
   COUNTER(name),
   COMPAREMAX(data-value),
   COMPAREMIN(data-value),
   VALUE(data-value),
   POOL(poolname),
   );

/**
 * Update the current value.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__UPDATE DCOUNTER(name)__________________VALUE(data-value)_________> |
 * |                            |_POOL(name)_|                              |
 * | >____________________________________________________________________> |
 * |    |_COMPAREMIN(data-value)_| |_COMPAREMAX(data-value)_|               |
 * |                                                                        |
 * | Conditions: INVREQ, SUPPRESSED                                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>These counter commands set a new current value for the
 * named counter. COUNTER operates on fullword signed
 * counters and DCOUNTER on doubleword unsigned counters.
 * You can use the COMPAREMAX and COMPAREMIN
 * options to set a new current value only if it falls within a
 * specified range, or is above or below a specified value.
 * <p>For information about specifying fullword and doubleword
 * variables on these named counter commands, see
 * "Argument values".
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>201<DD> Named counter not found.
 * <DT>301<DD> The server has reported an error code that is not
 * understood by the named counter interface.
 * Generally, this is not possible unless the interface
 * load module, DFHNCIF, is at a lower maintenance
 * or release level than the server itself.
 * <DT>303<DD> An unexpected error, such as structure failure or
 * loss of connectivity, has occurred on a macro
 * used to access the coupling facility. Further
 * information can be found in message DFHNC0441
 * in the CICS job log.
 * <DT>304<DD> The pool selection parameter specified in the
 * program cannot be resolved to a valid server
 * name using the current options table.
 * <DT>305<DD> The interface is unable to establish a connection
 * to the server for the selected named counter pool.
 * Further information can be found in an AXM
 * services message (AXMSC nnnn) in the CICS job
 * log.
 * <DT>306<DD> An abend occurred during server processing of a
 * request. Further information can be found in a
 * message in the CICS job log and the server job
 * log.
 * <DT>308<DD> The DFHNCOPT options table module, required
 * for resolving a pool name, could not be loaded.
 * <DT>309<DD> During processing of the options table, the named
 * counter interface encountered an unknown entry
 * format. Either the options table is not correctly
 * generated, or the DFHNCIF interface load module
 * is not at the same release level as the options
 * table.
 * <DT>310<DD> An options table entry matching the given pool
 * name specified a user exit program, but the user
 * exit program is not link-edited with the options
 * table and cannot be loaded.
 * <DT>403<DD> The POOL parameter contains invalid characters
 * or embedded spaces.
 * <DT>404<DD> The COUNTER parameter contains invalid
 * characters or embedded spaces.
 * <DT>406<DD> The VALUE parameter is invalid. You cannot set
 * the current value to less than the minimum value,
 * or greater than the maximum value plus 1.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>103<DD> The current value of the named counter is:
 * <ul>
 * <LI>not within the range specified by the
 * COMPAREMAX and COMPAREMIN
 * parameters, when both are specified
 * <LI>greater than the COMPAREMAX parameter or
 * less than the COMPAREMIN parameter,
 * when only one option is specified.
 * </ul>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param DCOUNTER(name)
 *               specifies the name of the named counter that is to be
 *               reset to its minimum value. The name can be up to 16
 *               alphanumeric characters. If  name is a variable that
 *               contains a name that is less than 16 characters, the
 *               name must be padded with trailing blanks.
 * @param COMPAREMAX(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the UPDATE command conditional
 *               on the comparison:
 *               <ul>
 *               <LI>If the current value to be assigned is less than, or
 *               equal to, the value specified on the COMPAREMAX
 *               parameter, the current value is reset, with response
 *               normal
 *               <LI>If the current value is greater than the specified
 *               value, CICS returns an exception condition.
 *               </ul>
 *               <p>The value you specify on the COMPAREMAX parameter
 *               can be less than the value on the COMPAREMIN
 *               parameter, in which case the current value is considered
 *               to be in range if it satsifies the COMPAREMIN  or the
 *               COMPAREMAX comparison. In the normal case where
 *               the COMPAREMIN value is less than the
 *               COMPAREMAX value, the current value must satisfy
 *               both comparisons (that is, it must lie between the two
 *               values).
 * @param COMPAREMIN(data-value)
 *               specifies, as a fullword signed binary value (doubleword
 *               unsigned binary value for DCOUNTER), a value to be
 *               compared with the named counter's current value, and
 *               makes the result of the UPDATE command conditional
 *               on the comparison:
 *               <ul>
 *               <LI>If the current value to be assigned is equal to, or
 *               greater than, the value specified on the
 *               COMPAREMIN parameter, the CICS resets the
 *               current value, with response normal
 *               <LI>If the current value is less than the specified value,
 *               CICS returns an exception condition.
 *               </ul>
 *               <p><b>Note</b>:  The value you specify on the COMPAREMIN
 *               parameter can be greater than the value on the
 *               COMPAREMAX parameter. See the
 *               COMPAREMAX parameter for the effect of this.
 * @param VALUE(data-value)
 *               specifies the new number to be set as the current value
 *               for the named counter, using a fullword signed binary
 *               value for COUNTER and a doubleword unsigned value
 *               for DCOUNTER.
 * @param POOL(poolname)
 *               specifies the name of the pool in which the named
 *               counter resides.
 *               <p>Valid characters for the pool selector string are A
 *               through Z, 0 through 9, $ @ # and _ (underscore). If
 *               name is a variable that contains a name that is less than
 *               8 characters, the name must be padded with trailing
 *               blanks.
 *               <p>This parameter is optional. If you omit the name of the
 *               pool, a pool selector value of 8 blanks is assumed.
 *               If there is no matching entry in the DFHNCOPT options
 *               table, CICS uses the name specified on the NCPLDFT
 *               system initialization parameter, which specifies the
 *               default named counter pool.
 *               <p>For information about generating a named counter
 *               options table using the DFHNCO macro, see the  CICS
 *               System Definition Guide.
 */
function "UPDATE DCOUNTER"(
   DCOUNTER(name),
   COMPAREMAX(data-value),
   COMPAREMIN(data-value),
   VALUE(data-value),
   POOL(poolname),
   );
/**
 * Allow an application to check that a password matches the password recorded by an external security manager.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__VERIFY PASSWORD(data-value)__USERID(data-value)__________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_CHANGETIME(data-area)_|  |_DAYSLEFT(data-area)_|                  |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ESMREASON(data-area)_|  |_ESMRESP(data-area)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_EXPIRYTIME(data-area)_|  |_INVALIDCOUNT(data-area)_|              |
 * |                                                                        |
 * | >______________________________><                                      |
 * |    |_LASTUSETIME(data-area)_|                                          |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTAUTH, USERIDERR                                 |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>The VERIFY PASSWORD command allows an application to
 * check that a password matches the password recorded by
 * an external security manager (ESM) for a userid, and return
 * values recorded by the external security manager for the
 * password.
 * <p>Unlike the SIGNON command, VERIFY PASSWORD does
 * not depend upon the principal facility, so it can be issued
 * when the facility is an APPC session.
 * When the external security manager is RACF, the
 * CHANGETIME and EXPIRYTIME outputs always show as
 * midnight.
 * <p>If a VERIFY PASSWORD request is successful, you should
 * not infer that a signon would also be successful. For
 * example, the USERID may be revoked in one or more RACF
 * group connections, or may not be able to signon in this CICS
 * region.
 * <p><b>Attention</b>: You should clear the password fields on the
 * EXEC CICS commands that have a password option as soon
 * as possible after use. This is to ensure that passwords are
 * not revealed in system or transaction dumps.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>13<DD> There is an unknown return code in ESMRESP
 * from the external security manager.
 * <DT>18<DD> The CICS external security manager interface is
 * not initialized.
 * <DT>29<DD> The external security manager is not responding.
 * <DT>32<DD> The userid field contains a blank character in an
 * invalid position.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>2<DD> The supplied password is wrong. If the external
 * security manager is RACF, the revoke count
 * maintained by RACF is incremented.
 * <DT>3<DD> A new password is required.
 * <DT>19<DD> The USERID is revoked.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>USERIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> The USERID is not known to the external security
 * manager.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param CHANGETIME(data-area)
 *               returns the date and time the password was last
 *               changed, in ABSTIME units.
 *               <p>When the external security manager is RACF, the time
 *               is shown as midnight.
 *               DAYSLEFT( data-area)
 *               returns the number of days from now, in a halfword
 *               binary field, until the password expires. If the password
 *               is non-expiring, -1 is returned.
 * @param ESMREASON(data-area)
 *               returns the reason code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               If the ESM is RACF, this field is the RACF reason code.
 * @param ESMRESP(data-area)
 *               returns the response code, in a fullword binary field, that
 *               CICS receives from the external security manager.
 *               If the external security manager is RACF, this field is the
 *               RACF return code.
 * @param EXPIRYTIME(data-area)
 *               returns the date and time the password will expire, in
 *               ABSTIME units.
 *               <p>When the external security manager is RACF, the time
 *               is shown as midnight.
 * @param INVALIDCOUNT(data-area)
 *               returns the number of times an invalid password was
 *               entered for this user.
 * @param LASTUSETIME(data-area)
 *               returns the data and time this userid was last accessed,
 *               in ABSTIME units.
 * @param PASSWORD(data-value)
 *               specifies the password, 8 characters, that you want the
 *               external security manager to check for the specified
 *               userid. The other data is not returned if the password is
 *               not valid.
 * @param USERID(data-value)
 *               specifies the userid, 8 characters, of the user whose
 *               password is to be checked.
 *               <p><b>Note</b>:  In the CHANGETIME, LASTUSETIME, and
 *               EXPIRYTIME options, the time value returned is in
 *               the same format as the ASKTIME command, so it
 *               can be reformatted as a date and time, in a format
 *               specified by the caller, by using the FORMATTIME
 *               command.
 *               <p>If a user has a never-expiring password that was established
 *               with the RACF PASSWORD USER(userid) NOINTERVAL
 *               command, the outputs DAYSLEFT and EXPIRYTIME have
 *               little meaning and are shown as -1.
 */
function "VERIFY PASSWORD"(
   PASSWORD(data-value),
   CHANGETIME(data-area),
   ESMREASON(data-area),
   ESMRESP(data-area),
   EXPIRYTIME(data-area),
   INVALIDCOUNT(data-area),
   LASTUSETIME(data-area),
   USERID(data-value),
   );

/**
 * Ensure accumulated data is transmitted on an APPC mapped conversation.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT CONVID(name)___________________><                             |
 * |                        |_STATE(cvda)_|                                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC                                           |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>WAIT CONVID allows an application program to ensure that
 * any accumulated application data and control indicators from
 * a SEND command, or the results of a CONNECT PROCESS
 * command, are transmitted to the partner transaction.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> Command not supported for distributed program
 * link when it refers to the principal facility.
 * </dl>
 * also occurs (RESP2 not set) in any of the following
 * situations:
 * <ul>
 * <LI>The command is used on a conversation that is not
 * using the EXEC CICS interface or that is not a
 * mapped conversation.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the CONVID value in the command does not
 * relate to a conversation that is owned by the application.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param STATE(cvda)
 * gets the state of the current conversation. The cvda
 * values returned by CICS are:
 *     <pre>
 *     ALLOCATED
 *     CONFFREE
 *     CONFRECEIVE
 *     CONFSEND
 *     FREE
 *     PENDFREE
 *     PENDRECEIVE
 *     RECEIVE
 *     ROLLBACK
 *     SEND
 *     SYNCFREE
 *     SYNCRECEIVE
 *     SYNCSEND
 *     </pre>
 */
function "WAIT CONVID <APPC>"(
   CONVID(name),
   STATE(cvda),
   );

/**
 * Wait for an event to occur.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT EVENT__ECADDR(ptr-value)__________________><                  |
 * |                                    |_NAME(name)_|                      |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Note for dynamic transaction routing</b>
 * <p>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>WAIT EVENT synchronizes a task with the completion of an
 * event initiated by the same task or by another task. The
 * event would normally be the posting, at the expiration time,
 * of a timer-event control area provided in response to a POST
 * command, as described in "POST". The WAIT
 * EVENT command provides a method of directly relinquishing
 * control to some other task until the event being waited on is
 * completed.
 * <p>CICS includes the addresses of all ECBs passed by WAIT
 * EVENT commands of current tasks in the ECBLIST passed
 * by CICS to the ESA WAIT ESA POST ESA WAIT
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>2<DD> The ECB address is a null pointer, (X'00000000')
 * or (X'FF000000').
 * <DT>3<DD> The specified event control area address is above
 * the 16MB line for programs executing in 24-bit
 * mode.
 * <DT>4<DD> The event control area address is not aligned on a
 * fullword boundary.
 * <DT>6<DD> The timer-event control area specified on a WAIT
 * EVENT is in user-key task-lifetime storage, and is
 * inaccessible to another transaction. This condition
 * can only occur if the storage for the timer-event
 * control area is obtained other than by a POST
 * command, and is for posting as an ECB by some
 * other task on completion of an event.
 * <p><b>Note</b>:  CICS obtains storage for a timer-event
 * control area in response to a POST
 * command (and which can be used in
 * conjunction with the WAIT EVENT
 * command) from a shared subpool in
 * user-key storage. This ensures that
 * timer-event control areas are in shared
 * storage and, when referenced by a
 * subsequent WAIT EVENT command, do
 * not fail with an INVREQ.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows you how to suspend the
 * processing of a task until the specified event control area is
 * posted:
 * <pre>
 * EXEC CICS WAIT EVENT ECADDR(PVALUE)
 * </pre>
 * @param ECADDR(ptr-value)
 *                   specifies the address of the timer-event control area that
 *                   must be posted before task activity can be resumed.
 * @param NAME(name)
 *                   specifies the symbolic name, 1-8 alphanumeric
 *                   characters, that is returned in SUSPENDVALUE or
 *                   HVALUE, when a task issues WAIT EVENT and is the
 *                   subject of an INQUIRE TASK command or a CEMT INQ
 *                   TASK.
 */
function "WAIT EVENT"(
   ECADDR(ptr-value),
   NAME(name),
   );

/**
 * Synchronize events.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT EXTERNAL__ECBLIST(ptr-value)__NUMEVENTS(data-value)_________> |
 * |                                                                        |
 * |     _PURGEABLE__________                                               |
 * | >__|____________________|__________________><                          |
 * |    |_PURGEABILITY(cvda)_|  |_NAME(name)_|                              |
 * |    |_NOTPURGEABLE_______|                                              |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Note for dynamic transaction routing</B>
 * <P>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>WAIT EXTERNAL waits for events that post MVS-format
 * ECBs. The command causes the issuing task to be
 * suspended until one of the ECBs has been posted, that is
 * until one of the events has occurred. The task can wait on
 * one or more ECBs. If it waits on more than one, it is
 * dispatchable as soon as one of the ECBs is posted. You
 * must ensure that each ECB is cleared (set to binary zeros)
 * no later than the earliest time it could be posted. CICS
 * cannot do this for you. If you wait on an ECB that has been
 * previously posted and not subsequently cleared, your task is
 * not suspended and continues to run as though the WAIT
 * EXTERNAL had not been issued.
 * <p>CICS uses extended ECBs and the MVS POST exit
 * mechanism for ECBs passed by WAIT EXTERNAL; therefore
 * do not use WAIT EXTERNAL unless you are sure that the
 * ECBs are not posted by any method other than the MVS
 * POST service or the standard 'optimized post' logic using a
 * compare-and-swap (CS) instruction. Note that the standard
 * 'optimized post' logic is only applicable when the ECB is not
 * waiting, that is when the wait bit X'80' is not on.
 * If a WAIT EXTERNAL ECB is hand posted, for example by
 * another task moving a value into the ECB, unpredictable
 * errors occur. If there is any possibility of hand posting, use
 * the WAITCICS command. Use WAIT EXTERNAL whenever
 * possible, because it usually has less overhead.
 * A given ECB must not be waited on by more than one task
 * at the same time. If this rule is not followed, the second task
 * to wait on the ECB gets an INVREQ condition.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values: CVDA values are:
 * <dl compact>
 * <DT>1<DD> An ECB is not valid, for example the ECB is not
 * fullword aligned.
 * <DT>2<DD> The ECB address is a null pointer, (X'00000000')
 * or (X'FF000000').
 * <DT>3<DD> NUMEVENTS is not a positive number.
 * <DT>4<DD> PURGEABILITY is specified with an incorrect
 * CVDA.
 * <DT>5<DD> No valid ECBs have been found in the list,
 * because either the ECBLIST address is not valid
 * or all the ECB addresses are not valid.
 * <DT>6<DD> The event control blocks (ECBs) specified are in
 * user-key task-lifetime storage, and are
 * inaccessible to another transaction that is
 * expected to post the ECBs.
 * <p>The ECBs specified are in read-only storage.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following figure shows how to use the ECBLIST
 * parameter to point to a list of ECB addresses that in turn
 * point to individual ECBs. Note that the ECBLIST variable is a
 * pointer pointing to the first address of the list.
 * <p><i>Figure  5.  ECBLIST option, EXEC CICS WAIT EXTERNAL</i>
 * <pre>
 * PTR_ECB_ADDR_LIST
 * +------------------+
 * | A(ECB_ADDR_LIST) |
 * +------------------+                       +------+
 *        |             ECB_ADDR_LIST   +---->| ECB1 |
 *        +-----------> +--------+      |     +------+
 *                      | A(ECB1)|------+
 *                      +--------+            +------+
 *                      | A(ECB2)|----------->| ECB2 |
 *                      +--------+            +------+
 *                      | A(ECB3)|------+
 *                      +--------+      |     +------+
 *                                      +---->| ECB3 |
 *                                            +------+
 *
 * DCL
 *    ECB1 FIXED BIN(31), /<b></b>* actual ecb *<b></b>/
 *    ECB2 FIXED BIN(31), /<b></b>* actual ecb *<b></b>/
 *    ECB3 FIXED BIN(31); /<b></b>* actual ecb *<b></b>/
 * DCL /<b></b>* list of ecb addresses *<b></b>/
 *   1 ECB_ADDR_LIST,
 *      2  ECB_ADDR(3)  PTR;
 * DCL                     /<b></b>* ptr to each addr list *<b></b>/
 *   PTR_ECB_ADDR_LIST PTR;
 * ECB_ADDR(1) = ADDR(ECB1);
 * ECB_ADDR(2) = ADDR(ECB2);
 * ECB_ADDR(3) = ADDR(ECB3);
 *                         /<b></b>* set up pointer *<b></b>/
 * PTR_ECB_ADDR_LIST = ADDR(ECB_ADDR_LIST);
 * /<b></b>* PTR_ECB_ADDR_LIST = ADDR(ECB_ADDR(1));
 *   (alternative) *<b></b>/
 * EXEC CICS WAIT EXTERNAL
 *   ECBLIST(PTR_ECB_ADDR_LIST)
 *   NUMEVENTS(3)
 *   PURGEABLE
 * </pre>
 * @param ECBLIST(ptr-value)
 *                   is a pointer to a list of addresses of MVS-format ECBs
 *                   representing events. Both the ECBLIST and the ECBs
 *                   can be above the 16MB line, that is they can be 31-bit
 *                   addresses. Each ECB must be fullword aligned. Null
 *                   (X'00000000' and X'FF000000') ECB addresses are
 *                   ignored.
 * @param NAME(name)
 *                   specifies the symbolic name, 1-8 alphanumeric
 *                   characters, that is returned in SUSPENDVALUE or
 *                   HVALUE, when a task issues WAIT EXTERNAL and is
 *                   the subject of an INQ TASK command or a CEMT INQ
 *                   TASK.
 * @param NUMEVENTS(data-value)
 *                   is the number of such events, corresponding to the
 *                   number of addresses in the ECBLIST. The field is
 *                   fullword binary. When NUMEVENTS is specified as 1,
 *                   ECBLIST must still be an address that points to a list
 *                   containing just one ECB address.
 * @param PURGEABILITY(cvda)
 * determines the outcome of:
 * <ul>
 * <LI>An attempt to perform a deadlock time-out
 * <LI>A SET TASK PURGE|FORCEPURGE command
 * <LI>A CEMT SET TASK PURGE|FORCEPURGE
 * </ul>
 * <p>on the issuing task while it is waiting. The values passed
 * to CICS are PURGEABLE (the default value), or
 * NOTPURGEABLE. The outcome is:
 * <pre>
 * Function                       PURGEABLE             NOTPURGEABLE
 * <hr>DTIMOUT expired                Abend AEXY            No effect
 *
 * CEMT SET TASK PURGE            Abend AEXY            No effect
 * EXEC CICS SET TASK PURGE
 *
 * CEMT SET TASK FORCEPURGE       Abend AEXY            Abend AEXY
 * EXEC CICS SET TASK FORCEPURGE
 * </pre>
 * <p>See the  CICS Recovery and Restart Guide for
 * information about DTIMOUT and SET TASK
 * PURGE|FORCEPURGE.
 */
function "WAIT EXTERNAL"(
   ECBLIST(ptr-value),
   NAME(name),
   NUMEVENTS(data-value),
   PURGEABILITY(cvda),
   );
/**
 *
 * Synchronize with journal output.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT JOURNAL__JFILEID(data-value)________________________________> |
 * |                                        |_REQID(data-value)_|           |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_STARTIO_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, JIDERR, NOTOPEN                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * This command is now superseded by WAIT JOURNALNUM, but is still supported for compatibility with previous releases.
 */
function "WAIT JOURNAL"(
   JFILEID(data-value),
   REQID(data-value),
   STARTIO,
   );

/**
 * Synchronize the task with journal output being written to a system logger log stream.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT JOURNALNAME(data-value)_____________________________________> |
 * |                                   |_REQID(data-value)_|    |           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, JIDERR, NOTOPEN                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WAIT JOURNALNAME synchronizes the task with the output
 * of one or more journal records that have been created but
 * whose output has been deferred; that is, with asynchronous
 * journal output requests.
 * <p>The journal records may already be written out from the
 * journal buffer area to the corresponding system logger log
 * stream, or the system logger output operation may be in
 * progress. If the log stream output operation has already been
 * completed, control returns immediately to the requesting
 * task; if not, the requesting task waits until the operation has
 * been completed.
 * <p>Issuing the WAIT command has the effect of initiating the
 * output operation, and therefore any WAIT is of short
 * duration.
 * <p>If the requesting program has made a succession of
 * successful asynchronous output requests to the same
 * journal, it is necessary to synchronize on only the last of
 * these requests to ensure that all of the journal records have
 * been output to the system logger log stream. This may be
 * done either by issuing a stand-alone WAIT JOURNALNAME
 * command, or by making the last output command itself
 * synchronous (by specifying the WAIT option in the WRITE
 * JOURNALNAME command).
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * the task has not yet issued any write request to any
 * journal, and therefore the WAIT is invalid.
 * <p>Default action: The task is terminated abnormally with an
 * AEIP abend.
 * <DT>IOERR<DD>
 * a journal record was not output because of an
 * irrecoverable error condition returned by the system
 * logger or by SMF.
 * <p>Default action: If the log is the system log, CICS either
 * quiesces or abends. If it is a general log, the task is
 * terminated abnormally.
 * <DT>JIDERR<DD>
 * occurs in either of the following situations:
 * <ul>
 * <LI>The specified journal name is not known in the
 * CICS region.
 * <LI>The specified journal name refers to a DASD-only
 * log stream to which a CICS region in another MVS
 * image is currently connected.
 * </ul>
 * Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The command cannot be satisfied because the user
 * explicitly disabled the specified journal.
 * <LI>A wait request is issued against a journal that has
 * not previously been written to.
 * <LI>This journal was defined using a model that maps it
 * into the logstream used by the system log for this
 * system. This error is not detected when trying to
 * connect to the logstream. A definition for the journal
 * will be installed and set to failed.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to request synchronization
 * with the output of journal records written to a user journal
 * named 'ACCOUNTS'
 * <PRE>
 * EXEC CICS WAIT JOURNALNAME('ACCOUNTS')
 *   REQID(RECTOKEN)
 * </PRE>
 * @param JOURNALNAME(data-value)
 *               specifies a 1- to 8- character journal name identifying
 *               the journal on which the task is to wait for
 *               synchronization. The name must be a journal name
 *               known to CICS.
 *               <p>To issue the wait against the CICS system log, specify
 *               DFHLOG as the journal name.
 *               <p>To issue the wait against journals defined using the
 *               journal numbering convention, as in file resource
 *               definitions, specify the name as DFHJ nn, where nn is
 *               the journal number in the range 1 to 99.
 *               <p><b>Note</b>:  Specifying DFHJ01 on this command refers to a
 *               user journal,  not the system log.
 * @param REQID(data-value)
 *               specifies, in a fullword binary variable, the token that
 *               refers to a journal record that has been created but
 *               possibly not yet written out. The token is returned by
 *               CICS from a previous WRITE JOURNALNAME
 *               command issued by this task.
 *               <p>If you do not specify REQID, the task is synchronized
 *               with the output of the current buffer for the journal
 *               specified by JOURNALNAME.
 */
function "WAIT JOURNALNAME"(
   JOURNALNAME(data-value),
   REQID(data-value),
   );

/**
 * Synchronize with journal output.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT JOURNALNUM(data-value)______________________________________> |
 * |                                  |_REQID(data-value)_|                 |
 * |                                                                        |
 * | >_______________><                                                     |
 * |    |_STARTIO_|                                                         |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, JIDERR, NOTOPEN                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p>Note:  This command is supported for compatibility with earlier releases of CICS. It is superseded by the WAIT
 * JOURNALNAME command, which you are recommended to use instead.
 * <p>The syntax is the same as for WAIT JOURNALNAME except that JOURNALNUM specifies a numeric instead of a
 * character value. The numeric value, nn, is in the range 01-99 and corresponds to journal name DFHJnn.
 */
function "WAIT JOURNALNUM"(
   JOURNALNUM(data-value),
   REQID(data-value),
   STARTIO,
   );

/**
 * Suspend task on a logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT SIGNAL__><                                                    |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: NOTALLOC, SIGNAL, TERMERR                                  |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WAIT SIGNAL, for a principal facility only, suspends a task
 * until a SIGNAL condition occurs. Some logical units can
 * interrupt the normal flow of data to the application program
 * by a SIGNAL data-flow control command to CICS, signaling
 * an attention, that in turn causes the SIGNAL condition to
 * occur.
 * <p>The HANDLE CONDITION SIGNAL command causes a
 * branch to a user routine when an attention is received.
 * The logical units for which you can code a WAIT SIGNAL
 * command are:
 * <ul>
 * <LI>LUTYPE4
 * <LI>LUTYPE6.1
 * <LI>3600 (3601)
 * <LI>3767 interactive
 * <LI>3770 batch
 * <LI>3790 full-function
 * </ul>
 *
 * @conditions
 * <dl>
 * <DT>NOTALLOC<DD>
 * occurs if the principal facility of the task is not a terminal.
 * <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 * occurs when the data-flow control command has been
 * received from the principal facility.
 * EIBSIG is always set when an inbound signal is
 * received.
 * <p>Default action: ignore the condition.
 * <DT>TERMERR<DD>
 * occurs for a terminal-related error.
 * <p>A CANCEL TASK request by a user node error program
 * (NEP) may cause this condition if the task has an
 * outstanding terminal control request active when the
 * node abnormal condition program (CSNE) handles the
 * session error.
 * <p>Default action: terminate the task abnormally with abend
 * code ATNI.
 * </dl>
 */
function "WAIT SIGNAL"(
   );

/**
 * Ensure terminal operation has completed on an LUTYPE6.1 logical unit.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAIT TERMINAL_____________________><                               |
 * |                    |_CONVID(name)__|                                   |
 * |                    |_SESSION(name)_|                                   |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, NOTALLOC, SIGNAL                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WAIT TERMINAL ensures that terminal operation has
 * completed.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>200<DD> A distributed program link server application
 * specified the function-shipping session (its
 * principal facility) on the CONVID option.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTALLOC<DD>
 * occurs if the facility specified in the command is not
 * owned by the application.
 * <p>Default action: terminate the task abnormally.
 * <DT>SIGNAL<DD>
 * occurs when an inbound SIGNAL data-flow control
 * command is received from a logical unit or session.
 * EIBSIG is always set when an inbound signal is
 * received.
 * <p>Default action: ignore the condition.
 * </dl>
 * @param CONVID(name)
 *               identifies the conversation to which the command
 *               relates. The 4-character name identifies either the token
 *               returned by a previously executed ALLOCATE command
 *               in EIBRSRCE in the EIB, or the token representing the
 *               principal session (returned by a previously executed
 *               ASSIGN command).
 * @param SESSION(name)
 *               specifies the symbolic identifier (1-4 characters) of a
 *               session TCTTE. This option specifies the alternate
 *               facility to be used. If both this option and CONVID are
 *               omitted, the principal facility for the task is used.
 */
function "WAIT TERMINAL"(
   CONVID(name),
   SESSION(name),
   );

/**
 * Synchronize events.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WAITCICS__ECBLIST(ptr-value)__NUMEVENTS(data-value)______________> |
 * |                                                                        |
 * |     _PURGEABLE__________                                               |
 * | >__|____________________|__________________><                          |
 * |    |_PURGEABILITY(cvda)_|  |_NAME(name)_|                              |
 * |    |_NOTPURGEABLE_______|                                              |
 * |                                                                        |
 * |                                                                        |
 * | Condition: INVREQ                                                      |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>WAITCICS waits for events that post MVS-format ECBs. The
 * command causes the issuing task to be suspended until one
 * of the ECBs has been posted, that is until one of the events
 * has occurred. The task can wait on one or more ECBs. If it
 * waits on more than one, it is dispatchable as soon as one of
 * the ECBs is posted. You must ensure that each ECB is
 * cleared, set to binary zeros, no later than the earliest time it
 * could be posted. CICS cannot do this for you. If you wait on
 * an ECB that has been previously posted and not
 * subsequently cleared, your task is not suspended and
 * continues to run as though the WAITCICS had not been
 * issued.
 * <p>CICS includes the addresses of all ECBs passed by
 * WAITCICS commands of current tasks in the ECBLIST
 * passed by CICS to the MVS WAIT facility when it runs out of
 * work. Such ECBs can be posted using the MVS POST
 * facility or by hand posting. Hand posting could, for example,
 * be done by moving an appropriate value into the ECB. If
 * hand posting is definitely not going to be used, it is
 * preferable to use WAIT EXTERNAL.
 * <p>A given ECB may not be waited on by more than one task at
 * the same time. If this rule is not followed and the ECBLIST
 * passed by CICS on the MVS WAIT contains duplicate ECB
 * addresses, MVS abends CICS.
 *
 * @param ECBLIST(ptr-value)
 * is a pointer to a list of addresses of MVS-format ECBs
 * representing events. Both the ECBLIST and the ECBs
 * can be above the 16MB line, that is they can be 31-bit
 * addresses. Each ECB must be fullword aligned. Null
 * (X'00000000' and X'FF000000') ECB addresses are
 * ignored.
 * @param NAME(name)
 * specifies the symbolic name, 1-8 alphanumeric
 * characters, as the reason for the wait. The value you
 * specify is returned in the SUSPENDVALUE or HVALUE
 * option respectively of the EXEC CICS INQ TASK or
 * CEMT INQ TASK commands.
 * @param NUMEVENTS(data-value)
 * is the number of such events, corresponding to the
 * number of addresses in the ECBLIST. The field is
 * fullword binary. When NUMEVENTS is specified as one,
 * ECBLIST must still be an address that points to a list
 * containing just one ECB address.
 * @param PURGEABILITY(cvda)
 * causes the issuing task to be suspended until one of the
 * ECBs has been posted; that is, until one of the events
 * has occurred. The values passed to CICS are
 * PURGEABLE (the default value), or NOTPURGEABLE.
 * The field is fullword binary. If while this task is waiting
 * another function attempts to purge it, the result is as
 * follows:
 * <pre>
 * Function               PURGEABLE     NOTPURGEABLE
 * <hr>DTIMOUT expired        Abend AEXY    No effect
 *
 * CEMT SET TASK
 * PURGE
 *
 * EXEC CICS SET TASK     Abend AEXY    No effect
 * PURGE
 * CEMT SET TASK          Abend AEXY    Abend AEXY
 * FORCEPURGE
 * EXEC CICS SET TASK
 * FORCEPURGE
 * </pre>
 * <p>See the  CICS Recovery and Restart Guide for
 * information about DTIMOUT and  CICS System
 * Programming Reference for information about SET
 * TASK PURGE|FORCEPURGE.
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> An ECB is not valid, for example the ECB is not
 * fullword aligned.
 * <DT>3<DD> NUMEVENTS is not a positive number.
 * <DT>4<DD> PURGEABILITY is specified with an incorrect
 * CVDA.
 * <DT>5<DD> No valid ECBs have been found in the list,
 * because either the ECBLIST address is not valid,
 * or all the ECB addresses are not valid.
 * <DT>6<DD> The event control blocks (ECBs) specified are in
 * user-key task-lifetime storage, and are
 * inaccessible to another transaction that is
 * expected to post the ECBs.
 * <p>The ECBs specified are in read-only storage.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following figure shows how to use the ECBLIST
 * parameter to point to a list of ECB addresses that in turn
 * point to individual ECBs. Note that the ECBLIST variable is a
 * pointer pointing to the first address of the list.
 * <p><i>Figure  6.  ECBLIST option, EXEC CICS WAITCICS</i>
 * <pre>
 * PTR_ECB_ADDR_LIST
 * +------------------+
 * | A(ECB_ADDR_LIST) |
 * +------------------+                       +------+
 *        |             ECB_ADDR_LIST   +---->| ECB1 |
 *        +-----------> +--------+      |     +------+
 *                      | A(ECB1)|------+
 *                      +--------+            +------+
 *                      | A(ECB2)|----------->| ECB2 |
 *                      +--------+            +------+
 *                      | A(ECB3)|------+
 *                      +--------+      |     +------+
 *                                      +---->| ECB3 |
 *                                            +------+
 *
 * DCL
 *    ECB1 FIXED BIN(31), /<b></b>* actual ecb *<b></b>/
 *    ECB2 FIXED BIN(31), /<b></b>* actual ecb *<b></b>/
 *    ECB3 FIXED BIN(31); /<b></b>* actual ecb *<b></b>/
 * DCL /<b></b>* list of ecb addresses *<b></b>/
 *   1 ECB_ADDR_LIST,
 *      2  ECB_ADDR(3)  PTR;
 * DCL                     /<b></b>* ptr to each addr list *<b></b>/
 *   PTR_ECB_ADDR_LIST PTR;
 * ECB_ADDR(1) = ADDR(ECB1);
 * ECB_ADDR(2) = ADDR(ECB2);
 * ECB_ADDR(3) = ADDR(ECB3);
 *                         /<b></b>* set up pointer *<b></b>/
 * PTR_ECB_ADDR_LIST = ADDR(ECB_ADDR_LIST);
 * /<b></b>* PTR_ECB_ADDR_LIST = ADDR(ECB_ADDR(1));
 *   (alternative) *<b></b>/
 * EXEC CICS WAIT EXTERNAL
 *   ECBLIST(PTR_ECB_ADDR_LIST)
 *   NUMEVENTS(3)
 *   PURGEABLE
 * </pre>
 */
function "WAITCICS"(
   ECBLIST(ptr-value),
   NAME(name),
   NUMEVENTS(data-value),
   PURGEABILITY(cvda),
   );

/**
 * Signal end of HTTP header browse.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB ENDBROWSE HTTPHEADER_________________________________________> |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><b>Description</b>
 * <p>WEB ENDBROWSE HTTPHEADER terminates the browse.
 * No information is returned on the ENDBROWSE.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs for the following conditions. RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * <DT>3<DD> The command is being issued for a
 * non-HTTP request.
 * <DT>4<DD> The command is being issued before a
 * WEB STARTBROWSE command is issued.
 * </dl>
 * </dl>
 */
function "WEB ENDBROWSE HTTPHEADER"(
   );

/**
 * Obtain information about inbound client request.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB EXTRACT______________________________________________________> |
 * |                  |_HTTPMETHOD(data-area)__METHODLENGTH(data-area)_|    |
 * | >____________________________________________________________________> |
 * |   |_HTTPVERSION(data-area)__VERSIONLEN(data-area)_|                    |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |   |_PATH(data-area)___PATHLENGTH(data-area)_|                          |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WEB EXTRACT allows the application to obtain additional
 * information about the inbound request from the client.
 * <p><b>Note</b>:  This command can also be specified as EXTRACT
 * WEB.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs for the following conditions. RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * <DT>3<DD> The command is being issued for a
 * non-HTTP request (this is set only if one or
 * more of HTTPMETHOD, HTTPVERSION, or
 * PATH is specified and the request is a
 * non-HTTP request).
 * </dl>
 * <DT>LENGERR<DD>
 * occurs for the following conditions. RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The length on METHODLENGTH,
 * VERSIONLEN, or PATH is less than or
 * equal to zero.
 * </dl>
 * </dl>
 * @param HTTPMETHOD(data-area)
 *               specifies a buffer to contain the HTTP method string on
 *               the request line of the inbound message.
 * @param HTTPVERSION(data-area)
 *               specifies a buffer to contain the HTTP version string on
 *               the request line of the inbound message.
 * @param METHODLENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               HTTPMETHOD option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated. The actual length of the
 *               HTTPMETHOD is returned in METHODLENGTH.
 * @param REQUESTTYPE(cvda)
 *               gets the type of request received. Currently, the request
 *               type can be HTTP or NONHTTP.
 * @param PATH(data-area)
 *               specifies a buffer to contain the PATH specified in the
 *               request line of the inbound message.
 * @param PATHLENGTH(data-area)
 *               specifies the length of the buffer supplied on the PATH
 *               option, and is set to the actual length of the data
 *               returned to the application. If the data exceeds the buffer
 *               length, a LENGERR condition is raised and the data is
 *               truncated. The actual length of the PATH is returned in
 *               PATHLENGTH.
 * @param VERSIONLEN(data-area)
 *               specifies the length of the buffer supplied on the
 *               HTTPVERSION option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated. The actual length of the VERSION
 *               is returned in VERSIONLEN.
 */
function "WEB EXTRACT"(
   HTTPMETHOD(data-area),
   HTTPVERSION(data-area),
   METHODLENGTH(data-area),
   REQUESTTYPE(cvda),
   PATH(data-area),
   PATHLENGTH(data-area),
   VERSIONLEN(data-area),
   );

/**
 * Extract HTTP header information.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB READ__HTTPHEADER(data-area)__NAMELENGTH(data-value)__________> |
 * |                                                                        |
 * | >>__VALUE(data-area)__VALUELENGTH(data-area)____><                     |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTFND                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WEB READ extracts HTTP header information.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * <DT>3<DD> The command is being issued for a
 * non-HTTP request.
 * </dl>
 * <DT>LENGERR<DD>
 * RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The length in VALUELENGTH is less than
 * or equal to zero.
 * <DT>2<DD> The header value has been truncated
 * because the receiving buffer is too small.
 * </dl>
 * <DT>NOTFND<DD>
 * RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The header with the given name could not
 * be found.
 * </dl>
 * </dl>
 * @param HTTPHEADER(data-area)
 *               specifies the name of the HTTP header.
 * @param NAMELENGTH(data-value)
 *               specifies the length, as a fullword binary value, of the
 *               HTTP header name.
 * @param VALUE(data-area)
 *               specifies the buffer to contain the value of the HTTP
 *               header being extracted.
 * @param VALUELENGTH(data-area)
 *               specifies the length of the buffer supplied on the VALUE
 *               option, and is set to the actual length of the data
 *               returned to the application. If the data exceeds the buffer
 *               length, a LENGERR condition is raised and the data is
 *               truncated. The actual length of the VALUE is returned in
 *               VALUELENGTH.
 */
function "WEB READ"(
   HTTPHEADER(data-area),
   NAMELENGTH(data-value),
   VALUE(data-area),
   VALUELENGTH(data-area),
   );

/**
 * Retrieve next HTTP header.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB READNEXT__HTTPHEADER(data-area)__NAMELENGTH(data-value)______> |
 * |                                                                        |
 * | >>__VALUE(data-area)__VALUELENGTH(data-area)____><                     |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTFND                                    |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WEB READNEXT retrieves the next HTTP header in the list
 * of headers.
 *
 * @conditions
 * <dl>
 * <DT>ENDFILE<DD>
 * The end of the list of HTTPHEADERS has been
 * reached.
 * <DT>INVREQ<DD>
 * RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * <DT>3<DD> The command is being issued for a
 * non-HTTP request.
 * <DT>4<DD> The command is being issued before a
 * WEB STARTBROWSE has been issued.
 * <DT>6<DD> A header has been found which is not in the
 * format NAME:VALUE.
 * </dl>
 * <DT>LENGERR<DD>
 * RESP2 values are:
 * <dl compact>
 * <DT>1<DD> NAMELENGTH or VALUELENGTH is less
 * than or equal to zero.
 * <DT>4<DD> The header name has been truncated
 * during a browse operation because the
 * receiving buffer is too small.
 * <DT>5<DD> The header value has been truncated
 * because the receiving buffer is too small.
 * </dl>
 * </dl>
 * @param HTTPHEADER(data-area)
 *               specifies the buffer to contain the name of the HTTP
 *               header being extracted.
 * @param NAMELENGTH(data-area)
 *               specifies the length of the buffer supplied on the
 *               HTTPHEADER option, and is set to the actual length of
 *               the data returned to the application. If the data exceeds
 *               the buffer length, a LENGERR condition is raised and
 *               the data is truncated. The actual length of the
 *               HTTPHEADER name is returned in NAMELENGTH.
 * @param VALUE(data-area)
 *               specifies the buffer to contain the value of the HTTP
 *               header being extracted.
 * @param VALUELENGTH(data-area)
 *               specifies the length of the buffer supplied on the VALUE
 *               option, and is set to the actual length of the data
 *               returned to the application. If the data exceeds the buffer
 *               length, a LENGERR condition is raised and the data is
 *               truncated. The actual length of the VALUE is returned in
 *               VALUELENGTH.
 */
function "WEB READNEXT"(
   HTTPHEADER(data-area),
   NAMELENGTH(data-area),
   VALUE(data-area),
   VALUELENGTH(data-area),
   );

/**
 * Receive an HTTP request.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB RECEIVE____INTO(data-area)___LENGTH(data-area)_______________> |
 * |                  |_SET(ptr-ref)___|                                    |
 * | >>__MAXLENGTH(data-value)____________________________________________> |
 * |                           |_TYPE(cvda)_|                               |
 * |                                                                        |
 * | >>__MAXLENGTH(data-value)____________________________________________> |
 * |     |_NOTRUNCATE_|  |_CLNTCODEPAGE(name)__HOSTCODEPAGE(name)_|         |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR                                            |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WEB RECEIVE receives the body of an HTTP Request (or
 * all the data received for a non-HTTP Request) from the CICS
 * Web interface or Business Logic Interface into an
 * application-supplied buffer.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> the command is issued in a non-CICS Web
 * interface application.
 * </dl>
 * <DT>LENGERR<DD>
 * occurs if data is discarded by CICS because its length
 * exceeds the maximum the program accepts. RESP2
 * values:
 * <dl compact>
 * <DT>1<DD> The length is negative.
 * <DT>2<DD> The length is positive and exceeds the program's
 * maximum.
 * </dl>
 * </dl>
 * @param CLNTCODEPAGE(name)
 *                   specifies the 40-character name of the codepage to be
 *                   used when data is converted from the client codepage. If
 *                   this is not specified, data is not converted, and is passed
 *                   to the application in the form in which it was received
 *                   over the socket connection. If you specify
 *                   CLNTCODEPAGE you must also specify
 *                   HOSTCODEPAGE. Valid values for CLNTCODEPAGE
 *                   are the CICS-supported CLINTCP and SRVERCP
 *                   values described in  CICS Family: Communicating from
 *                   CICS on System/390. Mapping is performed between
 *                   the IANA Coded Character Set values used in HTTP
 *                   requests to the CLINTCP values known to CICS; these
 *                   values are listed in the  CICS Internet Guide.
 * @param HOSTCODEPAGE(name)
 *                   specifies the 8-character name of the host codepage to
 *                   be used when data is converted from the ASCII
 *                   codepage in which it was received into the EBCDIC
 *                   codepage in which CICS will process it. If this is not
 *                   specified, data is not converted, and is passed to the
 *                   application in the form in which it was received over the
 *                   socket connection.If you specify HOSTCODEPAGE you
 *                   must also specify CLNTCODEPAGE.
 * @param INTO(data-area)
 *                   specifies the buffer that is to contain the data being
 *                   received.
 * @param LENGTH(data-area)
 *                   specifies a fullword binary data area which will be set to
 *                   the length of the data received.
 * @param MAXLENGTH(data-value)
 *                   specifies the maximum amount, as a fullword binary
 *                   value, of data that CICS is to recover, if INTO is
 *                   specified.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is not present, the data is
 *                   truncated to that value and the LENGERR condition
 *                   occurs. The data area specified in the LENGTH option is
 *                   set to the original length of data.
 *                   <p>If the length of data exceeds the value specified and the
 *                   NOTRUNCATE option is present, CICS retains the
 *                   remaining data and uses it to satisfy subsequent
 *                   RECEIVE commands. The data area specified in the
 *                   LENGTH option is set to the length of data returned.
 * @param NOTRUNCATE
 *                   specifies that when the data available exceeds the
 *                   length requested, the remaining data is not to be
 *                   discarded but is to be retained for retrieval by
 *                   subsequent RECEIVE commands.
 * @param SET(ptr-ref)
 *                   specifies a pointer reference that is to be set to the
 *                   address of data received. The pointer reference is valid
 *                   until the next receive command or the end of task.
 * @param TYPE(cvda)
 *                   returns a value of HTTP or NONHTTP to identify
 *                   whether the data received is an HTTP or non-HTTP
 *                   message.
 */
function "WEB RECEIVE"(
   CLNTCODEPAGE(name),
   HOSTCODEPAGE(name),
   INTO(data-area),
   LENGTH(data-area),
   MAXLENGTH(data-value),
   NOTRUNCATE,
   SET(ptr-ref),
   TYPE(cvda),
   );

/**
 * Retrieve a document.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB RETRIEVE__DOCTOKEN(data-area)________________________________> |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><b>Description</b>
 * <p>The WEB RETRIEVE command retrieves the DOCTOKEN of
 * the document which was sent using an earlier WEB SEND
 * command.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> The command is issued in a non-CICS Web
 * interface application.
 * <DT>2<DD> A WEB SEND command has not been issued.
 * </dl>
 * </dl>
 * @param DOCTOKEN(data-area)
 *               specifies a 16-byte buffer to contain the symbolic name
 *               of the document to be retrieved.
 */
function "WEB RETRIEVE"(
   DOCTOKEN(data-area),
   );

/**
 * Select a document for delivery.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB SEND__DOCTOKEN(name)_________________________________________> |
 * |                               |_CLNTCODEPAGE(name)_|                   |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |    |_STATUSCODE(data-value)_|                                          |
 * |                                                                        |
 * | >>___________________________________________________________________> |
 * |    |_STATUSTEXT(data-area)__LENGTH(data-value)_|                       |
 * |                                                                        |
 * | Conditions: INVREQ, NOTFND                                             |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WEB SEND selects a document for delivery by the CICS
 * Web Interface or the Business Logic Interface.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs for the following conditions. RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * </dl>
 * <DT>NOTFND<DD>
 * occurs for the following conditions. RESP2 values are:
 * <dl compact>
 * <DT>1<DD> The document has not been created or the
 * name is incorrectly specified.
 * <DT>7<DD> The specified CLNTCODEPAGE is not
 * recognised or is incorrectly specified.
 * </dl>
 * </dl>
 * @param CLNTCODEPAGE(name)
 *               specifies the 40-character name of the ASCII codepage
 *               in which the data is to be delivered to the browser. If this
 *               is not specified, data is not converted, and is sent to the
 *               browser in the form in which the application supplied it.
 *               Valid values for CLNTCODEPAGE are the
 *               CICS-supported CLINTCP and SRVERCP values
 *               described in  CICS Family: Communicating from CICS on
 *               System/390. Mapping is performed between the IANA
 *               Coded Character Set values used in HTTP requests and
 *               the CLINTCP values known to CICS; these values are
 *               listed in the  CICS Internet Guide.
 * @param DOCTOKEN(name)
 *               specifies the 16-byte symbolic name of the document to
 *               be sent.
 * @param LENGTH(data-value)
 *               specifies the length, as a fullword binary value, of the
 *               string supplied on the STATUSTEXT option.
 * @param STATUSCODE(data-value)
 *               is a binary halfword value to be inserted on the status
 *               line. The code is intended to be a HTTP status code and
 *               should conform to the rules for HTTP status codes.
 *               However, CICS does not validate the code and it is the
 *               application's responsibility to ensure that the value is
 *               valid.
 * @param STATUSTEXT(data-area)
 *               specifies a data-area containing text describing the value
 *               of the status code. The status text is intended to be a
 *               human-readable value for the status code.
 */
function "WEB SEND"(
   CLNTCODEPAGE(name),
   DOCTOKEN(name),
   LENGTH(data-value),
   STATUSCODE(data-value),
   STATUSTEXT(data-area),
   );

/**
 * Signal start of HTTP header browse.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB STARTBROWSE__HTTPHEADER______________________________________> |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WEB STARTBROWSE signals the start of a browse of the
 * HTTP header information.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs for the following conditions. RESP2 values are:
 * <DT>1<DD> The command is being issued in a
 * non-CICS Web interface application.
 * <DT>3<DD> The command is being issued for a
 * non-HTTP request.
 * </dl>
 * </dl>
 */
function "WEB STARTBROWSE"(
   );

/**
 * Build HTTP header information.
 *
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WEB WRITE__HTTPHEADER(data-area)_________________________________> |
 * |                                                                        |
 * |                                                                        |
 * | >__NAMELENGTH(data-value)__VALUE(data-area)__VALUELENGTH(data-value)_><|
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ                                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <P><B>Description</b>
 * <p>WEB WRITE allows the application to add HTTP header
 * information to the response.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * The command is being issued in a non-CICS Web
 * interface environment.
 * </dl>
 * @param HTTPHEADER(data-area)
 *               specifies the name of the HTTP header to build. It is a
 *               string of text containing the name of the header. The
 *               name should conform to the standards specified in the
 *               current RFC for the HTTP protocol. No validation of the
 *               information is done by CICS. If the header already
 *               exists, it is replaced with the new information.
 * @param NAMELENGTH(data-value)
 *               specifies the length, as a fullword binary value, of the
 *               HTTP header name.
 * @param VALUE(data-area)
 *               specifies the value of the HTTP header. It is a text string
 *               containing the value of the header.
 * @param VALUELENGTH(data-area)
 *               specifies the length, as a fullword binary value, of the
 *               HTTP header value.
 */
function "WEB WRITE"(
   HTTPHEADER(data-area),
   NAMELENGTH(data-value),
   VALUE(data-area),
   VALUELENGTH(data-area),
   );

/**
 * Write a record.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITE__FILE(filename)__________________FROM(data-area)___________> |
 * |                            |_MASSINSERT_|                              |
 * |                                                                        |
 * | >__________________________RIDFLD(data-area)_________________________> |
 * |    |_LENGTH(data-value)_|                                              |
 * |                                                                        |
 * | >_____________________________________________________________><       |
 * |    |_KEYLENGTH(data-value)_|  |_SYSID(systemname)_|  |_RBA_|           |
 * |                                                      |_RRN_|           |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, DUPREC, FILENOTFOUND, ILLOGIC, INVREQ, IOERR,    |
 * | ISCINVREQ, LENGERR, LOADING, NOSPACE, NOTAUTH, NOTOPEN, SUPPRESSED,    |
 * | SYSIDERR                                                               |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WRITE writes a new record to a file on a local or a remote
 * system.
 * <p>When this command is used to write a record to a
 * CICS-maintained data table, the update is made to both the
 * source VSAM KSDS and the in-memory data table, unless
 * the XDTAD user exit rejects the record from the table. The
 * details of the command for a CICS-maintained table are the
 * same as for a VSAM KSDS.
 * <p>When this command is used to write a record to a
 * user-maintained data table, the update is made to the
 * in-memory data table (unless rejected by the XDTAD user
 * exit).
 * <p>When this command is used to write a record to a coupling
 * facility data table, the update is made to the data table in the
 * coupling facility (unless it is rejected by the XDTAD user
 * exit).
 * <p>For a VSAM ESDS, the record is always added at the end of
 * the data set. CICS does not use the identification field
 * specified in RIDFLD when calculating the RBA of the new
 * record, but the new RBA is returned to the application in the
 * record identification field specified in the RIDFLD option.
 * <p>For a VSAM KSDS, the record is added in the location
 * specified by the associated key; this location may be
 * anywhere in the data set. For VSAM data sets, the key in the
 * record and the key in the RIDFLD identification field must be
 * the same.
 * <p>dFor a VSAM ESDS or KSDS, records can be either
 * fixed-length or variable-length. MASSINSERT operations
 * must proceed with ascending keys, and must be terminated
 * by an UNLOCK before any other request to the same data
 * set.
 *
 * @conditions
 * <b>Note</b>:  RESP2 values are not set for files that are on remote
 * systems.
 * <dl>
 * <DT>DISABLED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>50<DD> A file is disabled because it was initially defined as
 * disabled and has not since been enabled.
 * <p>A file has been disabled by a SET FILE or a
 * CEMT SET FILE command.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>DUPREC<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>150<DD> An attempt is made to add a record to a data set
 * by referring to a file, or a path over a file (with the
 * UNIQUEKEY attribute), in which the same key
 * already exists.
 * <p>This condition is also raised for a coupling facility
 * data table that uses the contention model, even if
 * another task has read the record with the same
 * key for update. (For a coupling facility data table
 * that uses the locking model, and for all other kinds
 * of files, if another task has read the record for
 * update, it is locked, and the WRITE request waits
 * for the lock to be released, rather than returning a
 * DUPREC response immediately.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>FILENOTFOUND<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A file name referred to in the FILE option cannot
 * be found in the FCT.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ILLOGIC<DD>
 * RESP2 values: (VSAM)
 * <dl compact>
 * <DT>110<DD> A VSAM error occurs that does not fall within one
 * of the other CICS response categories.
 * <p>(See EIBRCODE in the EXEC interface block;
 * refer to Appendix A, "EXEC interface block" for details.)
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>20<DD> Add operations are not allowed according to the
 * file entry specification in the FCT.
 * <DT>23<DD> When writing records containing embedded keys,
 * the key in the record area (FROM option) and the
 * key in RIDFLD do not match.
 * <DT>26<DD> The KEYLENGTH option is specified, and the
 * specified length does not equal the length defined
 * for the data set that this file refers to.
 * <DT>38<DD> A WRITE with the MASSINSERT option is issued
 * against a BDAM file.
 * <DT>40<DD> A BDAM key conversion error occurred.
 * <DT>44<DD> The WRITE command does not conform to the
 * format of WRITE for a user-maintained or coupling
 * facility data table (for example, MASSINSERT or
 * RBA is specified).
 * <DT>51<DD> A WRITE command specifying the RBA keyword
 * was issued against a KSDS file that is being
 * accessed in RLS mode. RLS mode does not
 * support relative byte address access to KSDS
 * files.
 * <DT>56<DD> An attempt to update a recoverable coupling
 * facility data table has failed because the current
 * unit of work has already updated 1024 recoverable
 * coupling facility data tables. You cannot update
 * more than 1024 recoverable coupling facility data
 * tables within a unit of work
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>120<DD> There is an I/O error during the file control
 * operation. An I/O error is any unusual event that is
 * not covered by a CICS condition. (Further
 * information is available in the EXEC interface
 * block; refer to Appendix A, "EXEC interface block"
 * for details.)
 * <p>For VSAM files, IOERR normally indicates a
 * hardware error.
 * <p>For BDAM files, IOERR could mean that you are
 * trying to write to a BDAM track address that is not
 * defined for the data set.
 * <p>For a coupling facility data table, an IOERR
 * indicates a bad response returned from a coupling
 * facility access.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>70<DD> The remote system indicates a failure that does
 * not correspond to a known condition.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>12<DD> The length specified for the write operation
 * exceeds the maximum record size; the record is
 * truncated.
 * <DT>10<DD> LENGTH is omitted for a WRITE to a file with
 * variable-length records or to a BDAM file with
 * undefined format records.
 * <DT>14<DD> An incorrect length is specified for a write
 * operation involving fixed-length records.
 * </dl>
 * <DT>LOADING<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>104<DD> The request cannot be satisfied because it is
 * issued against a data table that is still being
 * loaded. The condition can be raised for one of the
 * following reasons:
 * <ul>
 * <LI>The WRITE specifies a record key that has
 * out of range of the records so far loaded into
 * a coupling facility data table. Records can be
 * added while a CFDT is loading only if the
 * specified key is within the range of those
 * records already loaded.
 * <p>The LOADING response can also be returned
 * for a coupling facility data table that has failed
 * during loading. For more information about
 * what happens if the load for a coupling facility
 * data table fails, see the description of the
 * XDTLC global user exit in the  CICS
 * Customization Guide.
 * <LI>A WRITE is issued to a user-maintained data
 * table that is currently being loaded. A
 * user-maintained data table cannot be modified
 * during loading.
 * <p>If your application programs encounter the
 * LOADING condition persistently or too frequently,
 * check that this is not caused by conflicting file
 * definitions that reference the same data set.
 * </ul>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>106<DD> An attempt has been made to write a record, but a
 * retained lock exists against the key of this record.
 * </dl>
 * <p>Default action: abend the task with code AEX8.
 * <DT>NOSPACE<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>100<DD> No space is available on the direct access device
 * for adding records to a data set.
 * <DT>102<DD> The maximum number of table entries specified
 * for the user-maintained table or coupling facility
 * data table has already been reached.
 * <p>This condition can also occur for a recoverable
 * coupling facility data table when the table
 * apparently contains fewer than the maximum
 * number of records allowed if there are
 * uncommitted updates outstanding.
 * <DT>103<DD> CICS is unable to get sufficient storage in the
 * CICS address space to create an in-memory table
 * entry for the record being written.
 * <DT>108<DD> There is insufficient space in the coupling facility
 * data table pool to store the record.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * FILE(filename).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>60<DD> NOTOPEN (RESP2 60) is returned for one of the
 * following reasons:
 * <ul>
 * <LI>The requested file is CLOSED and
 * UNENABLED. The CLOSED, UNENABLED
 * state is reached after a CLOSE request has
 * been received against an OPEN ENABLED
 * file and the file is no longer in use. You can
 * also make CLOSED, UNENABLED the initial
 * state, by specifying STATUS(UNENABLED)
 * and OPENTIME(FIRSTREF) on the FILE
 * resource definition. (For BDAM files, you use
 * the FILSTAT parameter of the DFHFCT
 * TYPE=FILE macro.)
 * <LI>The requested file is OPEN and in use by
 * other transactions, but a CLOSE request
 * against the file has been received.
 * <LI>A WRITE request is issued against a data set
 * is quiesced, or is being quiesced, as a result
 * of a SET DSNAME QUIESCED or
 * IMMQUIESCED command.
 * </ul>
 * </dl>
 * <p>This condition does not occur if the request is made to
 * either a CLOSED, ENABLED file or a CLOSED,
 * DISABLED file. In the first case, the file is opened as
 * part of executing the request. In the second case, the
 * DISABLED condition occurs.
 * <p>Default action: terminate the task abnormally.
 * <DT>RECORDBUSY<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>107<DD> NOSUSPEND is specified on the request but
 * VSAM holds an active lock against the record,
 * which would cause the request to wait (see
 * "Retained and active locks" below).
 * </dl>
 * <p>Default action: abend the task with code AEX9.
 * <DT>SUPPRESSED<DD>
 * RESP2 values:
 * <dl compact>
 * <dl>
 * <DT>105<DD> A user exit program that is invoked at the XDTAD
 * exit point decides not to add the record to the
 * user-maintained or coupling facility data table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>130<DD> The SYSID option specifies a name that is neither
 * the local CICS region nor a remote system defined
 * to CICS by a CONNECTION definition.
 * SYSIDERR also occurs when the link to the
 * remote system is closed.
 * <DT>131<DD> For a coupling facility data table, the connection to
 * the coupling facility data table server has failed.
 * This could be because the server itself has failed,
 * or the server is available, but CICS has failed to
 * connect to it.
 * <DT>132<DD> The WRITE is issued against a coupling facility
 * data table that no longer exists, probably because
 * of a coupling facility failure, in which case the
 * coupling facility data table server also fails. See
 * the  CICS System Definition Guide for information
 * about restarting a coupling facility data table
 * server and reloading a table.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * Retained and active locks:  RECORDBUSY refers to active
 * locks, and LOCKED refers to retained locks:
 * <ul>
 * <LI>READNEXT requests for records that have
 * retained locks are always rejected with a
 * LOCKED response.
 * <LI>READNEXT requests for records that have  active
 * locks wait for the lock to be released, except
 * when the NOSUSPEND keyword is specified, in
 * which case CICS returns the RECORDBUSY
 * response.
 * </ul>
 * </dl>
 * </dl>
 * @example
 * For example:
 * <pre>
 * EXEC CICS WRITE
 *   FROM(RECORD)
 *   LENGTH(DATLEN)
 *   FILE('MASTER')
 *   RIDFLD(KEYFLD)
 * </pre>
 * @param FILE(filename)
 *                   specifies the of the file to be accessed.
 *                   <p>If SYSID is specified, the data set to which this file refers
 *                   is assumed to be on a remote system irrespective of
 *                   whether the name is defined in the FCT. Otherwise, the
 *                   FCT entry is used to find out whether the data set is on
 *                   a local or a remote system.
 * @param FROM(data-area)
 *                   specifies the record that is to be written to the data set
 *                   referred to by this file.
 * @param KEYLENGTH(data-value)
 *                   specifies the length (halfword binary) of the key that has
 *                   been specified in the RIDFLD option, except when RBA
 *                   or RRN is specified, in which case KEYLENGTH is not
 *                   valid. You must code KEYLENGTH if you are also using
 *                   SYSID (unless you are also using RBA or RRN). If the
 *                   length specified is different from the length defined for
 *                   the data set, the INVREQ condition occurs.
 * @param LENGTH(data-value)
 *                   specifies the length, as a halfword binary value, of the
 *                   record to be written.
 *                   <p>You must specify this option if you are using SYSID.
 *                   You must also specify the option for a file with
 *                   variable-length records. It need not be specified for
 *                   fixed-length records, but its inclusion is recommended
 *                   because it causes a check to be made that the record
 *                   being written is not longer than that defined for the data
 *                   set.
 * @param MASSINSERT
 *                   (VSAM) specifies that the WRITE command is part of a
 *                   mass-insert operation, that is, a series of WRITEs each
 *                   specifying MASSINSERT.
 *                   <p>You cannot use MASSINSERT for user-maintained or
 *                   coupling facility data tables.
 * @param NOSUSPEND
 *                   (RLS only)
 *                   The request does not wait if VSAM is holding an active
 *                   lock against the record, including records locked as the
 *                   result of a DEADLOCK.
 *                   <p>A task could wait when it issues a WRITE request if the
 *                   key is for a record that is being modified, created, or
 *                   deleted by another task, because VSAM always acquires
 *                   the lock first.
 * @param RBA
 *                   (VSAM ESDS base data sets only) specifies that the
 *                   record identification field specified in the RIDFLD option
 *                   contains a relative byte address. Use this option only
 *                   when writing to an ESDS base.
 * @param RIDFLD(data-area)
 *                   specifies the record identification field. The contents can
 *                   be a key, a relative byte address, or relative record
 *                   number (for VSAM data sets), or a block reference, a
 *                   physical key, and a deblocking argument (for BDAM
 *                   data sets). For a relative byte address or a relative
 *                   record number, the format of this field must be fullword
 *                   binary. If RBA is specified, RIDFLD contains the relative
 *                   byte address (greater than or equal to zero) of the
 *                   record to be written. If RRN is specified, RIDFLD
 *                   contains the relative record number (greater than or
 *                   equal to 1) of the record to be written.
 *                   <p>When adding records to a keyed data set, the field must
 *                   contain the complete key.
 * @param RRN
 *                   (VSAM RRDS) specifies that the record identification
 *                   field specified in the RIDFLD option contains a relative
 *                   record number.
 * @param SYSID(systemname)
 *                   specifies the name of the system to which the request is
 *                   directed.
 *                   <p>If you specify SYSID, and omit both RBA and RRN, you
 *                   must also specify LENGTH and KEYLENGTH; they
 *                   cannot be found in the FCT.
 *                   <p>LENGTH must either be specified explicitly or must be
 *                   capable of being defaulted from the FROM option using
 *                   the length attribute reference in assembler language, or
 *                   STG and CSTG in PL/I. LENGTH must be specified
 *                   explicitly in OS/VS COBOL or C.
 */
function "WRITE"(
   FILE(filename),
   FROM(data-area),
   KEYLENGTH(data-value),
   LENGTH(data-value),
   MASSINSERT,
   NOSUSPEND,
   RBA,
   RIDFLD(data-area),
   RRN,
   SYSID(systemname),
   );

/**
 * Create a journal record
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITE JOURNALNAME(data-value)__JTYPEID(data-value)_______________> |
 * |                                                                        |
 * | >__FROM(data-area)___________________________________________________> |
 * |                     |_LENGTH(data-value)_|  |_REQID(data-area)_|       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PREFIX(data-value)__________________________|                     |
 * |                          |_PFXLENG(data-value)_|                       |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_WAIT_|  |_NOSUSPEND_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, JIDERR, LENGERR, NOJBUFSP, NOTAUTH, NOTOPEN |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><B>Description</b>
 * <p>WRITE JOURNALNAME writes a journal record from the
 * specified data area to the system logger log stream that
 * corresponds to the CICS journal name, or to SMF. The
 * request can be for synchronous or asynchronous output;
 * definitions of these terms, and information regarding the
 * synchronization of journal output, are in the  CICS Application
 * Programming Guide.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * the command is not valid for processing by CICS.
 * <p>Default action: Terminate the task abnormally.
 * <DT>IOERR<DD>
 * a journal record has not been output because an
 * irrecoverable error condition was returned by the system
 * logger log stream or by SMF.
 * <p>Default action: If the log is the system log, CICS either
 * quiesces or abends CICS. If the log is a general log, the
 * task is terminated abnormally.
 * <DT>JIDERR<DD>
 * CICS cannot connect to a log stream referenced by the
 * specified journal name, for one of the following reasons:
 * <ul>
 * <LI>The log stream does not exist and cannot be
 * created dynamically using default model definitions.
 * <LI>The log stream is a DASD-only log stream to which
 * a CICS region in another MVS image is currently
 * connected.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * the aggregate length of the journal record, comprising
 * the user data (FROM, JTYPE, and PREFIX data) and
 * the CICS header data, is too great to fit the maximum
 * block size allowed for the log stream.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOJBUFSP<DD>
 * the journal buffers are logically full (that is, the current
 * buffer has insufficient space for this journal record, and
 * I/O is in progress on the alternate buffer).
 * <p>Default action: CICS suspends task activity until the
 * journal request can be satisfied. CICS ensures that both
 * buffers are written out to auxiliary storage, thus freeing
 * them for new records. (You can override the default
 * action by the NOSUSPEND option.)
 * <DT>NOTAUTH<DD>
 * a resource security check has failed on the
 * JOURNALNAME(data-value).  resource.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The command cannot be executed because the
 * specified journal has been explicitly disabled by the
 * user.
 * <LI>The request could not be satisfied because the
 * specified journal was defined using a journal model
 * that maps it onto the logstream that is being used
 * as the system log for this CICS system. The error is
 * detected when trying to connect to the logstream
 * and results in a definition for the JOURNALNAME
 * being installed and set to 'failed'.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to write synchronous
 * journal output and wait for the output operation to be
 * completed:
 * <pre>
 * EXEC CICS WRITE
 *   JOURNALNAME('ACCTSJNL')
 *   JTYPEID('XX')
 *   FROM(KEYDATA)
 *   FLENGTH(40000)
 *   PREFIX(PROGNAME)
 *   PFXLENG(6)
 *   WAIT
 * </pre>
 * The following example shows how to write deferred
 * (asynchronous) user recovery data to the CICS system log:
 * <pre>
 * EXEC CICS WRITE
 *   JOURNALNAME('DFHLOG')
 *   JTYPEID('UR')
 *   FROM(COMDATA)
 *   FLENGTH(10)
 *   REQID(ENTRYID)
 * </pre>
 * Create a journal record.
 * <p><b>Note</b>:  This command is supported for compatibility with earlier releases of CICS. It is superseded by the WRITE
 * JOURNALNAME command, which you are recommended to use instead.
 * The syntax is, apart from FLENGTH, the same as for WRITE JOURNALNAME except that JOURNALNUM specifies a
 * numeric instead of a character value. The numeric value, nn, is in the range 01-99 and corresponds to journal name
 * DFHJnn.
 * @param FLENGTH(data-value)
 *                  specifies, as a full word binary value, the length in bytes
 *                  of the user data to be built into the journal record.
 *                  <P>Note that the maximum total length of a journal record
 *                  depends on a number of factors:
 *                  <UL>
 *                  <LI>There is a limit of 32KB minus 400 bytes if the
 *                  journal is using SMF.
 *                  <LI>The limit for journals that map to log streams is the
 *                  value expressed in the MAXBUFSIZE attribute for
 *                  the structure being used minus 400 bytes. This has
 *                  to include the user data, the prefix data, and the
 *                  2-byte JTYPEID.
 *                  </ul>
 *                  <p><b>Note</b>:  Data longer than 32K bytes cannot be read by
 *                  offline jobs using the SUBSYS=LOGR interface.
 * @param FROM(data-area)
 *                  specifies the user data to be built into the journal record.
 * @param JOURNALNAME(data-value)
 *                  specifies a 1- to 8-character journal name. The valid
 *                  characters for a journal name are the upper-case letters
 *                  A through Z, the numeric characters 0 through 9, and
 *                  the special symbols $ @ and #.
 *                  <p>On first reference to this journal name, CICS must be
 *                  able to map the journal name to a corresponding MVS
 *                  system loggerlog stream, or MVS SMF data set. To do
 *                  this, CICS searches the installed JOURNALMODEL
 *                  definitions, looking for a matching journal name in a
 *                  journal model. CICS looks for either a specific match or
 *                  a generic match. If a matching entry cannot be found,
 *                  CICS attempts to use a default log stream name.
 *                  To write to the CICS system log, specify DFHLOG as
 *                  the journal name.
 *                  <p><b>Note</b>:  The CICS system log should be used only for
 *                  short-lived data required for recovery
 *                  purposes. You should not write user records for
 *                  such things as audit trails to it.
 *                  <p>To write to journals defined using the journal numbering
 *                  convention (for example, to the auto journals defined in
 *                  file resource definitions), specify the name as DFHJ nn,
 *                  where nn is the journal number in the range 1 to 99.
 *                  <p>Note:  Specifying DFHJ01 on this command refers to a
 *                  user journal,  not the system log.
 *                  You cannot write to a forward recovery log that is
 *                  known to CICS only by its 26-character log
 *                  stream name (as derived directly from the VSAM
 *                  ICF catalog) unless you write to a journal whose
 *                  matching JOURNALMODEL is associated with
 *                  the same log stream name.
 * @param JTYPEID(data-value)
 *                  specifies a 2-character identifier to be placed in the
 *                  journal record to identify its origin.
 * @param NOSUSPEND
 *                  specifies that the application program is not to be
 *                  suspended for the NOJBUFSP condition. The user
 *                  record is ignored.
 * @param PFXLENG(data-value)
 *                  specifies the length (halfword binary value) in bytes of
 *                  the user prefix data to be included in the journal record.
 *                  Note that the maximum total length of a journal record
 *                  depends on a number of factors:
 *                  <ul>
 *                  <LI>There is a limit of 32KB minus 400 bytes if the
 *                  journal is using SMF.
 *                  <LI>The limit for journals that map to log streams is the
 *                  value expressed in the MAXBUFSIZE attribute for
 *                  the structure being used minus 400 bytes. This has
 *                  to include the prefix data, the user data, and the
 *                  2-byte JTYPEID.
 *                  </ul>
 *                  <p>The minimum value is 0. See FLENGTH for the limits to
 *                  the size of a journal record.
 *                  <p><b>Note</b>:  Data longer than 32K bytes cannot be read by
 *                  offline jobs using the SUBSYS=LOGR interface.
 * @param PREFIX(data-value)
 *                  specifies the user prefix data to be included in the
 *                  journal record. A data area must be provided in COBOL
 *                  programs.
 * @param REQID(data-area)
 *                  specifies a data area that identifies the journal record.
 *                  The data area is a fullword binary variable. CICS sets
 *                  the variable to a token that can be used for
 *                  synchronization. REQID is only valid for asynchronous
 *                  output (that is, the WAIT option is not specified).
 * @param WAIT
 *                  specifies that synchronous journal output is required.
 *                  The requesting task waits until the record has been
 *                  hardened.
 */
function "WRITE JOURNALNAME"(
   JOURNALNAME(data-value),
   FLENGTH(data-value),
   FROM(data-area),
   JTYPEID(data-value),
   NOSUSPEND,
   PFXLENG(data-value),
   PREFIX(data-value),
   REQID(data-area),
   WAIT,
   );

/**
 * Create a journal record.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITE JOURNALNUM(data-value)__JTYPEID(data-value)________________> |
 * |                                                                        |
 * | >__FROM(data-area)___________________________________________________> |
 * |                     |_LENGTH(data-value)_|  |_REQID(data-area)_|       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_PREFIX(data-value)__________________________|  |_STARTIO_|        |
 * |                          |_PFXLENG(data-value)_|                       |
 * |                                                                        |
 * | >___________________________><                                         |
 * |    |_WAIT_|  |_NOSUSPEND_|                                             |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: IOERR, JIDERR, LENGERR, NOJBUFSP, NOTAUTH, NOTOPEN         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 * <p><b>Description</b>
 * <p>WRITE JOURNALNUM creates a journal record. The request can be for synchronous or asynchronous output; definitions of these terms, and detailed information regarding the synchronization of journal output, are contained in the CICS Application Programming Guide.
 * 
 * @conditions 
 * <dl>
 * <DT>IOERR<DD>
 * occurs if the physical output of a journal record was not accomplished because of an irrecoverable I/O error.
 * <p>Default action: terminate the task abnormally.
 * <DT>JIDERR<DD>
 * occurs if the specified journal identifier does not exist in the journal control table (JCT).
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs if the computed length for the journal record exceeds the total buffer space allocated for the journal, as specified in the JCT entry for the journal, or if the length specified for the prefix or for the data is negative.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOJBUFSP<DD>
 * occurs if the journal buffers are logically full (that is, the current buffer is full, and I/O is in progress on the alternate buffer) or the remaining space in the current buffer is insufficient for this journal record.
 * <p>Default action: suspend task activity until the journal request can be satisfied. CICS ensures that both buffers are written out to auxiliary storage, thus freeing them for new records. (The default can be overridden by the NOSUSPEND option.)
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on JOURNALNUM(data-value).
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * occurs if the journal command cannot be satisfied because the specified journal is not open.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example 
 * The following example shows how to request synchronous journal output and wait for the output operation to be completed:
 * <pre>
 *     ________________________________________________________________________
 *    |                                                                        |
 *    |                                                                        |
 *    |   EXEC CICS WRITE                                                      |
 *    |        JOURNALNUM(2)                                                   |
 *    |        JTYPEID('XX')                                                   |
 *    |        FROM(KEYDATA)                                                   |
 *    |        LENGTH(8)                                                       |
 *    |        PREFIX(PROGNAME)                                                |
 *    |        PFXLENG(6)                                                      |
 *    |        WAIT                                                            |
 *    |                                                                        |
 *    |                                                                        |
 *    |________________________________________________________________________|
 * </pre>
 * In this example, STARTIO is not specified, so the task waits until the journal buffer is full or until output is initiated by a STARTIO request in another task. CICS limits the wait to one second.
 * The following example shows how to request deferred (asynchronous) journal output:
 * <pre>
 *     ________________________________________________________________________
 *    |                                                                        |
 *    |                                                                        |
 *    |   EXEC CICS WRITE                                                      |
 *    |        JOURNALNUM(1)                                                   |
 *    |        JTYPEID('SD')                                                   |
 *    |        FROM(COMDATA)                                                   |
 *    |        LENGTH(10)                                                      |
 *    |        REQID(ENTRYID)                                                  |
 *    |                                                                        |
 *    |                                                                        |
 *    |________________________________________________________________________|
 * </pre>
 * @param FROM(data-area)
 *                  specifies the user data to be built into the journal record.
 * @param JOURNALNUM(data-value)
 *                  Specifies the journal identifier as a halfword numeric value in the range 1-99. Journal numbers correspond to journal names as follows:
 *                  <p>Journal numbers in the range 2-99 refer to user journals named DFHJ02 through DFHJ99.
 *                  <p>Journal number 1 refers to the system log.
 * @param JTYPEID(data-value)
 *                  specifies a 2-character identifier to be placed in the journal record to identify its origin.
 * @param LENGTH(data-value)
 *                  specifies the length (halfword binary value) in bytes of the user data to be built into the journal record. The minimum value is 0 and the maximum value is (buffer size-76) minus PFXLENG.
 * @param NOSUSPEND
 *                  specifies that an application program is not to be suspended for the NOJBUFSP condition.
 * @param PFXLENG(data-value)
 *                  specifies the length (halfword binary value) in bytes of the user prefix data to be included in the journal record. The minimum value is 0 and the maximum value is (buffer size-72) minus LENGTH.
 * @param PREFIX(data-value)
 *                  specifies the user prefix data to be included in the journal record. A data area must be provided in COBOL programs.
 * @param REQID(data-area)
 *                  specifies a data area that identifies the journal record. The data area is a fullword binary variable. CICS sets the variable to a number that depends upon the position in the data set of the record being created. REQID applies to asynchronous output (WAIT option not specified).
 * @param STARTIO
 *                  specifies that output of the journal record is to be initiated immediately. If WAIT is specified for a journal with a low utilization, STARTIO should be specified also to prevent the requesting task waiting for the journal buffer to be filled. Very high utilization ensures that the buffer is cleared quickly, so that STARTIO is unnecessary.
 * @param WAIT
 *                  specifies that synchronous journal output is required. The requesting task waits until the record has been written.
 */
function "WRITE JOURNALNUM"(
   JOURNALNUM(data-value),
   FROM(data-area),
   JTYPEID(data-value),
   LENGTH(data-value),
   NOSUSPEND,
   PFXLENG(data-value),
   PREFIX(data-value),
   REQID(data-area),
   STARTIO,
   WAIT,
   );

/**
 * Write a message on the system console.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITE OPERATOR__TEXT(data-value)_________________________________> |
 * |                                       |_TEXTLENGTH(data-value)_|       |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_ROUTECODES(data-value)__NUMROUTES(data-value)_|                   |
 * |                                                                        |
 * |     _EVENTUAL_____________________________________________             |
 * | >__|______________________________________________________|__><        |
 * |    |_ACTION(cvda)_________________________________________|            |
 * |    |_CRITICAL_____________________________________________|            |
 * |    |_IMMEDIATE____________________________________________|            |
 * |    |_REPLY(data-area)__MAXLENGTH(data-value)__| replies |_|            |
 * |                                                                        |
 * | replies:                                                               |
 * | |_______________________________________________________|              |
 * |    |_REPLYLENGTH(data-area)_|  |_TIMEOUT(data-value)_|                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: EXPIRED, INVREQ, LENGERR                                   |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Description</b>
 * <p>WRITE OPERATOR enables an application to write a
 * message to one or more system consoles and, if necessary,
 * wait for a reply. The command can specify route codes. This
 * is of particular use to application packages that need to issue
 * their own operator messages.
 * <p>As a result of a change in the way CICS handles messages
 * sent to the console, text lengths of greater than 113
 * characters are split into two lines.
 * None of the variables below can be defined as PL/I variable
 * character strings.
 * <p><b>Note</b>:  If ACTION (or one of the equivalent CVDA values
 * below) is specified, the message is retained until the
 * console operator explicitly deletes it or CICS
 * terminates.
 * <p>The action code is identical with the descriptor code to be
 * associated with the message. Only one of the descriptor
 * codes 2, 3, or 11 may be specified for this parameter.
 * <p>If ACTION is not specified, no descriptor code is associated
 * with the message. The descriptor codes have the following
 * meanings:
 * <dl compact>
 * <DT>2<DD>  Immediate action
 * <DT>3<DD>  Eventual action
 * <DT>11<DD> Critical eventual action.
 * </dl>
 * <p>The CRITICAL option is equivalent to a specification of
 * ACTION(11). The EVENTUAL option is equivalent to a
 * specification of ACTION(3). The IMMEDIATE option is
 * equivalent to a specification of ACTION(2).
 * <p>Retained messages can be handled by the console operator
 * in a variety of ways (see the  MVS/ESA Operations: System
 * Commands manual). Refer to your system programmer for
 * information about how this command affects the appearance
 * of the console screen to the operator.
 *
 * @conditions
 * <dl>
 * <DT>EXPIRED<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>7<DD> TIMEOUT has occurred before the operator's reply
 * was received.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> The TEXTLENGTH value is not valid.
 * <DT>2<DD> The NUMROUTES value is not valid.
 * <DT>3<DD> The ROUTECODES value is not valid.
 * <DT>4<DD> The MAXLENGTH value is not valid.
 * <DT>5<DD> The TIMEOUT value is not valid.
 * <DT>6<DD> The ACTION value is not valid.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> The reply was longer than MAXLENGTH, and has
 * been truncated.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param ACTION(cvda)
 *                  specifies an action code to be associated with this
 *                  message. CVDA values are:
 * @param CRITICAL
 *                  specifies that the message requires eventual
 *                  action by the operator and has enough critical
 *                  importance to remain on the console screen. The
 *                  message remains on the screen until it is deleted
 *                  by the operator.
 * @param EVENTUAL
 *                  specifies that the operator should take action
 *                  when there is time. The message is rolled off
 *                  when other messages fill up the screen, but is still
 *                  retained by the operating system until the operator
 *                  explicitly deletes it.
 * @param IMMEDIATE
 *                  specifies that the operator should take action
 *                  immediately. The message remains on the
 *                  console screen until it is deleted by the operator.
 * @param MAXLENGTH(data-value)
 *                  is a fullword binary field that contains the length of the
 *                  reply area (in the range 1-119 bytes). You must specify
 *                  MAXLENGTH if you specify REPLY.
 * @param NUMROUTES(data-value)
 *                  is a fullword binary field that defines the number of
 *                  routing codes.
 * @param REPLY(data-area)
 *                  provides a data area for receiving the operator's reply. If
 *                  you specify this option, your application pauses until
 *                  either a reply is received or the TIMEOUT period
 *                  expires.
 * @param REPLYLENGTH(data-area)
 *                  specifies the actual length (fullword binary value) of the
 *                  operator's reply.
 * @param ROUTECODES(data-value)
 *                  is a variable-length field. Each code is one byte and
 *                  contains a binary number in the range 1-28. The default
 *                  is a single code, set to 2. In COBOL programs only, you
 *                  must use a data-area that contains the 1-byte values
 *                  rather than a data-value.
 * @param TEXT(data-value)
 *                  is a data value containing the text to be sent. In COBOL
 *                  programs only, you must use a data-area that contains
 *                  the text to be sent to the operator, rather than a
 *                  data-value.
 * @param TEXTLENGTH(data-value)
 *                  specifies the length (fullword binary value) of the text.
 *                  <p>If the REPLY option is specified, the length is in the
 *                  range 0-121 bytes.
 *                  <p>If the REPLY option is not specified, the length is in the
 *                  range 0-690 bytes.
 *                  <p>If the length of the text is greater than 113, CICS
 *                  formats the message in a multiline write to operator
 *                  (WTO); each line has 69 bytes with a maximum of ten
 *                  lines.
 *                  <p>The output is edited in such a way that each line is
 *                  broken, if possible, at a space character, The next line
 *                  starts with a non-space character. If there is no room to
 *                  reformat the data within the overall limit of 690 bytes of
 *                  ten lines of 69 bytes, the output is not reformatted.
 * @param TIMEOUT(data-value)
 *                  is a fullword binary field that contains the maximum time
 *                  (in seconds) that CICS waits for a reply before returning
 *                  control to this transaction. This must be in the range
 *                  0-86 400 (24 hours). The system default value is
 *                  specified by the OPERTIM system initialization
 *                  parameter. You can only specify TIMEOUT if you have
 *                  also specified REPLY.
 */
function "WRITE OPERATOR"(
   ACTION(cvda),
   CRITICAL,
   EVENTUAL,
   IMMEDIATE,
   MAXLENGTH(data-value),
   NUMROUTES(data-value),
   REPLY(data-area),
   REPLYLENGTH(data-area),
   ROUTECODES(data-value),
   TEXT(data-value),
   TEXTLENGTH(data-value),
   TIMEOUT(data-value),
   );

/**
 * Write data to transient data queue.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITEQ TD__QUEUE(name)__FROM(data-area)__________________________> |
 * |                                                                        |
 * | >_________________________________________________><                   |
 * |    |_LENGTH(data-value)_|  |_SYSID(systemname)_|                       |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: DISABLED, INVREQ, IOERR, ISCINVREQ, LENGERR, NOSPACE,      |
 * | NOTAUTH, NOTOPEN, QIDERR, SYSIDERR                                     |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <p><b>Description</b>
 * <p>WRITEQ TD writes transient data to a predefined symbolic
 * destination.
 *
 * @conditions
 * <dl>
 * <DT>DISABLED<DD>
 * occurs when the queue has been disabled.
 * <p>Default action: terminate the task abnormally.
 * <DT>INVREQ<DD>
 * occurs if WRITEQ names an extrapartition queue that
 * has been opened for input.
 * <p>b>Note</b>:  This condition cannot be raised for intrapartition
 * queues.
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when an input/output error occurs and the data
 * record in error is skipped.
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>WRITEQ names an extrapartition queue and does
 * not specify a length consistent with the RECFORM
 * and RECSIZE options specified in the destination
 * control table TYPE=SDSCI that defined the queue.
 * The check is made after the XTDOUT exit has been
 * invoked; this exit may change the length of the data
 * to be passed to the access method.
 * <LI>WRITEQ names an intrapartition queue and does
 * not specify a length consistent with the control
 * interval defined for the intrapartition data set. Again,
 * the check is made after the XTDOUT exit has been
 * invoked.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * occurs when the request cannot be performed because
 * use of the queue has been restricted owing to a unit of
 * work failing in-doubt. This can happen on any request
 * for a logically-recoverable queue defined with
 * WAIT(YES) and WAITACTION(REJECT) in the
 * TDQUEUE resource definition.
 * Specify WAIT(YES) and WAITACTION(QUEUE) in the
 * TDQUEUE resource definition if you want the transaction
 * to wait.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs if no more space exists on the intrapartition or
 * extrapartition queue, or the relative byte address (RBA)
 * for an intrapartition queue would exceed 2 gigabytes.
 * <p>When this happens, no more data should be written to
 * the queue because it may be lost.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTOPEN<DD>
 * occurs if the destination is closed.
 * <p><b>Note</b>:  This condition cannot be raised for intrapartition
 * queues.
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * occurs if the symbolic destination to be used with a
 * transient data control command cannot be found.
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs when the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * SYSIDERR also occurs when the link to the remote
 * system is closed.
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @example
 * The following example shows how to write data to a
 * predefined symbolic destination; in this case, the control
 * system message log (CSML):
 * <pre>
 * EXEC CICS WRITEQ TD
 *   QUEUE('CSML')
 *   FROM(MESSAGE)
 *   LENGTH(LENG)
 * </pre>
 * @param FROM(data-area)
 *               specifies the data that is to be written to the transient
 *               data queue.
 * @param LENGTH(data-value)
 *               specifies the length (halfword binary value) of the data to
 *               be written.
 * @param QUEUE(name)
 *               specifies the symbolic name (1-4 alphanumeric
 *               characters) of the queue to be written to. The named
 *               queue must have been defined to CICS.
 * @param SYSID(systemname)
 *               (remote systems only) specifies the name (1-4
 *               characters) of the system to which the request is
 *               directed.
 *               <p>If SYSID is specified, the data set is assumed to be on a
 *               remote system irrespective of whether or not the name
 *               is defined as remote in the DCT. Otherwise the entry in
 *               the DCT is used to find out whether the data set is on a
 *               local or a remote system.
 */
function "WRITEQ TD"(
   FROM(data-area),
   LENGTH(data-value),
   QUEUE(name),
   SYSID(systemname),
   );

/**
 * Write data to a temporary storage queue.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__WRITEQ TS__QUEUE(name)__FROM(data-area)__________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_LENGTH(data-value)_|  |_NUMITEMS(data-area)__________|            |
 * |                            |_ITEM(data-area)______________|            |
 * |                                               |_REWRITE_|              |
 * |                                                                        |
 * |                            _AUXILIARY_                                 |
 * | >_________________________|___________|_________________><             |
 * |    |_SYSID(systemname)_|  |_MAIN______|  |_NOSUSPEND_|                 |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, IOERR, ISCINVREQ, ITEMERR, LENGERR, NOSPACE,       |
 * | NOTAUTH, QIDERR, SYSIDERR                                              |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 * <p><b>Note for dynamic transaction routing</b>
 * <p>Using this command could create inter-transaction affinities that adversely affect the use of dynamic transaction routing.
 * See the  CICS Application Programming Guide for more information about transaction affinities.
 * <p><b>Description</b>
 * <p>WRITEQ TS stores temporary data (records) in a temporary
 * storage queue in main or auxiliary storage.
 * If a queue has been defined as recoverable, the program
 * must not issue a WRITEQ TS if a DELETEQ TS has
 * previously been issued within the same logical unit of work.
 * In other words, following a DELETEQ TS, no WRITEQ TS
 * can be issued until after a syncpoint has occurred.
 * If there is insufficient space available in the temporary
 * storage data set to satisfy the WRITEQ TS request, the task
 * is suspended until space does become available. (Space
 * may be released by other tasks in the system.) If, however,
 * space is not available in the temporary storage data set, and
 * the NOSUSPEND option has been specified, or there is an
 * active HANDLE CONDITION for NOSPACE, the NOSPACE
 * condition is raised.
 *
 * @conditions
 * <dl>
 * <DT>INVREQ<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>A WRITEQ TS command specifies a queue name
 * that consists solely of binary zeros.
 * <LI>A WRITEQ TS command specifies a queue that is
 * locked and awaiting ISC session recovery.
 * <LI>The queue was created by CICS internal code.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>IOERR<DD>
 * occurs when there is an irrecoverable input/output error.
 * <p>Default action: terminate the task abnormally.
 * <DT>ISCINVREQ<DD>
 * occurs when the remote system indicates a failure that
 * does not correspond to a known condition.
 * <p>Default action: terminate the task abnormally.
 * <DT>ITEMERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The item number specified in a WRITEQ TS
 * command with the REWRITE option, is not valid
 * (that is, it is outside the range of entry numbers
 * assigned for the queue).
 * <LI>The maximum number of items (32 767) is
 * exceeded.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>The length of the stored data is zero or negative.
 * <LI>The length of the stored data is greater than 32763.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>LOCKED<DD>
 * occurs when the request cannot be performed because
 * use of the queue has been restricted owing to a unit of
 * work failing in-doubt.
 * <p>Default action: terminate the task abnormally.
 * <DT>NOSPACE<DD>
 * occurs when the NOSUSPEND option is specified and
 * there is no space for the data in:
 * <ul>
 * <LI>The auxiliary temporary storage data set
 * <LI>The temporary storage pool list structure
 * </ul>
 * <p>Also occurs if there is no space and there is an active
 * HANDLE CONDITION for NOSPACE.
 * <p>Default action: ignore the condition.
 * <DT>NOTAUTH<DD>
 * occurs when a resource security check has failed on
 * QUEUE(name).
 * <p>Default action: terminate the task abnormally.
 * <DT>QIDERR<DD>
 * occurs when the queue specified by a WRITEQ TS
 * command with the REWRITE option cannot be found,
 * either in:
 * <ul>
 * <li>Main storage
 * <li>Auxiliary storage
 * <LI>Temporary storage pool
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * <DT>SYSIDERR<DD>
 * occurs in any of the following situations:
 * <ul>
 * <LI>When the SYSID option specifies a name that is
 * neither the local system nor a remote system (made
 * known to CICS by defining a CONNECTION).
 * <LI>The link to the remote system is closed.
 * <LI>When the CICS region in which the temporary
 * storage command is executed fails to connect to the
 * TS server managing the TS pool that supports the
 * referenced temporary storage queue. (For example,
 * this can happen if the CICS region is not authorized
 * to access the temporary storage server).
 * SYSIDERR can also occur if the temporary storage
 * server has not been started, or because the server
 * has failed (or been stopped) while CICS continues
 * executing.
 * </ul>
 * <p>Default action: terminate the task abnormally.
 * </dl>
 * @param AUXILIARY
 *                  specifies that the temporary storage queue is on a direct
 *                  access storage device in auxiliary storage. This is the
 *                  default value for the first write.
 *                  <p>This option is ignored:
 *                  <UL>
 *                  <LI>for an existing queue,
 *                  <LI>if a TSMODEL resource definition with a matching
 *                  prefix is installed in the system.
 *                  <LI>if the AUXILIARY option is specified for a temporary
 *                  storage data queue that resides in a temporary
 *                  storage pool.
 *                  </ul>
 * @param FROM(data-area)
 *                  specifies the data to be written to temporary storage.
 * @param ITEM(data-area)
 *                  specifies, as a halfword binary value, the item number of
 *                  the logical record to be replaced in the queue
 *                  (REWRITE option also specified).
 *                  <p>ITEM can be both an input and output field to CICS. As
 *                  such, programmers should ensure that the ITEM field is
 *                  not defined within protected storage when issuing a
 *                  WRITEQ command. If the ITEM value were a literal (for
 *                  example), command checking (CMDPROT=YES) would
 *                  result in an AEYD abend occurring.
 *                  <p><b>Note</b>:  In earlier releases, ITEM on a WRITEQ TS
 *                  without REWRITE would perform a similar
 *                  function to NUMITEMS. This function is retained
 *                  for compatibility.
 * @param LENGTH(data-value)
 *                  specifies the length, as a halfword binary value, of the
 *                  data to be written.
 *                  <p>You must specify this option if you are using SYSID.
 *                  The maximum length is 32763. For a description of a
 *                  safe upper limit, see "LENGTH options".
 * @param MAIN
 *                  specifies that the temporary storage queue is in main
 *                  storage.
 *                  <p>This option is ignored:
 *                  <ul>
 *                  <LI>for an existing queue,
 *                  <LI>if a TSMODEL resource definition with a matching
 *                  prefix is installed in the system.
 *                  <LI>if the MAIN option is specified for a temporary
 *                  storage data sharing queue that resides in a
 *                  temporary storage pool.
 *                  </ul>
 *                  <p>If you use the MAIN option to write data to a temporary
 *                  storage queue on a remote system, the data is stored in
 *                  main storage if the remote system is accessed by the
 *                  CICS multiregion operation (MRO) facility. If these
 *                  conditions are not met, the data is stored in auxiliary
 *                  storage.
 *                  <p>If the system is MRO and MAIN is specified, the queue
 *                  is not recoverable and SYNCPOINT ROLLBACK does
 *                  not function.
 * @param NOSUSPEND
 *                  specifies that the application program is not to be
 *                  suspended if there is insufficient space in the temporary
 *                  storage data set to satisfy the WRITEQ TS request.
 *                  Instead, the NOSPACE condition is raised.
 *                  <p>Note, however, that if a HANDLE CONDITION for
 *                  NOSPACE is active when the command is executed,
 *                  this also overrides the default action, and control is
 *                  passed to the user label supplied in the HANDLE
 *                  CONDITION. This takes precedence over the
 *                  NOSUSPEND option but is, of course, negated by either
 *                  NOHANDLE or RESP.
 *                  <p>This does not apply to the MAIN queue.
 * @param NUMITEMS(data-area)
 *                  specifies a halfword binary field into which CICS stores a
 *                  number indicating how many items there are now in the
 *                  queue, after the WRITEQ TS command is executed.
 *                  <p>If the record starts a new queue, the item number
 *                  assigned is 1; subsequent item numbers follow on
 *                  sequentially. NUMITEMS is not valid if REWRITE is
 *                  specified.
 * @param QUEUE(name)
 *                  specifies the symbolic name (1-8 characters) of the
 *                  queue to be written to. If the queue name appears in the
 *                  TST, and the entry is marked as remote, the request is
 *                  shipped to a remote system. The name must be unique
 *                  within the CICS system. Do not use X'FA' through
 *                  X'FF', or **, or $$, or DF, as the first character of the
 *                  name; these characters are reserved for CICS use. The
 *                  name cannot consist solely of binary zeros.
 * @param QNAME(name)
 *                  an alternative to QUEUE, QNAME specifies the symbolic
 *                  name (1-16 characters) of the queue to be written to. If
 *                  the queue name appears in the TST, and the entry is
 *                  marked as remote, or if the QNAME is described by a
 *                  TSMODEL resource definition which identifies a remote
 *                  system, the request is shipped to a remote system. The
 *                  name must be unique within the CICS system. Do not
 *                  use X'FA' through X'FF', or **, or $$, or DF, as the
 *                  first character of the name; these characters are
 *                  reserved for CICS use. The name cannot consist solely
 *                  of binary zeros.
 * @param REWRITE
 *                  specifies that the existing record in the queue is to be
 *                  overwritten with the data provided. If the REWRITE
 *                  option is specified, the ITEM option must also be
 *                  specified. If the specified queue does not exist, the
 *                  QIDERR condition occurs. If the correct item within an
 *                  existing queue cannot be found, the ITEMERR condition
 *                  occurs and the data is not stored.
 * @param SYSID(systemname)
 *                  (remote and shared queues only) specifies the system
 *                  name (1-4 characters) identifying the remote system or
 *                  shared queue pool to which the request is directed.
 */
function "WRITEQ TS"(
   AUXILIARY,
   FROM(data-area),
   ITEM(data-area),
   LENGTH(data-value),
   MAIN,
   NOSUSPEND,
   NUMITEMS(data-area),
   QUEUE(name),
   QNAME(name),
   REWRITE,
   SYSID(systemname),
   );

/**
 * Transfer program control.
 * <pre>
 *  ________________________________________________________________________
 * |                                                                        |
 * |                                                                        |
 * |                                                                        |
 * | >>__XCTL__PROGRAM(name)______________________________________________> |
 * |                                                                        |
 * | >____________________________________________________________________> |
 * |    |_COMMAREA(data-area)_________________________|                     |
 * |                           |_LENGTH(data-value)_|                       |
 * |                                                                        |
 * | >________________________________________________________><            |
 * |    |_INPUTMSG(data-area)______________________________|                |
 * |                           |_INPUTMSGLEN(data-value)_|                  |
 * |                                                                        |
 * |                                                                        |
 * | Conditions: INVREQ, LENGERR, NOTAUTH, PGMIDERR                         |
 * |                                                                        |
 * |________________________________________________________________________|
 * </pre>
 *
 *
 * <P><b>Description</b>
 * <p>XCTL transfers control from one application program to
 * another at the same logical level. The program from which
 * control is transferred is released. If the program to which
 * control is transferred is not already in main storage, it is
 * loaded.
 *
 * @conditions
 * <dl compact>
 * <DT>INVREQ<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>8<DD> An XCTL command with the INPUTMSG option is
 * issued for a program that is not associated with a
 * terminal, or that is associated with an APPC
 * logical unit, or an IRC session.
 * <DT>29<DD> EXEC XCTL is not allowed in a GLUE or TRUE.
 * <DT>30<DD> The program manager domain has not yet been
 * initialized. This is probably due to a XCTL request
 * having been made in a first stage PLT.
 * <DT>200<DD> An XCTL command with the INPUTMSG option is
 * issued in a program invoked by DPL.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>LENGERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>11<DD> LENGTH is less than 0 or greater than 32763.
 * <DT>26<DD> The COMMAREA address passed was zero, but
 * LENGTH was non-zero.
 * <DT>27<DD> INPUTMSGLEN was less than 0 or greater than
 * 32767.
 * <DT>28<DD> LENGTH or INPUTMSGLEN is greater than the
 * length of the data area specified in the
 * COMMAREA or INPUTMSG options, and while
 * that data was being copied a destructive overlap
 * occurred because of the incorrect length.
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>NOTAUTH<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>101<DD> A resource security check has failed on
 * PROGRAM(name).
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * <DT>PGMIDERR<DD>
 * RESP2 values:
 * <dl compact>
 * <DT>1<DD> A program has no entry in the PPT and either
 * program autoinstall was switched off, or the
 * program autoinstall control program indicated that
 * the program should not be autoinstalled.
 * <DT>2<DD> The program is disabled.
 * <DT>3<DD> A program could not be loaded because:
 * <ul>
 * <LI>This was the first load of the program and the
 * program load. failed, usually because the load
 * module could not be found.
 * <LI>This was a subsequent load of the program,
 * but the first load failed.
 * </ul>
 * <p>In order to reset the load status the load module
 * must be in the DFHRPL concatenation, and a SET
 * PROGRAM NEWCOPY will be required
 * <DT>9<DD> The installed program definition is for a remote
 * program.
 * <DT>21<DD> The program autoinstall control program failed
 * either because the program autoinstall control
 * program is incorrect, incorrectly defined, or as a
 * result of an abend in the program autoinstall
 * control program. Program autoinstall is disabled
 * and message DFHPG0202 or DFHPG0203 written
 * to the CSPL.
 * <DT>22<DD> The model returned by the program autoinstall
 * control program was not defined in the PPT table,
 * or was not enabled.
 * <DT>23<DD> The program autoinstall control program returned
 * invalid data.
 * <DT>24<DD> Define for the program failed due to autoinstall
 * returning an invalid program name or definition.
 * </dl>
 * </dl>
 * <p>Default action: terminate the task abnormally.
 * @example
 * The following example shows how to request a transfer of
 * control to an application program called PROG2:
 * <pre>
 * EXEC CICS XCTL PROGRAM('PROG2')
 * </pre>
 * @param COMMAREA(data-area)
 *               specifies a communication area to be made available to
 *               the invoked program. In this option the contents of the
 *               data-area are passed. In COBOL, you must give this
 *               data area the name DFHCOMMAREA in the receiving
 *               program. (See the section about passing data to other
 *               programs in the  CICS Application Programming Guide.)
 * @param INPUTMSG(data-area)
 *               specifies data to be passed to the invoked program
 *               when it first issues a RECEIVE command. If the invoked
 *               program passes control to another program by a LINK
 *               command, a linked chain is created, as described under
 *               the INPUTMSG option of the LINK command. The
 *               INPUTMSG data remains available until a RECEIVE
 *               command is issued or until control returns to CICS.
 * @param INPUTMSGLEN(data-value)
 *               specifies a halfword binary value that specifies the
 *               length of the data passed by INPUTMSG.
 * @param LENGTH(data-value)
 *               specifies the length (halfword binary data value) in bytes
 *               of the communication area. For a description of a safe
 *               upper limit, see "LENGTH options".
 * @param PROGRAM(name)
 *               specifies the identifier (1-8 alphanumeric characters) of
 *               the program to which control is to be passed
 *               unconditionally. The specified name must have been
 *               defined as a program to CICS, though if AUTOINSTALL
 *               is active a definition is autoinstalled.
 */
function "XCTL"(
   COMMAREA(data-area),
   INPUTMSG(data-area),
   INPUTMSGLEN(data-value),
   LENGTH(data-value),
   PROGRAM(name),
   );
