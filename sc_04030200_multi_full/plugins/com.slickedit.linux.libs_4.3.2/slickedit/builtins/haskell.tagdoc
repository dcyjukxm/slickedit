// Contains declarations of functions and constants
// defined in the standard prelude.
// See http://haskell.org/onlinereport/standard-prelude.html
/**/

// module Prelude

// class Enum a
class Enum{
   // a -> a
   const succ;
   // a -> a
   const pred;
   //Int -> a
   const toEnum;
   // a -> Int
   const fromEnum;
   // a -> [a]
   const enumFrom;
   // a -> a -> [a]
   const enumFromThen;
   // a -> a -> [a]
   const enumFromTo;
   // a -> a -> a -> [a]
   const enumFromThenTo;
};

/* Bounded a */
class Bounded{
   // minBound :: a
   const minBound;
   // maxBound :: a
   const maxBound;
}

// subtract x y :: (Num a) => a-> a -> Bool
const subtract;
// (Integral a) => a -> Bool
const even;
// (Integral a) => a -> Bool
const odd;
// gcd x y :: (Integral a) => a -> a -> a
const gcd;
// lcm x y :: (Integral a) => a -> a -> a
const lcm;
// fromIntegral :: (Integral a, Num b) => a -> b
const fromIntegral;
// realToFrac :: (Real a, Fractional b) => a -> b
const realToFrac;

class Functor{
   // (a -> b) -> f a -> f b
   const fmap;
}

class Monad{
   // a -> m a
   const return;
   // String -> m a
   const fail;
}
// Monad m => [m a] -> m [a]
const sequence;
// Monad m => [m a] -> m ()
const sequence_;
// Monad m => (a -> m b) -> [a] -> m [b]
const mapM;
// Monad m => (a -> m b) -> [a] -> m ()
const mapM_;
// a -> a
const id;
// a -> b -> a
const "const";
// (a -> b -> c) -> b -> a -> c
const flip;
// seq :: a -> b -> b
const seq;
// Bool -> Bool
const not;
// Bool
const otherwise;

class Char;
class Int;
class Integer;
class Float;
class Double;
class Rational;
class IO;
/* [Char] */
class String;
class Double;

// class Eq a
class Eq;

// (Eq a, Show a) ==> Num a
class Num: Eq, Show{
   // negate x :: a -> a
   const negate;
   // abs x :: a -> a
   const abs;
   // signum x :: a -> a
   const signum;
   // fromInteger x :: Integer -> a
   const fromInteger;
}

// (Eq a) => Ord a
class Ord : Eq{
   // compare x y :: a -> a -> Ordering
   const compare;
   //max x y :: a -> a -> a
   const max;
   //min x y :: a -> a -> a
   const min;
}

// (Num a, Ord a) => Real a
class Real : Num, Ord{
   // a -> Rational
   const toRational;
}

// (Real a, Num a) => Integral a
class Integral : Real, Enum{
   // a -> a -> a
   const quot;
   // a -> a -> a
   const rem;
   // div n d :: a -> a -> a
   const div;
   // mod n d :: a -> a -> a
   const mod;
   // quoteRem n d :: a -> a -> (a,a)
   const quotRem;
   // divMod n d :: a -> a -> (a,a)
   const divMod;
   // a -> Integer
   const toInteger;
};

// (Num a) => Fractional a
class Fractional : Num{
   // a -> a -> a
   const recip;
   // Rational -> a
   const fromRational;
};

// (Fractional a) => Floating a
class Floating : Fractional{
   // 3.141592653589793
   const pi 3.141592653589793;
   // a -> a
   const exp;
   const log;
   const sqrt;
   const sin;
   const cos;
   const tan;
   const asin;
   const acos;
   const atan;
   const sinh;
   const cosh;
   const tanh;
   const asinh;
   const acosh;
   const atanh;
   // a -> a -> a
   const logBase;
};

// (Real a, Fractional a) => RealFrac a
class RealFrac : Real, Fractional{
   // properFraction :: (Integral b) => a -> (b,a)
   const properFraction;
   // truncate :: (Integral b) => a -> b
   const truncate;
   // round :: (Integral b) => a -> b
   const round;
   // ceiling :: (Integral b) => a -> b
   const ceiling;
   // floor :: (Integral b) => a -> b
   const floor;
};

// (RealFrac a, Floating a) => RealFloat a
class RealFloat : RealFrac, Floating{
   // floatRadix :: a -> Integer
   const floatRadix;
   // floatDigits :: a -> Int
   const floatDigits;
   // floatRange :: a -> (Int,Int)
   const floatRange;
   // decodeFloat :: a -> (Integer,Int)
   const decodeFloat;
   // encodeFloat :: Integer -> Int -> a
   const encodeFloat;
   // exponent :: a -> Int
   const exponent;
   // significand :: a -> a
   const significand;
   // scaleFloat :: Int -> a -> a
   const scaleFloat;
   // isNaN :: a -> Bool
   const isNaN;
   // isInfinite :: a -> Bool
   const isInfinite;
   // isDenormalized :: a -> Bool
   const isDenormalized;
   // isNegativeZero :: a -> Bool
   const isNegativeZero;
   // isIEEE :: a -> Bool
   const isIEEE;
   // atan2 :: a -> a -> a
   const atan2;
};
//data Bool = False | True
enum Bool { True, False }
//data Maybe a = Nothing | Just a
enum Maybe {Nothing, Just }
//data Either a b = Left a | Right b
enum Either {Left , Right }
// either :: (a -> c) -> (b -> c) -> Either a b -> c
const either;
//data Ordering = LT | EQ | GT
enum Ordering { LT, GT, EQ }


// module PreludeList

/*map :: (a -> b) -> [a] -> [b]
map f []     = []
map f (x:xs) = f x : map f xs*/
const map;
/*filter :: (a -> Bool) -> [a] -> [a]
filter p []                 = []
filter p (x:xs) | p x       = x : filter p xs
                | otherwise = filter p xs*/
const filter;
/*concat :: [[a]] -> [a]
concat xss = foldr (++) [] xss*/
const concat;
/*concatMap :: (a -> [b]) -> [a] -> [b]
concatMap f = concat . map f*/
const concatMap;
// head :: [a] -> a
const head;
// tail :: [a] -> a
const tail;
// last :: [a] -> a
const last;
// init :: [a] -> a
const init;
// null :: [a] -> Bool
const null;
// length :: [a] -> Int
const length;
// foldl :: (a -> b -> a) -> a -> [b] -> a
const foldl;
// foldl1 :: (a -> a -> a) -> [a] -> a
const foldl1;
// scanl :: (a -> b -> a) -> a -> [b] -> [a]
const scanl;
// scanl1 :: (a -> a -> a) -> [a] -> [a]
const scanl1;
// foldr :: (a -> b -> b) -> b -> [a] -> b
const foldr;
// foldr1 :: (a -> a -> a) -> [a] -> a
const foldr1;
// scanr :: (a -> b -> b) -> b -> [a] -> [b]
const scanr;
// scanr1 :: (a -> a -> a) -> [a] -> [a]
const scanr1;
// iterate :: (a -> a) -> a -> [a]
// 'iterate f x' is an infinite list, with repeated applications of f to x 
const iterate;
// repeat :: a -> [a]
// 'repeat x' is a infinite list, with same x value in every element 
const repeat;
// replicate :: Int -> a -> [a]
// 'replicate n x' is list of length n, with x the value of every element
const replicate;
// cycle :: [a] -> a
const cycle;
// take :: Int -> [a] -> [a]
const take;
// drop :: Int -> [a] -> [a]
const drop;
// splitAt :: Int -> [a] -> ([a], [a])
const splitAt;
// takeWhile :: (a -> Bool) -> [a] -> [a]
const takeWhile;
// dropWhile :: (a -> Bool) -> [a] -> [a]
const dropWhile;
// span :: (a -> Bool) -> [a] -> [a]
const span;
// break :: (a -> Bool) -> [a] -> [a]
const break;
// lines :: String -> [String]
const lines;
// words :: String -> [String]
const words;
// unlines :: [String] -> String
const unlines;
// unwords :: [String] -> String
const unwords;
// reverse :: [a] -> [a]
const reverse;
// and :: [Bool] -> Bool
const and;
// or :: [Bool] -> Bool
const or;
// any :: (a -> Bool) -> [a] -> Bool
const any;
// all :: (a -> Bool) -> [a] -> Bool
const all;
// elem :: (Eq a) => a -> [a] -> Bool
const elem;
// notElem :: (Eq a) => a -> [a] -> Bool
const notElem;
// lookup :: (Eq a) => a -> [(a,b)] -> Maybe b
const lookup;
// product :: (Num a) => [a] -> a
const product;
// sum :: (Num a) => [a] -> a
const sum;
// maximum :: (Ord a) => [a] -> a
const maximum;
// minimum :: (Ord a) => [a] -> a
const minimum;
// zip :: [a] -> [b] -> [(a,b)]
// Takes two lists, and returns a list of the corresponding pairs
const zip;
// zip3 :: [a] -> [b] -> [c] -> [(a,b,c)]
// Takes 3 lists, and returns a list of triples
const zip3;
// zipWith :: (a->b->c) -> [a] -> [b] -> [c]
const zipWith;
// zipWith3 :: (a->b->c->d) -> [a] -> [b] -> [c] -> [d]
const zipWith3;
// unzip :: [(a,b)] -> ([a],[b])
// From a list of pairs, to a pair of lists
const unzip;
// unzip3 :: [(a,b,c)] -> ([a], [b], [c])
const unzip3;

// module PreludeText

// ReadS :: = String -> [(a,String)]
const ReadS;

// class Read a
class Read {
   // Int -> ReadS a
   const readsPrec;
   // ReadS [a]
   const readList;
};

/* ShowS :: String -> String */
const ShowS;

// class Show a
class Show {
   // showsPrec p x :: Int -> a -> ShowS
   const showsPrec;
   // show x :: a -> String
   const show;
   // show [x] :: [a] ->ShowS
   const showList;
};

// reads :: (Read a) => ReadS a
const reads;
// shows :: (Show a) => a -> ShowS
const shows;
// read :: (Read a) => String -> a
const read;
// showChar :: Char -> ShowS
const showChar;
// showString :: String -> ShowS
const showString;
// showParen :: Bool -> ShowS -> ShowS
const showParen;
// readParen :: Bool -> ReadS a -> ReadS a
const readParen;
// lex :: ReadS String
const lex;

// module PreludeIO
// String
const FilePath;
const IOError;
/*ioError :: IOError -> IO a 
ioError = primIOError*/
const ioError;
/*userError ::  String -> IOError
userError =   primUserError*/
const userError;
/*catch :: IO a -> (IOError -> IO a) -> IO a 
catch = primCatch*/
const catch;
/*putChar :: Char -> IO ()
putChar = primPutChar*/
const putChar;
/*putStr :: String -> IO ()
putStr s = mapM_ putChar s*/
const putStr;
// putStrLn :: String -> IO ()
const putStrLn;
// print :: Show a => a -> IO ()
const print;
// getChar :: IO Char
const getChar;
// getLine :: IO String
const getLine;
// getContents :: IO String
const getContents;
// interact f :: (String -> String) -> IO ()
const interact;
// FilePath -> IO String
const readFile;
// writeFile :: FilePath -> String -> IO ()
const writeFile;
// appendFile :: FilePath -> String -> IO ()
const appendFile;
// readIO :: Read a => String -> IO a
const readIO;
// readLN :: Read a => IO a
const readLN;


