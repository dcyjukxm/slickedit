/**
 * @return conjugate of the complex number c
 */
interface complex: PyObject {
   function complex conjugate();
}

////////////////////////////////////////////////////////////////////////
// OPERATIONS ON STRING TYPES
//
/**
 * These are the string methods which both 8-bit strings and
 * Unicode objects support:
 */
interface PyString: PyObject {

   /**
    * @return
    * Return a copy of the string with only its first character capitalized.
    */
   function string capitalize();
   /**
    * @param width      margin to center text within
    * @return
    * Return centered in a string of length width. Padding is done using spaces.
    */
   function string center(int width);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return the number of occurrences of substring sub in string S[start:end].
    * Optional arguments start and end are interpreted as in slice notation.
    */
   function int count(string sub, int start=0, int end=length);
   /**
    * @param encoding   [optional] character encoding
    * @param errors     [optional] error handling scheme
    * @return
    * Return an encoded version of the string.  Default encoding is the current
    * default string encoding.  errors may be given to set a different error
    * handling scheme.  The default for errors is "strict", meaning that
    * encoding errors raise a ValueError.  Other possible values are "ignore"
    * and "replace".
    */
   function string encode(encoding=default, errors=strict);
   /**
    * @param suffix     substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return true if the string ends with the specified suffix, otherwise return
    * false.  With optional start, test beginning at that position.  With
    * optional end, stop comparing at that position.
    */
   function boolean endswith(string suffix, int start=0, int end=length);
   /**
    * @param tabsize    tab setting (default is 8)
    *
    * @return
    * Return a copy of the string where all tab characters are expanded using
    * spaces.  If tabsize is not given, a tab size of 8 characters is assumed.
    */
   function string expandtabs(int tabsize=8);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return the lowest index in the string where substring sub is found, such
    * that sub is contained in the range [start, end).  Optional arguments start
    * and end are interpreted as in slice notation.  Return -1 if sub is not
    * found.
    *
    * @return int 
    */
   function int find(string sub, int start=0, int end=length);
   /**
    * <p>Perform a string formatting operation. The format_string argument can
    * contain literal text or replacement fields delimited by braces {}. Each 
    * replacement field contains either the numeric index of a positional 
    * argument, or the name of a keyword argument. Returns a copy of 
    * format_string where each replacement field is replaced with the 
    * string value of the corresponding argument.
    * <pre><code>
    * &gt;&gt;&gt;"The sum of 1 + 2 is {0}".format(1+2)
    * 'The sum of 1 + 2 is 3'
    * </code></pre>
    * <p>See Format String Syntax for a description of the various formatting
    * options that can be specified in format strings.
    */
   function format(format_string, *args, **kwargs);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Like find(), but raise ValueError when the substring is not found.
    */
   function int index(string sub, int start=0, int end=length);
   /**
    * @return
    * Return true if all characters in the string are alphanumeric and there is
    * at least one character, false otherwise.
    */
   function boolean isalnum();
   /**
    * @return
    * Return true if all characters in the string are alphabetic and there is at
    * least one character, false otherwise.
    */
   function boolean isalpha();
   /**
    * Return true if all characters in the string are decimal characters 
    * and there is at least one character, false otherwise. Decimal 
    * characters include digit characters, and all characters that 
    * that can be used to form decimal-radix numbers, e.g. U+0660, 
    * ARABIC-INDIC DIGIT ZERO.
    */
   function boolean isdecimal();
   /**
    * @return
    * Return true if there are only digit characters, false otherwise.
    */
   function boolean isdigit();
   /**
    * 
    * Return true if the string is a valid identifier according to the language 
    * definition, section Identifiers and keywords.
    */
   function isidentifier();
   /**
    * @return
    * Return true if all cased characters in the string are lowercase and there
    * is at least one cased character, false otherwise.
    */
   function boolean islower();
   /**
    * Return true if all characters in the string are numeric characters, 
    * and there is at least one character, false otherwise. Numeric 
    * characters include digit characters, and all characters that
    * have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.
    */
   function isnumeric();
   /**
    * Return true if all characters in the string are printable or the
    * string is empty, false otherwise. Nonprintable characters are 
    * those characters defined in the Unicode character database as 
    * “Other” or “Separator”, excepting the ASCII space (0x20) which 
    * is considered printable. (Note that printable characters in this 
    * context are those which should not be escaped when repr() is invoked 
    * on a string. It has no bearing on the handling of strings written to 
    * sys.stdout or sys.stderr.)
    */
   function isprinttable();

   /**
    * @return
    * Return true if there are only whitespace characters in the string and the
    * string is not empty, false otherwise.
    */
   function boolean isspace();
   /**
    * @return
    * Return true if the string is a titlecased string, i.e.  uppercase
    * characters may only follow uncased characters and lowercase characters
    * only cased ones.  Return false otherwise.
    */
   function boolean istitle();
   /**
    * @return
    * Return true if all cased characters in the string are uppercase and there
    * is at least one cased character, false otherwise.
    */
   function boolean isupper();
   /**
    * @param seq        sequence of strings to join
    * @return
    * Return a string which is the concatenation of the strings in the sequence
    * seq.  The separator between elements is the string providing this method.
    */
   function string join(seq);
   /**
    * @param width      margin to left adjust to
    *
    * @return
    * Return the string left justified in a string of length width.  Padding is
    * done using spaces.  The original string is returned if width is less than
    * len(s).
    */
   function string ljust(int width);
   /**
    * @return
    * Return a copy of the string converted to lowercase.
    */
   function string lower();
   /**
    * @return
    * Return a copy of the string with leading whitespace removed.
    */
   function string lstrip();
   /**
    * str.maketrans(x[, y[, z]]) 
    * This static method returns a translation table usable for str.translate().
    *
    * <p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals.
    *
    * <p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.
    */
   function maketrans(x,y=None,z=None);
   /**
    * Split the string at the first occurrence of sep, and return a 3-tuple
    * containing the part before the separator, the separator itself, and 
    * the part after the separator. If the separator is not found, return 
    * a 3-tuple containing the string itself, followed by two empty strings.
    */
   function partition(sep);
   /**
    * @param old        string to search for
    * @param new        string to replace with
    * @param maxsplit   maxinum number of replacements to do
    *
    * @return
    * Return a copy of the string with all occurrences of substring old replaced
    * by new.  If the optional argument maxsplit is given, only the first
    * maxsplit occurrences are replaced.
    */
   function string replace(string old, string new, int maxsplit=maxint);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search to
    * @param end        [optional] ending position to search from
    *
    * @return
    * Return the highest index in the string where substring sub is found, such
    * that sub is contained within s[start,end].  Optional arguments start and
    * end are interpreted as in slice notation.  Return -1 on failure.
    */
   function int rfind(string sub, int start=0, int end=length);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search to
    * @param end        [optional] ending position to search from
    *
    * @return
    * Like rfind() but raises ValueError when the substring sub is not found.
    */
   function int rindex(string sub, int start=0, int end=length);
   /**
    * @param width      margin to right adjust to
    *
    * @return
    * Return the string right justified in a string of length width.  Padding is
    * done using spaces.  The original string is returned if width is less than
    * len(s).
    */
   function string rjust(int width);
   /**
    * @return
    * Return a copy of the string with trailing whitespace removed.
    */
   function string rstrip();
   /**
    * Split the string at the last occurrence of sep, and return a 3-tuple
    * containing the part before the separator, the separator itself, and 
    * the part after the separator. If the separator is not found, return 
    * a 3-tuple containing two empty strings, followed by the string itself.
    */
   function rpartition();
   /**
    * Return a copy of the string with trailing characters removed. The chars 
    * argument is a string specifying the set of characters to be removed. 
    * If omitted or None, the chars argument defaults to removing whitespace. 
    * The chars argument is not a suffix; rather, all combinations of its 
    * values are stripped:
    *
    * <pre><code>
    * >>> '   spacious   '.rstrip()
    * '   spacious'
    * >>> 'mississippi'.rstrip('ipz')
    * 'mississ'
    * </code></pre>
    */
   function rstrip(chars=None);
   /**
    * @param sep        seperator to split string on, default is any whitespace
    * @param maxsplit   maximum number of splits to do
    *
    * @return
    * Return a list of the words in the string, using sep as the delimiter
    * string.  If maxsplit is given, at most maxsplit splits are done.  If sep
    * is not specified or None, any whitespace string is a separator.
    */
   function split(sep=whitespace, int maxsplit=maxint);
   /**
    * @param keepends [optional] retain line breaks?
    * @return
    * Return a list of the lines in the string, breaking at line boundaries.
    * Line breaks are not included in the resulting list unless keepends is
    * given and true.
    */
   function splitlines(keepends=false);
   /**
    * @param prefix     string, prefix to search for
    * @param start      [optional] start search at position
    * @param end        [optional] stop search at position
    *
    * @return
    * Return true if string starts with the prefix, otherwise return false.
    * With optional start, test string beginning at that position.  With
    * optional end, stop comparing string at that position.
    */
   function int startswith(string prefix, int start=0, int end=length);
   /**
    * Return a copy of the string with the leading and trailing characters removed. 
    * The chars argument is a string specifying the set of characters to be removed.
    *  If omitted or None, the chars argument defaults to removing whitespace. The 
    * chars argument is not a prefix or suffix; rather, all combinations of its 
    * values are stripped:
    *
    * <code><pre>
    * >>> '   spacious   '.strip()
    * 'spacious'
    * >>> 'www.example.com'.strip('cmowz.')
    * 'example'
    * </pre></code>
    */
   function string strip(chars=None);
   /**
    * @return
    * Return a copy of the string with uppercase characters converted to
    * lowercase and vice versa.
    */
   function string swapcase();
   /**
    * @return
    * Return a titlecased version of, i.e.  words start with uppercase
    * characters, all remaining cased characters are lowercase.
    */
   function string title();
   /**
    * Return a copy of the s where all characters have been mapped through the map which must be a dictionary of Unicode ordinals(integers) to Unicode ordinals, strings or None. Unmapped characters are left untouched. Characters mapped to None are deleted.
    *
    * <p>A map for translate() is usually best created by str.maketrans().
    *
    * <p>You can use the maketrans() helper function in the string module to create a translation table. For string objects, set the table argument to None for translations that only delete characters:
    *
    * Note: An even more flexible approach is to create a custom character mapping codec using the codecs module (see encodings.cp1251 for an example).
    */

   function string translate(map);
   /**
    * @return
    * Return a copy of the string converted to uppercase.
    */
   function string upper();
   /**
    * Return the numeric string left filled with zeros in a string of length width. A sign prefix is handled correctly. The original string is returned if width is less than len(s).
    */
   function zfill(width);
}
package binascii {
   /**
    * Convert a single line of uuencoded data back to binary and return the binary data. Lines normally contain 45 (binary) bytes, except for the last line. Line data may be followed by whitespace.
    */
   function a2b_uu(string);
   /**
    * Convert binary data to a line of ASCII characters, the return value is the converted line, including a newline char. The length of data should be at most 45.
    */
   function b2a_uu(data);
   /**
    * Convert a block of base64 data back to binary and return the binary data. More than one line may be passed at a time.
    */
   function a2b_base64(string);
   /**
    * Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The length of data should be at most 57 to adhere to the base64 standard.
    */
   function b2a_base64(data);
   /**
    * Convert binary data to a line of ASCII characters in base64 coding. The return value is the converted line, including a newline char. The length of data should be at most 57 to adhere to the base64 standard.
    */
   function a2b_qp(string,header=None);
   /**
    * Convert binary data to a line(s) of ASCII characters in quoted-printable encoding. The return value is the converted line(s). If the optional argument quotetabs is present and true, all tabs and spaces will be encoded. If the optional argument istext is present and true, newlines are not encoded but trailing whitespace will be encoded. If the optional argument header is present and true, spaces will be encoded as underscores per RFC1522. If the optional argument header is present and false, newline characters will be encoded as well; otherwise linefeed conversion might corrupt the binary data stream.
    */
   function b2a_qp(data,quotetabs=None,istext=None,header=None);
   /**
    * Convert binhex4 formatted ASCII data to binary, without doing RLE-decompression. The string should contain a complete number of binary bytes, or (in case of the last portion of the binhex4 data) have the remaining bits zero.
    */
   function a2b_hqx(string);
   /**
    * Perform RLE-decompression on the data, as per the binhex4 standard. The algorithm uses 0x90 after a byte as a repeat indicator, followed by a count. A count of 0 specifies a byte value of 0x90. The routine returns the decompressed data, unless data input data ends in an orphaned repeat indicator, in which case the Incomplete exception is raised.
    */
   function rledecode_hqx(data);
   /**
    * Perform binhex4 style RLE-compression on data and return the result.
    */
   function rlecode_hqx(data);
   /**
    * Perform hexbin4 binary-to-ASCII translation and return the resulting string. The argument should already be RLE-coded, and have a length divisible by 3 (except possibly the last fragment).
    */
   function b2a_hqx(data);
   /**
    * Compute the binhex4 crc value of data, starting with an initial crc and returning the result.
    */
   function crc_hqx(data,crc);
   /**
    * Compute CRC-32, the 32-bit checksum of data, starting with an initial crc. This is consistent with the ZIP file checksum. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm. Use as follows:
    * <pre><code>
    * print(binascii.crc32("hello world"))
    * # Or, in two pieces:
    * crc = binascii.crc32("hello")
    * crc = binascii.crc32(" world", crc)
    * print(crc)
    *</code></pre>
    */
   function crc32(data,crc=None);
   /**
    * Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The resulting string is therefore twice as long as the length of data.
    */
   function b2a_hex(data);
   /**
    * Return the hexadecimal representation of the binary data. Every byte of data is converted into the corresponding 2-digit hex representation. The resulting string is therefore twice as long as the length of data.
    */
   function hexlify(data);
   /**
    * Exception raised on errors. These are usually programming errors.
    */
   Exception Error;
   /**
    * Exception raised on incomplete data. These are usually not programming errors, but may be handled by reading a little more data and trying again.
    */
   Exception Incomplete;
}
interface FSSpec {
   /**
    * The raw data from the FSSpec object, suitable for passing to other applications, for instance. 
    */
   PyObject data;
   /**
    * Return the full pathname of the file described by the FSSpec object. 
    * 
    * @return PyString 
    */
   function PyString as_pathname();
   /**
    * Return the (wdRefNum, parID, name) tuple of the file described by the FSSpec object.
    * 
    * @return PyTuple 
    */
   function PyTuple as_tuple();
   /**
    * Create an Alias object pointing to the file described by this FSSpec. If the optional file parameter is present the alias will be relative to that file, otherwise it will be absolute.
    * 
    * @return PyAlias 
    */
   function PyAlias NewAlias(file=None);
   /**
    * Create a minimal alias pointing to this file. 
    * 
    * @return PyAlias 
    */
   function PyAlias NewAliasMinimal();
   /**
    * Return the 4-char creator and type of the file.
    * 
    * @return PyString 
    */
   function PyString GetCreatorType();
   /**
    * Set the 4-char creator and type of the file. 
    */
   function SetCreatorType(PyString creator,type);
   /**
    * Return a FInfo object describing the finder info for the file.
    * 
    * @return PyFInfo 
    */
   function PyFInfo GetFInfo();
   /**
    * Set the finder info for the file to the values specified in the finfo object. 
    */
   function setFInfo(PyFInfo finfo);
   /**
    * Return a tuple with three floating point values representing the creation date, modification date and backup date of the file. 
    * 
    * @return PyTuple 
    */
   function PyTuple GetDates();
   /**
    * Set the creation, modification and backup date of the file. The values are in the standard floating point format used for times throughout Python. 
    */
   function SetDates(crdate,moddate,backupdate);
}
package struct {
   function PyStruct Struct();
   /**
    * Return a bytes containing the values v1, v2, ... packed according to the given format. The arguments must match the values required by the format exactly
    */
   PyBytes pack(fmt,v1,v2,...);
   /**
    * Pack the values v1, v2, ... according to the given format, write the packed bytes into the writable buffer starting at offset. Note that the offset is a required argument.
    */
   function pack_into(fmt,buffer,offset,v1,v2,...);
   /**
    * Unpack the bytes (presumably packed by pack(fmt, ...)) according to the given format. The result is a tuple even if it contains exactly one item. The bytes must contain exactly the amount of data required by the format (len(bytes) must equal calcsize(fmt)).
    */
   function unpack(fmt,bytes);
   /**
    * Unpack the buffer according to tthe given format. The result is a tuple even if it contains exactly one item. The buffer must contain at least the amount of data required by the format (len(buffer[offset:]) must be at least calcsize(fmt)).
    */
   function unpack_from(fmt,buffer,offset=0);
   /**
    * <p>Return the size of the struct (and hence of the bytes) corresponding to the given format.
    * <p>Format characters have the following meaning; the conversion between C and Python values should be obvious given their types:
    * 
    * <p>Format C Type Python Notes 
    * <dl compact>
    * <dt>x</dt><dd> pad byte no value   </dd>
    * <dt>c</dt><dd> char bytes of length 1   </dd>
    * <dt>b</dt><dd> signed char integer (1) </dd>
    * <dt>B</dt><dd> unsigned char integer   </dd>
    * <dt>? _Bool</dt><dd> bool (2) </dd>
    * <dt>h</dt><dd> short integer   </dd>
    * <dt>H</dt><dd> unsigned short integer   </dd>
    * <dt>i</dt><dd> int integer   </dd>
    * <dt>I</dt><dd> unsigned int integer   </dd>
    * <dt>l</dt><dd> long integer   </dd>
    * <dt>L</dt><dd> unsigned long integer   </dd>
    * <dt>q</dt><dd> long long integer (3) </dd>
    * <dt>Q</dt><dd> unsigned long long integer (3) </dd>
    * <dt>f</dt><dd> float float   </dd>
    * <dt>d</dt><dd> double float   </dd>
    * <dt>s</dt><dd> char[] bytes (1) </dd>
    * <dt>p</dt><dd> char[] bytes (1) </dd>
    * <dt>P</dt><dd> void * integer   </dd>
    * </dl>
    * <p>Notes: 
    * <ol>
    * <li>The c, s and p conversion codes operate on bytes objects, but packing with such codes also supports str objects, which are encoded using UTF-8. 
    * <li>The '?' conversion code corresponds to the _Bool type defined by C99. If this type is not available, it is simulated using a char. In standard mode, it is always represented by one byte. 
    * <li>The 'q' and 'Q' conversion codes are available in native mode only if the platform C compiler supports C long long, or, on Windows, __int64. They are always available in standard modes. 
    * </ol>
    * <p>A format character may be preceded by an integral repeat count. For example, the format string '4h' means exactly the same as 'hhhh'.
    * <p>Whitespace characters between formats are ignored; a count and its format must not contain whitespace though.
    * <p>For the 's' format character, the count is interpreted as the length of the bytes, not a repeat count like for the other format characters; for example, '10s' means a single 10-byte string, while '10c' means 10 characters. For packing, the string is truncated or padded with null bytes as appropriate to make it fit. For unpacking, the resulting bytes object always has exactly the specified number of bytes. As a special case, '0s' means a single, empty string (while '0c' means 0 characters).
    * <p>The 'p' format character encodes a “Pascal string”, meaning a short variable-length string stored in a fixed number of bytes. The count is the total number of bytes stored. The first byte stored is the length of the string, or 255, whichever is smaller. The bytes of the string follow. If the string passed in to pack() is too long (longer than the count minus 1), only the leading count-1 bytes of the string are stored. If the string is shorter than count-1, it is padded with null bytes so that exactly count bytes in all are used. Note that for unpack(), the 'p' format character consumes count bytes, but that the string returned can never contain more than 255 bytes.
    * <p>For the '?' format character, the return value is either True or False. When packing, the truth value of the argument object is used. Either 0 or 1 in the native or standard bool representation will be packed, and any non-zero value will be True when unpacking.
    * <p>By default, C numbers are represented in the machine’s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).
    * <p>Alternatively, the first character of the format string can be used to indicate the byte order, size and alignment of the packed data, according to the following table:
    * <p>Character Byte order Size and alignment 
    * <dl>
    * <dt>@ native</dt><dd> native </dd>
    * <dt>= native</dt><dd> standard </dd>
    * <dt>< little</dt><dd>-endian standard </dd>
    * <dt>> big</dt><dd>-endian standard </dd>
    * <dt>! network</dt><dd> (= big-endian) standard </dd>
    * <dl>
    * 
    * If the first character is not one of these, '@' is assumed.
    * 
    * Native byte order is big-endian or little-endian, depending on the host system. For example, Motorola and Sun processors are big-endian; Intel and DEC processors are little-endian.
    * 
    * Native size and alignment are determined using the C compiler’s sizeof expression. This is always combined with native byte order.
    * 
    * Standard size and alignment are as follows: no alignment is required for any type (so you have to use pad bytes); short is 2 bytes; int and long are 4 bytes; long long (__int64 on Windows) is 8 bytes; float and double are 32-bit and 64-bit IEEE floating point numbers, respectively. _Bool is 1 byte.
    * 
    * Note the difference between '@' and '=': both use native byte order, but the size and alignment of the latter is standardized.
    * 
    * The form '!' is available for those poor souls who claim they can’t remember whether network byte order is big-endian or little-endian.
    * 
    * There is no way to indicate non-native byte order (force byte-swapping); use the appropriate choice of '<' or '>'.
    * 
    * The 'P' format character is only available for the native byte ordering (selected as the default or with the '@' byte order character). The byte order character '=' chooses to use little- or big-endian ordering based on the host system. The struct module does not interpret this as native ordering, so the 'P' format is not available.
    * 
    * Examples (all using native byte order, size and alignment, on a big-endian machine):
    * <pre><code>
    * >>> from struct import *
    * >>> pack('hhl', 1, 2, 3)
    * b'\x00\x01\x00\x02\x00\x00\x00\x03'
    * >>> unpack('hhl', b'\x00\x01\x00\x02\x00\x00\x00\x03')
    * (1, 2, 3)
    * >>> calcsize('hhl')
    * 8
    * </code></pre>
    * Hint: to align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero. For example, the format 'llh0l' specifies two pad bytes at the end, assuming longs are aligned on 4-byte boundaries. This only works when native size and alignment are in effect; standard size and alignment does not enforce any alignment.
    * 
    * Unpacked fields can be named by assigning them to variables or by wrapping the result in a named tuple:
    * <pre><code>
    * >>> record = b'raymond   \x32\x12\x08\x01\x08'
    * >>> name, serialnum, school, gradelevel = unpack('<10sHHb', record)
    *
    * >>> from collections import namedtuple
    * >>> Student = namedtuple('Student', 'name serialnum school gradelevel')
    * >>> Student._make(unpack('<10sHHb', record))
    * Student(name=b'raymond   ', serialnum=4658, school=264, gradelevel=8)
    * </code></pre>
    * @param argc
    * @param argv
    *
    * @return int
    */
   function int calcsize(fmt);
}
package _bisect {
   /**
    * Locate the proper insertion point for item in list to maintain sorted order. The parameters lo and hi may be used to specify a subset of the list which should be considered; by default the entire list is used. If item is already present in list, the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to list.insert(). This assumes that list is already sorted.
    */
   function bisect_left(list,item,lo=None,hi=None);
   /**
    * Similar to bisect_left(), but returns an insertion point which comes after (to the right of) any existing entries of item in list.
    */
   function bisect_right(list,item,lo=None,hi=None);
   /**
    * Alias for bisect_right().
    */
   function bisect(...);
   /**
    * Insert item in list in sorted order. This is equivalent to list.insert(bisect.bisect_left(list, item, lo, hi), item). This assumes that list is already sorted.
    */
   function insort_left(list,item,lo=None,hi=None);
   /**
    * Similar to insort_left(), but inserting item in list after any existing entries of item.
    */
   function insort_right(list,item,lo=None,hi=None);
   /**
    * Alias for insort_right().
    */
   function insort(...);
}
package ctypes {
   /**
    * Returns the address of the memory buffer as integer. obj must be an instance of a ctypes type.
    */
   function addressof(obj);
   /**
    * Returns the alignment requirements of a ctypes type. obj_or_type must be a ctypes type or instance.
    */
   function alignment(obj_or_type);
   /**
    * Returns a light-weight pointer to obj, which must be an instance of a ctypes type. offset defaults to zero, and must be an integer that will be added to the internal pointer value.
    * 
    * <p>byref(obj, offset) corresponds to this C code:
    * <pre><code>
    * (((char *)&obj) + offset)
    * </code></pre>
    * <p>The returned object can only be used as a foreign function call parameter. It behaves similar to pointer(obj), but the construction is a lot faster.
    */
   function byref(obj,offset=None);
   /**
    * This function is similar to the cast operator in C. It returns a new instance of type which points to the same memory block as obj. type must be a pointer type, and obj must be an object that can be interpreted as a pointer.
    */
   function cast(obj,type);
   /**
    * This function creates a mutable character buffer. The returned object is a ctypes array of c_char.
    *
    * <p>init_or_size must be an integer which specifies the size of the array, or a string which will be used to initialize the array items.
    *
    * <p>If a string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the string should not be used.
    *
    * <p>If the first parameter is a unicode string, it is converted into an 8-bit string according to ctypes conversion rules.
    */
   function create_string_buffer(init_or_size,size=None);
   /**
    * <p>This function creates a mutable unicode character buffer. The returned object is a ctypes array of c_wchar.
    *
    * <p>init_or_size must be an integer which specifies the size of the array, or a unicode string which will be used to initialize the array items.
    *
    * <p>If a unicode string is specified as first argument, the buffer is made one item larger than the length of the string so that the last element in the array is a NUL termination character. An integer can be passed as second argument which allows to specify the size of the array if the length of the string should not be used.
    *
    * <p>If the first parameter is a 8-bit string, it is converted into an unicode string according to ctypes conversion rules
    */
   function create_unicode_buffer(init_or_size,size=None);
   /**
    * Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllCanUnloadNow function that the _ctypes extension dll exports.
    */
   function DllCanUnloadNow();
   /**
    * Windows only: This function is a hook which allows to implement in-process COM servers with ctypes. It is called from the DllGetClassObject function that the _ctypes extension dll exports.
    */
   function DllGetClassObject();
   /**
    * Windows only: Returns a textual description of the error code. If no error code is specified, the last error code is used by calling the Windows api function GetLastError.
    */
   function FormatError(code=None);
   /**
    * Windows only: Returns the last error code set by Windows in the calling thread. This function calls the Windows GetLastError() function directly, it does not return the ctypes-private copy of the error code.
    */
   function GetLastError();
   /**
    * Returns the current value of the ctypes-private copy of the system errno variable in the calling thread.
    * 
    */
   function get_errno();
   /**
    * Windows only: returns the current value of the ctypes-private copy of the system LastError variable in the calling thread.
    * 
    */
   function get_last_error();
   /**
    * Same as the standard C memmove library function: copies count bytes from src to dst. dst and src must be integers or ctypes instances that can be converted to pointers.
    * 
    */
   function memmove(dst,src,count);
   /**
    * Same as the standard C memset library function: fills the memory block at address dst with count bytes of value c. dst must be an integer specifying an address, or a ctypes instance.
    * 
    */
   function memset(dst,c,count);
   /**
    * This factory function creates and returns a new ctypes pointer type. Pointer types are cached an reused internally, so calling this function repeatedly is cheap. type must be a ctypes type.
    * 
    */
   function POINTER(type);
   /**
    * This function creates a new pointer instance, pointing to obj. The returned object is of the type POINTER(type(obj)).
    *
    * <p>Note: If you just want to pass a pointer to an object to a foreign function call, you should use byref(obj) which is much faster.
    * 
    */
   function pointer(obj);
   /**
    * This function resizes the internal memory buffer of obj, which must be an instance of a ctypes type. It is not possible to make the buffer smaller than the native size of the objects type, as given by sizeof(type(obj)), but it is possible to enlarge the buffer.
    * 
    */
   function resize(obj,size);
   /**
    * This function sets the rules that ctypes objects use when converting between 8-bit strings and unicode strings. encoding must be a string specifying an encoding, like 'utf-8' or 'mbcs', errors must be a string specifying the error handling on encoding/decoding errors. Examples of possible values are "strict", "replace", or "ignore".
    *
    * set_conversion_mode returns a 2-tuple containing the previous conversion rules. On windows, the initial conversion rules are ('mbcs', 'ignore'), on other systems ('ascii', 'strict').
    *
    */
   function set_conversion_mode(encoding,errors);
   /**
    * Set the current value of the ctypes-private copy of the system errno variable in the calling thread to value and return the previous value.
    * 
    */
   function set_errno(value);
   /**
    * Windows only: set the current value of the ctypes-private copy of the system LastError variable in the calling thread to value and return the previous value.
    * 
    */
   function set_last_error(value);
   /**
    * Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C sizeof() function.
    * 
    */
   function sizeof(obj_or_type);
   /**
    * This function returns the string starting at memory address address. If size is specified, it is used as size, otherwise the string is assumed to be zero-terminated.
    * 
    */
   function string_at(address,size=None);
   /**
    * instance of WindowsError. If code is not specified, GetLastError is called to determine the error code. If descr is not specified, FormatError() is called to get a textual description of the error.
    * 
    */
   function WinError(code=None,descr=None);
   /**
    * This function returns the wide character string starting at memory address address as unicode string. If size is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.
    * 
    */
   function wstring_at(address);
   interface _CData {
      /**
       * This method returns a ctypes instance that shares the buffer of the source object. The source object must support the writeable buffer interface. The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero. If the source buffer is not large enough a ValueError is raised.
       * 
       */
      function from_buffer(source, offset=None);
      /**
       * This method creates a ctypes instance, copying the buffer from the source object buffer which must be readable. The optional offset parameter specifies an offset into the source buffer in bytes; the default is zero. If the source buffer is not large enough a ValueError is raised.
       * 
       */
      function from_buffer_copy(source, offset=None)
      /**
       * This method returns a ctypes type instance using the memory specified by address which must be an integer.
       * 
       */
      function from_address(address);
      /**
       * This method adapts obj to a ctypes type. It is called with the actual object used in a foreign function call when the type is present in the foreign function’s argtypes tuple; it must return an object that can be used as a function call parameter.
       *
       * All ctypes data types have a default implementation of this classmethod that normally returns obj if that is an instance of the type. Some types accept other objects as well.
       * 
       */
      function from_param(obj);
      /**
       * This method returns a ctypes type instance exported by a shared library. name is the name of the symbol that exports the data, library is the loaded shared library.
       * 
       */
      function in_dll(library,name);
      PyObject _b_base_;
      PyObject _b_needsfree_p;
      PyObject _objects;
   }
   interface _SimpleCData {
      /**
       * This attribute contains the actual value of the instance. For integer and pointer types, it is an integer, for character types, it is a single character string, for character pointer types it is a Python string or unicode string.
       *
       * When the value attribute is retrieved from a ctypes instance, usually a new object is returned each time. ctypes does not implement original object return, always a new object is constructed. The same is true for all other ctypes object instances.
       * 
       */
      PyObject value;
   }
   /**
    * Represents the C signed char datatype, and interprets the value as small integer. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_byte {
   }
   /**
    * Represents the C char datatype, and interprets the value as a single character. The constructor accepts an optional string initializer, the length of the string must be exactly one character.
    * 
    */
   interface c_char {
   }
   /**
    * Represents the C char * datatype, which must be a pointer to a zero-terminated string. The constructor accepts an integer address, or a string.
    * 
    */
   interface c_char_p {

   }
   /**
    * Represents the C double datatype. The constructor accepts an optional float initializer.
    * 
    */
   interface c_double {
   }
   /**
    * Represents the C long double datatype. The constructor accepts an optional float initializer. On platforms where sizeof(long double) == sizeof(double) it is an alias to c_double.
    * 
    */
   interface c_longdouble {

   }
   /**
    * Represents the C float datatype. The constructor accepts an optional float initializer.
    * 
    */
   interface c_float {

   }
   /**
    * Represents the C signed int datatype. The constructor accepts an optional integer initializer; no overflow checking is done. On platforms where sizeof(int) == sizeof(long) it is an alias to c_long.
    * 
    */
   interface c_int {

   }
   /**
    * Represents the C 8-bit signed int datatype. Usually an alias for c_byte.
    * 
    */
   interface c_int8 {

   }
   /**
    * Represents the C 16-bit signed int datatype. Usually an alias for c_short.
    * 
    */
   interface c_int16 {
   }
   /**
    * Represents the C 32-bit signed int datatype. Usually an alias for c_int.
    * 
    */
   interface c_int32 {

   }
   /**
    * Represents the C signed long datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_long {
   }
   /**
    * Represents the C signed long long datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_longlong {
   }
   /**
    * Represents the C signed short datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_short {

   }
   /**
    * Represents the C size_t datatype.
    * 
    */
   interface c_size_t {
   }
   /**
    * Represents the C unsigned char datatype, it interprets the value as small integer. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_ubyte {

   }
   /**
    * Represents the C unsigned int datatype. The constructor accepts an optional integer initializer; no overflow checking is done. On platforms where sizeof(int) == sizeof(long) it is an alias for c_ulong.
    * 
    */
   interface c_uint {
   }
   /**
    * Represents the C 8-bit unsigned int datatype. Usually an alias for c_ubyte.
    * 
    */
   interface c_uint8 {
   }
   /**
    * Represents the C 16-bit unsigned int datatype. Usually an alias for c_ushort.
    * 
    */
   interface c_uint16 {
   }
   /**
    * Represents the C 32-bit unsigned int datatype. Usually an alias for c_uint.
    * 
    */
   interface c_uint32 {
   }
   /**
    * Represents the C 64-bit unsigned int datatype. Usually an alias for c_ulonglong.
    * 
    */
   interface c_uint64 {
   }
   /**
    * Represents the C unsigned long datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_ulong {

   }
   /**
    * Represents the C unsigned long long datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_ulonglong {

   }
   /**
    * Represents the C unsigned short datatype. The constructor accepts an optional integer initializer; no overflow checking is done.
    * 
    */
   interface c_ushort {

   }
   /**
    * Represents the C void * type. The value is represented as integer. The constructor accepts an optional integer initializer.
    * 
    */
   interface c_void_p {

   }
   /**
    * Represents the C wchar_t datatype, and interprets the value as a single character unicode string. The constructor accepts an optional string initializer, the length of the string must be exactly one character.
    * 
    */
   interface c_wchar {

   }
   /**
    * Represents the C wchar_t * datatype, which must be a pointer to a zero-terminated wide character string. The constructor accepts an integer address, or a string.
    * 
    */
   interface c_wchar_p {

   }
   /**
    * Represent the C bool datatype (more accurately, _Bool from C99). Its value can be True or False, and the constructor accepts any object that has a truth value.
    * 
    */
   interface c_bool {

   }
   /**
    * Windows only: Represents a HRESULT value, which contains success or error information for a function or method call.
    * 
    */
   interface HRESULT {

   }
   /**
    * Represents the C PyObject * datatype. Calling this without an argument creates a NULL PyObject * pointer.
    * 
    */
   interface py_object {

   }
   function Union(*args,**kw);
   function BigEndianStructure(*args,**kw);
   function LittleEndianStructure(*args,**kw);
   interface Structure {
      function Structure(*args,*kw);
      /**
       * A sequence defining the structure fields. The items must be 2-tuples or 3-tuples. The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type.
       *
       * For integer type fields like c_int, a third optional item can be given. It must be a small positive integer defining the bit width of the field.
       *
       * Field names must be unique within one structure or union. This is not checked, only one field can be accessed when names are repeated.
       *
       * It is possible to define the _fields_ class variable after the class statement that defines the Structure subclass, this allows to create data types that directly or indirectly reference themselves:
       * <pre><code>
       * class List(Structure):
       *     pass
       * List._fields_ = [("pnext", POINTER(List)),
       *                  ...
       *                 ]The _fields_ class variable must, however, be defined before the type is first used (an instance is created, sizeof() is called on it, and so on). Later assignments to the _fields_ class variable will raise an AttributeError.
       * </code></pre>
       * Structure and union subclass constructors accept both positional and named arguments. Positional arguments are used to initialize the fields in the same order as they appear in the _fields_ definition, named arguments are used to initialize the fields with the corresponding name.
       *
       * It is possible to defined sub-subclasses of structure types, they inherit the fields of the base class plus the _fields_ defined in the sub-subclass, if any.
       * 
       */
      PyObject _fields_[];
      /**
       * An optional small integer that allows to override the alignment of structure fields in the instance. _pack_ must already be defined when _fields_ is assigned, otherwise it will have no effect.
       * 
       */
      int _pack_;
      /**
       * An optional sequence that lists the names of unnamed (anonymous) fields. _anonymous_ must be already defined when _fields_ is assigned, otherwise it will have no effect.
       *
       * The fields listed in this variable must be structure or union type fields. ctypes will create descriptors in the structure type that allows to access the nested fields directly, without the need to create the structure or union field.
       *
       * Here is an example type (Windows):
       * <code><pre>
       * class _U(Union):
       *     _fields_ = [("lptdesc", POINTER(TYPEDESC)),
       *                 ("lpadesc", POINTER(ARRAYDESC)),
       *                 ("hreftype", HREFTYPE)]
       *
       * class TYPEDESC(Structure):
       *     _fields_ = [("u", _U),
       *                 ("vt", VARTYPE)]
       * </pre></code>
       *     _anonymous_ = ("u",)The TYPEDESC structure describes a COM data type, the vt field specifies which one of the union fields is valid. Since the u field is defined as anonymous field, it is now possible to access the members directly off the TYPEDESC instance. td.lptdesc and td.u.lptdesc are equivalent, but the former is faster since it does not need to create a temporary union instance:
       * <pre><code>
       * td = TYPEDESC()
       * td.vt = VT_PTR
       * td.lptdesc = POINTER(some_type)
       * td.u.lptdesc = POINTER(some_type)
       * </pre></code>
       */
      PyTuple _anonymous_;
   }
}
package errno {
   int EPERM;
   int ENOENT;
   int ESRCH;
   int EINTR;
   int EIO;
   int ENXIO;
   int E2BIG;
   int ENOEXEC;
   int EBADF;
   int ECHILD;
   int EAGAIN;
   int ENOMEM;
   int EACCES
   int EFAULT
   int ENOTBLK
   int EBUSY
   int EEXIST
   int EXDEV
   int ENODEV
   int ENOTDIR
   int EISDIR
   int EINVAL
   int ENFILE
   int EMFILE
   int ENOTTY
   int ETXTBSY
   int EFBIG
   int ENOSPC
   int ESPIPE
   int EROFS
   int EMLINK
   int EPIPE
   int EDOM
   int ERANGE
   int EDEADLK
   int ENAMETOOLONG
   int ENOLCK
   int ENOSYS
   int ENOTEMPTY
   int ELOOP
   int EWOULDBLOCK
   int ENOMSG
   int EIDRM
   int ECHRNG
   int EL2NSYNC
   int EL3HLT
   int EL3RST
   int ELNRNG
   int EUNATCH
   int ENOCSI
   int EL2HLT
   int EBADE
   int EBADR
   int EXFULL
   int ENOANO
   int EBADRQC
   int EBADSLT
   int EDEADLOCK
   int EBFONT
   int ENOSTR
   int ENODATA
   int ETIME
   int ENOSR
   int ENONET
   int ENOPKG
   int EREMOTE
   int ENOLINK
   int EADV
   int ESRMNT
   int ECOMM
   int EPROTO
   int EMULTIHOP
   int EDOTDOT
   int EBADMSG
   int EOVERFLOW
   int ENOTUNIQ
   int EBADFD
   int EREMCHG
   int ELIBACC
   int ELIBBAD
   int ELIBSCN
   int ELIBMAX
   int ELIBEXEC
   int EILSEQ
   int ERESTART
   int ESTRPIPE
   int EUSERS
   int ENOTSOCK
   int EDESTADDRREQ
   int EMSGSIZE
   int EPROTOTYPE
   int ENOPROTOOPT
   int EPROTONOSUPPORT
   int ESOCKTNOSUPPORT
   int EOPNOTSUPP
   int EPFNOSUPPORT
   int EAFNOSUPPORT
   int EADDRINUSE
   int EADDRNOTAVAIL
   int ENETDOWN
   int ENETUNREACH
   int ENETRESET
   int ECONNABORTED
   int ECONNRESET
   int ENOBUFS
   int EISCONN
   int ENOTCONN
   int ESHUTDOWN
   int ETOOMANYREFS
   int ETIMEDOUT
   int ECONNREFUSED
   int EHOSTDOWN
   int EHOSTUNREACH
   int EALREADY
   int EINPROGRESS
   int ESTALE
   int EUCLEAN
   int ENOTNAM
   int ENAVAIL
   int EISNAM
   int EREMOTEIO
   int EDQUOT
}

package ctypes.util {
   /**
    * Try to find a library and return a pathname. name is the library name without any prefix like lib, suffix like .so, .dylib or version number (this is the form used for the posix linker option -l). If no library can be found, returns None.
    *
    * The exact functionality is system dependent.
    *
    * 
    */
   function find_library(name);
   /**
    * Windows only: return the filename of the VC runtype library used by Python, and by the extension modules. If the name of the library cannot be determined, None is returned.
    *
    * <p>If you need to free memory, for example, allocated by an extension module with a call to the free(void *), it is important that you use the function in the same library that allocated the memory.
    * 
    */
   function find_msvcrt();
}
interface PyDateTime:PyObject {
   int year;
   int month;
   int day;
   int hour;
   int minute;
   int second;
   int microsecond;
   PyObject tzinfo;
}
interface PyDate:PyObject {
   int year;
   int month;
   int day;
   /**
    * Return the current local date. This is equivalent to date.fromtimestamp(time.time()).
    * 
    * 
    * @return PyDate 
    */
   function PyDate today();
   /**
    * Return the local date corresponding to the POSIX timestamp, such as is returned by time.time(). This may raise ValueError, if the timestamp is out of the range of values supported by the platform C localtime function. It’s common for this to be restricted to years from 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by fromtimestamp().
    * 
    * 
    * @return PyDate 
    */
   function PyDate fromtimestamp(float timestamp);
   /**
    * Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. ValueError is raised unless 1 <= ordinal <= date.max.toordinal(). For any date d, date.fromordinal(d.toordinal()) == d.
    * 
    * 
    * @return PyDate 
    */
   function PyDate fromordinal(ordinal);
   int min;
   int max;
   int resolution;
   /**
    * Return a date with the same value, except for those members given new values by whichever keyword arguments are specified. For example, if d == date(2002, 12, 31), then d.replace(day=26) == date(2002, 12, 26).
    * 
    */
   function replace(year,month,day);
   /**
    * Return a time.struct_time such as returned by time.localtime(). The hours, minutes and seconds are 0, and the DST flag is -1. d.timetuple() is equivalent to time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), d.toordinal() - date(d.year, 1, 1).toordinal() + 1, -1))
    * 
    */
   function timetuple();
   /**
    * Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any date object d, date.fromordinal(d.toordinal()) == d.
    * 
    */
   function toordinal();
   /**
    * Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, date(2002, 12, 4).weekday() == 2, a Wednesday. See also isoweekday().
    * 
    */
   function weekday();
   /**
    * Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, date(2002, 12, 4).isoweekday() == 3, a Wednesday. See also weekday(), isocalendar().
    * 
    */
   function isoweekday();
   /**
    * Return a 3-tuple, (ISO year, ISO week number, ISO weekday).
    *
    * The ISO calendar is a widely used variant of the Gregorian calendar. See http://www.phys.uu.nl/ vgent/calendar/isocalendar.htm for a good explanation.
    *
    * The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year.
    *
    * For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004, so that date(2003, 12, 29).isocalendar() == (2004, 1, 1) and date(2004, 1, 4).isocalendar() == (2004, 1, 7).
    *
    *
    * 
    */
   function isocalendar();
   function PyString __str__();
   /**
    * Return a string representing the date, for example date(2002, 12, 4).ctime() == 'Wed Dec 4 00:00:00 2002'. d.ctime() is equivalent to time.ctime(time.mktime(d.timetuple())) on platforms where the native C ctime function (which time.ctime() invokes, but which date.ctime() does not invoke) conforms to the C standard.
    * 
    */
   function ctime();
   /**
    * Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. See section strftime() Behavior.
    */
   function strftime(format);
}
interface PyTime:PyObject {
   int hour;
   int minute;
   int second;
   int microsecond;
   PyObject tzinfo;
}
package datetime {
   PyDate date;
   PyTime time;
   PyDateTime datetime;
   int timedelta;
   PyObject tzinfo;
}
interface PyStruct:PyObject {
   /**
    * Identical to the pack() function, using the compiled format. (len(result) will equal self.size.)
    * 
    */
   function pack(v1,v2,...);
   /**
    * Identical to the pack_into() function, using the compiled format.
    * 
    */
   function pack_into(buffer, offset, v1, v2, ...);
   /**
    * Identical to the unpack() function, using the compiled format. (len(bytes) must equal self.size).
    * 
    */
   function unpack(bytes);
   /**
    * The format string used to construct this Struct object.
    * 
    */
   function format();
   /**
    *  The calculated size of the struct (and hence of the bytes) corresponding to format.
    */
   int size();
}
interface PyBytes: PyObject {
   /**
    * @return
    * Return a copy of the string with only its first character capitalized.
    */
   function string capitalize();
   /**
    * @param width      margin to center text within
    * @return
    * Return centered in a string of length width. Padding is done using spaces.
    */
   function string center(int width);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return the number of occurrences of substring sub in string S[start:end].
    * Optional arguments start and end are interpreted as in slice notation.
    */
   function int count(string sub, int start=0, int end=length);
   /**
    * @param suffix     substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return true if the string ends with the specified suffix, otherwise return
    * false.  With optional start, test beginning at that position.  With
    * optional end, stop comparing at that position.
    */
   function boolean endswith(string suffix, int start=0, int end=length);
   /**
    * @param tabsize    tab setting (default is 8)
    *
    * @return
    * Return a copy of the string where all tab characters are expanded using
    * spaces.  If tabsize is not given, a tab size of 8 characters is assumed.
    */
   function string expandtabs(int tabsize=8);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Return the lowest index in the string where substring sub is found, such
    * that sub is contained in the range [start, end).  Optional arguments start
    * and end are interpreted as in slice notation.  Return -1 if sub is not
    * found.
    *
    * @return int 
    */
   function int find(string sub, int start=0, int end=length);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search from
    * @param end        [optional] ending position to search to
    * @return
    * Like find(), but raise ValueError when the substring is not found.
    */
   function int index(string sub, int start=0, int end=length);
   /**
    * @return
    * Return true if all characters in the string are alphanumeric and there is
    * at least one character, false otherwise.
    */
   function boolean isalnum();
   /**
    * @return
    * Return true if all characters in the string are alphabetic and there is at
    * least one character, false otherwise.
    */
   function boolean isalpha();
   /**
    * Return true if all characters in the string are decimal characters 
    * and there is at least one character, false otherwise. Decimal 
    * characters include digit characters, and all characters that 
    * that can be used to form decimal-radix numbers, e.g. U+0660, 
    * ARABIC-INDIC DIGIT ZERO.
    */
   function boolean isdecimal();
   /**
    * @return
    * Return true if there are only digit characters, false otherwise.
    */
   function boolean isdigit();
   /**
    * @return
    * Return true if all cased characters in the string are lowercase and there
    * is at least one cased character, false otherwise.
    */
   function boolean islower();
   /**
    * Return true if all characters in the string are numeric characters, 
    * and there is at least one character, false otherwise. Numeric 
    * characters include digit characters, and all characters that
    * have the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION ONE FIFTH.
    * 
    */
   function isnumeric();
   /**
    * Return true if all characters in the string are printable or the
    * string is empty, false otherwise. Nonprintable characters are 
    * those characters defined in the Unicode character database as 
    * “Other” or “Separator”, excepting the ASCII space (0x20) which 
    * is considered printable. (Note that printable characters in this 
    * context are those which should not be escaped when repr() is invoked 
    * on a string. It has no bearing on the handling of strings written to 
    * sys.stdout or sys.stderr.)
    * 
    */
   function isprinttable();

   /**
    * @return
    * Return true if there are only whitespace characters in the string and the
    * string is not empty, false otherwise.
    */
   function boolean isspace();
   /**
    * @return
    * Return true if the string is a titlecased string, i.e.  uppercase
    * characters may only follow uncased characters and lowercase characters
    * only cased ones.  Return false otherwise.
    */
   function boolean istitle();
   /**
    * @return
    * Return true if all cased characters in the string are uppercase and there
    * is at least one cased character, false otherwise.
    */
   function boolean isupper();
   /**
    * @param seq        sequence of strings to join
    * @return
    * Return a string which is the concatenation of the strings in the sequence
    * seq.  The separator between elements is the string providing this method.
    */
   function string join(seq);
   /**
    * @param width      margin to left adjust to
    *
    * @return
    * Return the string left justified in a string of length width.  Padding is
    * done using spaces.  The original string is returned if width is less than
    * len(s).
    */
   function string ljust(int width);
   /**
    * @return
    * Return a copy of the string converted to lowercase.
    */
   function string lower();
   /**
    * @return
    * Return a copy of the string with leading whitespace removed.
    */
   function string lstrip();
   /**
    * str.maketrans(x[, y[, z]]) 
    * This static method returns a translation table usable for str.translate().
    *
    * <p>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or None. Character keys will then be converted to ordinals.
    *
    * <p>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result.
    *
    * 
    */
   function maketrans(x,y=None,z=None);
   /**
    * Split the string at the first occurrence of sep, and return a 3-tuple
    * containing the part before the separator, the separator itself, and 
    * the part after the separator. If the separator is not found, return 
    * a 3-tuple containing the string itself, followed by two empty strings.
    * 
    */
   function partition(sep);
   /**
    * @param old        string to search for
    * @param new        string to replace with
    * @param maxsplit   maxinum number of replacements to do
    *
    * @return
    * Return a copy of the string with all occurrences of substring old replaced
    * by new.  If the optional argument maxsplit is given, only the first
    * maxsplit occurrences are replaced.
    */
   function string replace(string old, string new, int maxsplit=maxint);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search to
    * @param end        [optional] ending position to search from
    *
    * @return
    * Return the highest index in the string where substring sub is found, such
    * that sub is contained within s[start,end].  Optional arguments start and
    * end are interpreted as in slice notation.  Return -1 on failure.
    */
   function int rfind(string sub, int start=0, int end=length);
   /**
    * @param sub        substring to search for
    * @param start      [optional] starting position to search to
    * @param end        [optional] ending position to search from
    *
    * @return
    * Like rfind() but raises ValueError when the substring sub is not found.
    */
   function int rindex(string sub, int start=0, int end=length);
   /**
    * @param width      margin to right adjust to
    *
    * @return
    * Return the string right justified in a string of length width.  Padding is
    * done using spaces.  The original string is returned if width is less than
    * len(s).
    */
   function string rjust(int width);
   /**
    * @return
    * Return a copy of the string with trailing whitespace removed.
    */
   function string rstrip();
   /**
    * Split the string at the last occurrence of sep, and return a 3-tuple
    * containing the part before the separator, the separator itself, and 
    * the part after the separator. If the separator is not found, return 
    * a 3-tuple containing two empty strings, followed by the string itself.
    * 
    */
   function rpartition();
   /**
    * Return a copy of the string with trailing characters removed. The chars 
    * argument is a string specifying the set of characters to be removed. 
    * If omitted or None, the chars argument defaults to removing whitespace. 
    * The chars argument is not a suffix; rather, all combinations of its 
    * values are stripped:
    *
    * <pre><code>
    * >>> '   spacious   '.rstrip()
    * '   spacious'
    * >>> 'mississippi'.rstrip('ipz')
    * 'mississ'
    * </code></pre>
    * 
    */
   function rstrip(chars=None);
   /**
    * @param sep        seperator to split string on, default is any whitespace
    * @param maxsplit   maximum number of splits to do
    *
    * @return
    * Return a list of the words in the string, using sep as the delimiter
    * string.  If maxsplit is given, at most maxsplit splits are done.  If sep
    * is not specified or None, any whitespace string is a separator.
    */
   function split(sep=whitespace, int maxsplit=maxint);
   /**
    * @param keepends [optional] retain line breaks?
    * @return
    * Return a list of the lines in the string, breaking at line boundaries.
    * Line breaks are not included in the resulting list unless keepends is
    * given and true.
    */
   function splitlines(keepends=false);
   /**
    * @param prefix     string, prefix to search for
    * @param start      [optional] start search at position
    * @param end        [optional] stop search at position
    *
    * @return
    * Return true if string starts with the prefix, otherwise return false.
    * With optional start, test string beginning at that position.  With
    * optional end, stop comparing string at that position.
    */
   function int startswith(string prefix, int start=0, int end=length);
   /**
    * Return a copy of the string with the leading and trailing characters removed. 
    * The chars argument is a string specifying the set of characters to be removed.
    *  If omitted or None, the chars argument defaults to removing whitespace. The 
    * chars argument is not a prefix or suffix; rather, all combinations of its 
    * values are stripped:
    *
    * <code><pre>
    * >>> '   spacious   '.strip()
    * 'spacious'
    * >>> 'www.example.com'.strip('cmowz.')
    * 'example'
    * </pre></code>
    */
   function string strip(chars=None);
   /**
    * @return
    * Return a copy of the string with uppercase characters converted to
    * lowercase and vice versa.
    */
   function string swapcase();
   /**
    * @return
    * Return a titlecased version of, i.e.  words start with uppercase
    * characters, all remaining cased characters are lowercase.
    */
   function string title();
   /**
    * Return a copy of the s where all characters have been mapped through the map which must be a dictionary of Unicode ordinals(integers) to Unicode ordinals, strings or None. Unmapped characters are left untouched. Characters mapped to None are deleted.
    *
    * <p>A map for translate() is usually best created by str.maketrans().
    *
    * <p>You can use the maketrans() helper function in the string module to create a translation table. For string objects, set the table argument to None for translations that only delete characters:
    *
    * Note: An even more flexible approach is to create a custom character mapping codec using the codecs module (see encodings.cp1251 for an example).
    */

   function string translate(map);
   /**
    * @return
    * Return a copy of the string converted to uppercase.
    */
   function string upper();
   /**
    * Return the numeric string left filled with zeros in a string of length width. A sign prefix is handled correctly. The original string is returned if width is less than len(s).
    * 
    */
   function zfill(width);
}
package audioop {
   /**
    * This exception is raised on all errors, such as unknown number of bytes per sample, etc.
    * 
    */
   Exception error;
   /**
    * Return a fragment which is the addition of the two samples passed as parameters. width is the sample width in bytes, either 1, 2 or 4. Both fragments should have the same length.
    * 
    */
   function add(fragment1,fragment2,width);
   /**
    * Decode an Intel/DVI ADPCM coded fragment to a linear fragment. See the
    * description of lin2adpcm() for details on ADPCM coding. Return a tuple 
    * (sample, newstate) where the sample has the width specified in width.
    * 
    */
   function adpcm2lin(adpcmfragment,width,state);
   /**
    * Convert sound fragments in a-LAW encoding to linearly encoded sound 
    * fragments. a-LAW encoding always uses 8 bits samples, so width refers 
    * only to the sample width of the output fragment here.
    * 
    */
   function alaw2lin(fragment,width);
   /**
    * Return the average over all samples in the fragment.
    * 
    */
   function avg(fragment,width);
   /**
    * Return the average peak-peak value over all samples in the fragment. No filtering is done, so the usefulness of this routine is questionable.
    * 
    */
   function avgpp(fragment,width);
   /**
    * Return a fragment that is the original fragment with a bias added to each sample.
    * 
    */
   function bias(fragment,width,bias);
   /**
    * Return the number of zero crossings in the fragment passed as an argument.
    * 
    */
   function cross(fragment,width);
   /**
    * Return a factor F such that rms(add(fragment, mul(reference, -F))) is
    * minimal, i.e., return the factor with which you should multiply 
    * reference to make it match as well as possible to fragment. The 
    * fragments should both contain 2-byte samples.
    *
    * The time taken by this routine is proportional to len(fragment).
    *
    */
   function findfactor(fragment,reference);
   /**
    * Try to match reference as well as possible to a portion of fragment (which should be the longer fragment). This is (conceptually) done by taking slices out of fragment, using findfactor() to compute the best match, and minimizing the result. The fragments should both contain 2-byte samples. Return a tuple (offset, factor) where offset is the (integer) offset into fragment where the optimal match started and factor is the (floating-point) factor as per findfactor().
    * 
    */
   function finddit(fragment,reference);
   /**
    * Search fragment for a slice of length length samples (not bytes!) with maximum energy, i.e., return i for which rms(fragment[i*2:(i+length)*2]) is maximal. The fragments should both contain 2-byte samples.
    *
    * The routine takes time proportional to len(fragment).
    *
    * 
    */
   function findmax(fragment,length);
   /**
    * Convert samples to 4 bit Intel/DVI ADPCM encoding. ADPCM coding is an adaptive coding scheme, whereby each 4 bit number is the difference between one sample and the next, divided by a (varying) step. The Intel/DVI ADPCM algorithm has been selected for use by the IMA, so it may well become a standard.
    *
    * state is a tuple containing the state of the coder. The coder returns a tuple (adpcmfrag, newstate), and the newstate should be passed to the next call of lin2adpcm(). In the initial call, None can be passed as the state. adpcmfrag is the ADPCM coded fragment packed 2 4-bit values per byte.
    * 
    */
   function lin2adpcm(fragment,width,state);
   /**
    * Convert samples in the audio fragment to a-LAW encoding and return this as a Python string. a-LAW is an audio encoding format whereby you get a dynamic range of about 13 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.
    * 
    */
   function lin2law(fragment,width);
   /**
    * Convert samples between 1-, 2- and 4-byte formats.

    * Note: In some audio formats, such as .WAV files, 16 and 32 bit samples are signed, but 8 bit samples are unsigned. So when converting to 8 bit wide samples for these formats, you need to also add 128 to the result:
    *
    * <pre><code>
    * new_frames = audioop.lin2lin(frames, old_width, 1)
    * new_frames = audioop.bias(new_frames, 1, 128)
    * The same, in reverse, has to be applied when converting from 8 to 16 or 32 bit width samples.
    * </code></pre>
    */
   function lin2lin(fragment,width,newwidth);
   /**
    * Convert samples in the audio fragment to u-LAW encoding and return this as a Python string. u-LAW is an audio encoding format whereby you get a dynamic range of about 14 bits using only 8 bit samples. It is used by the Sun audio hardware, among others.
    * 
    */
   function lin2ulaw(fragment,width);
   /**
    * Return a tuple consisting of the minimum and maximum values of all samples in the sound fragment.
    * 
    */
   function minmax(fragment,width);
   /**
    * Return the maximum of the absolute value of all samples in a fragment.
    * 
    */
   function max(fragment,width);
   /**
    * Return the maximum peak-peak value in the sound fragment.
    * 
    */
   function maxpp(fragment,width);
   /**
    * Return a fragment that has all samples in the original fragment 
    * multiplied by the floating-point value factor. Overflow is silently ignored.
    * 
    */
   function mul(fragment,width,factor);
   /**
    * Convert the frame rate of the input fragment.
    * <p>state is a tuple containing the state of the converter. The converter returns a tuple (newfragment, newstate), and newstate should be passed to the next call of ratecv(). The initial call should pass None as the state.
    *
    * <p>The weightA and weightB arguments are parameters for a simple digital filter and default to 1 and 0 respectively.
    *
    */
   function ratecv(fragment, width, nchannels, inrate, outrate, state, weightA=None, weightB=None);
   /**
    * Reverse the samples in a fragment and returns the modified fragment.
    * 
    */
   function reverse(fragment,width);
   /**
    * <p>Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n).
    *
    * <p>This is a measure of the power in an audio signal.
    *
    */
   function rms(fragment,width);
   /**
    * Convert a stereo fragment to a mono fragment. The left channel is multiplied by lfactor and the right channel by rfactor before adding the two channels to give a mono signal.
    * 
    */
   function tomono(fragment,width,lfactor,rfactor);
   /**
    * Generate a stereo fragment from a mono fragment. Each pair of samples in the stereo fragment are computed from the mono sample, whereby left channel samples are multiplied by lfactor and right channel samples by rfactor.
    * 
    */
   function tostereo(fragment,width,lfactor,rfactor);
   /**
    * Convert sound fragments in u-LAW encoding to linearly encoded sound fragments. u-LAW encoding always uses 8 bits samples, so width refers only to the sample width of the output fragment here.
    * 
    */
   function ulaw2lin(fragment,width);
}


////////////////////////////////////////////////////////////////////////
// OPERATIONS ON XRANGE TYPE
//
/**
 * The xrange type is an immutable sequence which is commonly used for
 * looping.  The advantage of the xrange type is that an xrange object will
 * always take the same amount of memory, no matter the size of the range it
 * represents.  There are no consistent performance advantages.
 * <p>
 * XRange objects behave like tuples, and offer a single method:
 */
interface XRange: PyObject {
   /**
    * @return
    * Return a list object which represents the same values as the xrange object.
    */
   function tolist();
}


////////////////////////////////////////////////////////////////////////
// OPERATIONS ON MUTABLE SEQUENCE TYPES
//
/**
 * List objects support additional operations that allow in-place
 * modification of the object. These operations would be supported by
 * other mutable sequence types (when added to the language) as well.
 * Strings and tuples are immutable.  [A tuple object in this case should
 * be a singleton.]  Sequence types and such objects cannot be modified
 * once created. The following operations are defined on mutable
 * sequence types (where x is an arbitrary object):
 */
interface PyList: PyObject {
   /**
    * same as s[len(s):len(s)] = [x]
    */
   function void append(x);
   /**
    * same as s[len(s):len(s)] = x
    */
   function void extend(x);
   /**
    * return number of i’s for which s[i] == x
    */
   function int count(x);
   /**
    * return smallest i such that s[i] == x
    */
   function int index(x);
   /**
    * same as s[i:i] = [x] if i >= 0
    */
   function void insert(i, x);
   /**
    * same as x = s[i]; del s[i]; return x
    */
   function PyObject pop(i=None);
   /**
    * same as del s[s.index(x)]
    */
   function void remove(x);
   /**
    * reverses the items of s in place
    */
   function void reverse();
   /** 
    * sort the items of s in place
    * 
    * @param cmp
    *     Optional function to compare keys
    * @param key
    *     Optional function to modify key before compare function is called. 
    *     <pre>
    *     def doLowcase(s): return(s.lowcase(s))
    *     list.sort(doLowcase)
    *     </pre>
    *      
    * @param reverse  Indicates whether sort should be in reverse order
    */
   function void sort(int cmp(PyObject a,PyObject b)=None,PyObject key(PyObject key)=None,boolean reverse=false);
}

interface PyFrozenSet: PyObject {
   /**
    * Return True if the set has no elements in common with <i>other</i>. Sets
    * are disjoint if and only if there intersection is the empty set.
    */
   function boolean isdisjoint(other);
   /**
    * Test whether every element in the set is in <i>other</i>.
    */
   function boolean issubset(other);
   /**
    * Test whether the set is a true subset of <i>other</i>, that is,
    * set<=other and set!=other
    */
   function boolean issuperset(other);
   /**
    * Return a new set with elements from both sets.
    */
   function PySet union(other);
   /**
    * Return a new set with elements common to both sets.
    */
   function PySet intersection(other,...);
   /**
    * Return a new set with elements in the set that are not in the others.
    */
   function PySet difference(other,...);
   /**
    * Return a new set with elements in either the set or <i>other</i> but not both.
    */
   function PySet symmetric_difference(other);
   /**
    * Return a new set with a shallow copy of s
    */
   function void copy();
}
interface PySet: PyFrozenSet {
   /**
    * Update the set, adding elements from <i>other</i>
   */
   function void update(other,...);
   /**
    * Update the set, keeping only elements found in it and <i>other</i>
   */
   function void intersection_update(other);
   /**
    * Update the set, keeping only elements found in it and <i>other</i>
   */
   function void difference_update(other);
   /**
    * Update the set, keeping only elements found in either set, but not in both.
   */
   function void symmetric_difference_update(other);

   /**
    * Add element <i>elim</i> to the set.
   */
   function void add(elem);
   /**
    * Remove element <i>elim</i> from the set.  Raises <i>KeyError</i> if <i>elem</i> is 
    * not contained in the set.
   */
   function void remove(elem);
   /**
    * Remove element <i>elim</i> from the set if it is present.
   */
   function void discard(elem);
   /**
    * Remove and return an arbitrary element from the set.  
    *   Raises <i>KeyError</i> if set is empty.
   */
   function PyObject pop();
   /**
    * Remove all elements from the set.
   */
   function PyObject clear();
}
////////////////////////////////////////////////////////////////////////
// OPERATIONS ON MAPPING TYPES
//
/**
 */
interface PyDictionary: PyObject {
   /**
    * remove all items from a
    */
   function void clear();
   /**
    * a (shallow) copy of a
    */
   function PyDictionary copy();
   /**
    * key(k) 1 if a has a key k, else 0
    */
   function boolean has_key(k);
   /**
    * a copy of a's list of (key, value) pairs
    */
   function int items();
   /**
    * a copy of a's list of keys
    */
   function PyList keys();
   /**
    * for k in b.keys(): a[k] = b[k]
    */
   function void update(b);
   /**
    * a copy of a's list of values
    */
   function PyList values();
   /**
    * a[k] if a.has_key(k), else x
    */
   function PyObject get(k, x=None);
   /**
    * a[k] if a.has_key(k), else x (also setting it)
    */
   function PyObject setdefault(k, x=None);
}


////////////////////////////////////////////////////////////////////////
// BUILTIN CONSTANTS
//
/**
 * This object is returned by functions that don’t explicitly return a value.
 * It supports no special operations.  There is exactly one null object,
 * named None (a built-in name).
 */
const None;
/**
 * This object is used by extended slice notation (see the Python Reference
 * Manual).  It supports no special operations.  There is exactly one
 * ellipsis object, named Ellipsis (a built-in name).
 */
const Ellipsis;


////////////////////////////////////////////////////////////////////////
// OPERATIONS ON FILE TYPES
//

/**
 * File objects are implemented using C's stdio package and can be created
 * with the built-in function open() de-scribed in section 2.3, “Built-in
 * Functions.” They are also returned by some other built-in functions and
 * methods, e.g., os.popen() and os.fdopen() and the makefile() method of
 * socket objects.  When a file operation fails for an I/O-related reason,
 * the exception IOError is raised.  This includes situations where the
 * operation is not defined for some reason, like seek() on a tty device or
 * writing a file opened for reading.  Files have the following methods:
 */
interface file: PyObject {

   /**
    * Close the file.  A closed file cannot be read or written anymore.  Any
    * operation which requires that the file be open will raise an IOError after
    * the file has been closed.  Calling close() more than once is allowed.
    */
   function close();
   /**
    * Flush the internal buffer, like stdio’s fflush().  This may be a no-op on
    * some file-like objects.
    */
   function flush();
   /**
    * Return true if the file is connected to a tty(-like) device, else false.
    * Note: If a file-like object is not associated with a real file, this
    * method should not be implemented.
    */
   function isatty();
   /**
    * Return the integer “file descriptor” that is used by the underlying
    * implementation to request I/O operations from the operating system.  This
    * can be useful for other, lower level interfaces that use file descriptors,
    * e.g.  module fcntl or os.read() and friends.  Note: File-like objects
    * which do not have a real file descriptor should not provide this method!
    */
   function fileno();
   /**
    * Read at most size bytes from the file (less if the read hits EOF before
    * obtaining size bytes).  If the size argument is negative or omitted, read
    * all data until EOF is reached.  The bytes are returned as a string object.
    * An empty string is returned when EOF is encountered immediately.  (For
    * certain files, like ttys, it makes sense to continue reading after an EOF
    * is hit.) Note that this method may call the underlying C function fread()
    * more than once in an effort to acquire as close to size bytes as possible.
    *
    * @param size       maximum number of bytes to read
    */
   function read(size=-1);
   /**
    * Read one entire line from the file.  A trailing newline character is kept
    * in the string 7 (but may be absent when a file ends with an incomplete
    * line).  If the size argument is present and non-negative, it is a maximum
    * byte count (including the trailing newline) and an incomplete line may be
    * returned.  An empty string is returned when EOF is hit immediately.  Note:
    * Unlike stdio’s fgets(), the returned string contains null characters
    * (’\0’) if they occurred in the input.
    *
    * @param size       maximum number of bytes to read
    */
   function readline(size=-1);
   /**
    * Read until EOF using readline() and return a list containing the lines
    * thus read.  If the optional sizehint argument is present, instead of
    * reading up to EOF, whole lines totalling approximately sizehint bytes
    * (possibly after rounding up to an internal buffer size) are read.  Objects
    * implementing a file-like interface may choose to ignore sizehint if it
    * cannot be implemented, or cannot be implemented efficiently.
    * seek(offset[, whence ]) Set the file’s current position, like stdio’s
    * fseek().  The whence argument is optional and defaults to 0 (absolute file
    * positioning); other values are 1 (seek relative to the current position)
    * and 2 (seek relative to the file’s end).  There is no return value.
    */
   function readlines(sizehint=default);
   /**
    * Return the file’s current position, like stdio’s ftell().
    */
   function tell();
   /**
    * Truncate the file’s size.  If the optional size argument present, the file
    * is truncated to (at most) that size.  The size defaults to the current
    * position.  Availability of this function depends on the operating system
    * version (for example, not all UNIX versions support this operation).
    */
   function truncate(size=seekpos);
   /**
    * Write a string to the file.  There is no return value.  Note: Due to
    * buffering, the string may not actually show up in the file until the
    * flush() or close() method is called.
    */
   function write(str)
   /**
    * Write a list of strings to the file.  There is no return value.  (The name
    * is intended to match readlines(); writelines() does not add line
    * separators.) File objects also offer a number of other interesting
    * attributes.  These are not required for file-like objects, but should be
    * implemented if they make sense for the particular object.
    */
   function writelines(list);
   /**
    * Boolean indicating the current state of the file object.  This is a
    * read-only attribute; the close() method changes the value.  It may not be
    * available on all file-like objects.
    */
   boolean closed;
   /**
    * The I/O mode for the file.  If the file was created using the open()
    * built-in function, this will be the value of the mode parameter.  This is
    * a read-only attribute and may not be present on all file-like objects.
    */
   attr mode;
   /**
    * If the file object was created using open(), the name of the file.
    * Otherwise, some string that indicates the source of the file object, of
    * the form ‘<...>’.  This is a read-only attribute and may not be present on
    * all file-like objects.
    */
   string name;
   /**
    * Boolean that indicates whether a space character needs to be printed
    * before another value when using the print statement.  Classes that are
    * trying to simulate a file object should also have a writable softspace
    * attribute, which should be initialized to zero.  This will be automatic
    * for most classes implemented in Python (care may be needed for objects
    * that override attribute access); types implemented in C will have to
    * provide a writable softspace attribute.  Note: This attribute is not used
    * to control the print statement, but to allow the implementation of print
    * to keep track of its internal state.
    */
   boolean softspace;
}


interface PySysFlags:PyObject {
    int debug;
    int py3k_warning;
    int division_warning;
    int division_new;
    int inspect;
    int interactive;
    int optimize;
    int done_write_bytecode;
    int no_site;
    int ignore_environment;
    int verbose;
    int unicode;
}
interface PySysFloatInfo:PyObject {
   float epsilon;
   int dlg;
   int mant_dlg;
   float max;
   int max_exp;
   int max_10_exp;
   float min;
   int min_10_exp;
   int radix;
   int rounds;
}
interface PyCode:PyObject {
   PyString co_name;
   int co_argcount;
   int co_nlocals;
   PyString co_varnames[];
   PyString co_cellvars[];
   PyString co_freevars[];
   PyBytes co_code;
   PyTuple co_consts;
   PyString co_names[];
   PyString co_filename;
   int co_firstlineno;
   int co_stacksize;
   int co_flags;
}
interface PyFrame: PyObject {
   PyFrame f_back;
   PyDict f_builtins;
   PyCode f_code;
   PyDict f_globals;
   int f_lasti;
   int f_lineno;
   PyDict f_locals;
   PyObject f_trace;
}
interface PyTraceBack {
   PyFrame tb_frame;
   int tb_lineno;
   int tb_lasti;
   PyTraceBack tb_next;
}
////////////////////////////////////////////////////////////////////////
// BUILTIN SYSTEM PACKAGE
//

/**
 * This module provides access to some variables used or maintained by the 
 * interpreter and to functions that interact strongly with the interpreter.  
 * It is always available.  
 */
package sys {
   
   /**
    * The list of command line arguments passed to a Python script.  argv[0] is 
    * the script name (it is operating system dependent whether this is a full 
    * pathname or not).  If the command was executed using the -c command line 
    * option to the interpreter, argv[0] is set to the string ’-c’.  If no 
    * script name was passed to the Python interpreter, argv has zero length.  
   */
   PyString argv[];
   /**
    * An indicator of the native byte order.  This will have the value ’big’ on 
    * big-endian (most-signigicant byte first) platforms, and ’little’ on 
    * little-endian (least-significant byte first) platforms.  New in version 
    * 2.0.  
   */
   PyString byteorder;
   /**
    * A triple (repo, branch, version) representing the Subversion information of the Python interpreter. repo is the name of the repository, 'CPython'. branch is a string of one of the forms 'trunk', 'branches/name' or 'tags/name'. version is the output of svnversion, if the interpreter was built from a Subversion checkout; it contains the revision number (range) and possibly a trailing ‘M’ if there were local modifications. If the tree was exported (or svnversion was not available), it is the revision of Include/patchlevel.h if the branch is a tag. Otherwise, it is None.
    * 
    */
   PyTuple subversion;
   /**
    * A tuple of strings giving the names of all modules that are compiled into 
    * this Python interpreter.  (This informa-tion is not available in any other 
    * way — modules.keys() only lists the imported modules.) 
   */
   PyTuple builtin_module_names;
   /**
    * A string containing the copyright pertaining to the Python interpreter.
   */
   PyString copyright;
   /**
    * <p>Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function only to drop unnecessary references during reference leak debugging.
    * 
    * <p>This function should be used for internal and specialized purposes only.
    * 
    */
   function _clear_type_cache()
   /**
    * Return a dictionary mapping each thread’s identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the traceback module can build the call stack given such a frame.
    *
    * <p>This is most useful for debugging deadlock: this function does not require the deadlocked threads’ cooperation, and such threads’ call stacks are frozen for as long as they remain deadlocked. The frame returned for a non-deadlocked thread may bear no relationship to that thread’s current activity by the time calling code examines the frame.
    *
    * <p>This function should be used for internal and specialized purposes only.
    *
    */
   function _current_frames();
   /**
    * Integer specifying the handle of the Python DLL. Availability: Windows.
   */
   int dllhandle;
   /**
    * If value is not None, this function prints it to sys.stdout, and saves it in builtins._.
    *
    * sys.displayhook is called on the result of evaluating an expression entered in an interactive Python session. The display of these values can be customized by assigning another one-argument function to sys.displayhook.
    * 
    */
   function displayhook(value);
   /**
    * This function prints out a given traceback and exception to sys.stderr.
    * 
    * When an exception is raised and uncaught, the interpreter calls sys.excepthook with three arguments, the exception class, exception instance, and a traceback object. In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits. The handling of such top-level exceptions can be customized by assigning another three-argument function to sys.excepthook.
    * 
    */
   function excepthook(type,value,traceback);
   /**
    * These objects contain the original values of displayhook and excepthook at the start of the program. They are saved so that displayhook and excepthook can be restored in case they happen to get replaced with broken objects.
    * 
    */
   PyObject __displayhook__,__excepthook__;
   /**
    * This function returns a tuple of three values that give information about 
    * the exception that is currently being handled.  The information returned 
    * is specific both to the current thread and to the current stack frame.  If 
    * the current stack frame is not handling an exception, the information is 
    * taken from the calling stack frame, or its caller, and so on until a stack 
    * frame is found that is handling an exception.  Here, “handling an 
    * exception” is defined as “executing or having executed an except clause.” 
    * For any stack frame, only information about the most recently handled 
    * exception is accessible.  
    * <P>
    * If no exception is being handled anywhere on the stack, a tuple containing 
    * three None values is returned.  Otherwise, the values returned are (type, 
    * value, traceback).  Their meaning is: type gets the exception type of the 
    * exception being handled (a string or class object); value gets the 
    * exception parameter (its associated value or the second argument to raise, 
    * which is always a class instance if the exception type is a class object); 
    * traceback gets a traceback object (see the Reference Manual) which 
    * encapsulates the call stack at the point where the exception originally 
    * occurred.  
    * <P>
    * Warning: assigning the traceback return value to a local variable in a 
    *  function that is handling an exception will cause a circular reference.  
    * This will prevent anything referenced by a local variable in the same 
    *  function or by the traceback from being garbage collected.  Since most 
    * functions don’t need access to the traceback, the best solution is to use 
    * something like type, value = sys.exc info()[:2] to extract only the 
    * exception type and value.  If you do need the traceback, make sure to 
    * delete it after use (best done with a try ...  finally statement) or to 
    * call exc info() in a function that does not itself handle an exception.  
   */
   function exc_info();
   /**
    * @deprecated
    * Deprecated since release 1.5.  Use {@link exc_info()} instead.
    * <P> 
    * Since they are global variables, they are not specific to the current 
    * thread, so their use is not safe in a multi-threaded program.  When no 
    * exception is being handled, exc type is set to None and the other two
    * are undefined.
   */
   attr exc_type, exc_value;
   /**
    * @deprecated
    * Deprecated since release 1.5.  Use {@link exc_info()} instead.
    * <P> 
    * Since they are global variables, they are not specific to the current 
    * thread, so their use is not safe in a multi-threaded program.  When no 
    * exception is being handled, exc type is set to None and the other two
    * are undefined.
   */
   PyTraceBack exc_traceback;
   /**
    * A string giving the site-specific directory prefix where the 
    * platform-dependent Python files are installed; by default, this is also 
    * ’/usr/local’.  This can be set at build time with the --exec-prefix 
    * argument to the configure script.  Specifically, all configuration files 
    * (e.g.  the ‘config.h’ header file) are installed in the di-rectory exec 
    * prefix + ’/lib/pythonversion/config’, and shared library modules are 
    * installed in exec prefix + ’/lib/pythonversion/lib-dynload’, where version 
    * is equal to version[:3].  
   */
   PyString exec_prefix;
   /**
    * A string giving the name of the executable binary for the Python 
    * interpreter, on systems where this makes sense.  
   */
   PyString executable;
   /**
    * Exit from Python.  This is implemented by raising the SystemExit 
    * exception, so cleanup actions specified by finally clauses of try 
    * statements are honored, and it is possible to intercept the exit attempt 
    * at an outer level.  The optional argument arg can be an integer giving the 
    * exit status (defaulting to zero), or another type of object.  If it is an 
    * integer, zero is considered “successful termination” and any nonzero value 
    * is considered “abnormal termination” by shells and the like.  Most systems 
    * require it to be in the range 0-127, and produce undefined results 
    * otherwise.  Some systems have a convention for assigning specific meanings 
    * to specific exit codes, but these are generally underdeveloped; Unix 
    * programs generally use 2 for command line syntax errors and 1 for all 
    * other kind of errors.  If another type of object is passed, None is 
    * equivalent to passing zero, and any other object is printed to sys.stderr 
    * and results in an exit code of 1.  In particular, sys.exit("some error 
    * message") is a quick way to exit a program when an error occurs.  
   */
   function exit(arg=default);
   /**
    * This value is not actually defined by the module, but can be set by the 
    * user (or by a program) to specify a clean-up action at program exit.  When 
    * set, it should be a parameterless function.  This function will be called 
    * when the interpreter exits.  Only one function may be installed in this 
    * way; to allow multiple functions which will be called at termination, use 
    * the atexit module.  Note: the exit function is not called when the program 
    * is killed by a signal, when a Python fatal internal error is detected, or 
    * when os.  exit() is called.  
   */
   attr exitfunc;
   /**
    * The struct sequence flags exposes the status of command line flags. The attributes are read only.
    * 
    */
   PySysFlags flags;
   /**
    * A structseq holding information about the float type. It contains low level information about the precision and internal representation. Please study your system’s float.h for more information.
    * 
    */
   PySysFloatInfo float_info;
   /**
    * Return the interpreter’s “check interval”; see setcheckinterval().
    * 
    */
   function getcheckinterval();
   /**
    * Return the name of the current default string encoding used by the Unicode implementation.
    * 
    */
   function getdefaultencoding();
   /**
    * Return the current value of the flags that are used for dlopen calls. The flag constants are defined in the ctypes and DLFCN modules. Availability: Unix.
    * 
    */
   function dlgopenflags();
   /**
    * Return the name of the encoding used to convert Unicode filenames into system file names, or None if the system default encoding is used. The result value depends on the operating system:
    * <ul>
    * <li>On Windows 9x, the encoding is “mbcs”. 
    * <li>On Mac OS X, the encoding is “utf-8”. 
    *<li>On Unix, the encoding is the user’s preference according to the result of nl_langinfo(CODESET), or None if the nl_langinfo(CODESET) failed. 
    *<li>On Windows NT+, file names are Unicode natively, so no conversion is performed. getfilesystemencoding() still returns 'mbcs', as this is the encoding that applications should use when they explicitly want to convert Unicode strings to byte strings that are equivalent when used as file names
    * </ul>
    * 
    * 
    * @return PyString 
    */
   function PyString getfilesystemencoding();
   /**
    * Return the reference count of the object.  The count returned is generally 
    * one higher than you might expect, because it includes the (temporary) 
    * reference as an argument to getrefcount().  
   */
   function int getrefcount(object);
   /**
    * Return the current value of the recursion limit, the maximum depth of the 
    * Python interpreter stack.  This limit prevents infinite recursion from 
    * causing an overflow of the C stack and crashing Python.  It can be set by 
    * setrecursionlimit().  
   */
   function int getrecursionlimit()
   /**
    * Return a frame object from the call stack. If optional integer depth is given, return the frame object that many calls below the top of the stack. If that is deeper than the call stack, ValueError is raised. The default for depth is zero, returning the frame at the top of the call stack.
    *
    * <p>This function should be used for internal and specialized purposes only.
    *
    */
   function PyFrame _getframe();
   /**
    * Get the profiler function as set by setprofile().
    * 
    */
   function getprofile();
   /**
    * Get the trace function as set by settrace().
    *
    * Note:  The gettrace() function is intended only for implementing debuggers, profilers, coverage tools and the like. Its behavior is part of the implementation platform, rather than part of the language definition, and thus may not be available in all Python implementations.
    * 
    */
   function getrace();
   /**
    * Return a tuple containing five components, describing the Windows version currently running. The elements are major, minor, build, platform, and text. text contains a string while all other values are integers.
    *
    * platform may be one of the following values:
    *
    *  Constant Platform 
    * <dl compact>
    *  <dt>0</dt><dd>(VER_PLATFORM_WIN32s) Win32s on Windows 3.1</dd>
    *  <dt>1</dt><dd> (VER_PLATFORM_WIN32_WINDOWS) Windows 95/98/ME</dd>
    *  <dt>2</dt><dd> (VER_PLATFORM_WIN32_NT) Windows NT/2000/XP/x64</dd>
    *  <dt>3</dt><dd> (VER_PLATFORM_WIN32_CE) Windows CE</dd>
    * </dl>
    *  
    *  <p>This function wraps the Win32 GetVersionEx function; see the Microsoft documentation for more information about these fields.
    *  
    *  <p>Availability: Windows.
    * 
    */
   function getwindowsversion();
   /**
    * The version number encoded as a single integer.  This is guaranteed to 
    * increase with each version, including proper support for non-production 
    * releases.  For example, to test that the Python interpreter is at least 
    * version 1.5.2, use: 
    * <PRE>
    * if sys.hexversion >= 0x010502F0:
    * # use some advanced feature
    * ...
    * else:
    * # use an alternative implementation or warn the user
    * ...
    * </PRE>
    * This is called ‘hexversion’ since it only really looks meaningful when 
    * viewed as the result of passing it to the built-in hex() function.  The 
    * version info value may be used for a more human-friendly encoding of the 
    * same information.  New in version 1.5.2.  
   */
   int hexversion;
   /**
    * Enter string in the table of “interned” strings and return the interned string – which is string itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup – if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.
    *
    * Interned strings are not immortal; you must keep a reference to the return value of intern() around to benefit from it.
    *
    * 
    */
   void intern(PyString string);
   /**
    * These three variables are not always defined; they are set when an 
    * exception is not handled and the interpreter prints an error message and a 
    * stack traceback.  Their intended use is to allow an interactive user to 
    * import a debugger module and engage in post-mortem debugging without 
    * having to re-execute the command that caused the error.  (Typical use is 
    * ‘import pdb; pdb.pm()’ to enter the post-mortem debugger; see the chapter 
    * “The Python Debugger” for more information.) 
    * <P>
    * The meaning of the variables is the same as that of the return values from 
    * exc info() above.  (Since there is only one interactive thread, 
    * thread-safety is not a concern for these variables, unlike for exc type 
    * etc.) 
   */
   attr last_type, last_value;
   /**
    * These three variables are not always defined; they are set when an 
    * exception is not handled and the interpreter prints an error message and a 
    * stack traceback.  Their intended use is to allow an interactive user to 
    * import a debugger module and engage in post-mortem debugging without 
    * having to re-execute the command that caused the error.  (Typical use is 
    * ‘import pdb; pdb.pm()’ to enter the post-mortem debugger; see the chapter 
    * “The Python Debugger” for more information.) 
    * <P>
    * The meaning of the variables is the same as that of the return values from 
    * exc info() above.  (Since there is only one interactive thread, 
    * thread-safety is not a concern for these variables, unlike for exc type 
    * etc.) 
   */
   PyTraceBack last_traceback;
   /**
    * The largest positive integer supported by Python’s regular integer type.  
    * This is at least 2**31-1.  The largest negative integer is -maxint-1 – the 
    * asymmetry results from the use of 2’s complement binary arithmetic.  
   */
   const int maxint;
   /**
    * An integer giving the largest supported code point for a Unicode character. The value of this depends on the configuration option that specifies whether Unicode characters are stored as UCS-2 or UCS-4.
    * 
    */
   const int maxunicode;
   /**
    * This is a dictionary that maps module names to modules which have already 
    * been loaded.  This can be manip-ulated to force reloading of modules and 
    * other tricks.  Note that removing a module from this dictionary is not the 
    * same as calling reload() on the corresponding module object.  
   */
   attr modules;
   /**
    * A list of strings that specifies the search path for modules.  Initialized 
    * from the environment variable $PYTHON-PATH, or an installation-dependent 
    * default.  
    * <P>
    * The first item of this list, path[0], is the directory containing the 
    * script that was used to invoke the Python interpreter.  If the script 
    * directory is not available (e.g.  if the interpreter is invoked 
    * interactively or if the script is read from standard input), path[0] is 
    * the empty string, which directs Python to search modules in the current 
    * directory first.  Notice that the script directory is inserted before the 
    * entries inserted as a result of $PYTHON-PATH.  
   */
   PyString path[];
   /**
    * This string contains a platform identifier, e.g.  ’sunos5’ or ’linux1’.  
    * This can be used to append platform-specific components to path, for 
    * instance.  
   */
   PyString platform;
   /**
    * A string giving the site-specific directory prefix where the platform 
    * independent Python files are installed; by default, this is the string 
    * ’/usr/local’.  This can be set at build time with the --prefix argument to 
    * the configure script.  The main collection of Python library modules is 
    * installed in the directory prefix + ’/lib/pythonversion’ while the 
    * platform independent header files (all except ‘config.h’) are stored in 
    * prefix + ’/include/pythonversion’, where version is equal to version[:3].  
   */
   PyString prefix;
   /**
    * Strings specifying the primary and secondary prompt of the interpreter.  
    * These are only defined if the interpreter is in interactive mode.  Their 
    * initial values in this case are ’>>> ’ and ’...  ’.  If a non-string 
    * object is assigned to either variable, its str() is re-evaluated each time 
    * the interpreter prepares to read a new interactive command; this can be 
    * used to implement a dynamic prompt.  
   */
   PyString ps1,ps2;
   /**
    * If this is true, Python won’t try to write .pyc or .pyo files on the import of source modules. This value is initially set to True or False depending on the -B command line option and the PYTHONDONTWRITEBYTECODE environment variable, but you can set it yourself to control bytecode file generation.
    * 
    */
   bool dont_write_bytecode;
   /**
    * Set the interpreter’s “check interval”.  This integer value determines how 
    * often the interpreter checks for periodic things such as thread switches 
    * and signal handlers.  The default is 10, meaning the check is performed 
    * every 10 Python virtual instructions.  Setting it to a larger value may 
    * increase performance for programs using threads.  Setting it to a value <= 
    * 0 checks every virtual instruction, maximizing responsiveness as well as 
    * overhead.  
   */
   function setcheckinterval(interval);
   /**
    * Set the current default string encoding used by the Unicode implementation. If name does not match any available encoding, LookupError is raised. This function is only intended to be used by the site module implementation and, where needed, by sitecustomize. Once used by the site module, it is removed from the sys module’s namespace.
    * 
    */
   function setdefaultencoding(PyString name);
   /**
    * Set the flags used by the interpreter for dlopen calls, such as when the interpreter loads extension modules. Among other things, this will enable a lazy resolving of symbols when importing a module, if called as sys.setdlopenflags(0). To share symbols across extension modules, call as sys.setdlopenflags(ctypes.RTLD_GLOBAL). Symbolic names for the flag modules can be either found in the ctypes module, or in the DLFCN module. If DLFCN is not available, it can be generated from /usr/include/dlfcn.h using the h2py script. Availability: Unix.
    * 
    */
   function setdlopenflags(n);
   /**
    * Set the system’s profile function, which allows you to implement a Python 
    * source code profiler in Python.  See the chapter on the Python Profiler.  
    * The system’s profile function is called similarly to the system’s trace 
    *  function (see settrace()), but it isn’t called for each executed line of 
    * code (only on call and return and when an exception occurs).  Also, its 
    * return value is not used, so it can just return None.  
   */
   function setprofile(profilefunc);
   /**
    * Set the maximum depth of the Python interpreter stack to limit.  This 
    * limit prevents infinite recursion from causing an overflow of the C stack 
    * and crashing Python.  
    * <P>
    * The highest possible limit is platform-dependent.  A user may need to set 
    * the limit higher when she has a program that requires deep recursion and a 
    * platform that supports a higher limit.  This should be done with care, 
    * because a too-high limit can lead to a crash.  
   */
   function setrecursionlimit(int limit);
   /**
    * Set the system’s trace function, which allows you to implement a Python 
    * source code debugger in Python.  See section “How It Works” in the chapter 
    * on the Python Debugger.  
    * 
    * file stdin,stdout,stderr;
    * 
    * File objects corresponding to the interpreter’s standard input, output and 
    * error streams.  stdin is used for all interpreter input except for scripts 
    * but including calls to input() and raw input().  stdout is used for the 
    * output of print and expression statements and for the prompts of input() 
    * and raw input().  The interpreter’s own prompts and (almost all of) its 
    * error messages go to stderr.  stdout and stderr needn’t be built-in file 
    * objects: any object is acceptable as long as it has a write() method that 
    * takes a 30 Chapter 3.  Python Runtime Services.string argument.  (Changing 
    * these objects doesn’t affect the standard I/O streams of processes 
    * executed by os.popen(), os.system() or the exec*() family of functions in 
    * the os module.) 
   */
   function settrace(tracefunc);
   /**
    * These objects contain the original values of stdin, stderr and stdout at 
    * the start of the program.  They are used during finalization, and could be 
    * useful to restore the actual files to known working file objects in case 
    * they have been overwritten with a broken object.  
   */
   file __stdin__,__stdout__,__stderr__;
   /**
    * When this variable is set to an integer value, it determines the maximum 
    * number of levels of traceback infor-mation printed when an unhandled 
    * exception occurs.  The default is 1000.  When set to 0 or less, all 
    * traceback information is suppressed and only the exception type and value 
    * are printed.  
   */
   int tracebacklimit;
   /**
    * A string containing the version number of the Python interpreter plus 
    * additional information on the build num-ber and compiler used.  It has a 
    * value of the form ’version (#build number, build date, build time) 
    * [compiler]’.  The first three characters are used to identify the version 
    * in the installation directories (where appropriate on each platform).  An 
    * example: 
    * <PRE>
    * >>> import sys
    * >>> sys.version
    * ’1.5.2 (#0 Apr 13 1999, 10:51:12) [MSC 32 bit (Intel)]’
    * </PRE>
   */
   PyString version;
   /**
    * The C API version for this interpreter. Programmers may find this useful when debugging version conflicts between Python and extension modules.
    * 
    */
   int api_version;
   /**
    * A tuple containing the five components of the version number: major, 
    * minor, micro, releaselevel, and serial.  All values except releaselevel 
    * are integers; the release level is ’alpha’, ’beta’, ’candidate’, or 
    * ’final’.  The version info value corresponding to the Python version 2.0 
    * is (2, 0, 0, ’final’, 0).  New in version 2.0.  
   */
   attr version_info;
   /**
    * This is an implementation detail of the warnings framework; do not modify this value. Refer to the warnings module for more information on the warnings framework.
    * 
    */
   PyList warnoptions;
   /**
    * The version number used to form registry keys on Windows platforms.  This 
    * is stored as string resource 1000 in the Python DLL.  The value is 
    * normally the first three characters of version.  It is provided in the sys 
    * module for informational purposes; modifying this value has no effect on 
    * the registry keys used by Python.  Availability: Windows.  
   */
   PyString winver;
}


////////////////////////////////////////////////////////////////////////
// BUILTIN GC PACKAGE
//
/**
 * The gc module is only available if the interpreter was built with the 
 * optional cyclic garbage detector (enabled by default).  If this was not 
 * enabled, an ImportError is raised by attempts to import this module.  
 * 
 * This module provides an interface to the optional garbage collector.  It 
 * provides the ability to disable the collector, tune the collection 
 * frequency, and set debugging options.  It also provides access to 
 * unreachable objects that the collector found but cannot free.  Since the 
 * collector supplements the reference counting already used in Python, you 
 * can disable the collector if you are sure your program does not create 
 * reference cycles.  Automatic collection can be disabled by calling 
 * gc.disable().  To debug a leaking program call gc.set debug(gc.DEBUG 
 * LEAK).  
 * 
 * The gc module provides the following functions:
 */
package gc {

   /**
    * Enable automatic garbage collection.
   */
   function enable();
   /**
    * Disable automatic garbage collection.
   */
   function disable();
   /**
    * Returns true if automatic collection is enabled.
   */
   function boolean isenabled();
   /**
    * Run a full collection.  All generations are examined and the number of 
    * unreachable objects found is returned.  
   */
   function collect();
   /**
    * Set the garbage collection debugging flags.  Debugging information will be 
    * written to sys.stderr.  See below for a list of debugging flags which can 
    * be combined using bit operations to control debugging.
   */
   function set_debug(DEBUG_FLAGS flags);
   /**
    * Return the debugging flags currently set.
   */
   function int get_debug();
   /**
    * Set the garbage collection thresholds (the collection frequency).  Setting 
    * threshold0 to zero disables collection.  
    * <P>
    * The GC classifies objects into three generations depending on how many 
    * collection sweeps they have survived.  New objects are placed in the 
    * youngest generation (generation 0).  If an object survives a collection it 
    * is moved into the next older generation.  Since generation 2 is the oldest 
    * generation, objects in that generation remain there after a collection.  
    * In order to decide when to run, the collector keeps track of the number 
    * object allocations and deallocations since the last collection.  When the 
    * number of allocations minus the number of deallocations exceeds 
    * threshold0, collection starts.  Initially only generation 0 is examined.  
    * If generation 0 has been examined more than threshold1 times since 
    * generation 1 has been examined, then generation 1 is examined as well.  
    * Similarly, threshold2 controls the number of collections of generation 1 
    * before collecting generation 2.  
   */
   function set_threshold(threshold0, threshold1=default, threshold2=default);
   /**
    * Return the current collection thresholds as a tuple of (threshold0, 
    * threshold1, threshold2).  The following variable is provided for read-only 
    * access: 
   */
   function get_threshold();
   /**
    * A list of objects which the collector found to be unreachable but could 
    * not be freed (uncollectable objects).  Objects that have del () methods 
    * and create part of a reference cycle cause the entire reference cycle to 
    * be uncollectable.  If DEBUG SAVEALL is set, then all unreachable objects 
    * will be added to this list rather than freed.  
    * <P>
    * The following constants are provided for use with set debug():
   */
   attr garbage;
   
   enum /*DEBUG_FLAGS*/ {
      /**
       * Print statistics during collection.  This information can be useful when 
       * tuning the collection frequency.  
       */
      DEBUG_STATS
      /**
       * Print information on collectable objects found.
       */
      DEBUG_COLLECTABLE
      /**
       * Print information of uncollectable objects found (objects which are not 
       * reachable but cannot be freed by the collector).  These objects will be 
       * added to the garbage list.  
       */
      DEBUG_UNCOLLECTABLE
      /**
       * When DEBUG COLLECTABLE or DEBUG UNCOLLECTABLE is set, print information 
       * about instance objects found.  
       */
      DEBUG_INSTANCES
      /**
       * When DEBUG COLLECTABLE or DEBUG UNCOLLECTABLE is set, print information 
       * about objects other than instance objects found.  
       */
      DEBUG_OBJECTS
      /**
       * When set, all unreachable objects found will be appended to garbage rather 
       * than being freed.  This can be useful for debugging a leaking program.  
       */
      DEBUG_SAVEALL
      /**
       * The debugging flags necessary for the collector to print information about 
       * a leaking program (equal to DEBUG_COLLECTABLE | DEBUG_UNCOLLECTABLE | 
       * DEBUG_INSTANCES | DEBUG_OBJECTS | DEBUG_SAVEALL).  
       */
      DEBUG_LEAK
   }

}


////////////////////////////////////////////////////////////////////////
// BUILTIN OPERATOR PACKAGE
//

/**
 * The operator module exports a set of functions implemented in C 
 * corresponding to the intrinsic operators of Python.  
 * <P>
 * For example, operator.add(x, y) is equivalent to the expression x+y.  The 
 * function names are those used for special class methods; variants without 
 * leading and trailing ‘ ’ are also provided for convenience.  
 * <P>
 * The operator module defines the following functions:
 */
package operator {

   // Return a + b, for a and b numbers.
   function add(a, b); function __add__(a, b);
   // Return a - b.
   function sub(a, b); function __sub__(a, b);

   // Return a * b, for a and b numbers.
   function mul(a, b); function __mul__(a, b);

   // Return a / b.
   function div(a, b); function __div__(a, b);

   // Return a % b.
   function mod(a, b); function __mod__(a, b);

   // Return o negated.
   function neg(o); function __neg__(o);

   // Return o positive.
   function pos(o); function __pos__(o);

   // Return the absolute value of o.
   function abs(o); function __abs__(o);

   // Return the inverse of o.
   // The names invert() and invert () were added in Python 2.0.
   function inv(o); function __inv__(o);

   // Return a shifted left by b.
   function lshift(a, b); function __lshift__(a, b);

   // Return a shifted right by b.
   function rshift(a, b); function __rshift__(a, b);

   // Return the bitwise and of a and b.
   function and (a, b); function __and__(a, b);

   // Return the bitwise or of a and b.
   function or (a, b); function __or__(a, b);

   // Return the bitwise exclusive or of a and b.
   function xor(a, b); function __xor__(a, b);

   // Return the outcome of not o. (Note that there is no not () method for object instances; only the inter-preter core defines this operation.)
   function not (o); function __not__(o);

   // Return 1 if o is true, and 0 otherwise.
   function truth(o);

   // Return a + b for a and b sequences.
   function concat(a, b); function __concat__(a, b);

   // Return a * b where a is a sequence and b is an integer.
   function repeat(a, b); function __repeat__(a, b);

   // Return the outcome of the test b in a. Note the reversed operands. The name contains () was added in Python 2.0.
   function contains(a, b); function __contains__(a, b);

   // Deprecated since release 2.0. Use contains() instead.
   // Alias for contains().
   function sequenceIncludes(...);

   // Return the number of occurrences of b in a.
   function countOf(a, b);

   // Return the index of the first of occurrence of b in a.
   function indexOf(a, b);

   // Return the value of a at index b.
   function getitem(a, b); function __getitem__(a, b);

   // Set the value of a at index b to c.
   function setitem(a, b, c); function __setitem__(a, b, c);

   // Remove the value of a at index b.
   function delitem(a, b); function __delitem__(a, b);

   // Return the slice of a from index b to index c-1.
   function getslice(a, b, c); function __getslice__(a, b, c);

   // Set the slice of a from index b to index c-1 to the sequence v.
   function setslice(a, b, c, v); function __setslice__(a, b, c, v);

   // Delete the slice of a from index b to index c-1.
   // 
   // The operator also defines a few predicates to test the type of objects.  
   // Note: Be careful not to misinterpret the results of these functions; only 
   // isCallable() has any measure of reliability with instance objects.  For 
   // example: 
   // <PRE>
   // class C:
   // ... pass
   // ...
   // >>> import operator
   // >>> o = C()
   // >>> operator.isMappingType(o)
   // </PRE>
   function delslice(a, b, c); function __delslice__(a, b, c);

   // Deprecated since release 2.0. Use the callable() built-in function instead.
   // 
   // Returns true if the object o can be called like a function, otherwise it 
   // returns false.  True is returned for functions, bound and unbound methods, 
   // class objects, and instance objects which support the call () method.  
   function isCallable(o);

   // Returns true if the object o supports the mapping interface.  This is true 
   // for dictionaries and all instance objects.  Warning: There is no reliable 
   // way to test if an instance supports the complete mapping protocol since 
   // the interface itself is ill-defined.  This makes this test less useful 
   // than it otherwise might be.  
   function isMappingType(o)

   // Returns true if the object o represents a number.  This is true for all 
   // numeric types implemented in C, and for all instance objects.  Warning: 
   // There is no reliable way to test if an instance supports the complete 
   // numeric interface since the interface itself is ill-defined.  This makes 
   // this test less useful than it otherwise might be.  
   function isNumberType(o);

   // Returns true if the object o supports the sequence protocol.  This returns 
   // true for all objects which define se-quence methods in C, and for all 
   // instance objects.  Warning: There is no reliable way to test if an 
   // instance supports the complete sequence interface since the interface 
   // itself is ill-defined.  This makes this test less useful than it otherwise 
   // might be.  
   // <P>
   // Example: Build a dictionary that maps the ordinals from 0 to 256 to their 
   // character equivalents.  
   // <PRE>
   // >>> import operator
   // >>> d = {}
   // >>> keys = range(256)
   // >>> vals = map(chr, keys)
   // >>> map(operator.setitem, [d]*len(keys), keys, vals)
   // </PRE>
   function isSequenceType(o);

}


////////////////////////////////////////////////////////////////////////
// BUILTIN NEW PACKAGE
//

/**
 * 
 * The new module allows an interface to the interpreter object creation 
 * functions.  This is for use primarily in marshal-type functions, when a 
 * new object needs to be created “magically” and not by using the regular 
 * creation functions.  This module provides a low-level interface to the 
 * interpreter, so care must be exercised when using this module.  
 * <P>
 * The new module defines the following functions:
 */
package new {

   /**
    * This function creates an instance of class with dictionary dict without 
    * calling the init () constructor.  
    * <P>
    * Note that there are no guarantees that the object will be in a consistent state.
    */
   function instance(class, dict);
   /**
    * This function will return a method object, bound to instance, or unbound 
    * if instance is None.  function must be callable, and instance must be an 
    * instance object or None.  
    */
   function instancemethod(function, instance, class);
   /**
    * Returns a (Python) function with the given code and globals.  If name is 
    * given, it must be a string or None.  If it is a string, the function will 
    * have the given name, otherwise the function name will be taken from 
    * code.co name.  
    * <P>
    * If argdefs is given, it must be a tuple and will be used to determine the 
    * default values of parameters.  
    */
   function(code, globals, name=defaults, argdefs=defaults);
   /**
    * This function is an interface to the PyCode New() C function.
    */
   function code(argcount, nlocals, stacksize, flags, codestring, constants, names, varnames, filename, name, firstlineno, lnotab);
   /**
    * This function returns a new module object with name name. name must be a string.
    */
   function module(name);
   /**
    * This function returns a new class object, with name name, derived from 
    * baseclasses (which should be a tuple of classes) and with namespace dict.  
    */
   function classobj(name, baseclasses, dict);

}

package math {
   /**
    * Return the ceiling of x, the smallest integer greater than or equal to
    * x. If x is not a float, delegates to x.__ceil__(), which should return
    * an Integral value.
    * 
    * <p>For the ceil(), floor(), and modf() functions, note that all floating-point
    * numbers of sufficiently large magnitude are exact integers. Python floats 
    * typically carry no more than 53 bits of precision (the same as the platform 
    * C double type), in which case any float x with abs(x) >= 2**52 necessarily 
    * has no fractional bits.
    *
    */
   function ceil(x);
   /**
    * Return x with the sign of y. copysign copies the sign bit of an IEEE
    * 754 float, copysign(1, -0.0) returns -1.0.
    * 
    */
   function copysign(x,y);
   /**
    * Return the absolute value of x.
    * 
    */
   function fabs(x);
   /**
    * Return x factorial. Raises ValueError if x is not integral or is negative.
    * 
    */
   function factorial(x);
   /**
    * Return the floor of x, the largest integer less than or equal to x. If x is 
    * not a float, delegates to x.__floor__(), which should return an Integral value.
    * 
    * <p>For the ceil(), floor(), and modf() functions, note that all floating-point
    * numbers of sufficiently large magnitude are exact integers. Python floats 
    * typically carry no more than 53 bits of precision (the same as the platform 
    * C double type), in which case any float x with abs(x) >= 2**52 necessarily 
    * has no fractional bits.
    *
    */
   function floor(x);
   /**
    * Return fmod(x, y), as defined by the platform C library. Note that the Python 
    * expression x % y may not return the same result. The intent of the C standard 
    * is that fmod(x, y) be exactly (mathematically; to infinite precision) equal to 
    * x - n*y for some integer n such that the result has the same sign as x and 
    * magnitude less than abs(y). Python’s x % y returns a result with the sign 
    * of y instead, and may not be exactly computable for float arguments. For 
    * example, fmod(-1e-100, 1e100) is -1e-100, but the result of 
    * Python’s -1e-100 % 1e100 is 1e100-1e-100, which cannot be represented exactly 
    * as a float, and rounds to the surprising 1e100. For this reason, function 
    * fmod() is generally preferred when working with floats, while Python’s x % y 
    * is preferred when working with integers.
    * 
    */
   function fmod(x,y);
   /**
    * Return the mantissa and exponent of x as the pair (m, e). m is a float and e is 
    * an integer such that x == m * 2**e exactly. If x is zero, returns (0.0, 0), 
    * otherwise 0.5 <= abs(m) < 1. This is used to “pick apart” the internal 
    * representation of a float in a portable way.
    * 
    * <p>Note: Note that frexp() and modf() have a different call/return 
    * pattern than their C equivalents: they take a single argument and return a 
    * pair of values, rather than returning their second return value through an 
    * ‘output parameter’ (there is no such thing in Python).
    *
    */
   function frexp(x);
   /**
    * Return an accurate floating point sum of values in the iterable. Avoids 
    * loss of precision by tracking multiple intermediate partial sums. The 
    * algorithm’s accuracy depends on IEEE-754 arithmetic guarantees and the 
    * typical case where the rounding mode is half-even.
    *
    * <p>Note: The accuracy of fsum() may be impaired on builds that use extended 
    * precision addition and then double-round the results.
    * 
    */
   function fsum(iterable);
   /**
    * Checks if the float x is positive or negative infinite.
    * 
    */
   function isinf(x);
   /**
    * Checks if the float x is a NaN (not a number). NaNs are part of the IEEE
    * 754 standards. Operation like but not limited to inf * 0, inf / inf or 
    * any operation involving a NaN, e.g. nan * 1, return a NaN.
    * 
    */
   function isnan(x);
   /**
    * Return x * (2**i). This is essentially the inverse of function frexp().
    * 
    */
   function ldexp(x,i);
   /**
    * Return the fractional and integer parts of x. Both results carry the sign of x, 
    * and both are floats.
    * <p>Note: Note that frexp() and modf() have a different call/return 
    * pattern than their C equivalents: they take a single argument and return a 
    * pair of values, rather than returning their second return value through an 
    * ‘output parameter’ (there is no such thing in Python).
    * <p>For the ceil(), floor(), and modf() functions, note that all floating-point
    * numbers of sufficiently large magnitude are exact integers. Python floats 
    * typically carry no more than 53 bits of precision (the same as the platform 
    * C double type), in which case any float x with abs(x) >= 2**52 necessarily 
    * has no fractional bits.
    */
   function modf(x);
   /**
    * Return the Real value x truncated to an Integral (usually a long integer). 
    * Delegates to x.__trunc__().
    */
   function trunc(x);
   /**
    * Return e**x.
    * 
    */
   function exp(x);
   /**
    * Return the logarithm of x to the given base. If the base is not specified, return 
    * the natural logarithm of x (that is, the logarithm to base e).
    * 
    */
   function log(x,base=None);
   /**
    * Return the natural logarithm of 1+x (base e). The result is calculated in
    * a way which is accurate for x near zero.
    * 
    */
   function log1p(x);
   /**
    * Return the base-10 logarithm of x.
    * 
    */
   function log10(x);
   /**
    * Return x raised to the power y. Exceptional cases follow Annex ‘F’ of the C99
    * standard as far as possible. In particular, pow(1.0, x) and pow(x, 0.0) always 
    * return 1.0, even when x is a zero or a NaN. If both x and y are finite, x is 
    * negative, and y is not an integer then pow(x, y) is undefined, and raises 
    * ValueError.
    * 
    */
   function pow(x,y);
   /**
    * Return the square root of x.
    * 
    */
   function sqrt(x);
   /**
    * Return the arc sine of x, in radians.
    * 
    */
   function acos(x);
   /**
    * Return the arc sine of x, in radians
    * 
    */
   function asin(x);
   /**
    * Return the arc tangent of x, in radians.
    * 
    */
   function atan(x);
   /**
    * Return atan(y / x), in radians. The result is between -pi and pi. The vector 
    * in the plane from the origin to point (x, y) makes this angle with the positive 
    * X axis. The point of atan2() is that the signs of both inputs are known to it,
    * so it can compute the correct quadrant for the angle. For example, atan(1) 
    * and atan2(1, 1) are both pi/4, but atan2(-1, -1) is -3*pi/4.
    * 
    */
   function atan2(y,x);
   /**
    * Return the cosine of x radians.
    * 
    */
   function cos(x);
   /**
    * Return the Euclidean norm, sqrt(x*x + y*y). This is the length of the
    * vector from the origin to point (x, y).
    * 
    */
   function hypot(x,y);
   /**
    * Return the sine of x radians.
    * 
    */
   function sin(x);
   /**
    * Return the tangent of x radians.
    * 
    */
   function tan(x);
   /**
    * Converts angle x from radians to degrees.
    * 
    */
   function degrees(x);
   /**
    * Converts angle x from degrees to radians.
    * 
    */
   function radians(x);
   /**
    * Return the inverse hyperbolic cosine of x.
    * 
    */
   function acosh(x);
   /**
    * Return the inverse hyperbolic sine of x.
    * 
    */
   function asinh(x);
   /**
    * Return the inverse hyperbolic tangent of x.
    * 
    */
   function atanh(x);
   /**
    * Return the hyperbolic cosine of x.
    * 
    */
   function cosh(x);
   /**
    * Return the hyperbolic sine of x.
    * 
    */
   function sinh(x);
   /**
    * Return the hyperbolic tangent of x.
    * 
    */
   function tanh(x);
   /**
    * The mathematical constant pi.
    * 
    */
   const pi;
   /**
    * The mathematical constant e.
    * 
    */
   const e;
}
package cmath {
   /**
    * Return phase, also known as the argument, of a complex.
    * 
    */
   function phase(x);
   /**
    * Convert a complex from rectangular coordinates to polar coordinates. The 
    * function returns a tuple with the two elements r and phi. r is the distance
    * from 0 and phi the phase angle.
    * 
    */
   function polar(x);
   /**
    * Convert from polar coordinates to rectangular coordinates and return a complex.
    * 
    */
   function rect(r,phi);
   /**
    * Return the arc cosine of x. There are two branch cuts: One extends right from 1
    * along the real axis to infinity, continuous from below. The other extends left from -1 
    * along the real axis to -infinity, continuous from above.
    * 
    */
   function acos(x);
   /**
    * Return the hyperbolic arc cosine of x. There is one branch cut, extending left from
    * 1 along the real axis to -8, continuous from above.
    * 
    */
   function acosh(x);
   /**
    * Return the arc sine of x. This has the same branch cuts as acos().
    * 
    */
   function asin(x);
   /**
    * Return the hyperbolic arc sine of x. There are two branch cuts: One extends
    * from 1j along the imaginary axis to 8j, continuous from the right. The other
    * extends from -1j along the imaginary axis to -8j, continuous from the left.
    * 
    */
   function asinh(x);
   /**
    * Return the hyperbolic arc tangent of x. There are two branch cuts: One extends
    * from 1 along the real axis to 8, continuous from below. The other extends from
    * -1 along the real axis to -8, continuous from above.
    * 
    */
   function atanh(x);
   /**
    * Return the cosine of x.
    * 
    */
   function cos(x);
   /**
    * Return the hyperbolic cosine of x.
    * 
    */
   function cosh(x);
   /**
    * Return the exponential value e**x.
    * 
    */
   function exp(x);
   /**
    * Return True if the real or the imaginary part of x is positive or negative infinity.
    * 
    */
   function isinf(x);
   /**
    * Return True if the real or imaginary part of x is not a number (NaN).
    * 
    */
   function isnan(x);
   /**
    * Returns the logarithm of x to the given base. If the base is not specified, 
    * returns the natural logarithm of x. There is one branch cut, from 0 along the
    * negative real axis to -8, continuous from above.
    * 
    */
   function log(x,base=None);
   /**
    * Return the base-10 logarithm of x. This has the same branch cut as log().
    * 
    */
   function log10(x);
   /**
    * Return the sine of x.
    * 
    */
   function sin(x);
   /**
    * Return the hyperbolic sine of x.
    * 
    */
   function sinh(x);
   /**
    * Return the square root of x. This has the same branch cut as log().
    * 
    */
   function sqrt(x);
   /**
    * Return the tangent of x.
    * 
    */
   function tan(x);
   /**
    * Return the hyperbolic tangent of x.
    * 
    */
   function tanh(x);
   /**
    * The mathematical constant pi.
    * 
    */
   const pi;
   /**
    * The mathematical constant e.
    * 
    */
   const e;
}
   
   
////////////////////////////////////////////////////////////////////////
// BUILTIN FUNCTIONS
//
package builtins {
   /**
    * This function is invoked by the import statement.  It mainly exists so
    * that you can replace it with another func-tion that has a compatible
    * interface, in order to change the semantics of the import statement.  For
    * examples of why and how you would do this, see the standard library
    * modules ihooks and rexec.  See also the built-in module imp, which defines
    * some useful operations out of which you can build your own import ()
    * function.
    * <P>
    * For example, the statement ‘import spam’ results in the following call:
    * import (’spam’, globals(), locals(), []); the statement from spam.ham
    * import eggs results in import (’spam.ham’, globals(), locals(), [’eggs’]).
    * Note that even though lo-cals() and [’eggs’] are passed in as arguments,
    * the import () function does not set the local variable named eggs; this is
    * done by subsequent code that is generated for the import statement.  (In
    * fact, the standard implementation does not use its locals argument at all,
    * and uses its globals only to determine the package context of the import
    * statement.)
    * <P>
    * When the name variable is of the form package.module, normally, the
    * top-level package (the name up till the first dot) is returned, not the
    * module named by name.  However, when a non-empty fromlist argument is
    * given, the module named by name is returned.  This is done for
    * compatibility with the bytecode generated for the different kinds of
    * import statement; when using ‘import spam.ham.eggs’, the top-level package
    * spam must be placed in the importing namespace, but when using ‘from
    * spam.ham import eggs’, the spam.ham subpackage must be used to find the
    * eggs variable.  As a workaround for this behavior, use getattr() to
    * extract the desired components.  For example, you could define the
    * following helper:
    * <PRE>
    * import string
    *
    * def my_import(name):
    *    mod = __import__(name)
    *    components = string.split(name, ’.’)
    *    for comp in components[1:]:
    *    mod = getattr(mod, comp)
    *    return mod
    * </PRE>
    *
    * @param name          name of module to import
    * @param globals       [optional] globals dictionary
    * @param locals        [optional] locals dictionary
    * @param fromlist      [optional] from list
    */
   function __import__(PyString name, globals, locals=None, fromlist=None);
   /**
    * @param x       number to compute absolute value of
    * @return
    * Return the absolute value of a number.  The argument may be a plain or
    * long integer or a floating point number.  If the argument is a complex
    * number, its magnitude is returned.
    */
   function abs(x);
   /**
    * <p>Return True if all elements of the iterable are true. Equivalent to:
    * <pre><code>
    * def all(iterable):
    *     for element in iterable:
    *         if not element:
    *             return False
    *     return True
    * </code></pre>
    */
   function all(iterable);
   /**
    * 
    * <p>Return True if any element of the iterable is true. Equivalent to:
   
    * <pre><code>
    * def any(iterable):
    *     for element in iterable:
    *         if element:
    *             return True
    *     return False
    * </code></pre>
    *
    */
   function any(iterable);
   /**
    * As repr(), return a string containing a printable representation of an object, 
    * but escape the non-ASCII characters in the string returned by repr() using \x, 
    * \u or \U escapes. This generates a string similar to that returned by repr() in 
    * Python 2.
    * 
    */
   function ascii(object);
   
   /**
    * The function argument must be a callable object (a user-defined or
    * built-in function or method, or a class object) and the args argument must
    * be a sequence (if it is not a tuple, the sequence is first converted to a
    * tuple).  The function is called with args as the argument list; the number
    * of arguments is the the length of the tuple.  (This is different from just
    * calling func(args), since in that case there is always exactly one
    * argument.) If the optional keywords argument is present, it must be a
    * dictionary whose keys are strings.  It specifies keyword arguments to be
    * added to the end of the the argument list.
    *
    * @param func          function to call
    * @param args          arguments to pass to function
    * @param keywords      [optional] list of keyword arguments
    */
   function apply(func, args, keywords=None);
   /**
    * Convert an integer number to a binary string. The result is a valid Python
    * expression. If <code>x</code> is not a Python int object, it has to define an 
    * <code>__index__()</code> method that returns an integer.
    * 
    */
   function bin(x);
   /**
    * Convert a value to a Boolean, using the standard truth testing procedure. 
    * If <code>x</code> is false or omitted, this returns <code>False</code>; otherwise it 
    * returns <code>True</code>. 
    * bool is also a class, which is a subclass of int. Class bool cannot be 
    * subclassed further. Its only instances are <code>False</code> and <code>True</code>.
    * 
    */
   function bool(x=None);
   /**
    * Return a new array of bytes. The bytearray type is a mutable sequence of integers 
    * in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, 
    * described in Mutable Sequence Types, as well as most methods that the str type 
    * has, see Bytes and Byte Array Methods.
    *
    * <p>The optional arg parameter can be used to initialize the array in a few different ways:
    *
    * If it is a string, you must also give the encoding (and optionally, errors) 
    * parameters; <code>bytearray()</code> then converts the string to bytes using <code>str.encode()</code>. 
    * If it is an integer, the array will have that size and will be initialized 
    * with null bytes. 
    * If it is an object conforming to the buffer interface, a read-only buffer
    * of the object will be used to initialize the bytes array. 
    * If it is an iterable, it must be an iterable of integers in the 
    * range <code>0 <= x < 256</code>, which are used as the initial contents of the array. 
    * Without an argument, an array of size 0 is created.
    * 
    */
   function PyList bytearray(arg=None,encoding=None,errors=None);
   /**
    * <p>Return a new “bytes” object, which is an immutable sequence of integers in the range 0 <= x < 256. bytes is an immutable version of bytearray – it has the same non-mutating methods and the same indexing and slicing behavior.

    * <p>Accordingly, constructor arguments are interpreted as for buffer().

    * <p>Bytes objects can also be created with literals, see String and Bytes literals.
    * 
    */
   function bytes(arg=None,encoding=None,errors=None);
   /**
    * The object argument must be an object that supports the buffer call
    * interface (such as strings, arrays, and buffers).  A new buffer object
    * will be created which references the object argument.  The buffer object
    * will be a slice from the beginning of object (or from the specified
    * offset).  The slice will extend to the end of object (or will have a
    * length given by the size argument)function callable(object);
    *
    * @param object        object to create buffer for
    * @param offset        start offset to get slice from
    * @param size          buffer size to create
    */
   function boolean buffer(object, int offset=default, size=default);
   /**
    * @param object        object to inspect
    * @return
    * Return true if the object argument appears callable, false if not.  If
    * this returns true, it is still possible that a call fails, but if it is
    * false, calling object will never succeed.  Note that classes are callable
    * (calling a class returns a new instance); class instances are callable if
    * they have a call () method.
    */
   function callable(object);
   /**
    * @param i             index of ASCII char to convert
    * @return
    * Return a string of one character whose ASCII code is the integer i, e.g.,
    * chr(97) returns the string ’a’.  This is the inverse of ord().  The
    * argument must be in the range [0..255], inclusive; ValueError will be
    * raised if i is outside that range.
    */
   function PyString chr(i);
   /**
    * 
    * Return a class method for function.
    * <p>A class method receives the class as implicit first argument, just like
    * an instance method receives the instance. To declare a class method, use this idiom:
    * <pre><code>
    * class C:
    *     @classmethod
    *     def f(cls, arg1, arg2, ...): ...
    * </code></pre>
    * The @classmethod form is a function decorator – see the description of
    * function definitions in Function definitions for details.
    *
    * It can be called either on the class (such as C.f()) or on an instance
    * (such as C().f()). The instance is ignored except for its class. If a 
    * class method is called for a derived class, the derived class object is
    * passed as the implied first argument.
    *
    * Class methods are different than C++ or Java static methods. If you want
    * those, see staticmethod() in this section.
    *
    * For more information on class methods, consult the documentation on the 
    * standard type hierarchy in The standard type hierarchy.
    *
    */
   function classmethod(fun);
   /**
    * @param x             first object to compare
    * @param y             second object to compare
    * @return
    * Compare the two objects x and y and return an integer according to the
    * outcome.  The return value is negative if x < y, zero if x == y and
    * strictly positive if x > y.
    */
   function int cmp(x, y);
   /**
    * @param x             numeric argument
    * @param y             numeric argument
    * @return
    * Return a tuple consisting of the two numeric arguments converted to a
    * common type, using the same rules as used by arithmetic operations.
    */
   function coerce(x, y);
   /**
    * Compile the string into a code object.  Code objects can be executed by an
    * exec statement or evaluated by a call to eval().  The filename argument
    * should give the file from which the code was read; pass e.g.  ’<string>’
    * if it wasn’t read from a file.  The kind argument specifies what kind of
    * code must be compiled; it can be ’exec’ if string consists of a sequence
    * of statements, ’eval’ if it consists of a single expression, or ’single’
    * if it consists of a single interactive statement (in the latter case,
    * expression statements that evaluate to something else than None will
    * printed).
    *
    * @param src           String to compile
    * @param filename      file from which the source was read
    * @param kind          what kind of code must be compiled?
    */
   function compile(PyString src, PyString filename, kind);
   /**
    * @param real          real part of imaginary number
    * @param imag          imaginary part of number (coefficient of 'i')
    * @return
    * Create a complex number with the value real + imag*j or convert a string
    * or number to a complex number.  Each argument may be any numeric type
    * (including complex).  If imag is omitted, it defaults to zero and the
    *  function serves as a numeric conversion function like int(), long() and
    * float(); in this case it also accepts a string argument which should be a
    * valid complex number.
    */
   function complex complex(real, imag);
   /**
    * This is a relative of setattr().  The arguments are an object and a
    * string.  The string must be the name of one of the object’s attributes.
    * The function deletes the named attribute, provided the object allows it.
    * For example, delattr(x, ’foobar’) is equivalent to del x.foobar.
    *
    * @param object        object to delete attribute from
    * @param name          name of attribute to delete
    */
   function delattr(object, PyString name);
   /**
    * @param object        symbol table to return names in
    * @return
    * Without arguments, return the list of names in the current local symbol
    * table.  With an argument, attempts to return a list of valid attribute for
    * that object.  This information is gleaned from the object’s dict , methods
    * and members attributes, if defined.  The list is not necessarily complete;
    * e.g., for classes, attributes defined in base classes are not included,
    * and for class instances, methods are not included.  The resulting list is
    * sorted alphabetically.
    * @example
    * <PRE>
    * >>> import sys
    * >>> dir()
    * [’sys’]
    * >>> dir(sys)
    * [’argv’, ’exit’, ’modules’, ’path’, ’stderr’, ’stdin’, ’stdout’]
    * </PRE>
    */
   /**
    * Create a shared dict object and return a proxy for it
    * 
    */
   function PyDictionary dict();
   /**
    * Create a shared dict object and return a proxy for it
    * 
    */
   function PyDictionary dict(mapping_or_sequence);
   function dir(object=locals);
   /**
    * @param a             divident
    * @param b             divisor
    * @return
    * Take two numbers as arguments and return a pair of numbers consisting of
    * their quotient and remainder when using long division.  With mixed operand
    * types, the rules for binary arithmetic operators apply.  For plain and
    * long integers, the result is the same as (a / b, a % b).  For floating
    * point numbers the result is (q, a % b), where q is usually math.floor(a /
    * b) but may be 1 less than that.  In any case q * b + a % b is very close
    * to a, if a % b is non-zero it has the same sign as b, and 0 <= abs(a % b)
    * < abs(b).
    */
   function divmod(a, b);
   /**
    * 
    * <p>Return an enumerate object. iterable must be a sequence, an iterator, 
    * or some other object which supports iteration. The __next__() method of 
    * the iterator returned by enumerate() returns a tuple containing a count 
    * (from start which defaults to 0) and the corresponding value obtained 
    * from iterating over iterable. enumerate() is useful for obtaining an 
    * indexed series: <code>(0, seq[0]), (1, seq[1]), (2, seq[2])</code>, 
    * .... For example:
    * <pre><code>
    * >>> for i, season in enumerate(['Spring', 'Summer', 'Fall', 'Winter')]:
    * ...     print(i, season)
    * 0 Spring
    * 1 Summer
    * 2 Fall
    * 3 Winter
    *</code></pre>
    */
   function enumerate(iterable, start=0);
   
   /**
    * @param expression    expression to parse
    * @param globals       [optional] globals dictionary
    * @param locals        [optional] locals dictionary
    *
    * The arguments are a string and two optional dictionaries.  The expression
    * argument is parsed and evaluated as a Python expression (technically
    * speaking, a condition list) using the globals and locals dictionaries as
    * global and local name space.  If the locals dictionary is omitted it
    * defaults to the globals dictionary.  If both dictionaries are omitted, the
    * expression is executed in the environment where eval is called.  The
    * return value is the result of the evaluated expression.  Syntax errors are
    * reported as exceptions.  Example:
    * <PRE>
    * >>> x = 1
    * >>> print eval(’x+1’)
    * 2
    * </PRE>
    * <P>
    * This function can also be used to execute arbitrary code objects (e.g.
    * created by compile()).  In this case pass a code object instead of a
    * string.  The code object must have been compiled passing ’eval’ to the
    * kind argument.
    * <P>
    * Hints: dynamic execution of statements is supported by the exec statement.
    * Execution of statements from a file is supported by the execfile()
    * function.  The globals() and locals() functions returns the current global
    * and local dictionary, respectively, which may be useful to pass around for
    * use by eval() or execfile().
    */
   function eval(expression, globals=default, locals=default);
   /**
    * 
    * <p>This function supports dynamic execution of Python code. object must 
    * be either a string, an open file object, or a code object. If it is a 
    * string, the string is parsed as a suite of Python statements which is 
    * then executed (unless a syntax error occurs). If it is an open file, 
    * the file is parsed until EOF and executed. If it is a code object, it 
    * is simply executed. In all cases, the code that’s executed is expected
    * to be valid as file input (see the section “File input” in the Reference 
    * Manual). Be aware that the return and yield statements may not be used 
    * outside of function definitions even within the context of code passed 
    * to the exec() function. The return value is None.
    * 
    * <p>In all cases, if the optional parts are omitted, the code is executed 
    * in the current scope. If only globals is provided, it must be a dictionary, 
    * which will be used for both the global and the local variables. If globals 
    * and locals are given, they are used for the global and local variables, 
    * respectively. If provided, locals can be any mapping object.
    * 
    * <p>If the globals dictionary does not contain a value for the key 
    * __builtins__, a reference to the dictionary of the built-in module 
    * builtins is inserted under that key. That way you can control what 
    * builtins are available to the executed code by inserting your own 
    * __builtins__ dictionary into globals before passing it to exec().
    * 
    * <p>Note:
    * The built-in functions globals() and locals() return the current global 
    * and local dictionary, respectively, which may be useful to pass around 
    * for use as the second and third argument to exec().
    * 
    * <p>Warning:
    * The default locals act as described for function locals() below: 
    * modifications to the default locals dictionary should not be attempted. 
    * Pass an explicit locals dictionary if you need to see effects of the code 
    * on locals after function exec() returns.
    * 
    */
   function exec(object[, globals=None, locals=None) 
   /**
    * @param file          file to parse
    * @param globals       [optional] globals dictionary
    * @param locals        [optional] locals dictionary
    *
    * This function is similar to the exec statement, but parses a file instead
    * of a string.  It is different from the import statement in that it does
    * not use the module administration —it reads the file unconditionally and
    * does not create a new module.
    * <P>
    * The arguments are a file name and two optional dictionaries.  The file is
    * parsed and evaluated as a sequence of Python statements (similarly to a
    * module) using the globals and locals dictionaries as global and local
    * names-pace.  If the locals dictionary is omitted it defaults to the
    * globals dictionary.  If both dictionaries are omitted, the expression is
    * executed in the environment where execfile() is called.  The return value
    * is None.
    */
   function execfile(file, globals=default, locals=default);
   /**
    * @param func          test function
    * @param list          list of elements to test
    * @return
    * Construct a list from those elements of list for which function returns
    * true.  If list is a string or a tuple, the result also has that type;
    * otherwise it is always a list.  If function is None, the identity function
    * is assumed, i.e.  all elements of list that are false (zero or empty) are
    * removed.
    */
   function filter(func, list);
   
   /**
    * Convert a string or a number to a “formatted” representation, as controlled
    * by format_spec. The interpretation of format_spec will depend on the type 
    * of the value argument, however there is a standard formatting syntax that 
    * is used by most built-in types: Format Specification Mini-Language.
    * 
    * Note:  <code>format(value, format_spec) merely calls value.__format__(format_spec).</code>
    */
   function format(value=None, format_spec=None);
   /**
    * @param x             object to convert to floating point
    * @return
    * Convert a string or a number to floating point.  If the argument is a
    * string, it must contain a possibly signed dec-imal or floating point
    * number, possibly embedded in whitespace; this behaves identical to
    * string.atof(x).  Otherwise, the argument may be a plain or long integer or
    * a floating point number, and a floating point number with the same value
    * (within Python’s floating point precision) is returned.  It is used
    * relatively rarely so does not warrant being made into a statement.
    * <P>
    * Note: When passing in
    * a string, values for NaN and Infinity may be returned, depending on the
    * underlying C library.  The specific set of strings accepted which cause
    * these values to be returned depends entirely on the C library and is known
    * to vary.
    */
   function float float(x);
   
   /**
    * Return a new frozenset object whose elements are taken from iterable. 
    * The elements of a set must be hashable. To represent sets of sets, the inner 
    * sets must be frozenset objects. If iterable is not specified, a new empty set 
    * is returned.
    * 
    * 
    * @return PyFrozenSet 
    */
   function PyFrozenSet frozenset();
   /**
    * Return a new frozenset object whose elements are taken from iterable. 
    * The elements of a set must be hashable. To represent sets of sets, the inner 
    * sets must be frozenset objects. If iterable is not specified, a new empty set 
    * is returned.
    * 
    * 
    * @return PyFrozenSet 
    */
   function PyFrozenSet frozenset(iterable);
   
   /**
    * @param object        object to query
    * @param name          name of attribute to check for
    * @param default       [optional] value to return if attr not found
    * @return
    * Return the value of the named attributed of object.  name must be a
    * string.  If the string is the name of one of the object’s attributes, the
    * result is the value of that attribute.  For example, getattr(x, ’foobar’)
    * is equivalent to x.foobar.  If the named attribute does not exist, default
    * is returned if provided, otherwise AttributeError is raised.
    */
   function getattr(object, name, default=error);
   /**
    * @return
    * Return a dictionary representing the current global symbol table.  This is
    * always the dictionary of the current module (inside a function or method,
    * this is the module where it is defined, not the module from which it is
    * called).
    */
   function globals();
   /**
    * @param object        object to query
    * @param name          name of attribute to check for
    * @return
    * The arguments are an object and a string.  The result is 1 if the string
    * is the name of one of the object’s attributes, 0 if not.  (This is
    * implemented by calling getattr(object, name) and seeing whether it raises
    * an exception or not.)
    */
   function boolean hasattr(object, PyString name);
   /**
    * 
    * <p>Invoke the built-in help system. (This function is intended for
    * interactive use.) If no argument is given, the interactive help 
    * system starts on the interpreter console. If the argument is a 
    * string, then the string is looked up as the name of a module, 
    * function, class, method, keyword, or documentation topic, and a 
    * help page is printed on the console. If the argument is any other 
    * kind of object, a help page on the object is generated.
    *
    * <p>This function is added to the built-in namespace by the site module.
    *
    */
   function help(object=None) 
   /**
    * @param object        object to query
    * @return
    * Return the hash value of the object (if it has one).  Hash values are
    * integers.  They are used to quickly compare dictionary keys during a
    * dictionary lookup.  Numeric values that compare equal have the same hash
    * value (even if they are of different types, e.g.  1 and 1.0).
    */
   function int hash(object);
   /**
    * @param x             integer to convert
    * @return
    * Convert an integer number (of any size) to a hexadecimal string.  The
    * result is a valid Python expression.  Note: this always yields an unsigned
    * literal, e.g.  on a 32-bit machine, hex(-1) yields ’0xffffffff’.  When
    * evaluated on a machine with the same word size, this literal is evaluated
    * as -1; at a different word size, it may turn up as a large positive number
    * or raise an OverflowError exception.
    */
   function PyString hex(int x);
   /**
    * @param object        object to query
    * @return
    * Return the ‘identity’ of an object.  This is an integer (or long integer)
    * which is guaranteed to be unique and constant for this object during its
    * lifetime.  Two objects whose lifetimes are disjunct may have the same id()
    * value.  (Implementation note: this is the address of the object.)
    */
   function int id(object);
   /**
    * Equivalent to eval(raw input(prompt)).  Warning: This function is not safe
    * from user errors!  It expects a valid Python expression as input; if the
    * input is not syntactically valid, a SyntaxError will be raised.  Other
    * exceptions may be raised if there is an error during evaluation.  (On the
    * other hand, sometimes this is exactly what you need when writing a quick
    * script for expert use.)
    * <P>
    * If the readline module was loaded, then input() will use it to provide
    * elaborate line editing and history features.  Consider using the raw
    * input() function for general input from users.
    *
    * @param prompt        input prompt
    * @return line of input typed (response)
    */
   function PyString input(prompt="");
   /**
    * @param x             object to convert to integer
    * @param radix         [optional] base to use for converting strings
    * @return
    * Convert a string or number to a plain integer.  If the argument is a
    * string, it must contain a possibly signed decimal number representable as
    * a Python integer, possibly embedded in whitespace; this behaves identical
    * to string.atoi(x[, radix ]).  The radix parameter gives the base for the
    * conversion and may be any integer in the range [2, 36].  If radix is
    * specified and x is not a string, TypeError is raised.  Otherwise, the
    * argument may be a plain or long integer or a floating point number.
    * Conversion of floating point numbers to integers is defined by the C
    * semantics; normally the conversion truncates towards zero.9
    */
   function int int(x, radix=10);
   /**
    * @param s             string to internalize
    *
    * Enter string in the table of “interned” strings and return the interned
    * string – which is string itself or a copy.  Interning strings is useful to
    * gain a little performance on dictionary lookup – if the keys in a
    * dictionary are interned, and the lookup key is interned, the key
    * comparisons (after hashing) can be done by a pointer compare 9 This is
    * ugly — the language definition should require truncation towards zero.
    * 2.3.  Built-in Functions 21.instead of a string compare.  Normally, the
    * names used in Python programs are automatically interned, and the
    * dictionaries used to hold module, class or instance attributes have
    * interned keys.  Interned strings are immortal (i.e.  never get garbage
    * collected).
    */
   function intern(PyString s);
   /**
    * @param object        object instance
    * @param class         possible class
    * @return
    * Return true if the object argument is an instance of the class argument,
    * or of a (direct or indirect) subclass thereof.  Also return true if class
    * is a type object and object is an object of that type.  If object is not a
    * class instance or a object of the given type, the function always returns
    * false.  If class is neither a class object nor a type object, a TypeError
    * exception is raised.
    */
   function boolean isinstance(object, class);
   /**
    * @param class1        possible subclass
    * @param class2        possible parent class
    * @return
    * Return true if class1 is a subclass (direct or indirect) of class2.  A
    * class is considered a subclass of itself.  If either argument is not a
    * class object, a TypeError exception is raised.
    */
   function boolean issubclass(class1, class2);
   /**
    * <p>Return an iterator object. The first argument is interpreted very
    * differently depending on the presence of the second argument. Without
    * a second argument, o must be a collection object which supports the 
    * iteration protocol (the __iter__() method), or it must support the 
    * sequence protocol (the __getitem__() method with integer arguments 
    * starting at 0). If it does not support either of those protocols, 
    * TypeError is raised. If the second argument, sentinel, is given, then 
    * o must be a callable object. The iterator created in this case will call o 
    * with no arguments for each call to its __next__() method; if the value 
    * returned is equal to sentinel, StopIteration will be raised, otherwise 
    * the value will be returned.
    * 
    */
   function iter(o,sentinel=None);
   /**
    * @param s             object to measure length (number of items in)
    * @return
    * Return the length (the number of items) of an object.  The argument may be
    * a sequence (string, tuple or list) or a mapping (dictionary).
    */
   function int len(s);
   /**
    * @param sequence      sequence to convert to a list
    * @return
    * Return a list whose items are the same and in the same order as sequence's
    * items.  If sequence is already a list, a copy is made and returned,
    * similar to sequence[:].  For instance, list(’abc’) returns returns [’a’,
    * ’b’, ’c’] and list( (1, 2, 3) ) returns [1, 2, 3].
    */
   function PyList list(sequence);
   /**
    * Return a dictionary representing the current local symbol table.  Warning:
    * The contents of this dictionary should not be modified; changes may not
    * affect the values of local variables used by the interpreter.
    */
   function locals();
   /**
    * @param x             number or string to convert
    * @return long
    * Convert a string or number to a long integer.  If the argument is a
    * string, it must contain a possibly signed deci-mal number of arbitrary
    * size, possibly embedded in whitespace; this behaves identical to
    * string.atol(x).  Otherwise, the argument may be a plain or long integer or
    * a floating point number, and a long integer with the same value is
    * returned.  Conversion of floating point numbers to integers is defined by
    * the C semantics; see the description of int().
    */
   function long long(x);
   /**
    * @param func          function to apply to list of arguments
    * @param list          list to apply 'func' to
    * @param arg1          [repeated] first element of sequence
    *
    * Apply function to every item of list and return a list of the results.  If
    * additional list arguments are passed, function must take that many
    * arguments and is applied to the items of all lists in parallel; if a list
    * is shorter than another it is assumed to be extended with None items.  If
    *  function is None, the identity function is assumed; if there are multiple
    * list arguments, map() returns a list consisting of tuples containing the
    * corresponding items from all lists (i.e.  a kind of transpose operation).
    * The list arguments may be any kind of sequence; the result is always a
    * list.
    */
   function PyList map(func, list, arg1, ...);
   /**
    * @param s             sequence object
    * @param arg1          [repeated] first element of sequence
    * @return
    * With a single argument s, return the largest item of a non-empty sequence
    * (e.g., a string, tuple or list).  With more than one argument, return the
    * largest of the arguments.
    */
   function max(s, args1, ...);
   /**
    * <p>Return a “memory view” object created from the given argument. 
    * See memoryview Types for more information.
    *
    */
   function memoryview(obj);
   /**
    * @param s             sequence object
    * @param arg1          [repeated] first element of sequence
    * @return
    * With a single argument s, return the smallest item of a non-empty sequence
    * (e.g., a string, tuple or list).  With more than one argument, return the
    * smallest of the arguments.
    */
   function min(s, arg1, ...);
   /**
    * <p>Retrieve the next item from the iterator by calling its __next__() 
    * method. If default is given, it is returned if the iterator is exhausted, 
    * otherwise StopIteration is raised.
    * 
    */
   function next(iterator,default=None);
   /**
    * Return a new featureless object. object is a base for all classes. It
    * has the methods that are common to all instances of Python classes. 
    * This function does not accept any arguments.
    *
    * Note: object does not have a __dict__, so you can’t assign arbitrary 
    * attributes to an instance of the object class.
    * 
    */
   function object();
   /**
    * @param x             integer to convert
    * @return
    * Convert an integer number (of any size) to an octal string.  The result is
    * a valid Python expression.  Note: this always yields an unsigned literal,
    * e.g.  on a 32-bit machine, oct(-1) yields ’037777777777’.  When evaluated
    * on a machine with the same word size, this literal is evaluated as -1; at
    * a different word size, it may turn up as a large positive number or raise
    * an OverflowError exception.
    */
   function PyString oct(int x);
   /**
    * @param filename      name of file to open
    * @param mode          [optional] mode to open file using
    * @param bufsize       [optional] buffer size to use for reading file
    * @return
    * Return a new file object (described earlier under Built-in Types).  The
    * first two arguments are the same as for stdio’s fopen(): filename is the
    * file name to be opened, mode indicates how the file is to be opened: ’r’
    * for reading, ’w’ for writing (truncating an existing file), and ’a’ opens
    * it for appending (which on some UNIX systems means that all writes append
    * to the end of the file, regardless of the current seek position).
    * <P>
    * Modes ’r+’, ’w+’ and ’a+’ open the file for updating (note that ’w+’
    * truncates the file).  Append ’b’ to the mode to open the file in binary
    * mode, on systems that differentiate between binary and text files (else it
    * is ignored).  If the file cannot be opened, IOError is raised.
    * <P>
    * If mode is omitted, it defaults to ’r’.  When opening a binary file, you
    * should append ’b’ to the mode value for improved portability.  (It’s
    * useful even on systems which don’t treat binary and text files
    * differently, where it serves as documentation.) The optional bufsize
    * argument specifies the file’s desired buffer size: 0 means unbuffered, 1
    * means line buffered, any other positive value means use a buffer of
    * (approximately) that size.  A negative bufsize means to use the system
    * default, which is usually line buffered for for tty devices and fully
    * buffered for other files.  If omitted, the system default is used.
    */
   /**
    * Open a file. If the file cannot be opened, IOError is raised.
    * 
    * Python distinguishes between files opened in binary and text modes, even when the underlying operating system doesn’t. Files opened in binary mode (appending 'b' to the mode argument) return contents as bytes objects without any decoding. In text mode (the default, or when 't' is appended to the mode argument) the contents of the file are returned as strings, the bytes having been first decoded using a platform-dependent encoding or using the specified encoding if given.
    * 
    * See also the file handling modules, such as, fileinput, io (where open() is declared), os, os.path, tempfile, and shutil.
    * @param file
    *        file is either a string giving the name (and the path if the file isn’t 
    *        in the current working directory) of the file to be opened or an integer 
    *        file descriptor of the file to be wrapped. (If a file descriptor is given, 
    *        it is closed when the returned I/O object is closed, unless closefd is set to False.)
    * @param mode
    * mode is an optional string that specifies the mode in which the file is opened. 
    * It defaults to 'r' which means open for reading in text mode. Other common 
    * values are 'w' for writing (truncating the file if it already exists), 
    * and 'a' for appending (which on some Unix systems, means that all writes 
    * append to the end of the file regardless of the current seek position). In 
    * text mode, if encoding is not specified the encoding used is platform 
    * dependent. (For reading and writing raw bytes use binary mode and leave 
    * encoding unspecified.) The available modes are: 
    *
    * <p>Character Meaning 
    * <dl compact>
    * <dt>'r'</dt><dd>open for reading (default) </dd>
    * <dt>'w' </dt><dd>open for writing, truncating the file first </dd>
    * <dt>'a' </dt><dd>open for writing, appending to the end of the file if it exists </dd>
    * <dt>'b' </dt><dd>binary mode </dd>
    * <dt>'t' </dt><dd>text mode (default) </dd>
    * <dt>'+' </dt><dd>open a disk file for updating (reading and writing) </dd>
    * <dt>'U' </dt><dd>universal newline mode (for backwards compatibility; unneeded for new code) </dd>
    * </dl>
    * <p>The default mode is 'rt' (open for reading text). For binary random access, the mode 'w+b' opens and truncates the file to 0 bytes, while 'r+b' opens the file without truncation.
    * 
    
    * @param buffering 
    *   buffering is an optional integer used to set the buffering policy. 
    *   By default full buffering is on. Pass 0 to switch buffering off (only 
    *   allowed in binary mode), 1 to set line buffering, and an integer > 1 
    *   for full buffering.
    * @param encoding 
    *   encoding is the name of the encoding used to decode or encode the file. This 
    *   should only be used in text mode. The default encoding is platform dependent, 
    *   but any encoding supported by Python can be passed. See the codecs module for 
    *   the list of supported encodings.
    * @param errors
    *     errors is an optional string that specifies how encoding errors are to be 
    *     handled—this argument should not be used in binary mode. Pass 'strict' to 
    *     raise a ValueError exception if there is an encoding error (the default of 
    *     None has the same effect), or pass 'ignore' to ignore errors. (Note that 
    *     ignoring encoding errors can lead to data loss.) See the documentation for 
    *     codecs.register() for a list of the permitted encoding error strings.
    * @param newline
    *     newline controls how universal newlines works (it only applies to text
    *     mode). It can be None, '', '\n', '\r', and '\r\n'. It works as follows:
    *     <ul>
    *     <li>On input, if newline is None, universal newlines mode is enabled. 
    *     Lines in the input can end in '\n', '\r', or '\r\n', and these are translated
    *     into '\n' before being returned to the caller. If it is '', universal newline
    *      mode is enabled, but line endings are returned to the caller untranslated.
    *      If it has any of the other legal values, input lines are only terminated by 
    *      the given string, and the line ending is returned to the caller untranslated. 
    *     <li>On output, if newline is None, any '\n' characters written are translated 
    *       to the system default line separator, os.linesep. If newline is '', no 
    *       translation takes place. If newline is any of the other legal values, any 
    *       '\n' characters written are translated to the given string. 
    * 
    *     </ul>
    * @param closefd If closefd is False, the underlying file descriptor will be kept
    *    open when the file is closed. This does not work when a file name is given 
    *    and must be True in that case.
    */
   function file open(PyString file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True);
   
   /**
    * Return the ASCII value of a string of one character or a Unicode
    * character.  E.g., ord(’a’) returns the integer 97, ord(u’u2020’) returns
    * 8224.  This is the inverse of chr() for strings and of unichr() for
    * Unicode characters.
    */
   function ord(c);
   /**
    * @param x             number to exponientiate
    * @param int y         exponent
    * @param int z         [optional] modulo divisor
    * @return
    * Return x to the power y; if z is present, return x to the power y, modulo
    * z (computed more efficiently than pow(x, y) % z).  The arguments must have
    * numeric types.  With mixed operand types, the rules for binary arithmetic
    * operators apply.  The effective operand type is also the type of the
    * result; if the result is not expressible in this type, the function raises
    * an exception; e.g., pow(2, -1) or pow(2, 35000) is not allowed.
    */
   function pow(x, int y, int z=max);
   /**
    * 
    * <p>Print object(s) to the stream file, separated by sep and followed 
    * by end. sep, end and file, if present, must be given as keyword arguments.
    *
    * <p>All non-keyword arguments are converted to strings like str() does and 
    * written to the stream, separated by sep and followed by end. Both sep 
    * and end must be strings; they can also be None, which means to use the 
    * default values. If no object is given, print() will just write end.
    *
    * <p>The file argument must be an object with a write(string) method; if it 
    * is not present or None, sys.stdout will be used.
    *
    */
   function print(object,..., sep=' ', end='n', file=sys.stdout) ;
   
   /**
    * Return a property attribute.
    * 
    * <p>fget is a function for getting an attribute value, likewise fset is a 
    * function for setting, and fdel a function for del’ing, an attribute. Typical 
    * use is to define a managed attribute x:
    * <pre><code>
    * class C(object):
    *     def __init__(self):
    *         self._x = None
    * 
    *     def getx(self):
    *         return self._x
    *     def setx(self, value):
    *         self._x = value
    *     def delx(self):
    *         del self._x
    *     x = property(getx, setx, delx, "I'm the 'x' property.")If given, doc will be the docstring of the property attribute. Otherwise, the property will copy fget‘s docstring (if it exists). This makes it possible to create read-only properties easily using property() as a decorator:
    * 
    * class Parrot(object):
    *     def __init__(self):
    *         self._voltage = 100000
    * 
    *     &#64;property
    *     def voltage(self):
    *         """Get the current voltage."""
    *         return self._voltageturns the voltage() method into a “getter” for a read-only attribute with the same name.
    * </code></pre>
    * A property object has getter, setter, and deleter methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example:
    * <pre><code>
    * class C(object):
    *     def __init__(self): self._x = None
    * 
    *     &#64;property
    *     def x(self):
    *         """I'm the 'x' property."""
    *         return self._x
    * 
    *     &#64;x.setter
    *     def x(self, value):
    *         self._x = value
    * 
    *     &#64;x.deleter
    *     def x(self):
    *         del self._xThis code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property (x in this case.)
    * </code></pre>
    * The returned property also has the attributes fget, fset, and fdel corresponding to the constructor arguments.
    */
   function "property"(fget=None, fset=None, fdel=None, doc=None);
   /**
    * @param start         starting index
    * @param stop          ending index
    * @param step          increment
    * @return
    * This is a versatile function to create lists containing arithmetic
    * progressions.  It is most often used in for loops.  The arguments must be
    * plain integers.  If the step argument is omitted, it defaults to 1.  If
    * the start argument is omitted, it defaults to 0.  The full form returns a
    * list of plain integers [start, start + step, start + 2 * step, ...].  If
    * step is positive, the last element is the largest start + i * step less
    * than stop; if step is negative, the last element is the largest start + i
    * * step greater than stop.  step must not be zero (or else ValueError is
    * raised).
    * @example
    * <PRE>
    * >>> range(10)
    * [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    * >>> range(1, 11)
    * [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    * >>> range(0, 30, 5)
    * [0, 5, 10, 15, 20, 25]
    * >>> range(0, 10, 3)
    * [0, 3, 6, 9]
    * >>> range(0, -10, -1)
    * [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
    * >>> range(0)
    * []
    * >>> range(1, 0)
    * []
    * </PRE>
    */
   function range(start=first, stop=last, step=1);
   /**
    * If the prompt argument is present, it is written to standard output
    * without a trailing newline.  The function then reads a line from input,
    * converts it to a string (stripping a trailing newline), and returns that.
    * When EOF is read, EOFError is raised.
    * <P>
    * If the readline module was loaded, then raw_input() will use it to provide
    * elaborate line editing and history features.
    *
    * @param prompt        input prompt
    * @return line of input typed (response)
    *
    * @example
    * <PRE>
    * >>> s = raw_input(’--> ’)
    * --> Monty Python’s Flying Circus
    * >>> s
    * "Monty Python’s Flying Circus"
    * </PRE>
    */
   function PyString raw_input(PyString prompt="");
   /**
    * Apply function of two arguments cumulatively to the items of sequence,
    * from left to right, so as to reduce the sequence to a single value.  For
    * example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
    * ((((1+2)+3)+4)+5).  If the optional initializer is present, it is placed
    * before the items of the sequence in the calculation, and serves as a
    * default when the sequence is empty.
    *
    * @param func           function to apply
    * @param sequence       sequence to apply function to
    * @param initializer    [optional] initial element in sequence
    */
   function reduce(func, sequence, initializer=default);
   /**
    * Re-parse and re-initialize an already imported module.  The argument must
    * be a module object, so it must have been successfully imported before.
    * This is useful if you have edited the module source file using an external
    * editor and want to try out the new version without leaving the Python
    * interpreter.  The return value is the module object (i.e.  the same as the
    * module argument).
    *
    * @param module        module to reload
    *
    * <P>
    * There are a number of caveats:
    * <UL>
    * <LI>
    * If a module is syntactically correct but its initialization fails, the
    * first import statement for it does not bind its name locally, but does
    * store a (partially initialized) module object in sys.modules.  To reload
    * the module you must first import it again (this will bind the name to the
    * partially initialized module object) before you can reload() it.
    * <LI>
    * When a module is reloaded, its dictionary (containing the module’s global
    * variables) is retained.  Redefinitions of names will override the old
    * definitions, so this is generally not a problem.  If the new version of a
    * module does not define a name that was defined by the old version, the old
    * definition remains.  This feature can be used to the module’s advantage if
    * it maintains a global table or cache of objects — with a try statement it
    * can test for the table’s presence and skip its initialization if desired.
    * <LI>
    * It is legal though generally not very useful to reload built-in or
    * dynamically loaded modules, except for sys, main and builtin .  In many
    * cases, however, extension modules are not designed to be initialized more
    * than once, and may fail in arbitrary ways when reloaded.
    * <LI>
    * If a module imports objects from another module using from .  .  .  import
    * .  .  .  , calling reload() for the other module does not redefine the
    * objects imported from it — one way around this is to re-execute the from
    * statement, another is to use import and qualified names (module.name)
    * instead.
    * <LI>
    * If a module instantiates instances of a class, reloading the module that
    * defines the class does not affect the method definitions of the instances
    * —they continue to use the old class definition.  The same is true for
    * derived classes.
    * </UL>
    */
   function reload(module);
   /**
    * <p>Return a reverse iterator. seq must be an object which has a __reversed__() method or supports the sequence protocol (the __len__() method and the __getitem__() method with integer arguments starting at 0).
    */
   function reversed(seq);
   
   /**
    * @param object        object to represent
    * @return
    * Return a string containing a printable representation of an object.  This
    * is the same value yielded by conversions (reverse quotes).  It is
    * sometimes useful to be able to access this operation as an ordinary
    * function.  For many types, this function makes an attempt to return a
    * string that would yield an object with the same value when passed to
    * eval().
    */
   function PyString repr(object);
   /**
    * @param x             floating point number to round
    * @param n             [optional] number of digits precision
    * @return float
    * Return the floating point value x rounded to n digits after the decimal
    * point.  If n is omitted, it defaults to zero.  The result is a floating
    * point number.  Values are rounded to the closest multiple of 10 to the
    * power minus n; if two multiples are equally close, rounding is done away
    * from 0 (so e.g.  round(0.5) is 1.0 and round(-0.5) is -1.0).
    */
   function float round(x, n=0);
   /**
    * Return a new set object whose elements are taken from iterable. 
    * The elements of a set must be hashable. To represent sets of sets, the inner 
    * sets must be frozenset objects. If iterable is not specified, a new empty set 
    * is returned.
    * 
    * 
    * @return PySet 
    */
   function PySet set(iterable=None);
   
   /**
    * This is the counterpart of getattr().  The arguments are an object, a
    * string and an arbitrary value.  The string may name an existing attribute
    * or a new attribute.  The function assigns the value to the attribute,
    * provided the object allows it.  For example, setattr(x, ’foobar’, 123) is
    * equivalent to x.foobar = 123.
    *
    * @param object        object to modfy
    * @param string name   name of attribute to change
    * @param value         value to set attribute to
    */
   function setattr(object, PyString name, value);
   /**
    * @param start         starting index
    * @param stop          ending index
    * @param step          increment
    * @return
    * Return a slice object representing the set of indices specified by
    * range(start, stop, step).  The start and step arguments default to None.
    * Slice objects have read-only data attributes start, stop and step which
    * merely return the argument values (or their default).  They have no other
    * explicit functionality; however they are used by Numerical Python and
    * other third party extensions.  Slice objects are also generated when
    * extended indexing syntax is used, e.g.  for ‘a[start:stop:step]’ or
    * ‘a[start:stop, i]’.
    */
   function slice(start=first, stop=last, step=1);
   /**
    * <p>Return a new sorted list from the items in iterable.
    *
    * <p>Has two optional arguments which must be specified as keyword arguments.
    *
    * <p>key specifies a function of one argument that is used to extract 
    * a comparison key from each list element: <code>key=str.lower</code>. The 
    * default value is None.
    *
    * <p>reverse is a boolean value. If set to <code>True</code>, then the list elements 
    * are sorted as if each comparison were reversed.
    * 
    */
   function sorted(xiterable,key=None,reverse=false);
   /**
    * <p>Return a static method for function.
    *
    * <p>A static method does not receive an implicit first 
    * argument. To declare a static method, use this idiom:
    *<pre><code>
    * class C:
    *     &#64;staticmethod
    *     def f(arg1, arg2, ...): ...
    * </code></pre>
    * <p>The <code>@staticmethod</code> form is a function decorator – see the description of function
    * definitions in Function definitions for details.
    *
    * <p>It can be called either on the class (such as <code>C.f()</code>) or on an instance
    * (such as <code>C().f()</code>). The instance is ignored except for its class.
    *
    * <p>Static methods in Python are similar to those found in Java or C++. For a more 
    * advanced concept, see <code>classmethod()</code> in this section.
    *
    * <p>For more information on static methods, consult the documentation on the 
    * standard type hierarchy in The standard type hierarchy.
    * 
    */
   function staticmethod(function);
   /**
    * @param object        object to convert to a string
    * @return
    * Return a string containing a nicely printable representation of an object.
    * For strings, this returns the string itself.  The difference with
    * repr(object) is that str(object) does not always attempt to return a
    * string that is acceptable to eval(); its goal is to return a printable
    * string.
    */
   function PyString str(object);
   /**
    * Sums start and the items of an iterable from left to right and returns 
    * the total. start defaults to 0. The iterable‘s items are normally 
    * numbers, and are not allowed to be strings. The fast, correct way 
    * to concatenate a sequence of strings is by calling <code>''.join(sequence)</code>.
    * 
    */
   function sum(iterable,start=None);
   /**
    * <p>Return a “super” object that acts like the superclass of type. If the 
    * second argument is omitted the super object returned is unbound. If the 
    * second argument is an object, isinstance(obj, type) must be true. If the
    * second argument is a type, issubclass(type2, type) must be true. super()
    * only works for new-style classes. Calling super() without arguments is 
    * equivalent to super(this_class, first_arg).
    *
    *<p>A typical use for calling a cooperative superclass method is:
    *<pre><code>
    * class C(B):
    *     def method(self, arg):
    *         super().method(arg)    # This does the same thing as: super(C, self).method(arg)
    * </code></pre>
    *<p>Note that super() is implemented as part of the binding process for
    * explicit dotted attribute lookups such as super().__getitem__(name). 
    * Accordingly, super() is undefined for implicit lookups using statements 
    * or operators such as super()[name]. Also, super() is not limited to use 
    * inside methods: under the hood it searches the stack frame for the 
    * class (__class__) and the first argument.
    * 
    */
   function super(type=None,object_or_type=None);
   /**
    * @param sequence      sequence of items
    * @return
    * Return a tuple whose items are the same and in the same order as
    * sequence’s items.  If sequence is already a tuple, it is returned
    * unchanged.  For instance, tuple(’abc’) returns returns (’a’, ’b’, ’c’) and
    * tuple([1, 2, 3]) returns (1, 2, 3).
    */
   function tuple(sequence);
   /**
    * @param object        object to get the type of
    * @return
    * Return the type of an object.  The return value is a type object.  The
    * standard module types defines names for all built-in types.  For instance:
    * <PRE>
    * >>> import types
    * >>> if type(x) == types.StringType: print "It’s a string"
    * </PRE>
    */
   function type(object);
   /**
    * @param i             Unicode character code [0..65536]
    * @return
    * Return the Unicode string of one character whose Unicode code is the
    * integer i, e.g., unichr(97) returns the string u’a’.  This is the inverse
    * of ord() for Unicode strings.  The argument must be in the range
    * [0..65535], inclusive.  ValueError is raised otherwise.  New in version
    * 2.0.
    */
   function PyString unichr(i);
   /**
    * @return
    * Decodes string using the codec for encoding.  Error handling is done
    * according to errors.  The default behavior is to decode UTF-8 in strict
    * mode, meaning that encoding errors raise ValueError.  See also the codecs
    * module.  New in version 2.0.
    *
    * @param s             string to decode
    * @param encoding      [optional] codec
    * @param errors        [optional] error handling
    */
   function PyString unicode(PyString s, encoding=utf8, errors=strict);
   /**
    * @param object        module, class, or class instance object
    *
    * Without arguments, return a dictionary corresponding to the current local
    * symbol table.  With a module, class or class instance object as argument
    * (or anything else that has a dict attribute), returns a dictionary
    * corresponding to the object’s symbol table.  The returned dictionary
    * should not be modified: the effects on the corresponding symbol table are
    * undefined.
    */
   function vars(object=builtin);
   /**
    * @param start         starting index
    * @param stop          ending index
    * @param step          increment
    * @return
    * This function is very similar to range(), but returns an “xrange object”
    * instead of a list.  This is an opaque sequence type which yields the same
    * values as the corresponding list, without actually storing them all
    * si-multaneously.  The advantage of xrange() over range() is minimal (since
    * xrange() still has to create the values when asked for them) except when a
    * very large range is used on a memory-starved machine (e.g.  MS-DOS) or
    * when all of the range’s elements are never used (e.g.  when the loop is
    * usually terminated with break).
    */
   function XRange xrange(start=first, stop=last, step=1);
   /**
    * @param seq1          argument sequence
    * @return
    * This function returns a list of tuples, where each tuple contains the i-th
    * element from each of the argument sequences.  At least one sequence is
    * required, otherwise a TypeError is raised.  The returned list is truncated
    * in length to the length of the shortest argument sequence.  When there are
    * multiple argument sequences which are all of the same length, zip() is
    * similar to map() with an initial argument of None.  With a single sequence
    * argument, it returns a list of 1-tuples.  New in version 2.0.
    */
   function zip(seq1, ...);

   ////////////////////////////////////////////////////////////////////////
   // BUILTIN EXCEPTIONS
   //

   /**
    * Exceptions can be class objects or string objects.  Though most exceptions
    * have been string objects in past versions of Python, in Python 1.5 and
    * newer versions, all standard exceptions have been converted to class
    * objects, and users are encouraged to do the same.  The exceptions are
    * defined in the module exceptions.  This module never needs to be imported
    * explicitly: the exceptions are provided in the built-in namespace.
    * <P>
    * Two distinct string objects with the same value are considered different
    * exceptions.  This is done to force programmers to use exception names
    * rather than their string value when specifying exception handlers.  The
    * string value of all built-in exceptions is their name, but this is not a
    * requirement for user-defined exceptions or exceptions defined by library
    * modules.
    * <P>
    * For class exceptions, in a try statement with an except clause that
    * mentions a particular class, that clause also handles any exception
    * classes derived from that class (but not exception classes from which it
    * is derived).  Two exception classes that are not related via subclassing
    * are never equivalent, even if they have the same name.
    * <P>
    * The built-in exceptions listed below can be generated by the interpreter
    * or built-in functions.  Except where mentioned, they have an “associated
    * value” indicating the detailed cause of the error.  This may be a string
    * or a tuple containing several items of information (e.g., an error code
    * and a string explaining the code).  The associated value is the second
    * argument to the raise statement.  For string exceptions, the associated
    * value itself will be stored in the variable named as the second argument
    * of the except clause (if any).  For class exceptions, that variable
    * receives the exception instance.  If the exception class is derived from
    * the standard root class Exception, the associated value is present as the
    * exception instance’s args attribute, and possibly on other attributes as
    * well.
    * <P>
    * User code can raise built-in exceptions.  This can be used to test an
    * exception handler or to report an error condition “just like” the
    * situation in which the interpreter raises the same exception; but beware
    * that there is nothing to prevent user code from raising an inappropriate
    * error.
    * <P>
    * The following exceptions are only used as base classes for other
    * exceptions.
    * <P>
    * The root class for exceptions.  All built-in exceptions are derived from
    * this class.  All user-defined exceptions should also be derived from this
    * class, but this is not (yet) enforced.  The str() function, when applied
    * to an instance of this class (or most derived classes) returns the string
    * value of the argument or arguments, or an empty string if no arguments
    * were given to the constructor.  When used as a sequence, this accesses the
    * arguments given to the constructor (handy for backward compatibility with
    * old code).  The arguments are also available on the instance's args
    * attribute, as a tuple.
    */
   interface Exception:BaseException {
   }
   interface BaseException {
      /**
       * Convert to a string
       */
      function string str();
      /**
       * Exception arguments
       */
      attr args;
   }
   /**
    * The base class for all built-in exceptions except SystemExit.
    * StandardError itself is derived from the root class Exception.
    */
   interface StandardError : Exception {
   }
   /**
    * The base class for all built-in exceptions. It is not meant to be directly inherited by user-defined classes (for that use Exception). If str() or unicode() is called on an instance of this class, the representation of the argument(s) to the instance are returned or the emptry string when there were no arguments. All arguments are stored in args as a tuple.
    */
   interface BaseException : Exception {
   }
   /**
    * The base class for those built-in exceptions that are raised for various
    * arithmetic errors: OverflowError, ZeroDivisionError, FloatingPointError.
    */
   interface ArithmeticError : Exception {
   }
   /**
    * The base class for the exceptions that are raised when a key or index used
    * on a mapping or sequence is invalid: IndexError, KeyError.
    */
   interface LookupError : Exception {
   }
   /**
    * The base class for exceptions that can occur outside the Python system:
    * IOError, OSError.  When exceptions of this type are created with a
    * 2-tuple, the first item is available on the instance’s errno attribute (it
    * is assumed to be an error number), and the second item is available on the
    * strerror attribute (it is usually the associated error message).  The
    * tuple itself is also available on the args attribute.  New in version
    * 1.5.2.
    * <P>
    * When an EnvironmentError exception is instantiated with a 3-tuple, the
    * first two items are available as above, while the third item is available
    * on the filename attribute.  However, for backwards compatibility, the args
    * attribute contains only a 2-tuple of the first two constructor arguments.
    * <P>
    * The filename attribute is None when this exception is created with other
    * than 3 arguments.  The errno and strerror attributes are also None when
    * the instance was created with other than 2 or 3 arguments.  In this last
    * case, args contains the verbatim constructor arguments as a tuple.  The
    * following exceptions are the exceptions that are actually raised.
    */
   interface EnvironmentError : Exception {
   }
   /**
    * Raised when an assert statement fails.
    */
   interface AssertionError : Exception {
   }
   /**
    * Raised when an attribute reference or assignment fails.  (When an object
    * does not support attribute references or attribute assignments at all,
    * TypeError is raised.)
    */
   interface AttributeError : Exception {
   }
   /**
    * Raised when one of the built-in functions (input() or raw input()) hits an
    * end-of-file condition (EOF) without reading any data.  (N.B.: the read()
    * and readline() methods of file objects return an empty string when they
    * hit EOF.)
    */
   interface EOFError : Exception {
   }
   /**
    * Raised when a floating point operation fails.  This exception is always
    * defined, but can only be raised when Python is configured with the
    * --with-fpectl option, or the WANT SIGFPE HANDLER symbol is defined in the
    * ‘config.h’ file.
    */
   interface FloatingPointError : ArithmeticError {
   }
   /**
    * Raise when a generator‘s close() method is called. It directly inherits from BaseException instead of Exception since it is technically not an error.
    * 
    */
   interface GeneratorExit:BaseException {

   }
   /**
    * Raised when an I/O operation (such as a print statement, the built-in
    * open() function or a method of a file object) fails for an I/O-related
    * reason, e.g., “file not found” or “disk full”.
    * <P>
    * This class is derived from EnvironmentError.  See the discussion above for
    * more information on exception instance attributes.
    */
   interface IOError : EnvironmentError {
   }
   /**
    * Raised when an import statement fails to find the module definition or
    * when a from .  .  .  import fails to find a name that is to be imported.
    */
   interface ImportError : Exception {
   }
   /**
    * Raised when a sequence subscript is out of range.  (Slice indices are
    * silently truncated to fall in the allowed range; if an index is not a
    * plain integer, TypeError is raised.)
    */
   interface IndexError : LookupError {
   }
   /**
    * Raised when a mapping (dictionary) key is not found in the set of existing
    * keys.
    */
   interface KeyError : LookupError {
   }
   /**
    * Raised when the user hits the interrupt key (normally Control-C or DEL).
    * During execution, a check for interrupts is made regularly.  Interrupts
    * typed when a built-in function input() or raw input()) is waiting for
    * input also raise this exception.
    */
   interface KeyboardInterrupt : BaseException {
   }
   /**
    * Raised when an operation runs out of memory but the situation may still be
    * rescued (by deleting some objects).  The associated value is a string
    * indicating what kind of (internal) operation ran out of memory.  Note that
    * because of the underlying memory management architecture (C’s malloc()
    * function), the interpreter may not always be able to completely recover
    * from this situation; it nevertheless raises an exception so that a stack
    * traceback can be printed, in case a run-away program was the cause.
    */
   interface MemoryError : Exception {
   }
   /**
    * Raised when a local or global name is not found.  This applies only to
    * unqualified names.  The associated value is the name that could not be
    * found.
    */
   interface NameError : Exception {
   }
   /**
    * This exception is derived from RuntimeError.  In user defined base
    * classes, abstract methods should raise this exception when they require
    * derived classes to override the method.  New in version 1.5.2.
    */
   interface NotImplementedError : Exception {
   }
   /**
    * This class is derived from EnvironmentError and is used primarily as the
    * os module’s os.error excep-tion.  See EnvironmentError above for a
    * description of the possible associated values.  New in version 1.5.2.
    */
   interface OSError : EnvironmentError {
   }
   /**
    * Raised when the result of an arithmetic operation is too large to be
    * represented.  This cannot occur for long integers (which would rather
    * raise MemoryError than give up).  Because of the lack of standardization
    * of floating point exception handling in C, most floating point operations
    * also aren’t checked.  For plain integers, all operations that can overflow
    * are checked except left shift, where typical applications prefer to drop
    * bits than raise an exception.
    */
   interface OverflowError : ArithmeticError {
   }
   /**
    * This exception is raised when a weak reference proxy, created by the weakref.proxy() function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the weakref module.
    * 
    */
   interface ReferenceError: Exception {

   }
   /**
    * Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong. (This exception is mostly a relic from a previous version of the interpreter; it is not used very much any more.)
    * 
    */
   interface RuntimeError:Exception {
   }
   /**
    * Raised by builtin next() and an iterator‘s __next__() method to signal that there are no further values.
    * 
    */
   interface StopIteration:Exception {
   }
   /**
    * Raised when the parser encounters a syntax error.  This may occur in an
    * import statement, in an exec statement, in a call to the built-in function
    * eval() or input(), or when reading the initial script or standard input
    * (also interactively).
    * <P>
    * When class exceptions are used, instances of this class have atttributes
    * filename, lineno, offset and text for easier access to the details; for
    * string exceptions, the associated value is usually a tuple of the form
    * (message, (filename, lineno, offset, text)).  For class exceptions, str()
    * returns only the message.
    */
   interface SyntaxError : Exception {
   }
   /**
    * Raised when the interpreter finds an internal error, but the situation
    * does not look so serious to cause it to abandon all hope.  The associated
    * value is a string indicating what went wrong (in low-level terms).  You
    * should report this to the author or maintainer of your Python interpreter.
    * Be sure to report the version string of the Python interpreter
    * (sys.version; it is also printed at the start of an interactive Python
    * session), the exact error message (the exception’s associated value) and
    * if possible the source of the program that triggered the error.
    */
   interface SystemError : Exception {
   }
   /**
    * This exception is raised by the sys.exit() function.  When it is not
    * handled, the Python interpreter exits; no stack traceback is printed.  If
    * the associated value is a plain integer, it specifies the system exit
    * status (passed to C’s exit() function); if it is None, the exit status is
    * zero; if it has another type (such as a string), the object’s value is
    * printed and the exit status is one.
    * <P>
    * Instances have an attribute code which is set to the proposed exit status
    * or error message (defaulting to None).  Also, this exception derives
    * directly from Exception and not StandardError, since it is not technically
    * an error.
    * <P>
    * A call to sys.exit() is translated into an exception so that clean-up
    * handlers (finally clauses of try statements) can be executed, and so that
    * a debugger can execute a script without running the risk of losing
    * control.  The os.  exit() function can be used if it is absolutely
    * positively necessary to exit immediately (e.g., after a fork() in the
    * child process).
    */
   interface SystemExit : BaseException {
   }
   /**
    * Raised when a built-in operation or function is applied to an object of
    * inappropriate type.  The associated value is a string giving details about
    * the type mismatch.
    */
   interface TypeError : Exception {
   }
   /**
    * Raised when a reference is made to a local variable in a function or
    * method, but no value has been bound to that variable.  This is a subclass
    * of NameError.  New in version 2.0.
    */
   interface UnboundLocalError : Exception {
   }
   /**
    * Raised when a Unicode-related encoding or decoding error occurs.  It is a
    * subclass of ValueError.  New in version 2.0.
    */
   interface UnicodeError : Exception {
   }
   /**
    * Raised when a built-in operation or function receives an argument that has
    * the right type but an inappropriate value, and the situation is not
    * described by a more precise exception such as IndexError.
    */
   interface ValueError : Exception {
   }
   /**
    * Raised when a Windows-specific error occurs or when the error number does
    * not correspond to an errno value.  The errno and strerror values are
    * created from the return values of the GetLastError() and FormatMessage()
    * functions from the Windows Platform API.  This is a subclass of OSError.
    * New in version 2.0.
    */
   interface WindowsError : Exception {
   }
   /**
    * Raised when the second argument of a division or modulo operation is zero.
    * The associated value is a string indicating the type of the operands and
    * the operation.
    */
   interface ZeroDivisionError : ArithmeticError {
   }

   /**
    * Base class for warning categories.
    * 
    */
   interface Warning: Exception {

   }
   /**
    * Base class for warnings generated by user code.
    * 
    */
   interface UserWarning: Exception {

   }
   /**
    * Base class for warnings about deprecated features.
    */
   interface DeprecationWarning : Exception {

   }
   /**
    * Base class for warnings about features which will be deprecated in the future.
    * 
    */
   interface PendingDeprecationWarning:Exception {

   }
   /**
    * Base class for warnings about dubious syntax
    * 
    */
   interface SyntaxWarning:Exception {

   }
   /**
    * Base class for warnings about dubious runtime behavior.
    * 
    */
   interface RuntimeWarning:Exception {

   }
   /**
    * Base class for warnings about constructs that will change semantically in the future.
    * 
    */
   interface FutureWarning:Exception {

   }
   /**
    * Base class for warnings about probable mistakes in module imports.
    */
   interface ImportWarning:Exception {

   }
   /**
    * Base class for warnings related to Unicode.
    * 
    */
   interface UnicodeWarning:Exception {

   }
   /**
    * Base class for warnings related to bytes and buffer.
    * 
    */
   interface BytesWarning:Exception {
   }


}
interface PyObject {
    /**
     * Called to create a new instance of class cls. __new__() is a static
     * method (special-cased so you need not declare it as such) that takes 
     * the class of which an instance was requested as its first argument. 
     * The remaining arguments are those passed to the object constructor 
     * expression (the call to the class). The return value of __new__() 
     * should be the new object instance (usually an instance of cls).
     * 
     * <p>Typical implementations create a new instance of the class by
     * invoking the superclass’s __new__() method using super(currentclass, 
     * cls).__new__(cls[, ...]) with appropriate arguments and then modifying 
     * the newly-created instance as necessary before returning it.
     *
     * <p>If __new__() returns an instance of cls, then the new instance’s
     *  __init__() method will be invoked like __init__(self[, ...]), 
     * where self is the new instance and the remaining arguments are the 
     * same as were passed to __new__().
     *
     * <p>If __new__() does not return an instance of cls, then the new 
     * instance’s __init__() method will not be invoked.
     *
     * <p>__new__() is intended mainly to allow subclasses of immutable types 
     * (like int, str, or tuple) to customize instance creation. It is also 
     * commonly overridden in custom metaclasses in order to customize class creation.
     * 
     */
    function __new__(cls,...);
    /**
     * Called when the instance is created. The arguments are those passed to the 
     * class constructor expression. If a base class has an __init__() method, the 
     * derived class’s __init__() method, if any, must explicitly call it to ensure
     * proper initialization of the base class part of the instance; for example: 
     * BaseClass.__init__(self, [args...]). As a special constraint on constructors, 
     * no value may be returned; doing so will cause a TypeError to be raised at runtime.
     * 
     */
    function __init__(self,...);
    /**
     * Called when the instance is about to be destroyed. This is also called a destructor. If a base class has a __del__() method, the derived class’s __del__() method, if any, must explicitly call it to ensure proper deletion of the base class part of the instance. Note that it is possible (though not recommended!) for the __del__() method to postpone destruction of the instance by creating a new reference to it. It may then be called at a later time when this new reference is deleted. It is not guaranteed that __del__() methods are called for objects that still exist when the interpreter exits.
     * 
     * <p>Note: del x doesn’t directly call x.__del__() — the former decrements the reference count for x by one, and the latter is only called when x‘s reference count reaches zero. Some common situations that may prevent the reference count of an object from going to zero include: circular references between objects (e.g., a doubly-linked list or a tree data structure with parent and child pointers); a reference to the object on the stack frame of a function that caught an exception (the traceback stored in sys.exc_info()[2] keeps the stack frame alive); or a reference to the object on the stack frame that raised an unhandled exception in interactive mode (the traceback stored in sys.last_traceback keeps the stack frame alive). The first situation can only be remedied by explicitly breaking the cycles; the latter two situations can be resolved by storing None in sys.last_traceback. Circular references which are garbage are detected when the option cycle detector is enabled (it’s on by default), but can only be cleaned up if there are no Python- level __del__() methods involved. Refer to the documentation for the gc module for more information about how __del__() methods are handled by the cycle detector, particularly the description of the garbage value.
     *
     * <p>Warning: Due to the precarious circumstances under which __del__() methods are invoked, exceptions that occur during their execution are ignored, and a warning is printed to sys.stderr instead. Also, when __del__() is invoked in response to a module being deleted (e.g., when execution of the program is done), other globals referenced by the __del__() method may already have been deleted. For this reason, __del__() methods should do the absolute minimum needed to maintain external invariants. Starting with version 1.5, Python guarantees that globals whose name begins with a single underscore are deleted from their module before other globals are deleted; if no other references to such globals exist, this may help in assuring that imported modules are still available at the time when the __del__() method is called.
     * 
     */
    function __del__();
    /**
     * Called by the repr() built-in function and by string conversions (reverse quotes) to compute the “official” string representation of an object. If at all possible, this should look like a valid Python expression that could be used to recreate an object with the same value (given an appropriate environment). If this is not possible, a string of the form <...some useful description...> should be returned. The return value must be a string object. If a class defines __repr__() but not __str__(), then __repr__() is also used when an “informal” string representation of instances of that class is required.
     *
     * <p>This is typically used for debugging, so it is important that the representation is information-rich and unambiguous.
     * 
     */
    function __repr__();
    /**
     * Called by the str() built-in function and by the print() function to compute the “informal” string representation of an object. This differs from __repr__() in that it does not have to be a valid Python expression: a more convenient or concise representation may be used instead. The return value must be a string object.
     * 
     */
    function __str__();
    /**
     * Called by the format() built-in function (and by extension, the format() method of class str) to produce a “formatted” string representation of an object. The format_spec argument is a string that contains a description of the formatting options desired. The interpretation of the format_spec argument is up to the type implementing __format__(), however most classes will either delegate formatting to one of the built-in types, or use a similar formatting option syntax.
     *
     * <p>See Format Specification Mini-Language for a description of the standard formatting syntax.
     *
     * <p>The return value must be a string object.
     *
     */
    function __format__(format_spec);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __lt__(other);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __le__(other);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __eq__(other);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __ne__(other);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __gt__(other);
    /**
     * These are the so-called “rich comparison” methods, and are called for comparison operators in preference to __cmp__() below. The correspondence between operator symbols and method names is as follows: x<y calls x.__lt__(y), x<=y calls x.__le__(y), x==y calls x.__eq__(y), x!=y calls x.__ne__(y), x>y calls x.__gt__(y), and x>=y calls x.__ge__(y).
     *
     * <p>A rich comparison method may return the singleton NotImplemented if it does not implement the operation for a given pair of arguments. By convention, False and True are returned for a successful comparison. However, these methods can return any value, so if the comparison operator is used in a Boolean context (e.g., in the condition of an if statement), Python will call bool() on the value to determine if the result is true or false.
     *
     * <p>There are no implied relationships among the comparison operators. The truth of x==y does not imply that x!=y is false. Accordingly, when defining __eq__(), one should also define __ne__() so that the operators will behave as expected. See the paragraph on __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     * <p>There are no swapped-argument versions of these methods (to be used when the left argument does not support the operation but the right argument does); rather, __lt__() and __gt__() are each other’s reflection, __le__() and __ge__() are each other’s reflection, and __eq__() and __ne__() are their own reflection.
     * 
     * <p>Arguments to rich comparison methods are never coerced.
     * 
     */
    function __ge__(other);
    /**
     * Called by comparison operations if rich comparison (see above) is not defined. Should return a negative integer if self < other, zero if self == other, a positive integer if self > other. If no __cmp__(), __eq__() or __ne__() operation is defined, class instances are compared by object identity (“address”). See also the description of __hash__() for some important notes on creating hashable objects which support custom comparison operations and are usable as dictionary keys.
     * 
     */
    function __cmp__(other);
    /**
     * Called for the key object for dictionary operations, and by the built-in function hash(). Should return an integer usable as a hash value for dictionary operations. The only required property is that objects which compare equal have the same hash value; it is advised to somehow mix together (e.g., using exclusive or) the hash values for the components of the object that also play a part in comparison of objects.
     * 
     * <p>If a class does not define a __cmp__() or __eq__() method it should not define a __hash__() operation either; if it defines __cmp__() or __eq__() but not __hash__(), its instances will not be usable as dictionary keys. If a class defines mutable objects and implements a __cmp__() or __eq__() method, it should not implement __hash__(), since the dictionary implementation requires that a key’s hash value is immutable (if the object’s hash value changes, it will be in the wrong hash bucket).
     * 
     * <p>User-defined classes have __cmp__() and __hash__() methods by default; with them, all objects compare unequal (except with themselves) and x.__hash__() returns id(x).
     * 
     * <p>Classes which inherit a __hash__() method from a parent class but change the meaning of __cmp__() or __eq__() such that the hash value returned is no longer appropriate (e.g. by switching to a value-based concept of equality instead of the default identity based equality) can explicitly flag themselves as being unhashable by setting __hash__ = None in the class definition. Doing so means that not only will instances of the class raise an appropriate TypeError when a program attempts to retrieve their hash value, but they will also be correctly identified as unhashable when checking isinstance(obj, collections.Hashable) (unlike classes which define their own __hash__() to explicitly raise TypeError).
     * 
     * <p>If a class that overrrides __cmp__() or __eq__() needs to retain the implementation of __hash__() from a parent class, the interpreter must be told this explicitly by setting __hash__ = <ParentClass>.__hash__. Otherwise the inheritance of __hash__() will be blocked, just as if __hash__ had been explicitly set to None.
     * 
     */
    function __hash__();
    /**
     * Called to implement truth value testing, and the built-in operation bool(); should
     * return False or True. When this method is not defined, __len__() is called, if it 
     * is defined (see below) and True is returned when the length is not zero. If a class 
     * defines neither __len__() nor __bool__(), all its instances are considered true.
     * 
     */
    function __bool__();
    /**
     * Called when an attribute lookup has not found the attribute in the usual places (i.e. it is not an instance attribute nor is it found in the class tree for self). name is the attribute name. This method should return the (computed) attribute value or raise an AttributeError exception.
     * 
     * <p>Note that if the attribute is found through the normal mechanism, __getattr__() is not called. (This is an intentional asymmetry between __getattr__() and __setattr__().) This is done both for efficiency reasons and because otherwise __getattr__() would have no way to access other attributes of the instance. Note that at least for instance variables, you can fake total control by not inserting any values in the instance attribute dictionary (but instead inserting them in another object). See the __getattribute__() method below for a way to actually get total control over attribute access.
     * 
     */
    function __getattr__(name);
    /**
     * Called unconditionally to implement attribute accesses for instances of the class. If the class also defines __getattr__(), the latter will not be called unless __getattribute__() either calls it explicitly or raises an AttributeError. This method should return the (computed) attribute value or raise an AttributeError exception. In order to avoid infinite recursion in this method, its implementation should always call the base class method with the same name to access any attributes it needs, for example, object.__getattribute__(self, name).
     *
     * <p>Note: This method may still be bypassed when looking up special methods as the result of implicit invocation via language syntax or builtin functions. See Special method lookup.
     * 
     * 
     * @return PyString 
     */
    function __getattribute__(name);
    /**
     * Called when an attribute assignment is attempted. This is called instead of the normal mechanism (i.e. store the value in the instance dictionary). name is the attribute name, value is the value to be assigned to it.
     *
     * <p>If __setattr__() wants to assign to an instance attribute, it should call the base class method with the same name, for example, object.__setattr__(self, name, value).
     *
     * 
     */
    function __setattr__(name,value);
    /**
     * Like __setattr__() but for attribute deletion instead of assignment. This should only be implemented if del obj.name is meaningful for the object.
     * 
     */
    function __delattr__(name);

    function PyString __module__();
    function __reduce__();
    function __reduce_ex__();
    function __sizeof__();
    function __subclasshook__();
    void __weakref__;
    PyString __doc__;
    /**
     * List of the methods of many built-in object types, e.g., [].  methods
     * yields [’append’, ’count’, ’index’, ’insert’, ’pop’, ’remove’, ’reverse’,
     * ’sort’].
     */
    attr __methods__;
    /**
     * Similar to methods , but lists data attributes.
     */
    attr __members__;
    /**
     * The class to which a class instance belongs.
     */
    attr __class__;
    /**
     * The tuple of base classes of a class object.
     */
    attr __bases__;
    function __ceil__();
}
